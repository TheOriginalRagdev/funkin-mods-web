(function ($hx_exports, $global) { "use strict"; var $hx_script = (function (exports, global) { // Generated by Haxe 4.1.5
(function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var flixel_util_IFlxDestroyable = function() { };
$hxClasses["flixel.util.IFlxDestroyable"] = flixel_util_IFlxDestroyable;
flixel_util_IFlxDestroyable.__name__ = "flixel.util.IFlxDestroyable";
flixel_util_IFlxDestroyable.__isInterface__ = true;
flixel_util_IFlxDestroyable.prototype = {
	destroy: null
	,__class__: flixel_util_IFlxDestroyable
};
var flixel_FlxBasic = function() {
	this.flixelType = 0;
	this.exists = true;
	this.alive = true;
	this.visible = true;
	this.active = true;
	this.ID = flixel_FlxBasic.idEnumerator++;
};
$hxClasses["flixel.FlxBasic"] = flixel_FlxBasic;
flixel_FlxBasic.__name__ = "flixel.FlxBasic";
flixel_FlxBasic.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_FlxBasic.prototype = {
	ID: null
	,active: null
	,visible: null
	,alive: null
	,exists: null
	,flixelType: null
	,_cameras: null
	,destroy: function() {
		this.set_exists(false);
		this._cameras = null;
	}
	,kill: function() {
		this.set_alive(false);
		this.set_exists(false);
	}
	,revive: function() {
		this.set_alive(true);
		this.set_exists(true);
	}
	,update: function(elapsed) {
	}
	,draw: function() {
	}
	,toString: function() {
		var value = this.active;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "active";
		_this.value = value;
		var value = this.visible;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "visible";
		_this1.value = value;
		var value = this.alive;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "alive";
		_this2.value = value;
		var value = this.exists;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "exists";
		_this3.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
	}
	,set_visible: function(Value) {
		return this.visible = Value;
	}
	,set_active: function(Value) {
		return this.active = Value;
	}
	,set_exists: function(Value) {
		return this.exists = Value;
	}
	,set_alive: function(Value) {
		return this.alive = Value;
	}
	,get_camera: function() {
		if(this._cameras == null || this._cameras.length == 0) {
			return flixel_FlxCamera._defaultCameras[0];
		} else {
			return this._cameras[0];
		}
	}
	,set_camera: function(Value) {
		if(this._cameras == null) {
			this._cameras = [Value];
		} else {
			this._cameras[0] = Value;
		}
		return Value;
	}
	,get_cameras: function() {
		if(this._cameras == null) {
			return flixel_FlxCamera._defaultCameras;
		} else {
			return this._cameras;
		}
	}
	,set_cameras: function(Value) {
		return this._cameras = Value;
	}
	,__class__: flixel_FlxBasic
	,__properties__: {set_cameras:"set_cameras",get_cameras:"get_cameras",set_camera:"set_camera",get_camera:"get_camera",set_exists:"set_exists",set_alive:"set_alive",set_visible:"set_visible",set_active:"set_active"}
};
var flixel_util_IFlxPooled = function() { };
$hxClasses["flixel.util.IFlxPooled"] = flixel_util_IFlxPooled;
flixel_util_IFlxPooled.__name__ = "flixel.util.IFlxPooled";
flixel_util_IFlxPooled.__isInterface__ = true;
flixel_util_IFlxPooled.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_IFlxPooled.prototype = {
	put: null
	,_inPool: null
	,__class__: flixel_util_IFlxPooled
};
var flixel_util_IFlxPool = function() { };
$hxClasses["flixel.util.IFlxPool"] = flixel_util_IFlxPool;
flixel_util_IFlxPool.__name__ = "flixel.util.IFlxPool";
flixel_util_IFlxPool.__isInterface__ = true;
flixel_util_IFlxPool.prototype = {
	preAllocate: null
	,clear: null
	,__class__: flixel_util_IFlxPool
};
var flixel_util_FlxPool_$flixel_$math_$FlxRect = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_math_FlxRect"] = flixel_util_FlxPool_$flixel_$math_$FlxRect;
flixel_util_FlxPool_$flixel_$math_$FlxRect.__name__ = "flixel.util.FlxPool_flixel_math_FlxRect";
flixel_util_FlxPool_$flixel_$math_$FlxRect.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$math_$FlxRect.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$math_$FlxRect
	,__properties__: {get_length:"get_length"}
};
var flixel_math_FlxRect = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._inPool = false;
	this._weak = false;
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	this.x = X1;
	this.y = Y1;
	this.width = Width1;
	this.height = Height1;
};
$hxClasses["flixel.math.FlxRect"] = flixel_math_FlxRect;
flixel_math_FlxRect.__name__ = "flixel.math.FlxRect";
flixel_math_FlxRect.__interfaces__ = [flixel_util_IFlxPooled];
flixel_math_FlxRect.__properties__ = {get_pool:"get_pool"};
flixel_math_FlxRect.get = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	_this.x = X1;
	_this.y = Y1;
	_this.width = Width1;
	_this.height = Height1;
	var rect = _this;
	rect._inPool = false;
	return rect;
};
flixel_math_FlxRect.weak = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var X1 = X;
	var Y1 = Y;
	var Width1 = Width;
	var Height1 = Height;
	if(Height1 == null) {
		Height1 = 0;
	}
	if(Width1 == null) {
		Width1 = 0;
	}
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	var X = X1;
	var Y = Y1;
	var Width = Width1;
	var Height = Height1;
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	_this.x = X;
	_this.y = Y;
	_this.width = Width;
	_this.height = Height;
	var rect = _this;
	rect._inPool = false;
	var rect1 = rect;
	rect1._weak = true;
	return rect1;
};
flixel_math_FlxRect.get_pool = function() {
	return flixel_math_FlxRect._pool;
};
flixel_math_FlxRect.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,_weak: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			this._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(this);
		}
	}
	,putWeak: function() {
		if(this._weak) {
			if(!this._inPool) {
				this._inPool = true;
				this._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(this);
			}
		}
	}
	,setSize: function(Width,Height) {
		this.width = Width;
		this.height = Height;
		return this;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,set: function(X,Y,Width,Height) {
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,copyFrom: function(Rect) {
		this.x = Rect.x;
		this.y = Rect.y;
		this.width = Rect.width;
		this.height = Rect.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return this;
	}
	,copyTo: function(Rect) {
		Rect.x = this.x;
		Rect.y = this.y;
		Rect.width = this.width;
		Rect.height = this.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return Rect;
	}
	,copyFromFlash: function(FlashRect) {
		this.x = FlashRect.x;
		this.y = FlashRect.y;
		this.width = FlashRect.width;
		this.height = FlashRect.height;
		return this;
	}
	,copyToFlash: function(FlashRect) {
		if(FlashRect == null) {
			FlashRect = new openfl_geom_Rectangle();
		}
		FlashRect.x = this.x;
		FlashRect.y = this.y;
		FlashRect.width = this.width;
		FlashRect.height = this.height;
		return FlashRect;
	}
	,overlaps: function(Rect) {
		var result = Rect.x + Rect.width > this.x && Rect.x < this.x + this.width && Rect.y + Rect.height > this.y && Rect.y < this.y + this.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return result;
	}
	,containsPoint: function(Point) {
		var result = flixel_math_FlxMath.pointInFlxRect(Point.x,Point.y,this);
		if(Point._weak) {
			Point.put();
		}
		return result;
	}
	,union: function(Rect) {
		var minX = Math.min(this.x,Rect.x);
		var minY = Math.min(this.y,Rect.y);
		var maxX = Math.max(this.x + this.width,Rect.x + Rect.width);
		var maxY = Math.max(this.y + this.height,Rect.y + Rect.height);
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		var X = minX;
		var Y = minY;
		var Width = maxX - minX;
		var Height = maxY - minY;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,floor: function() {
		this.x = Math.floor(this.x);
		this.y = Math.floor(this.y);
		this.width = Math.floor(this.width);
		this.height = Math.floor(this.height);
		return this;
	}
	,ceil: function() {
		this.x = Math.ceil(this.x);
		this.y = Math.ceil(this.y);
		this.width = Math.ceil(this.width);
		this.height = Math.ceil(this.height);
		return this;
	}
	,round: function() {
		this.x = Math.round(this.x);
		this.y = Math.round(this.y);
		this.width = Math.round(this.width);
		this.height = Math.round(this.height);
		return this;
	}
	,fromTwoPoints: function(Point1,Point2) {
		var minX = Math.min(Point1.x,Point2.x);
		var minY = Math.min(Point1.y,Point2.y);
		var maxX = Math.max(Point1.x,Point2.x);
		var maxY = Math.max(Point1.y,Point2.y);
		if(Point1._weak) {
			Point1.put();
		}
		if(Point2._weak) {
			Point2.put();
		}
		var X = minX;
		var Y = minY;
		var Width = maxX - minX;
		var Height = maxY - minY;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,unionWithPoint: function(Point) {
		var minX = Math.min(this.x,Point.x);
		var minY = Math.min(this.y,Point.y);
		var maxX = Math.max(this.x + this.width,Point.x);
		var maxY = Math.max(this.y + this.height,Point.y);
		if(Point._weak) {
			Point.put();
		}
		var X = minX;
		var Y = minY;
		var Width = maxX - minX;
		var Height = maxY - minY;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
		return this;
	}
	,destroy: function() {
	}
	,equals: function(rect) {
		var result = Math.abs(this.x - rect.x) <= 0.0000001 && Math.abs(this.y - rect.y) <= 0.0000001 && Math.abs(this.width - rect.width) <= 0.0000001 && Math.abs(this.height - rect.height) <= 0.0000001;
		if(rect._weak) {
			if(!rect._inPool) {
				rect._inPool = true;
				rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect);
			}
		}
		return result;
	}
	,intersection: function(rect,result) {
		if(result == null) {
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect1 = _this;
			rect1._inPool = false;
			result = rect1;
		}
		var x0 = this.x < rect.x ? rect.x : this.x;
		var x1 = this.x + this.width > rect.x + rect.width ? rect.x + rect.width : this.x + this.width;
		if(x1 <= x0) {
			if(rect._weak) {
				if(!rect._inPool) {
					rect._inPool = true;
					rect._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(rect);
				}
			}
			return result;
		}
		var y0 = this.y < rect.y ? rect.y : this.y;
		var y1 = this.y + this.height > rect.y + rect.height ? rect.y + rect.height : this.y + this.height;
		if(y1 <= y0) {
			if(rect._weak) {
				if(!rect._inPool) {
					rect._inPool = true;
					rect._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(rect);
				}
			}
			return result;
		}
		if(rect._weak) {
			if(!rect._inPool) {
				rect._inPool = true;
				rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect);
			}
		}
		var X = x0;
		var Y = y0;
		var Width = x1 - x0;
		var Height = y1 - y0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		result.x = X;
		result.y = Y;
		result.width = Width;
		result.height = Height;
		return result;
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		var value = this.width;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "w";
		_this2.value = value;
		var value = this.height;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "h";
		_this3.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(Value) {
		this.width -= Value - this.x;
		return this.x = Value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(Value) {
		this.width = Value - this.x;
		return Value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(Value) {
		this.height -= Value - this.y;
		return this.y = Value;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(Value) {
		this.height = Value - this.y;
		return Value;
	}
	,get_isEmpty: function() {
		if(this.width != 0) {
			return this.height == 0;
		} else {
			return true;
		}
	}
	,__class__: flixel_math_FlxRect
	,__properties__: {get_isEmpty:"get_isEmpty",set_bottom:"set_bottom",get_bottom:"get_bottom",set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left"}
};
var flixel_FlxObject = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	this._rect = _this;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._point = point;
	this.path = null;
	this.collisonXDrag = true;
	this.allowCollisions = 4369;
	this.wasTouching = 0;
	this.touching = 0;
	this.health = 1;
	this.maxAngular = 10000;
	this.angularDrag = 0;
	this.angularAcceleration = 0;
	this.angularVelocity = 0;
	this.elasticity = 0;
	this.mass = 1;
	this.immovable = false;
	this.moves = true;
	this.angle = 0;
	this.pixelPerfectPosition = true;
	this.y = 0;
	this.x = 0;
	flixel_FlxBasic.call(this);
	this.set_x(X);
	this.set_y(Y);
	this.set_width(Width);
	this.set_height(Height);
	this.initVars();
};
$hxClasses["flixel.FlxObject"] = flixel_FlxObject;
flixel_FlxObject.__name__ = "flixel.FlxObject";
flixel_FlxObject.separate = function(Object1,Object2) {
	var separatedX = flixel_FlxObject.separateX(Object1,Object2);
	var separatedY = flixel_FlxObject.separateY(Object1,Object2);
	if(!separatedX) {
		return separatedY;
	} else {
		return true;
	}
};
flixel_FlxObject.updateTouchingFlags = function(Object1,Object2) {
	var touchingX = flixel_FlxObject.updateTouchingFlagsX(Object1,Object2);
	var touchingY = flixel_FlxObject.updateTouchingFlagsY(Object1,Object2);
	if(!touchingX) {
		return touchingY;
	} else {
		return true;
	}
};
flixel_FlxObject.computeOverlapX = function(Object1,Object2,checkMaxOverlap) {
	if(checkMaxOverlap == null) {
		checkMaxOverlap = true;
	}
	var overlap = 0;
	var obj1delta = Object1.x - Object1.last.x;
	var obj2delta = Object2.x - Object2.last.x;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs = obj1delta > 0 ? obj1delta : -obj1delta;
		var obj2deltaAbs = obj2delta > 0 ? obj2delta : -obj2delta;
		var _this = flixel_FlxObject._firstSeparateFlxRect;
		var X = Object1.x - (obj1delta > 0 ? obj1delta : 0);
		var Y = Object1.last.y;
		var Width = Object1.get_width() + obj1deltaAbs;
		var Height = Object1.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj1rect = _this;
		var _this = flixel_FlxObject._secondSeparateFlxRect;
		var X = Object2.x - (obj2delta > 0 ? obj2delta : 0);
		var Y = Object2.last.y;
		var Width = Object2.get_width() + obj2deltaAbs;
		var Height = Object2.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj2rect = _this;
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = checkMaxOverlap ? obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS : 0;
			if(obj1delta > obj2delta) {
				overlap = Object1.x + Object1.get_width() - Object2.x;
				if(checkMaxOverlap && overlap > maxOverlap || (Object1.allowCollisions & 16) == 0 || (Object2.allowCollisions & 1) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 16;
					Object2.touching |= 1;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.x - Object2.get_width() - Object2.x;
				if(checkMaxOverlap && -overlap > maxOverlap || (Object1.allowCollisions & 1) == 0 || (Object2.allowCollisions & 16) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 1;
					Object2.touching |= 16;
				}
			}
		}
	}
	return overlap;
};
flixel_FlxObject.separateX = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) {
		return false;
	}
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.separateX);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.separateX,true);
	}
	var overlap = flixel_FlxObject.computeOverlapX(Object1,Object2);
	if(overlap != 0) {
		var obj1v = Object1.velocity.x;
		var obj2v = Object2.velocity.x;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_x(Object1.x - overlap);
			var _g = Object2;
			_g.set_x(_g.x + overlap);
			var obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0 ? 1 : -1);
			var obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0 ? 1 : -1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_x(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_x(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_x(Object1.x - overlap);
			Object1.velocity.set_x(obj2v - obj1v * Object1.elasticity);
		} else if(!obj2immovable) {
			var _g = Object2;
			_g.set_x(_g.x + overlap);
			Object2.velocity.set_x(obj1v - obj2v * Object2.elasticity);
		}
		return true;
	}
	return false;
};
flixel_FlxObject.updateTouchingFlagsX = function(Object1,Object2) {
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.updateTouchingFlagsX);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.updateTouchingFlagsX,true);
	}
	return flixel_FlxObject.computeOverlapX(Object1,Object2,false) != 0;
};
flixel_FlxObject.computeOverlapY = function(Object1,Object2,checkMaxOverlap) {
	if(checkMaxOverlap == null) {
		checkMaxOverlap = true;
	}
	var overlap = 0;
	var obj1delta = Object1.y - Object1.last.y;
	var obj2delta = Object2.y - Object2.last.y;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs = obj1delta > 0 ? obj1delta : -obj1delta;
		var obj2deltaAbs = obj2delta > 0 ? obj2delta : -obj2delta;
		var _this = flixel_FlxObject._firstSeparateFlxRect;
		var X = Object1.x;
		var Y = Object1.y - (obj1delta > 0 ? obj1delta : 0);
		var Width = Object1.get_width();
		var Height = Object1.get_height() + obj1deltaAbs;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj1rect = _this;
		var _this = flixel_FlxObject._secondSeparateFlxRect;
		var X = Object2.x;
		var Y = Object2.y - (obj2delta > 0 ? obj2delta : 0);
		var Width = Object2.get_width();
		var Height = Object2.get_height() + obj2deltaAbs;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var obj2rect = _this;
		if(obj1rect.x + obj1rect.width > obj2rect.x && obj1rect.x < obj2rect.x + obj2rect.width && obj1rect.y + obj1rect.height > obj2rect.y && obj1rect.y < obj2rect.y + obj2rect.height) {
			var maxOverlap = checkMaxOverlap ? obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS : 0;
			if(obj1delta > obj2delta) {
				overlap = Object1.y + Object1.get_height() - Object2.y;
				if(checkMaxOverlap && overlap > maxOverlap || (Object1.allowCollisions & 4096) == 0 || (Object2.allowCollisions & 256) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 4096;
					Object2.touching |= 256;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.y - Object2.get_height() - Object2.y;
				if(checkMaxOverlap && -overlap > maxOverlap || (Object1.allowCollisions & 256) == 0 || (Object2.allowCollisions & 4096) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 256;
					Object2.touching |= 4096;
				}
			}
		}
	}
	return overlap;
};
flixel_FlxObject.separateY = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) {
		return false;
	}
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.separateY);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.separateY,true);
	}
	var overlap = flixel_FlxObject.computeOverlapY(Object1,Object2);
	if(overlap != 0) {
		var obj1delta = Object1.y - Object1.last.y;
		var obj2delta = Object2.y - Object2.last.y;
		var obj1v = Object1.velocity.y;
		var obj2v = Object2.velocity.y;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_y(Object1.y - overlap);
			var _g = Object2;
			_g.set_y(_g.y + overlap);
			var obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0 ? 1 : -1);
			var obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0 ? 1 : -1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_y(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_y(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_y(Object1.y - overlap);
			Object1.velocity.set_y(obj2v - obj1v * Object1.elasticity);
			if(Object1.collisonXDrag && Object2.active && Object2.moves && obj1delta > obj2delta) {
				var _g = Object1;
				_g.set_x(_g.x + (Object2.x - Object2.last.x));
			}
		} else if(!obj2immovable) {
			var _g = Object2;
			_g.set_y(_g.y + overlap);
			Object2.velocity.set_y(obj1v - obj2v * Object2.elasticity);
			if(Object2.collisonXDrag && Object1.active && Object1.moves && obj1delta < obj2delta) {
				var _g = Object2;
				_g.set_x(_g.x + (Object1.x - Object1.last.x));
			}
		}
		return true;
	}
	return false;
};
flixel_FlxObject.updateTouchingFlagsY = function(Object1,Object2) {
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.updateTouchingFlagsY);
	}
	if(Object2.flixelType == 3) {
		var tilemap = Object2;
		return tilemap.overlapsWithCallback(Object1,flixel_FlxObject.updateTouchingFlagsY,true);
	}
	return flixel_FlxObject.computeOverlapY(Object1,Object2,false) != 0;
};
flixel_FlxObject.__super__ = flixel_FlxBasic;
flixel_FlxObject.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,width: null
	,height: null
	,pixelPerfectRender: null
	,pixelPerfectPosition: null
	,angle: null
	,moves: null
	,immovable: null
	,scrollFactor: null
	,velocity: null
	,acceleration: null
	,drag: null
	,maxVelocity: null
	,last: null
	,mass: null
	,elasticity: null
	,angularVelocity: null
	,angularAcceleration: null
	,angularDrag: null
	,maxAngular: null
	,health: null
	,touching: null
	,wasTouching: null
	,allowCollisions: null
	,collisonXDrag: null
	,path: null
	,_point: null
	,_rect: null
	,initVars: function() {
		this.flixelType = 1;
		var X = this.x;
		var Y = this.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.last = point;
		var X = 1;
		var Y = 1;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.scrollFactor = point;
		this.pixelPerfectPosition = flixel_FlxObject.defaultPixelPerfectPosition;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.velocity = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.acceleration = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.drag = point;
		var X = 10000;
		var Y = 10000;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.maxVelocity = point;
	}
	,initMotionVars: function() {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.velocity = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.acceleration = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.drag = point;
		var X = 10000;
		var Y = 10000;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.maxVelocity = point;
	}
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		this.velocity = flixel_util_FlxDestroyUtil.put(this.velocity);
		this.acceleration = flixel_util_FlxDestroyUtil.put(this.acceleration);
		this.drag = flixel_util_FlxDestroyUtil.put(this.drag);
		this.maxVelocity = flixel_util_FlxDestroyUtil.put(this.maxVelocity);
		this.scrollFactor = flixel_util_FlxDestroyUtil.put(this.scrollFactor);
		this.last = flixel_util_FlxDestroyUtil.put(this.last);
		this._point = flixel_util_FlxDestroyUtil.put(this._point);
		this._rect = flixel_util_FlxDestroyUtil.put(this._rect);
	}
	,update: function(elapsed) {
		this.last.set(this.x,this.y);
		if(this.path != null && this.path.active) {
			this.path.update(elapsed);
		}
		if(this.moves) {
			this.updateMotion(elapsed);
		}
		this.wasTouching = this.touching;
		this.touching = 0;
	}
	,updateMotion: function(elapsed) {
		var velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.angularVelocity,this.angularAcceleration,this.angularDrag,this.maxAngular,elapsed) - this.angularVelocity);
		this.angularVelocity += velocityDelta;
		var _g = this;
		_g.set_angle(_g.angle + this.angularVelocity * elapsed);
		this.angularVelocity += velocityDelta;
		velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.velocity.x,this.acceleration.x,this.drag.x,this.maxVelocity.x,elapsed) - this.velocity.x);
		var _g = this.velocity;
		_g.set_x(_g.x + velocityDelta);
		var delta = this.velocity.x * elapsed;
		var _g = this.velocity;
		_g.set_x(_g.x + velocityDelta);
		var _g = this;
		_g.set_x(_g.x + delta);
		velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.velocity.y,this.acceleration.y,this.drag.y,this.maxVelocity.y,elapsed) - this.velocity.y);
		var _g = this.velocity;
		_g.set_y(_g.y + velocityDelta);
		delta = this.velocity.y * elapsed;
		var _g = this.velocity;
		_g.set_y(_g.y + velocityDelta);
		var _g = this;
		_g.set_y(_g.y + delta);
	}
	,draw: function() {
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.overlapsCallback),group,0,0,InScreenSpace,Camera);
		}
		if(ObjectOrGroup.flixelType == 3) {
			var tilemap = ObjectOrGroup;
			return tilemap.overlaps(this,InScreenSpace,Camera);
		}
		var object = ObjectOrGroup;
		if(!InScreenSpace) {
			if(object.x + object.get_width() > this.x && object.x < this.x + this.get_width() && object.y + object.get_height() > this.y) {
				return object.y < this.y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var objectScreenPos = object.getScreenPosition(null,Camera);
		this.getScreenPosition(this._point,Camera);
		if(objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y) {
			return objectScreenPos.y < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,overlapsCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlaps(ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.overlapsAtCallback),group,X,Y,InScreenSpace,Camera);
		}
		if(ObjectOrGroup.flixelType == 3) {
			var tilemap = ObjectOrGroup;
			return tilemap.overlapsAt(tilemap.x - (X - this.x),tilemap.y - (Y - this.y),this,InScreenSpace,Camera);
		}
		var object = ObjectOrGroup;
		if(!InScreenSpace) {
			if(object.x + object.get_width() > X && object.x < X + this.get_width() && object.y + object.get_height() > Y) {
				return object.y < Y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var objectScreenPos = object.getScreenPosition(null,Camera);
		this.getScreenPosition(this._point,Camera);
		if(objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y) {
			return objectScreenPos.y < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,overlapsAtCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		if(!InScreenSpace) {
			if(point.x >= this.x && point.x < this.x + this.get_width() && point.y >= this.y) {
				return point.y < this.y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var xPos = point.x - Camera.scroll.x;
		var yPos = point.y - Camera.scroll.y;
		this.getScreenPosition(this._point,Camera);
		if(point._weak) {
			point.put();
		}
		if(xPos >= this._point.x && xPos < this._point.x + this.get_width() && yPos >= this._point.y) {
			return yPos < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,inWorldBounds: function() {
		var tmp;
		if(this.x + this.get_width() > flixel_FlxG.worldBounds.x) {
			var _this = flixel_FlxG.worldBounds;
			tmp = this.x < _this.x + _this.width;
		} else {
			tmp = false;
		}
		if(tmp && this.y + this.get_height() > flixel_FlxG.worldBounds.y) {
			var _this = flixel_FlxG.worldBounds;
			return this.y < _this.y + _this.height;
		} else {
			return false;
		}
	}
	,getScreenPosition: function(point,Camera) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		point.set(this.x,this.y);
		if(this.pixelPerfectPosition) {
			point.set_x(Math.floor(point.x));
			point.set_y(Math.floor(point.y));
		}
		var X = Camera.scroll.x * this.scrollFactor.x;
		var Y = Camera.scroll.y * this.scrollFactor.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = point;
		_g.set_x(_g.x - X);
		var _g = point;
		_g.set_y(_g.y - Y);
		return point;
	}
	,getPosition: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x,this.y);
	}
	,getMidpoint: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x + this.get_width() * 0.5,this.y + this.get_height() * 0.5);
	}
	,getHitbox: function(rect) {
		if(rect == null) {
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect1 = _this;
			rect1._inPool = false;
			rect = rect1;
		}
		var X = this.x;
		var Y = this.y;
		var Width = this.get_width();
		var Height = this.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		rect.x = X;
		rect.y = Y;
		rect.width = Width;
		rect.height = Height;
		return rect;
	}
	,reset: function(X,Y) {
		this.touching = 0;
		this.wasTouching = 0;
		this.setPosition(X,Y);
		this.last.set(this.x,this.y);
		this.velocity.set();
		this.revive();
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		this.getScreenPosition(this._point,Camera);
		var point = this._point;
		var width = this.get_width();
		var height = this.get_height();
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(point.x + width > Camera.viewOffsetX && point.x < Camera.viewOffsetWidth && point.y + height > Camera.viewOffsetY) {
			return point.y < Camera.viewOffsetHeight;
		} else {
			return false;
		}
	}
	,isPixelPerfectRender: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(this.pixelPerfectRender == null) {
			return Camera.pixelPerfectRender;
		} else {
			return this.pixelPerfectRender;
		}
	}
	,isTouching: function(Direction) {
		return (this.touching & Direction) > 0;
	}
	,justTouched: function(Direction) {
		if((this.touching & Direction) > 0) {
			return (this.wasTouching & Direction) <= 0;
		} else {
			return false;
		}
	}
	,hurt: function(Damage) {
		this.health -= Damage;
		if(this.health <= 0) {
			this.kill();
		}
	}
	,screenCenter: function(axes) {
		if(axes == null) {
			axes = flixel_util_FlxAxes.XY;
		}
		if(axes != flixel_util_FlxAxes.Y) {
			this.set_x(flixel_FlxG.width / 2 - this.get_width() / 2);
		}
		if(axes != flixel_util_FlxAxes.X) {
			this.set_y(flixel_FlxG.height / 2 - this.get_height() / 2);
		}
		return this;
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,getBoundingBox: function(camera) {
		this.getScreenPosition(this._point,camera);
		var _this = this._rect;
		var X = this._point.x;
		var Y = this._point.y;
		var Width = this.get_width();
		var Height = this.get_height();
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		this._rect = camera.transformRect(this._rect);
		if(this.isPixelPerfectRender(camera)) {
			var _this = this._rect;
			_this.x = Math.floor(_this.x);
			_this.y = Math.floor(_this.y);
			_this.width = Math.floor(_this.width);
			_this.height = Math.floor(_this.height);
		}
		return this._rect;
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		var value = this.get_width();
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "w";
		_this2.value = value;
		var value = this.get_height();
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "h";
		_this3.value = value;
		var value = this.visible;
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "visible";
		_this4.value = value;
		var value = this.velocity;
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "velocity";
		_this5.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);
	}
	,set_x: function(NewX) {
		return this.x = NewX;
	}
	,set_y: function(NewY) {
		return this.y = NewY;
	}
	,set_width: function(Width) {
		return this.width = Width;
	}
	,set_height: function(Height) {
		return this.height = Height;
	}
	,get_width: function() {
		return this.width;
	}
	,get_height: function() {
		return this.height;
	}
	,get_solid: function() {
		return (this.allowCollisions & 4369) > 0;
	}
	,set_solid: function(Solid) {
		this.set_allowCollisions(Solid ? 4369 : 0);
		return Solid;
	}
	,set_angle: function(Value) {
		return this.angle = Value;
	}
	,set_moves: function(Value) {
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		return this.immovable = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		return this.pixelPerfectRender = Value;
	}
	,set_allowCollisions: function(Value) {
		return this.allowCollisions = Value;
	}
	,set_path: function(path) {
		if(this.path == path) {
			return path;
		}
		if(this.path != null) {
			this.path.object = null;
		}
		if(path != null) {
			path.object = this;
		}
		return this.path = path;
	}
	,__class__: flixel_FlxObject
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_path:"set_path",set_allowCollisions:"set_allowCollisions",set_solid:"set_solid",get_solid:"get_solid",set_immovable:"set_immovable",set_moves:"set_moves",set_angle:"set_angle",set_pixelPerfectRender:"set_pixelPerfectRender",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",set_x:"set_x"})
});
var flixel_FlxSprite = function(X,Y,SimpleGraphic) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._facingFlip = new haxe_ds_IntMap();
	this._angleChanged = true;
	this._cosAngle = 1;
	this._sinAngle = 0;
	this._facingVerticalMult = 1;
	this._facingHorizontalMult = 1;
	this.useColorTransform = false;
	this.color = 16777215;
	this.flipY = false;
	this.flipX = false;
	this.facing = 16;
	this.alpha = 1.0;
	this.bakedRotationAngle = 0;
	this.numFrames = 0;
	this.frameHeight = 0;
	this.frameWidth = 0;
	this.dirty = true;
	this.antialiasing = false;
	this.useFramePixels = true;
	flixel_FlxObject.call(this,X,Y);
	this.set_useFramePixels(flixel_FlxG.renderBlit);
	if(SimpleGraphic != null) {
		this.loadGraphic(SimpleGraphic);
	}
};
$hxClasses["flixel.FlxSprite"] = flixel_FlxSprite;
flixel_FlxSprite.__name__ = "flixel.FlxSprite";
flixel_FlxSprite.__super__ = flixel_FlxObject;
flixel_FlxSprite.prototype = $extend(flixel_FlxObject.prototype,{
	animation: null
	,framePixels: null
	,useFramePixels: null
	,antialiasing: null
	,dirty: null
	,frame: null
	,frameWidth: null
	,frameHeight: null
	,numFrames: null
	,frames: null
	,graphic: null
	,bakedRotationAngle: null
	,alpha: null
	,facing: null
	,flipX: null
	,flipY: null
	,origin: null
	,offset: null
	,scale: null
	,blend: null
	,color: null
	,colorTransform: null
	,useColorTransform: null
	,clipRect: null
	,shader: null
	,_frame: null
	,_frameGraphic: null
	,_facingHorizontalMult: null
	,_facingVerticalMult: null
	,_flashPoint: null
	,_flashRect: null
	,_flashRect2: null
	,_flashPointZero: null
	,_matrix: null
	,_halfSize: null
	,_sinAngle: null
	,_cosAngle: null
	,_angleChanged: null
	,_facingFlip: null
	,initVars: function() {
		flixel_FlxObject.prototype.initVars.call(this);
		this.animation = new flixel_animation_FlxAnimationController(this);
		this._flashPoint = new openfl_geom_Point();
		this._flashRect = new openfl_geom_Rectangle();
		this._flashRect2 = new openfl_geom_Rectangle();
		this._flashPointZero = new openfl_geom_Point();
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.offset = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.origin = point;
		var X = 1;
		var Y = 1;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.scale = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this._halfSize = point;
		this._matrix = new flixel_math_FlxMatrix();
		this.colorTransform = new openfl_geom_ColorTransform();
	}
	,destroy: function() {
		flixel_FlxObject.prototype.destroy.call(this);
		this.animation = flixel_util_FlxDestroyUtil.destroy(this.animation);
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.put(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.put(this.scale);
		this._halfSize = flixel_util_FlxDestroyUtil.put(this._halfSize);
		this.framePixels = flixel_util_FlxDestroyUtil.dispose(this.framePixels);
		this._flashPoint = null;
		this._flashRect = null;
		this._flashRect2 = null;
		this._flashPointZero = null;
		this._matrix = null;
		this.colorTransform = null;
		this.set_blend(null);
		this.set_frames(null);
		this.set_graphic(null);
		this._frame = flixel_util_FlxDestroyUtil.destroy(this._frame);
		this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
		this.shader = null;
	}
	,clone: function() {
		return new flixel_FlxSprite().loadGraphicFromSprite(this);
	}
	,loadGraphicFromSprite: function(Sprite) {
		this.set_frames(Sprite.frames);
		this.bakedRotationAngle = Sprite.bakedRotationAngle;
		if(this.bakedRotationAngle > 0) {
			this.set_width(Sprite.get_width());
			this.set_height(Sprite.get_height());
			this.centerOffsets();
		}
		this.set_antialiasing(Sprite.antialiasing);
		this.animation.copyFrom(Sprite.animation);
		this.graphicLoaded();
		this.set_clipRect(Sprite.clipRect);
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		var graph = flixel_FlxG.bitmap.add(Graphic,Unique,Key);
		if(graph == null) {
			return this;
		}
		if(Width == 0) {
			Width = Animated ? graph.height : graph.width;
			if(Width > graph.width) {
				Width = graph.width;
			}
		}
		if(Height == 0) {
			Height = Animated ? Width : graph.height;
			if(Height > graph.height) {
				Height = graph.height;
			}
		}
		if(Animated) {
			var X = Width;
			var Y = Height;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			this.set_frames(flixel_graphics_frames_FlxTileFrames.fromGraphic(graph,point));
		} else {
			this.set_frames(graph.get_imageFrame());
		}
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Frame == null) {
			Frame = -1;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		var brushGraphic = flixel_FlxG.bitmap.add(Graphic,false,Key);
		if(brushGraphic == null) {
			return this;
		}
		var brush = brushGraphic.bitmap;
		var key = brushGraphic.key;
		if(Frame >= 0) {
			var brushSize = brush.height;
			var framesNum = brush.width / brushSize | 0;
			if(framesNum <= Frame) {
				Frame %= framesNum;
			}
			key += ":" + Frame;
			var full = brush;
			brush = new openfl_display_BitmapData(brushSize,brushSize,true,0);
			this._flashRect.setTo(Frame * brushSize,0,brushSize,brushSize);
			brush.copyPixels(full,this._flashRect,this._flashPointZero);
		}
		key += ":" + Rotations + ":" + (AutoBuffer == null ? "null" : "" + AutoBuffer);
		var tempGraph = flixel_FlxG.bitmap._cache.h[key];
		if(tempGraph == null) {
			var bitmap = flixel_util_FlxBitmapDataUtil.generateRotations(brush,Rotations,AntiAliasing,AutoBuffer);
			tempGraph = flixel_graphics_FlxGraphic.fromBitmapData(bitmap,false,key);
		}
		var max = brush.height > brush.width ? brush.height : brush.width;
		if(AutoBuffer) {
			max = max * 1.5 | 0;
		}
		var X = max;
		var Y = max;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.set_frames(flixel_graphics_frames_FlxTileFrames.fromGraphic(tempGraph,point));
		if(AutoBuffer) {
			this.set_width(brush.width);
			this.set_height(brush.height);
			this.centerOffsets();
		}
		this.bakedRotationAngle = 360 / Rotations;
		this.animation.createPrerotated();
		return this;
	}
	,loadRotatedFrame: function(Frame,Rotations,AntiAliasing,AutoBuffer) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		var key = Frame.parent.key;
		if(Frame.name != null) {
			key += ":" + Frame.name;
		} else {
			var _this = Frame.frame;
			var value = _this.x;
			var _this1 = flixel_util_LabelValuePair._pool.get();
			_this1.label = "x";
			_this1.value = value;
			var value = _this.y;
			var _this2 = flixel_util_LabelValuePair._pool.get();
			_this2.label = "y";
			_this2.value = value;
			var value = _this.width;
			var _this3 = flixel_util_LabelValuePair._pool.get();
			_this3.label = "w";
			_this3.value = value;
			var value = _this.height;
			var _this = flixel_util_LabelValuePair._pool.get();
			_this.label = "h";
			_this.value = value;
			key += ":" + flixel_util_FlxStringUtil.getDebugString([_this1,_this2,_this3,_this]);
		}
		var graphic = flixel_FlxG.bitmap._cache.h[key];
		if(graphic == null) {
			graphic = flixel_graphics_FlxGraphic.fromBitmapData(Frame.paint(),false,key);
		}
		return this.loadRotatedGraphic(graphic,Rotations,-1,AntiAliasing,AutoBuffer);
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Color == null) {
			Color = -1;
		}
		var graph = flixel_FlxG.bitmap.create(Width,Height,Color,Unique,Key);
		this.set_frames(graph.get_imageFrame());
		return this;
	}
	,graphicLoaded: function() {
	}
	,resetSize: function() {
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetFrameSize: function() {
		if(this.frame != null) {
			this.frameWidth = this.frame.sourceSize.x | 0;
			this.frameHeight = this.frame.sourceSize.y | 0;
		}
		this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetSizeFromFrame: function() {
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
	}
	,resetFrame: function() {
		this.set_frame(this.frame);
	}
	,setGraphicSize: function(Width,Height) {
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Width <= 0 && Height <= 0) {
			return;
		}
		var newScaleX = Width / this.frameWidth;
		var newScaleY = Height / this.frameHeight;
		this.scale.set(newScaleX,newScaleY);
		if(Width <= 0) {
			this.scale.set_x(newScaleY);
		} else if(Height <= 0) {
			this.scale.set_y(newScaleX);
		}
	}
	,updateHitbox: function() {
		this.set_width(Math.abs(this.scale.x) * this.frameWidth);
		this.set_height(Math.abs(this.scale.y) * this.frameHeight);
		this.offset.set(-0.5 * (this.get_width() - this.frameWidth),-0.5 * (this.get_height() - this.frameHeight));
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,resetHelpers: function() {
		if(this.frame != null) {
			this.frameWidth = this.frame.sourceSize.x | 0;
			this.frameHeight = this.frame.sourceSize.y | 0;
		}
		this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
		this._flashRect2.x = 0;
		this._flashRect2.y = 0;
		if(this.graphic != null) {
			this._flashRect2.width = this.graphic.width;
			this._flashRect2.height = this.graphic.height;
		}
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
			this.updateFramePixels();
		}
	}
	,update: function(elapsed) {
		flixel_FlxObject.prototype.update.call(this,elapsed);
		this.updateAnimation(elapsed);
	}
	,updateAnimation: function(elapsed) {
		this.animation.update(elapsed);
	}
	,checkEmptyFrame: function() {
		if(this._frame == null) {
			this.loadGraphic("flixel/images/logo/default.png");
		}
	}
	,draw: function() {
		this.checkEmptyFrame();
		if(this.alpha == 0 || this._frame.type == 2) {
			return;
		}
		if(this.dirty) {
			this.calcFrame(this.useFramePixels);
		}
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) {
				continue;
			}
			this.getScreenPosition(this._point,camera).subtractPoint(this.offset);
			if(this.isSimpleRender(camera)) {
				this.drawSimple(camera);
			} else {
				this.drawComplex(camera);
			}
		}
	}
	,drawSimple: function(camera) {
		if(this.isPixelPerfectRender(camera)) {
			var _this = this._point;
			_this.set_x(Math.floor(_this.x));
			_this.set_y(Math.floor(_this.y));
		}
		var _this = this._point;
		var FlashPoint = this._flashPoint;
		if(FlashPoint == null) {
			FlashPoint = new openfl_geom_Point();
		}
		FlashPoint.x = _this.x;
		FlashPoint.y = _this.y;
		camera.copyPixels(this._frame,this.framePixels,this._flashRect,this._flashPoint,this.colorTransform,this.blend,this.antialiasing);
	}
	,drawComplex: function(camera) {
		var doFlipX = this.flipX != this._frame.flipX;
		var doFlipY = this.flipY != this._frame.flipY;
		this._frame.prepareMatrix(this._matrix,0,this.animation._curAnim != null ? doFlipX != this.animation._curAnim.flipX : doFlipX,this.animation._curAnim != null ? doFlipY != this.animation._curAnim.flipY : doFlipY);
		this._matrix.translate(-this.origin.x,-this.origin.y);
		this._matrix.scale(this.scale.x,this.scale.y);
		if(this.bakedRotationAngle <= 0) {
			if(this._angleChanged) {
				var radians = this.angle * (Math.PI / 180);
				this._sinAngle = Math.sin(radians);
				this._cosAngle = Math.cos(radians);
				this._angleChanged = false;
			}
			if(this.angle != 0) {
				var _this = this._matrix;
				var cos = this._cosAngle;
				var sin = this._sinAngle;
				var a1 = _this.a * cos - _this.b * sin;
				_this.b = _this.a * sin + _this.b * cos;
				_this.a = a1;
				var c1 = _this.c * cos - _this.d * sin;
				_this.d = _this.c * sin + _this.d * cos;
				_this.c = c1;
				var tx1 = _this.tx * cos - _this.ty * sin;
				_this.ty = _this.tx * sin + _this.ty * cos;
				_this.tx = tx1;
			}
		}
		var _this = this._point;
		var X = this.origin.x;
		var Y = this.origin.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = _this;
		_g.set_x(_g.x + X);
		var _g = _this;
		_g.set_y(_g.y + Y);
		this._matrix.translate(this._point.x,this._point.y);
		if(this.isPixelPerfectRender(camera)) {
			this._matrix.tx = Math.floor(this._matrix.tx);
			this._matrix.ty = Math.floor(this._matrix.ty);
		}
		camera.drawPixels(this._frame,this.framePixels,this._matrix,this.colorTransform,this.blend,this.antialiasing,this.shader);
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		Brush.drawFrame();
		if(this.graphic == null || Brush.graphic == null) {
			throw haxe_Exception.thrown("Cannot stamp to or from a FlxSprite with no graphics.");
		}
		var bitmapData = Brush.framePixels;
		if(this.isSimpleRenderBlit()) {
			this._flashPoint.x = X + this.frame.frame.x;
			this._flashPoint.y = Y + this.frame.frame.y;
			this._flashRect2.width = bitmapData.width;
			this._flashRect2.height = bitmapData.height;
			this.graphic.bitmap.copyPixels(bitmapData,this._flashRect2,this._flashPoint,null,null,true);
			this._flashRect2.width = this.graphic.bitmap.width;
			this._flashRect2.height = this.graphic.bitmap.height;
		} else {
			this._matrix.identity();
			this._matrix.translate(-Brush.origin.x,-Brush.origin.y);
			this._matrix.scale(Brush.scale.x,Brush.scale.y);
			if(Brush.angle != 0) {
				this._matrix.rotate(Brush.angle * (Math.PI / 180));
			}
			this._matrix.translate(X + this.frame.frame.x + Brush.origin.x,Y + this.frame.frame.y + Brush.origin.y);
			var brushBlend = Brush.blend;
			this.graphic.bitmap.draw(bitmapData,this._matrix,null,brushBlend,null,Brush.antialiasing);
		}
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
			this.calcFrame();
		}
	}
	,drawFrame: function(Force) {
		if(Force == null) {
			Force = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(Force || this.dirty) {
				this.dirty = true;
				this.calcFrame();
			}
		} else {
			this.dirty = true;
			this.calcFrame(true);
		}
	}
	,centerOffsets: function(AdjustPosition) {
		if(AdjustPosition == null) {
			AdjustPosition = false;
		}
		this.offset.set_x((this.frameWidth - this.get_width()) * 0.5);
		this.offset.set_y((this.frameHeight - this.get_height()) * 0.5);
		if(AdjustPosition) {
			var _g = this;
			_g.set_x(_g.x + this.offset.x);
			var _g = this;
			_g.set_y(_g.y + this.offset.y);
		}
	}
	,centerOrigin: function() {
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) {
			FetchPositions = false;
		}
		var positions = flixel_util_FlxBitmapDataUtil.replaceColor(this.graphic.bitmap,Color,NewColor,FetchPositions);
		if(positions != null) {
			this.dirty = true;
		}
		return positions;
	}
	,setColorTransform: function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
		if(alphaOffset == null) {
			alphaOffset = 0;
		}
		if(blueOffset == null) {
			blueOffset = 0;
		}
		if(greenOffset == null) {
			greenOffset = 0;
		}
		if(redOffset == null) {
			redOffset = 0;
		}
		if(alphaMultiplier == null) {
			alphaMultiplier = 1.0;
		}
		if(blueMultiplier == null) {
			blueMultiplier = 1.0;
		}
		if(greenMultiplier == null) {
			greenMultiplier = 1.0;
		}
		if(redMultiplier == null) {
			redMultiplier = 1.0;
		}
		var color = flixel_util_FlxColor._new();
		var Alpha = 1;
		if(Alpha == null) {
			Alpha = 1;
		}
		var Value = Math.round(redMultiplier * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value = Math.round(greenMultiplier * 255);
		color &= -65281;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
		var Value = Math.round(blueMultiplier * 255);
		color &= -256;
		color |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
		var Value = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		this.set_color(color & 16777215);
		this.set_alpha(alphaMultiplier);
		flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		flixel_util_FlxColorTransformUtil.setOffsets(this.colorTransform,redOffset,greenOffset,blueOffset,alphaOffset);
		this.useColorTransform = this.alpha != 1 || this.color != 16777215 || flixel_util_FlxColorTransformUtil.hasRGBOffsets(this.colorTransform);
		this.dirty = true;
	}
	,updateColorTransform: function() {
		if(this.colorTransform == null) {
			this.colorTransform = new openfl_geom_ColorTransform();
		}
		this.useColorTransform = this.alpha != 1 || this.color != 16777215;
		if(this.useColorTransform) {
			flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,(this.color >> 16 & 255) / 255,(this.color >> 8 & 255) / 255,(this.color & 255) / 255,this.alpha);
		} else {
			flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,1,1,1,1);
		}
		this.dirty = true;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) {
			Mask = 255;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		this.getScreenPosition(this._point,Camera);
		this._point.subtractPoint(this.offset);
		this._flashPoint.x = point.x - Camera.scroll.x - this._point.x;
		this._flashPoint.y = point.y - Camera.scroll.y - this._point.y;
		if(point._weak) {
			point.put();
		}
		if(this._flashPoint.x < 0 || this._flashPoint.x > this.frameWidth || this._flashPoint.y < 0 || this._flashPoint.y > this.frameHeight) {
			return false;
		} else {
			var frameData = this.updateFramePixels();
			var pixelColor = frameData.getPixel32(this._flashPoint.x | 0,this._flashPoint.y | 0);
			return (pixelColor >> 24 & 255) * this.alpha >= Mask;
		}
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
		this.checkEmptyFrame();
		if(flixel_FlxG.renderTile && !RunOnCpp) {
			return;
		}
		this.updateFramePixels();
	}
	,updateFramePixels: function() {
		if(this._frame == null || !this.dirty) {
			return this.framePixels;
		}
		if(flixel_FlxG.renderTile && this._frameGraphic != null) {
			this.dirty = false;
			return this.framePixels;
		}
		var doFlipX = this.flipX != this._frame.flipX;
		var doFlipX1 = this.animation._curAnim != null ? doFlipX != this.animation._curAnim.flipX : doFlipX;
		var doFlipY = this.flipY != this._frame.flipY;
		var doFlipY1 = this.animation._curAnim != null ? doFlipY != this.animation._curAnim.flipY : doFlipY;
		if(!doFlipX1 && !doFlipY1 && this._frame.type == 0) {
			this.framePixels = this._frame.paint(this.framePixels,this._flashPointZero,false,true);
		} else {
			this.framePixels = this._frame.paintRotatedAndFlipped(this.framePixels,this._flashPointZero,0,doFlipX1,doFlipY1,false,true);
		}
		if(this.useColorTransform) {
			this.framePixels.colorTransform(this._flashRect,this.colorTransform);
		}
		if(flixel_FlxG.renderTile && this.useFramePixels) {
			this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
			this._frameGraphic = flixel_graphics_FlxGraphic.fromBitmapData(this.framePixels,false,null,false);
			this._frame = this._frameGraphic.get_imageFrame().get_frame().copyTo(this._frame);
		}
		this.dirty = false;
		return this.framePixels;
	}
	,getGraphicMidpoint: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x + this.frameWidth * 0.5,this.y + this.frameHeight * 0.5);
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var minX = this.x - this.offset.x - Camera.scroll.x * this.scrollFactor.x;
		var minY = this.y - this.offset.y - Camera.scroll.y * this.scrollFactor.y;
		if((this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1) {
			this._point.set(minX,minY);
			var point = this._point;
			var width = this.frameWidth;
			var height = this.frameHeight;
			if(height == null) {
				height = 0;
			}
			if(width == null) {
				width = 0;
			}
			if(point.x + width > Camera.viewOffsetX && point.x < Camera.viewOffsetWidth && point.y + height > Camera.viewOffsetY) {
				return point.y < Camera.viewOffsetHeight;
			} else {
				return false;
			}
		}
		var radiusX = this._halfSize.x;
		var radiusY = this._halfSize.y;
		var ox = this.origin.x;
		if(ox != radiusX) {
			var x1 = Math.abs(ox);
			var x2 = Math.abs(this.frameWidth - ox);
			radiusX = Math.max(x2,x1);
		}
		var oy = this.origin.y;
		if(oy != radiusY) {
			var y1 = Math.abs(oy);
			var y2 = Math.abs(this.frameHeight - oy);
			radiusY = Math.max(y2,y1);
		}
		radiusX *= Math.abs(this.scale.x);
		radiusY *= Math.abs(this.scale.y);
		var radius = Math.max(radiusX,radiusY);
		radius *= 1.41421356237;
		minX += ox - radius;
		minY += oy - radius;
		var doubleRadius = 2 * radius;
		this._point.set(minX,minY);
		var point = this._point;
		var width = doubleRadius;
		var height = doubleRadius;
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(point.x + width > Camera.viewOffsetX && point.x < Camera.viewOffsetWidth && point.y + height > Camera.viewOffsetY) {
			return point.y < Camera.viewOffsetHeight;
		} else {
			return false;
		}
	}
	,isSimpleRender: function(camera) {
		if(flixel_FlxG.renderTile) {
			return false;
		}
		return this.isSimpleRenderBlit(camera);
	}
	,isSimpleRenderBlit: function(camera) {
		var result = (this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1 && this.blend == null;
		result = result && (camera != null ? this.isPixelPerfectRender(camera) : this.pixelPerfectRender);
		return result;
	}
	,setFacingFlip: function(Direction,FlipX,FlipY) {
		this._facingFlip.h[Direction] = { x : FlipX, y : FlipY};
	}
	,setFrames: function(Frames,saveAnimations) {
		if(saveAnimations == null) {
			saveAnimations = true;
		}
		if(saveAnimations) {
			var animations = this.animation._animations;
			var reverse = false;
			var index = 0;
			var frameIndex = this.animation.frameIndex;
			var currName = null;
			if(this.animation._curAnim != null) {
				reverse = this.animation._curAnim.reversed;
				index = this.animation._curAnim.curFrame;
				currName = this.animation._curAnim.name;
			}
			this.animation._animations = null;
			this.set_frames(Frames);
			this.set_frame(this.frames.frames[frameIndex]);
			this.animation._animations = animations;
			if(currName != null) {
				this.animation.play(currName,false,reverse,index);
			}
		} else {
			this.set_frames(Frames);
		}
		return this;
	}
	,get_pixels: function() {
		if(this.graphic == null) {
			return null;
		} else {
			return this.graphic.bitmap;
		}
	}
	,set_pixels: function(Pixels) {
		var key = flixel_FlxG.bitmap.findKeyForBitmap(Pixels);
		if(key == null) {
			key = flixel_FlxG.bitmap.getUniqueKey();
			this.set_graphic(flixel_FlxG.bitmap.add(Pixels,false,key));
		} else {
			this.set_graphic(flixel_FlxG.bitmap._cache.h[key]);
		}
		this.set_frames(this.graphic.get_imageFrame());
		return Pixels;
	}
	,set_frame: function(Value) {
		this.frame = Value;
		if(this.frame != null) {
			if(this.frame != null) {
				this.frameWidth = this.frame.sourceSize.x | 0;
				this.frameHeight = this.frame.sourceSize.y | 0;
			}
			this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = this.frameWidth;
			this._flashRect.height = this.frameHeight;
			this.dirty = true;
		} else if(this.frames != null && this.frames.frames != null && this.numFrames > 0) {
			this.frame = this.frames.frames[0];
			this.dirty = true;
		} else {
			return null;
		}
		if(flixel_FlxG.renderTile) {
			this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
		}
		if(this.clipRect != null) {
			this._frame = this.frame.clipTo(this.clipRect,this._frame);
		} else {
			this._frame = this.frame.copyTo(this._frame);
		}
		return this.frame;
	}
	,set_facing: function(Direction) {
		var flip = this._facingFlip.h[Direction];
		if(flip != null) {
			this.set_flipX(flip.x);
			this.set_flipY(flip.y);
		}
		return this.facing = Direction;
	}
	,set_alpha: function(Alpha) {
		if(this.alpha == Alpha) {
			return Alpha;
		}
		var lowerBound = Alpha < 0 ? 0 : Alpha;
		this.alpha = lowerBound > 1 ? 1 : lowerBound;
		this.updateColorTransform();
		return this.alpha;
	}
	,set_color: function(Color) {
		if(this.color == Color) {
			return Color;
		}
		this.color = Color;
		this.updateColorTransform();
		return this.color;
	}
	,set_angle: function(Value) {
		var newAngle = this.angle != Value;
		var ret = flixel_FlxObject.prototype.set_angle.call(this,Value);
		if(newAngle) {
			this._angleChanged = true;
			this.animation.update(0);
		}
		return ret;
	}
	,updateTrig: function() {
		if(this._angleChanged) {
			var radians = this.angle * (Math.PI / 180);
			this._sinAngle = Math.sin(radians);
			this._cosAngle = Math.cos(radians);
			this._angleChanged = false;
		}
	}
	,set_blend: function(Value) {
		return this.blend = Value;
	}
	,set_graphic: function(Value) {
		var oldGraphic = this.graphic;
		if(this.graphic != Value && Value != null) {
			var _g = Value;
			_g.set_useCount(_g.get_useCount() + 1);
		}
		if(oldGraphic != null && oldGraphic != Value) {
			var _g = oldGraphic;
			_g.set_useCount(_g.get_useCount() - 1);
		}
		return this.graphic = Value;
	}
	,set_clipRect: function(rect) {
		if(rect != null) {
			rect.x = Math.round(rect.x);
			rect.y = Math.round(rect.y);
			rect.width = Math.round(rect.width);
			rect.height = Math.round(rect.height);
			this.clipRect = rect;
		} else {
			this.clipRect = null;
		}
		if(this.frames != null) {
			this.set_frame(this.frames.frames[this.animation.frameIndex]);
		}
		return rect;
	}
	,set_frames: function(Frames) {
		if(this.animation != null) {
			this.animation.destroyAnimations();
		}
		if(Frames != null) {
			this.set_graphic(Frames.parent);
			this.frames = Frames;
			this.set_frame(this.frames.frames[0]);
			this.numFrames = this.frames.frames.length;
			this.resetHelpers();
			this.bakedRotationAngle = 0;
			this.animation.set_frameIndex(0);
			this.graphicLoaded();
		} else {
			this.frames = null;
			this.set_frame(null);
			this.set_graphic(null);
		}
		return Frames;
	}
	,set_flipX: function(Value) {
		if(flixel_FlxG.renderTile) {
			this._facingHorizontalMult = Value ? -1 : 1;
		}
		this.dirty = this.flipX != Value || this.dirty;
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(flixel_FlxG.renderTile) {
			this._facingVerticalMult = Value ? -1 : 1;
		}
		this.dirty = this.flipY != Value || this.dirty;
		return this.flipY = Value;
	}
	,set_antialiasing: function(value) {
		return this.antialiasing = value;
	}
	,set_useFramePixels: function(value) {
		if(flixel_FlxG.renderTile) {
			if(value != this.useFramePixels) {
				this.useFramePixels = value;
				this.set_frame(this.frame);
				if(value) {
					this.updateFramePixels();
				}
			}
			return value;
		} else {
			this.useFramePixels = true;
			return true;
		}
	}
	,checkFlipX: function() {
		var doFlipX = this.flipX != this._frame.flipX;
		if(this.animation._curAnim != null) {
			return doFlipX != this.animation._curAnim.flipX;
		}
		return doFlipX;
	}
	,checkFlipY: function() {
		var doFlipY = this.flipY != this._frame.flipY;
		if(this.animation._curAnim != null) {
			return doFlipY != this.animation._curAnim.flipY;
		}
		return doFlipY;
	}
	,__class__: flixel_FlxSprite
	,__properties__: $extend(flixel_FlxObject.prototype.__properties__,{set_clipRect:"set_clipRect",set_color:"set_color",set_blend:"set_blend",set_flipY:"set_flipY",set_flipX:"set_flipX",set_facing:"set_facing",set_alpha:"set_alpha",set_graphic:"set_graphic",set_frames:"set_frames",set_frame:"set_frame",set_pixels:"set_pixels",get_pixels:"get_pixels",set_antialiasing:"set_antialiasing",set_useFramePixels:"set_useFramePixels"})
});
var flixel_group_FlxTypedSpriteGroup = function(X,Y,MaxSize) {
	if(MaxSize == null) {
		MaxSize = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._skipTransformChildren = false;
	this.directAlpha = false;
	flixel_FlxSprite.call(this,X,Y);
	this.group = new flixel_group_FlxTypedGroup(MaxSize);
	this._sprites = this.group.members;
};
$hxClasses["flixel.group.FlxTypedSpriteGroup"] = flixel_group_FlxTypedSpriteGroup;
flixel_group_FlxTypedSpriteGroup.__name__ = "flixel.group.FlxTypedSpriteGroup";
flixel_group_FlxTypedSpriteGroup.__super__ = flixel_FlxSprite;
flixel_group_FlxTypedSpriteGroup.prototype = $extend(flixel_FlxSprite.prototype,{
	transformChildren_flixel_math_FlxRect: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_flash_display_BlendMode: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_flixel_FlxCamera: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,multiTransformChildren_Float: function(FunctionArray,ValueArray) {
		if(this.group == null) {
			return;
		}
		var numProps = FunctionArray.length;
		if(numProps > ValueArray.length) {
			return;
		}
		var lambda;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) {
				var _g2 = 0;
				var _g3 = numProps;
				while(_g2 < _g3) {
					var i = _g2++;
					lambda = FunctionArray[i];
					lambda(sprite,ValueArray[i]);
				}
			}
		}
	}
	,transformChildren_flixel_math_FlxPoint: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Int: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Float: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Array_flixel_FlxCamera: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,transformChildren_Bool: function(Function1,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function1(sprite,Value);
			}
		}
	}
	,group: null
	,directAlpha: null
	,_skipTransformChildren: null
	,_sprites: null
	,initVars: function() {
		this.flixelType = 4;
		this.offset = new flixel_math_FlxCallbackPoint($bind(this,this.offsetCallback));
		this.origin = new flixel_math_FlxCallbackPoint($bind(this,this.originCallback));
		this.scale = new flixel_math_FlxCallbackPoint($bind(this,this.scaleCallback));
		this.scrollFactor = new flixel_math_FlxCallbackPoint($bind(this,this.scrollFactorCallback));
		this.scale.set(1,1);
		this.scrollFactor.set(1,1);
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.velocity = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.acceleration = point;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.drag = point;
		var X = 10000;
		var Y = 10000;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.maxVelocity = point;
	}
	,destroy: function() {
		this.offset = flixel_util_FlxDestroyUtil.destroy(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.destroy(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.destroy(this.scale);
		this.scrollFactor = flixel_util_FlxDestroyUtil.destroy(this.scrollFactor);
		this.group = flixel_util_FlxDestroyUtil.destroy(this.group);
		this._sprites = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,clone: function() {
		var newGroup = new flixel_group_FlxTypedSpriteGroup(this.x,this.y,this.group.maxSize);
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				newGroup.add(sprite.clone());
			}
		}
		return newGroup;
	}
	,isOnScreen: function(Camera) {
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible && sprite.isOnScreen(Camera)) {
				return true;
			}
		}
		return false;
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) {
				result = result || sprite.overlapsPoint(point,InScreenSpace,Camera);
			}
		}
		return result;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) {
			Mask = 255;
		}
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) {
				result = result || sprite.pixelsOverlapPoint(point,Mask,Camera);
			}
		}
		return result;
	}
	,update: function(elapsed) {
		this.group.update(elapsed);
		if(this.moves) {
			this.updateMotion(elapsed);
		}
	}
	,draw: function() {
		this.group.draw();
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) {
			FetchPositions = false;
		}
		var positions = null;
		if(FetchPositions) {
			positions = [];
		}
		var spritePositions;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				spritePositions = sprite.replaceColor(Color,NewColor,FetchPositions);
				if(FetchPositions) {
					positions = positions.concat(spritePositions);
				}
			}
		}
		return positions;
	}
	,add: function(Sprite) {
		this.preAdd(Sprite);
		return this.group.add(Sprite);
	}
	,insert: function(Position,Sprite) {
		this.preAdd(Sprite);
		return this.group.insert(Position,Sprite);
	}
	,preAdd: function(Sprite) {
		var sprite = Sprite;
		var _g = sprite;
		_g.set_x(_g.x + this.x);
		var _g = sprite;
		_g.set_y(_g.y + this.y);
		var _g = sprite;
		_g.set_alpha(_g.alpha * this.alpha);
		var _this = sprite.scrollFactor;
		var point = this.scrollFactor;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		sprite.set_cameras(this._cameras);
		if(this.clipRect != null) {
			var ClipRect = this.clipRect;
			if(ClipRect == null) {
				sprite.set_clipRect(null);
			} else {
				var X = ClipRect.x - sprite.x + this.x;
				var Y = ClipRect.y - sprite.y + this.y;
				var Width = ClipRect.width;
				var Height = ClipRect.height;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _this = flixel_math_FlxRect._pool.get();
				var X1 = X;
				var Y1 = Y;
				var Width1 = Width;
				var Height1 = Height;
				if(Height1 == null) {
					Height1 = 0;
				}
				if(Width1 == null) {
					Width1 = 0;
				}
				if(Y1 == null) {
					Y1 = 0;
				}
				if(X1 == null) {
					X1 = 0;
				}
				_this.x = X1;
				_this.y = Y1;
				_this.width = Width1;
				_this.height = Height1;
				var rect = _this;
				rect._inPool = false;
				sprite.set_clipRect(rect);
			}
		}
	}
	,recycle: function(ObjectClass,ObjectFactory,Force,Revive) {
		if(Revive == null) {
			Revive = true;
		}
		if(Force == null) {
			Force = false;
		}
		return this.group.recycle(ObjectClass,ObjectFactory,Force,Revive);
	}
	,remove: function(Sprite,Splice) {
		if(Splice == null) {
			Splice = false;
		}
		var sprite = Sprite;
		var _g = sprite;
		_g.set_x(_g.x - this.x);
		var _g = sprite;
		_g.set_y(_g.y - this.y);
		sprite.set_cameras(null);
		return this.group.remove(Sprite,Splice);
	}
	,replace: function(OldObject,NewObject) {
		return this.group.replace(OldObject,NewObject);
	}
	,sort: function(Function1,Order) {
		if(Order == null) {
			Order = -1;
		}
		var Order1 = Order;
		if(Order1 == null) {
			Order1 = -1;
		}
		var _g = Function1;
		var a1 = Order1;
		var tmp = function(a2,a3) {
			return _g(a1,a2,a3);
		};
		this.group.members.sort(tmp);
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) {
			Force = false;
		}
		return this.group.getFirstAvailable(ObjectClass,Force);
	}
	,getFirstNull: function() {
		return this.group.getFirstNull();
	}
	,getFirstExisting: function() {
		return this.group.getFirstExisting();
	}
	,getFirstAlive: function() {
		return this.group.getFirstAlive();
	}
	,getFirstDead: function() {
		return this.group.getFirstDead();
	}
	,countLiving: function() {
		return this.group.countLiving();
	}
	,countDead: function() {
		return this.group.countDead();
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) {
			Length = 0;
		}
		if(StartIndex == null) {
			StartIndex = 0;
		}
		return this.group.getRandom(StartIndex,Length);
	}
	,iterator: function(filter) {
		return new flixel_group_FlxTypedGroupIterator(this.group.members,filter);
	}
	,forEach: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEach(Function1,Recurse);
	}
	,forEachAlive: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachAlive(Function1,Recurse);
	}
	,forEachDead: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachDead(Function1,Recurse);
	}
	,forEachExists: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachExists(Function1,Recurse);
	}
	,forEachOfType: function(ObjectClass,Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachOfType(ObjectClass,Function1,Recurse);
	}
	,clear: function() {
		this.group.clear();
	}
	,kill: function() {
		flixel_FlxSprite.prototype.kill.call(this);
		this.group.kill();
	}
	,revive: function() {
		flixel_FlxSprite.prototype.revive.call(this);
		this.group.revive();
	}
	,reset: function(X,Y) {
		this.revive();
		this.setPosition(X,Y);
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				sprite.reset(X,Y);
			}
		}
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var dx = X - this.x;
		var dy = Y - this.y;
		this.multiTransformChildren_Float([$bind(this,this.xTransform),$bind(this,this.yTransform)],[dx,dy]);
		this._skipTransformChildren = true;
		this.set_x(X);
		this.set_y(Y);
		this._skipTransformChildren = false;
	}
	,set_camera: function(Value) {
		if(this.get_camera() != Value) {
			this.transformChildren_flixel_FlxCamera($bind(this,this.cameraTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_camera.call(this,Value);
	}
	,set_cameras: function(Value) {
		if(this.get_cameras() != Value) {
			this.transformChildren_Array_flixel_FlxCamera($bind(this,this.camerasTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_cameras.call(this,Value);
	}
	,set_exists: function(Value) {
		if(this.exists != Value) {
			this.transformChildren_Bool($bind(this,this.existsTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_exists.call(this,Value);
	}
	,set_visible: function(Value) {
		if(this.exists && this.visible != Value) {
			this.transformChildren_Bool($bind(this,this.visibleTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_visible.call(this,Value);
	}
	,set_active: function(Value) {
		if(this.exists && this.active != Value) {
			this.transformChildren_Bool($bind(this,this.activeTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_active.call(this,Value);
	}
	,set_alive: function(Value) {
		if(this.alive != Value) {
			this.transformChildren_Bool($bind(this,this.aliveTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_alive.call(this,Value);
	}
	,set_x: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.x != Value) {
			var offset = Value - this.x;
			this.transformChildren_Float($bind(this,this.xTransform),offset);
		}
		return this.x = Value;
	}
	,set_y: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.y != Value) {
			var offset = Value - this.y;
			this.transformChildren_Float($bind(this,this.yTransform),offset);
		}
		return this.y = Value;
	}
	,set_angle: function(Value) {
		if(this.exists && this.angle != Value) {
			var offset = Value - this.angle;
			this.transformChildren_Float($bind(this,this.angleTransform),offset);
		}
		return this.angle = Value;
	}
	,set_alpha: function(Value) {
		var lowerBound = Value < 0 ? 0 : Value;
		Value = lowerBound > 1 ? 1 : lowerBound;
		if(this.exists && this.alpha != Value) {
			var factor = this.alpha > 0 ? Value / this.alpha : 0;
			if(!this.directAlpha && this.alpha != 0) {
				this.transformChildren_Float($bind(this,this.alphaTransform),factor);
			} else {
				this.transformChildren_Float($bind(this,this.directAlphaTransform),Value);
			}
		}
		return this.alpha = Value;
	}
	,set_facing: function(Value) {
		if(this.exists && this.facing != Value) {
			this.transformChildren_Int($bind(this,this.facingTransform),Value);
		}
		return this.facing = Value;
	}
	,set_flipX: function(Value) {
		if(this.exists && this.flipX != Value) {
			this.transformChildren_Bool($bind(this,this.flipXTransform),Value);
		}
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(this.exists && this.flipY != Value) {
			this.transformChildren_Bool($bind(this,this.flipYTransform),Value);
		}
		return this.flipY = Value;
	}
	,set_moves: function(Value) {
		if(this.exists && this.moves != Value) {
			this.transformChildren_Bool($bind(this,this.movesTransform),Value);
		}
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		if(this.exists && this.immovable != Value) {
			this.transformChildren_Bool($bind(this,this.immovableTransform),Value);
		}
		return this.immovable = Value;
	}
	,set_solid: function(Value) {
		if(this.exists && (this.allowCollisions & 4369) > 0 != Value) {
			this.transformChildren_Bool($bind(this,this.solidTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_solid.call(this,Value);
	}
	,set_color: function(Value) {
		if(this.exists && this.color != Value) {
			this.transformChildren_Int($bind(this,this.gColorTransform),Value);
		}
		return this.color = Value;
	}
	,set_blend: function(Value) {
		if(this.exists && this.blend != Value) {
			this.transformChildren_flash_display_BlendMode($bind(this,this.blendTransform),Value);
		}
		return this.blend = Value;
	}
	,set_clipRect: function(rect) {
		if(this.exists) {
			this.transformChildren_flixel_math_FlxRect($bind(this,this.clipRectTransform),rect);
		}
		return flixel_FlxSprite.prototype.set_clipRect.call(this,rect);
	}
	,set_pixelPerfectRender: function(Value) {
		if(this.exists && this.pixelPerfectRender != Value) {
			this.transformChildren_Bool($bind(this,this.pixelPerfectTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_pixelPerfectRender.call(this,Value);
	}
	,set_width: function(Value) {
		return Value;
	}
	,get_width: function() {
		if(this.group.length == 0) {
			return 0;
		}
		var minX = Infinity;
		var maxX = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member == null) {
				continue;
			}
			var minMemberX = member.x;
			var maxMemberX = minMemberX + member.get_width();
			if(maxMemberX > maxX) {
				maxX = maxMemberX;
			}
			if(minMemberX < minX) {
				minX = minMemberX;
			}
		}
		return maxX - minX;
	}
	,set_height: function(Value) {
		return Value;
	}
	,get_height: function() {
		if(this.group.length == 0) {
			return 0;
		}
		var minY = Infinity;
		var maxY = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member == null) {
				continue;
			}
			var minMemberY = member.y;
			var maxMemberY = minMemberY + member.get_height();
			if(maxMemberY > maxY) {
				maxY = maxMemberY;
			}
			if(minMemberY < minY) {
				minY = minMemberY;
			}
		}
		return maxY - minY;
	}
	,get_length: function() {
		return this.group.length;
	}
	,get_maxSize: function() {
		return this.group.maxSize;
	}
	,set_maxSize: function(Size) {
		return this.group.set_maxSize(Size);
	}
	,get_members: function() {
		return this.group.members;
	}
	,xTransform: function(Sprite,X) {
		var _g = Sprite;
		_g.set_x(_g.x + X);
	}
	,yTransform: function(Sprite,Y) {
		var _g = Sprite;
		_g.set_y(_g.y + Y);
	}
	,angleTransform: function(Sprite,Angle) {
		var _g = Sprite;
		_g.set_angle(_g.angle + Angle);
	}
	,alphaTransform: function(Sprite,Alpha) {
		if(Sprite.alpha != 0 || Alpha == 0) {
			var _g = Sprite;
			_g.set_alpha(_g.alpha * Alpha);
		} else {
			Sprite.set_alpha(1 / Alpha);
		}
	}
	,directAlphaTransform: function(Sprite,Alpha) {
		Sprite.set_alpha(Alpha);
	}
	,facingTransform: function(Sprite,Facing) {
		Sprite.set_facing(Facing);
	}
	,flipXTransform: function(Sprite,FlipX) {
		Sprite.set_flipX(FlipX);
	}
	,flipYTransform: function(Sprite,FlipY) {
		Sprite.set_flipY(FlipY);
	}
	,movesTransform: function(Sprite,Moves) {
		Sprite.set_moves(Moves);
	}
	,pixelPerfectTransform: function(Sprite,PixelPerfect) {
		Sprite.set_pixelPerfectRender(PixelPerfect);
	}
	,gColorTransform: function(Sprite,Color) {
		Sprite.set_color(Color);
	}
	,blendTransform: function(Sprite,Blend) {
		Sprite.set_blend(Blend);
	}
	,immovableTransform: function(Sprite,Immovable) {
		Sprite.set_immovable(Immovable);
	}
	,visibleTransform: function(Sprite,Visible) {
		Sprite.set_visible(Visible);
	}
	,activeTransform: function(Sprite,Active) {
		Sprite.set_active(Active);
	}
	,solidTransform: function(Sprite,Solid) {
		Sprite.set_solid(Solid);
	}
	,aliveTransform: function(Sprite,Alive) {
		Sprite.set_alive(Alive);
	}
	,existsTransform: function(Sprite,Exists) {
		Sprite.set_exists(Exists);
	}
	,cameraTransform: function(Sprite,Camera) {
		Sprite.set_camera(Camera);
	}
	,camerasTransform: function(Sprite,Cameras) {
		Sprite.set_cameras(Cameras);
	}
	,offsetTransform: function(Sprite,Offset) {
		var _this = Sprite.offset;
		_this.set_x(Offset.x);
		_this.set_y(Offset.y);
		if(Offset._weak) {
			Offset.put();
		}
	}
	,originTransform: function(Sprite,Origin) {
		var _this = Sprite.origin;
		_this.set_x(Origin.x);
		_this.set_y(Origin.y);
		if(Origin._weak) {
			Origin.put();
		}
	}
	,scaleTransform: function(Sprite,Scale) {
		var _this = Sprite.scale;
		_this.set_x(Scale.x);
		_this.set_y(Scale.y);
		if(Scale._weak) {
			Scale.put();
		}
	}
	,scrollFactorTransform: function(Sprite,ScrollFactor) {
		var _this = Sprite.scrollFactor;
		_this.set_x(ScrollFactor.x);
		_this.set_y(ScrollFactor.y);
		if(ScrollFactor._weak) {
			ScrollFactor.put();
		}
	}
	,clipRectTransform: function(Sprite,ClipRect) {
		if(ClipRect == null) {
			Sprite.set_clipRect(null);
		} else {
			var X = ClipRect.x - Sprite.x + this.x;
			var Y = ClipRect.y - Sprite.y + this.y;
			var Width = ClipRect.width;
			var Height = ClipRect.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			Sprite.set_clipRect(rect);
		}
	}
	,offsetCallback: function(Offset) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.offsetTransform),Offset);
	}
	,originCallback: function(Origin) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.originTransform),Origin);
	}
	,scaleCallback: function(Scale) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.scaleTransform),Scale);
	}
	,scrollFactorCallback: function(ScrollFactor) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.scrollFactorTransform),ScrollFactor);
	}
	,loadGraphicFromSprite: function(Sprite) {
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Frame == null) {
			Frame = -1;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		return this;
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Color == null) {
			Color = -1;
		}
		return this;
	}
	,set_pixels: function(Value) {
		return Value;
	}
	,set_frame: function(Value) {
		return Value;
	}
	,get_pixels: function() {
		return null;
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
	}
	,resetHelpers: function() {
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
	}
	,set_frames: function(Frames) {
		return Frames;
	}
	,updateColorTransform: function() {
	}
	,__class__: flixel_group_FlxTypedSpriteGroup
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_maxSize:"set_maxSize",get_maxSize:"get_maxSize",get_length:"get_length",get_members:"get_members"})
});
var Alphabet = function(x,y,text,bold,typed,shouldMove,xScale,yScale) {
	if(yScale == null) {
		yScale = 1;
	}
	if(xScale == null) {
		xScale = 1;
	}
	if(shouldMove == null) {
		shouldMove = false;
	}
	if(typed == null) {
		typed = false;
	}
	if(bold == null) {
		bold = false;
	}
	if(text == null) {
		text = "";
	}
	this.personTalking = "gf";
	this.pastY = 0;
	this.pastX = 0;
	this.isBold = false;
	this.splitWords = [];
	this.listOAlphabets = new haxe_ds_List();
	this.lastWasSpace = false;
	this.xPosResetted = false;
	this.yMulti = 1;
	this.widthOfWords = flixel_FlxG.width;
	this._curText = "";
	this._finalText = "";
	this.text = "";
	this.isMenuItem = false;
	this.targetY = 0;
	this.paused = false;
	this.delay = 0.05;
	this.pastX = x;
	this.pastY = y;
	this.xScale = xScale;
	this.yScale = yScale;
	flixel_group_FlxTypedSpriteGroup.call(this,x,y);
	this._finalText = text;
	this.text = text;
	this.isBold = bold;
	if(text != "") {
		if(typed) {
			this.startTypedText();
		} else {
			this.addText();
		}
	}
};
$hxClasses["Alphabet"] = Alphabet;
Alphabet.__name__ = "Alphabet";
Alphabet.__super__ = flixel_group_FlxTypedSpriteGroup;
Alphabet.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	delay: null
	,paused: null
	,targetY: null
	,isMenuItem: null
	,text: null
	,_finalText: null
	,_curText: null
	,widthOfWords: null
	,yMulti: null
	,lastSprite: null
	,xPosResetted: null
	,lastWasSpace: null
	,listOAlphabets: null
	,splitWords: null
	,isBold: null
	,pastX: null
	,pastY: null
	,xScale: null
	,yScale: null
	,reType: function(text,xScale,yScale) {
		if(yScale == null) {
			yScale = 1;
		}
		if(xScale == null) {
			xScale = 1;
		}
		var _g_head = this.listOAlphabets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var i = val;
			this.remove(i);
		}
		this._finalText = text;
		this.text = text;
		this.lastSprite = null;
		this.updateHitbox();
		this.listOAlphabets.clear();
		this.set_x(this.pastX);
		this.set_y(this.pastY);
		this.xScale = xScale;
		this.yScale = yScale;
		this.addText();
	}
	,addText: function() {
		this.doSplitWords();
		var xPos = 0;
		var _g = 0;
		var _g1 = this.splitWords;
		while(_g < _g1.length) {
			var character = _g1[_g];
			++_g;
			if(character == " " || character == "-") {
				this.lastWasSpace = true;
			}
			if(AlphaCharacter.alphabet.indexOf(character.toLowerCase()) != -1) {
				if(this.lastSprite != null) {
					xPos = this.lastSprite.x - this.pastX + this.lastSprite.get_width();
				}
				if(this.lastWasSpace) {
					xPos += 40 * this.xScale;
					this.lastWasSpace = false;
				}
				var letter = new AlphaCharacter(xPos,0);
				letter.scale.set(this.xScale,this.yScale);
				letter.updateHitbox();
				this.listOAlphabets.add(letter);
				if(this.isBold) {
					letter.createBold(character);
				} else {
					letter.createLetter(character);
				}
				this.add(letter);
				this.lastSprite = letter;
			}
		}
	}
	,doSplitWords: function() {
		this.splitWords = this._finalText.split("");
	}
	,personTalking: null
	,startTypedText: function() {
		var _gthis = this;
		this._finalText = this.text;
		this.doSplitWords();
		var loopNum = 0;
		var xPos = 0;
		var curRow = 0;
		new flixel_util_FlxTimer().start(0.05,function(tmr) {
			if(_gthis._finalText.charCodeAt(loopNum) == 10) {
				_gthis.yMulti += 1;
				_gthis.xPosResetted = true;
				xPos = 0;
				curRow += 1;
			}
			if(_gthis.splitWords[loopNum] == " ") {
				_gthis.lastWasSpace = true;
			}
			var isNumber = AlphaCharacter.numbers.indexOf(_gthis.splitWords[loopNum]) != -1;
			var isSymbol = AlphaCharacter.symbols.indexOf(_gthis.splitWords[loopNum]) != -1;
			if(AlphaCharacter.alphabet.indexOf(_gthis.splitWords[loopNum].toLowerCase()) != -1 || isNumber || isSymbol) {
				if(_gthis.lastSprite != null && !_gthis.xPosResetted) {
					_gthis.lastSprite.updateHitbox();
					xPos += _gthis.lastSprite.get_width() + 3;
				} else {
					_gthis.xPosResetted = false;
				}
				if(_gthis.lastWasSpace) {
					xPos += 20;
					_gthis.lastWasSpace = false;
				}
				var letter = new AlphaCharacter(xPos,55 * _gthis.yMulti);
				_gthis.listOAlphabets.add(letter);
				letter.row = curRow;
				if(_gthis.isBold) {
					letter.createBold(_gthis.splitWords[loopNum]);
				} else {
					if(isNumber) {
						letter.createNumber(_gthis.splitWords[loopNum]);
					} else if(isSymbol) {
						letter.createSymbol(_gthis.splitWords[loopNum]);
					} else {
						letter.createLetter(_gthis.splitWords[loopNum]);
					}
					var _g = letter;
					_g.set_x(_g.x + 90);
				}
				var Chance = 40;
				if(Chance == null) {
					Chance = 50;
				}
				if(flixel_FlxG.random.float(0,100) < Chance) {
					var daSound = "GF_";
					flixel_FlxG.sound.play(Paths.sound(daSound + flixel_FlxG.random.int(1,4),null));
				}
				_gthis.add(letter);
				_gthis.lastSprite = letter;
			}
			loopNum += 1;
			tmr.time = flixel_FlxG.random.float(0.04,0.09);
		},this.splitWords.length);
	}
	,update: function(elapsed) {
		if(this.isMenuItem) {
			var scaledY = flixel_math_FlxMath.remapToRange(this.targetY,0,1,0,1.3);
			var a = this.y;
			this.set_y(a + 0.30 * (scaledY * 120 + flixel_FlxG.height * 0.48 - a));
			var a = this.x;
			this.set_x(a + 0.30 * (this.targetY * 20 + 90 - a));
		}
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
	}
	,resizeText: function(xScale,yScale,xStaysCentered,yStaysCentered) {
		if(yStaysCentered == null) {
			yStaysCentered = false;
		}
		if(xStaysCentered == null) {
			xStaysCentered = true;
		}
		var oldMidpoint = this.getMidpoint();
		this.reType(this.text,xScale,yScale);
		if(!(xStaysCentered && yStaysCentered)) {
			if(xStaysCentered) {
				this.moveTextToMidpoint(new flixel_math_FlxPoint(oldMidpoint.x,this.getMidpoint().y));
			}
			if(yStaysCentered) {
				this.moveTextToMidpoint(new flixel_math_FlxPoint(this.getMidpoint().x,oldMidpoint.y));
			}
		} else {
			this.moveTextToMidpoint(new flixel_math_FlxPoint(oldMidpoint.x,oldMidpoint.y));
		}
	}
	,moveTextToMidpoint: function(midpoint) {
		this.set_x(midpoint.x - this.get_width() / 2);
		this.set_y(midpoint.y - this.get_height() / 2);
	}
	,__class__: Alphabet
});
var AlphaCharacter = function(x,y) {
	this.row = 0;
	flixel_FlxSprite.call(this,x,y);
	var library = null;
	var usecahce = flixel_FlxG.save.data.cacheImages;
	usecahce = false;
	var tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "alphabet" + ".png","IMAGE",library),Paths.getPath("images/" + "alphabet" + ".xml","TEXT",library));
	this.set_frames(tex);
	if(flixel_FlxG.save.data.antialiasing) {
		this.set_antialiasing(true);
	}
};
$hxClasses["AlphaCharacter"] = AlphaCharacter;
AlphaCharacter.__name__ = "AlphaCharacter";
AlphaCharacter.__super__ = flixel_FlxSprite;
AlphaCharacter.prototype = $extend(flixel_FlxSprite.prototype,{
	row: null
	,createBold: function(letter) {
		this.animation.addByPrefix(letter,letter.toUpperCase() + " bold",24);
		this.animation.play(letter);
		this.updateHitbox();
	}
	,createLetter: function(letter) {
		var letterCase = "lowercase";
		if(letter.toLowerCase() != letter) {
			letterCase = "capital";
		}
		this.animation.addByPrefix(letter,letter + " " + letterCase,24);
		this.animation.play(letter);
		this.updateHitbox();
		this.set_y(110 - this.get_height());
		var _g = this;
		_g.set_y(_g.y + this.row * 60);
	}
	,createNumber: function(letter) {
		this.animation.addByPrefix(letter,letter,24);
		this.animation.play(letter);
		this.updateHitbox();
	}
	,createSymbol: function(letter) {
		switch(letter) {
		case " ":
			this.animation.addByPrefix(letter,"space",24);
			this.animation.play(letter);
			break;
		case "!":
			this.animation.addByPrefix(letter,"exclamation point",24);
			this.animation.play(letter);
			break;
		case "\"":
			this.animation.addByPrefix(letter,"\"",24);
			this.animation.play(letter);
			var _g = this;
			_g.set_y(_g.y);
			break;
		case "#":
			this.animation.addByPrefix(letter,"#",24);
			this.animation.play(letter);
			break;
		case "$":
			this.animation.addByPrefix(letter,"$",24);
			this.animation.play(letter);
			break;
		case "%":
			this.animation.addByPrefix(letter,"%",24);
			this.animation.play(letter);
			break;
		case "&":
			this.animation.addByPrefix(letter,"&",24);
			this.animation.play(letter);
			break;
		case "'":
			this.animation.addByPrefix(letter,"apostraphie",24);
			this.animation.play(letter);
			var _g = this;
			_g.set_y(_g.y);
			break;
		case "(":
			this.animation.addByPrefix(letter,"(",24);
			this.animation.play(letter);
			break;
		case ")":
			this.animation.addByPrefix(letter,")",24);
			this.animation.play(letter);
			break;
		case "+":
			this.animation.addByPrefix(letter,"+",24);
			this.animation.play(letter);
			break;
		case "-":
			this.animation.addByPrefix(letter,"-",24);
			this.animation.play(letter);
			break;
		case ".":
			this.animation.addByPrefix(letter,"period",24);
			this.animation.play(letter);
			var _g = this;
			_g.set_y(_g.y + 50);
			break;
		case "?":
			this.animation.addByPrefix(letter,"question mark",24);
			this.animation.play(letter);
			break;
		case "@":
			this.animation.addByPrefix(letter,"@",24);
			this.animation.play(letter);
			break;
		case "^":
			this.animation.addByPrefix(letter,"^",24);
			this.animation.play(letter);
			var _g = this;
			_g.set_y(_g.y);
			break;
		case "_":
			this.animation.addByPrefix(letter,"_",24);
			this.animation.play(letter);
			var _g = this;
			_g.set_y(_g.y + 50);
			break;
		}
		this.updateHitbox();
	}
	,__class__: AlphaCharacter
});
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = "lime.app.IModule";
lime_app_IModule.__isInterface__ = true;
lime_app_IModule.prototype = {
	__registerLimeModule: null
	,__unregisterLimeModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = "lime.app.Module";
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__registerLimeModule: function(application) {
	}
	,__unregisterLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = "lime._internal.backend.html5.HTML5Application";
lime__$internal_backend_html5_HTML5Application.prototype = {
	accelerometer: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,gameDeviceCache: null
	,hidden: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g = 0;
			var _g1 = this.parent.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if($window.context != null) {
					$window.onRender.dispatch($window.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			switch(event.type) {
			case "beforeunload":
				break;
			case "blur":
				if(!this.hidden) {
					this.parent.__window.onFocusOut.dispatch();
					this.parent.__window.onDeactivate.dispatch();
					this.hidden = true;
				}
				break;
			case "focus":
				if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			case "visibilitychange":
				if(window.document.hidden) {
					if(!this.hidden) {
						this.parent.__window.onFocusOut.dispatch();
						this.parent.__window.onDeactivate.dispatch();
						this.hidden = true;
					}
				} else if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g3 = data.buttons.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g4 = 0;
				var _g5 = data.axes.length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g6 = 0;
				var _g7 = data.buttons.length;
				while(_g6 < _g7) {
					var i3 = _g6++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g8 = 0;
				var _g9 = data.axes.length;
				while(_g8 < _g9) {
					var i4 = _g8++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = "lime.app.Application";
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	meta: null
	,modules: null
	,onUpdate: null
	,onCreateWindow: null
	,preloader: null
	,window: null
	,windows: null
	,__backend: null
	,__preloader: null
	,__window: null
	,__windowByID: null
	,__windows: null
	,addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,createWindow: function(attributes) {
		var $window = this.__createWindow(attributes);
		this.__addWindow($window);
		return $window;
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,removeModule: function(module) {
		if(module != null) {
			module.__unregisterLimeModule(this);
			HxOverrides.remove(this.modules,module);
		}
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__addWindow: function($window) {
		if($window != null) {
			this.__windows.push($window);
			this.__windowByID.h[$window.id] = $window;
			var _g = $bind(this,this.__onWindowClose);
			var window1 = $window;
			var tmp = function() {
				_g(window1);
			};
			$window.onClose.add(tmp,false,-10000);
			if(this.__window == null) {
				this.__window = $window;
				$window.onActivate.add($bind(this,this.onWindowActivate));
				$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
				$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
				$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
				$window.onDropFile.add($bind(this,this.onWindowDropFile));
				$window.onEnter.add($bind(this,this.onWindowEnter));
				$window.onExpose.add($bind(this,this.onWindowExpose));
				$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
				$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
				$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
				$window.onKeyDown.add($bind(this,this.onKeyDown));
				$window.onKeyUp.add($bind(this,this.onKeyUp));
				$window.onLeave.add($bind(this,this.onWindowLeave));
				$window.onMinimize.add($bind(this,this.onWindowMinimize));
				$window.onMouseDown.add($bind(this,this.onMouseDown));
				$window.onMouseMove.add($bind(this,this.onMouseMove));
				$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
				$window.onMouseUp.add($bind(this,this.onMouseUp));
				$window.onMouseWheel.add($bind(this,this.onMouseWheel));
				$window.onMove.add($bind(this,this.onWindowMove));
				$window.onRender.add($bind(this,this.render));
				$window.onResize.add($bind(this,this.onWindowResize));
				$window.onRestore.add($bind(this,this.onWindowRestore));
				$window.onTextEdit.add($bind(this,this.onTextEdit));
				$window.onTextInput.add($bind(this,this.onTextInput));
				this.onWindowCreate();
			}
			this.onCreateWindow.dispatch($window);
		}
	}
	,__createWindow: function(attributes) {
		var $window = new lime_ui_Window(this,attributes);
		if($window.id == -1) {
			return null;
		}
		return $window;
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function($window) {
		if($window != null && this.__windowByID.h.hasOwnProperty($window.id)) {
			if(this.__window == $window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,$window);
			this.__windowByID.remove($window.id);
			$window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var _g = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var _g = $bind(this,this.onJoystickAxisMove);
		var joystick1 = joystick;
		var tmp = function(axis,value) {
			_g(joystick1,axis,value);
		};
		joystick.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onJoystickButtonDown);
		var joystick2 = joystick;
		var tmp = function(button) {
			_g1(joystick2,button);
		};
		joystick.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onJoystickButtonUp);
		var joystick3 = joystick;
		var tmp = function(button) {
			_g2(joystick3,button);
		};
		joystick.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onJoystickDisconnect);
		var joystick4 = joystick;
		var tmp = function() {
			_g3(joystick4);
		};
		joystick.onDisconnect.add(tmp);
		var _g4 = $bind(this,this.onJoystickHatMove);
		var joystick5 = joystick;
		var tmp = function(hat,position) {
			_g4(joystick5,hat,position);
		};
		joystick.onHatMove.add(tmp);
		var _g5 = $bind(this,this.onJoystickTrackballMove);
		var joystick6 = joystick;
		var tmp = function(trackball,x,y) {
			_g5(joystick6,trackball,x,y);
		};
		joystick.onTrackballMove.add(tmp);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function($window) {
		if(this.__window == $window) {
			this.onWindowClose();
		}
		this.__removeWindow($window);
	}
	,__unregisterLimeModule: function(application) {
		application.onUpdate.remove($bind(this,this.update));
		application.onExit.remove($bind(this,this.__onModuleExit));
		application.onExit.remove($bind(this,this.onModuleExit));
		lime_ui_Gamepad.onConnect.remove($bind(this,this.__onGamepadConnect));
		lime_ui_Joystick.onConnect.remove($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.remove($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.remove($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.remove($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.remove($bind(this,this.onTouchEnd));
		this.onModuleExit(0);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_window: function() {
		return this.__window;
	}
	,get_windows: function() {
		return this.__windows;
	}
	,__class__: lime_app_Application
	,__properties__: {get_windows:"get_windows",get_window:"get_window",get_preloader:"get_preloader"}
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = "ApplicationMain";
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("Kade Engine",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	ManifestResources.init(config);
	app.meta.h["build"] = "1866";
	app.meta.h["company"] = "kadedev";
	app.meta.h["file"] = "Kade Engine";
	app.meta.h["name"] = "Friday Night Funkin': Kade Engine";
	app.meta.h["packageName"] = "com.kadedev.kadeengine";
	app.meta.h["version"] = "0.2.7.1";
	var attributes = { allowHighDPI : false, alwaysOnTop : false, borderless : false, element : null, frameRate : null, height : 720, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "Friday Night Funkin': Kade Engine", width : 1280, x : null, y : null};
	attributes.context = { antialiasing : 0, background : 0, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : false};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var preloader = new openfl_display_Preloader(new flixel_system_FlxPreloader());
	app.__preloader.onProgress.add(function(loaded,total) {
		preloader.update(loaded,total);
	});
	app.__preloader.onComplete.add(function() {
		preloader.start();
	});
	var stage = app.__window.stage;
	var tmp = function() {
		ApplicationMain.start(stage);
	};
	preloader.onComplete.add(tmp);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		app.__preloader.addLibrary(library);
	}
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraryNames;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	try {
		Main.main();
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		stage.__handleError(e);
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = "openfl.events.IEventDispatcher";
openfl_events_IEventDispatcher.__isInterface__ = true;
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = "openfl.events.EventDispatcher";
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		if(!Object.prototype.hasOwnProperty.call(this.__eventMap.h,type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			this.__eventMap.h[type] = list;
			this.__iterators.h[type] = [iterator];
		} else {
			var list = this.__eventMap.h[type];
			var _g = 0;
			var _g1 = list.length;
			while(_g < _g1) {
				var i = _g++;
				if(list[i].match(listener,useCapture)) {
					return;
				}
			}
			var iterators = this.__iterators.h[type];
			var _g = 0;
			while(_g < iterators.length) {
				var iterator = iterators[_g];
				++_g;
				if(iterator.active) {
					iterator.copy();
				}
			}
			this.__addListenerByPriority(list,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this.__eventMap.h,type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var list = this.__eventMap.h[type];
		if(list == null) {
			return;
		}
		var iterators = this.__iterators.h[type];
		var _g = 0;
		var _g1 = list.length;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			var _this = this.__eventMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
			var _this = this.__iterators;
			if(Object.prototype.hasOwnProperty.call(_this.h,type)) {
				delete(_this.h[type]);
			}
		}
		if(!haxe_ds_StringMap.valueIterator(this.__eventMap.h).hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var full = c.__name__;
		var short = full.split(".").pop();
		return "[object " + short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var list = this.__eventMap.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var iterators = this.__iterators.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.start();
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		iterator.stop();
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		} else {
			iterator.reset(list);
		}
		return !event.isDefaultPrevented();
	}
	,__removeAllListeners: function() {
		this.__eventMap = null;
		this.__iterators = null;
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g = 0;
		var _g1 = numElements;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = "openfl.display.IBitmapDrawable";
openfl_display_IBitmapDrawable.__isInterface__ = true;
openfl_display_IBitmapDrawable.prototype = {
	__blendMode: null
	,__drawableType: null
	,__isMask: null
	,__renderable: null
	,__renderTransform: null
	,__transform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__getBounds: null
	,__update: null
	,__updateTransforms: null
	,__mask: null
	,__scrollRect: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_Vector = {};
openfl_Vector.__properties__ = {set_length:"set_length",get_length:"get_length",set_fixed:"set_fixed",get_fixed:"get_fixed"};
openfl_Vector.ofArray_Float = function(array) {
	var vector = openfl_Vector.toFloatVector(null);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		vector.set(i,array[i]);
	}
	return vector;
};
openfl_Vector.ofArray_Int = function(array) {
	var vector = openfl_Vector.toIntVector(null);
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		vector.set(i,array[i]);
	}
	return vector;
};
openfl_Vector.concat = function(this1,vec) {
	return this1.concat(vec);
};
openfl_Vector.copy = function(this1) {
	return this1.copy();
};
openfl_Vector.filter = function(this1,callback) {
	return this1.filter(callback);
};
openfl_Vector.get = function(this1,index) {
	return this1.get(index);
};
openfl_Vector.indexOf = function(this1,searchElement,fromIndex) {
	if(fromIndex == null) {
		fromIndex = 0;
	}
	return this1.indexOf(searchElement,fromIndex);
};
openfl_Vector.insertAt = function(this1,index,element) {
	this1.insertAt(index,element);
};
openfl_Vector.iterator = function(this1) {
	return this1.iterator();
};
openfl_Vector.join = function(this1,sep) {
	if(sep == null) {
		sep = ",";
	}
	return this1.join(sep);
};
openfl_Vector.lastIndexOf = function(this1,searchElement,fromIndex) {
	return this1.lastIndexOf(searchElement,fromIndex);
};
openfl_Vector.pop = function(this1) {
	return this1.pop();
};
openfl_Vector.push = function(this1,value) {
	return this1.push(value);
};
openfl_Vector.removeAt = function(this1,index) {
	return this1.removeAt(index);
};
openfl_Vector.reverse = function(this1) {
	return this1.reverse();
};
openfl_Vector.set = function(this1,index,value) {
	return this1.set(index,value);
};
openfl_Vector.shift = function(this1) {
	return this1.shift();
};
openfl_Vector.slice = function(this1,startIndex,endIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	return this1.slice(startIndex,endIndex);
};
openfl_Vector.sort = function(this1,sortBehavior) {
	this1.sort(sortBehavior);
};
openfl_Vector.splice = function(this1,startIndex,deleteCount) {
	return this1.splice(startIndex,deleteCount);
};
openfl_Vector.toString = function(this1) {
	if(this1 != null) {
		return this1.toString();
	} else {
		return null;
	}
};
openfl_Vector.unshift = function(this1,value) {
	this1.unshift(value);
};
openfl_Vector.convert = function(vec) {
	return vec;
};
openfl_Vector.toBoolVector = function(t,length,fixed,array) {
	return new openfl__$Vector_BoolVector(length,fixed,array);
};
openfl_Vector.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_IntVector(length,fixed,array);
};
openfl_Vector.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FloatVector(length,fixed,array,true);
};
openfl_Vector.toFunctionVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FunctionVector(length,fixed,array);
};
openfl_Vector.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.toNullVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
openfl_Vector.fromBoolVector = function(vector) {
	return vector;
};
openfl_Vector.fromIntVector = function(vector) {
	return vector;
};
openfl_Vector.fromFloatVector = function(vector) {
	return vector;
};
openfl_Vector.fromFunctionVector = function(vector) {
	return vector;
};
openfl_Vector.fromObjectVector = function(vector) {
	return vector;
};
openfl_Vector.get_fixed = function(this1) {
	return this1.fixed;
};
openfl_Vector.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
openfl_Vector.get_length = function(this1) {
	return this1.get_length();
};
openfl_Vector.set_length = function(this1,value) {
	return this1.set_length(value);
};
var lime_utils_ObjectPool = function(create,clean,size) {
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new haxe_ds_List();
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = "lime.utils.ObjectPool";
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,add: function(object) {
		if(!this.__pool.exists(object)) {
			this.__pool.set(object,false);
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		}
	}
	,clean: function(object) {
	}
	,clear: function() {
		this.__pool = new haxe_ds_ObjectMap();
		this.activeObjects = 0;
		this.inactiveObjects = 0;
		this.__inactiveObject0 = null;
		this.__inactiveObject1 = null;
		this.__inactiveObjectList.clear();
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,remove: function(object) {
		if(this.__pool.exists(object)) {
			this.__pool.remove(object);
			if(this.__inactiveObject0 == object) {
				this.__inactiveObject0 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObject1 == object) {
				this.__inactiveObject1 = null;
				this.inactiveObjects--;
			} else if(this.__inactiveObjectList.remove(object)) {
				this.inactiveObjects--;
			} else {
				this.activeObjects--;
			}
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,get_size: function() {
		return this.__size;
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g = 0;
				var _g1 = value - current;
				while(_g < _g1) {
					var i = _g++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size",get_size:"get_size"}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.count = null;
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,toString: function() {
		var s_b = "";
		s_b += "{";
		var it = this.keys();
		var i = it;
		while(i.hasNext()) {
			var i1 = i.next();
			s_b += Std.string(Std.string(i1));
			s_b += " => ";
			s_b += Std.string(Std.string(this.h[i1.__id__]));
			if(it.hasNext()) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__drawableType = 1;
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
		this.stage.addChild(this);
	}
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = "openfl.display.DisplayObject";
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__initStage = null;
openfl_display_DisplayObject.__supportDOM = null;
openfl_display_DisplayObject.__calculateAbsoluteTransform = function(local,parentTransform,target) {
	target.a = local.a * parentTransform.a + local.b * parentTransform.c;
	target.b = local.a * parentTransform.b + local.b * parentTransform.d;
	target.c = local.c * parentTransform.a + local.d * parentTransform.c;
	target.d = local.c * parentTransform.b + local.d * parentTransform.d;
	target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
	target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
};
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapData2: null
	,__cacheBitmapData3: null
	,__cacheBitmapMatrix: null
	,__cacheBitmapRenderer: null
	,__cairo: null
	,__children: null
	,__customRenderClear: null
	,__customRenderEvent: null
	,__drawableType: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isCacheBitmapRender: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scale9Grid: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__shader: null
	,__tempPoint: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldShader: null
	,__worldScale9Grid: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
				openfl_display_DisplayObject.__broadcastEvents.h[type] = [];
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.h[type];
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(this.__customRenderEvent == null) {
				this.__customRenderEvent = new openfl_events_RenderEvent(null);
				this.__customRenderEvent.objectColorTransform = new openfl_geom_ColorTransform();
				this.__customRenderEvent.objectMatrix = new openfl_geom_Matrix();
				this.__customRenderClear = true;
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(((event) instanceof openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this.b + mouseEvent.localY * _this.d + _this.ty;
		} else if(((event) instanceof openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this.a + touchEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this.b + touchEvent.localY * _this.d + _this.ty;
		}
		event.target = this;
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,false,this);
		} else {
			return false;
		}
	}
	,invalidate: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.h[type],this);
				}
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(!this.hasEventListener("clearDOM") && !this.hasEventListener("renderCairo") && !this.hasEventListener("renderCanvas") && !this.hasEventListener("renderDOM") && !this.hasEventListener("renderOpenGL")) {
				this.__customRenderEvent = null;
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__cleanup();
			this.__cacheBitmap = null;
		}
		if(this.__cacheBitmapData != null) {
			this.__cacheBitmapData.dispose();
			this.__cacheBitmapData = null;
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var parent = event.bubbles ? this.parent : null;
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(parent != null && parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g = 0;
				var _g1 = i;
				while(_g < _g1) {
					var j = _g++;
					stack.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getRenderBounds(rect,matrix);
		if(this.__filters != null) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(r.x,r.y,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.x = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.y = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.__visible || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		if(this.__graphics != null) {
			this.__graphics.__readGraphicsData(graphicsData);
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__stopAllMovieClips: function() {
	}
	,__update: function(transformOnly,updateChildren) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.__visible && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		this.__worldTransformInvalid = false;
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.__visible;
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
					this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				} else {
					this.__worldColorTransform.__copyFrom(renderParent.__worldColorTransform);
				}
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__worldBlendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
				if(this.__shader == null) {
					this.__worldShader = renderParent.__shader;
				} else {
					this.__worldShader = this.__shader;
				}
				if(this.__scale9Grid == null) {
					this.__worldScale9Grid = renderParent.__scale9Grid;
				} else {
					this.__worldScale9Grid = this.__scale9Grid;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.__visible;
					this.__worldVisible = this.__visible;
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
				} else {
					this.__worldColorTransform.__identity();
				}
				this.__worldBlendMode = this.__blendMode;
				this.__worldShader = this.__shader;
				this.__worldScale9Grid = this.__scale9Grid;
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var target = this.__worldTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			var parentTransform = renderParent.__renderTransform;
			var target = this.__renderTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value < 0.0) {
			value = 0.0;
		}
		if(value != this.__alpha && !this.get_cacheAsBitmap()) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_blendMode: function() {
		return this.__blendMode;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		if(value != this.__cacheAsBitmap) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__cacheAsBitmap = value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return this.__cacheAsBitmapMatrix = value != null ? value.clone() : value;
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else if(this.__filters != null) {
			this.__filters = null;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl_utils__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl_utils__$internal_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scale9Grid: function() {
		if(this.__scale9Grid == null) {
			return null;
		}
		return this.__scale9Grid.clone();
	}
	,set_scale9Grid: function(value) {
		if(value == null && this.__scale9Grid == null) {
			return value;
		}
		if(value != null && this.__scale9Grid != null && this.__scale9Grid.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scale9Grid == null) {
				this.__scale9Grid = new openfl_geom_Rectangle();
			}
			this.__scale9Grid.copyFrom(value);
		} else {
			this.__scale9Grid = null;
		}
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value == null && this.__scrollRect == null) {
			return value;
		}
		if(value != null && this.__scrollRect != null && this.__scrollRect.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scrollRect == null) {
				this.__scrollRect = new openfl_geom_Rectangle();
			}
			this.__scrollRect.copyFrom(value);
		} else {
			this.__scrollRect = null;
		}
		this.__setTransformDirty();
		if(openfl_display_DisplayObject.__supportDOM) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,set_shader: function(value) {
		this.__shader = value;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw haxe_Exception.thrown(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		if(!this.__objectTransform.__colorTransform.__equals(value.__colorTransform,true) || !this.get_cacheAsBitmap() && this.__objectTransform.__colorTransform.alphaMultiplier != value.__colorTransform.alphaMultiplier) {
			this.__objectTransform.__colorTransform.__copyFrom(value.get_colorTransform());
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_shader:"set_shader",get_shader:"get_shader",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_scale9Grid:"set_scale9Grid",get_scale9Grid:"get_scale9Grid",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",get_blendMode:"get_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = "openfl.display.InteractiveObject";
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,__tabEnabled: null
	,__tabIndex: null
	,requestSoftKeyboard: function() {
		openfl_utils__$internal_Lib.notImplemented({ fileName : "openfl/display/InteractiveObject.hx", lineNumber : 1251, className : "openfl.display.InteractiveObject", methodName : "requestSoftKeyboard"});
		return false;
	}
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__tabTest: function(stack) {
		if(this.get_tabEnabled()) {
			stack.push(this);
		}
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		if(this.__tabEnabled != value) {
			this.__tabEnabled = value;
			this.dispatchEvent(new openfl_events_Event("tabEnabledChange",true,false));
		}
		return this.__tabEnabled;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,set_tabIndex: function(value) {
		if(this.__tabIndex != value) {
			if(value < -1) {
				throw haxe_Exception.thrown(new openfl_errors_RangeError("Parameter tabIndex must be a non-negative number; got " + value));
			}
			this.__tabIndex = value;
			this.dispatchEvent(new openfl_events_Event("tabIndexChange",true,false));
		}
		return this.__tabIndex;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabIndex:"set_tabIndex",get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__tabChildren = true;
	this.__children = [];
	this.__removedChildren = openfl_Vector.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = "openfl.display.DisplayObjectContainer";
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,__removedChildren: null
	,__tabChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw haxe_Exception.thrown(error);
		} else if(child.stage == child) {
			var error = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error.errorID = 3783;
			throw haxe_Exception.thrown(error);
		}
		if(index > this.__children.length || index < 0) {
			throw haxe_Exception.thrown("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				child.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("added");
			event.bubbles = true;
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				event = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
			}
		}
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g = 0;
		var _g1 = this.__children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw haxe_Exception.thrown(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,stopAllMovieClips: function() {
		this.__stopAllMovieClips();
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__cleanup: function() {
		openfl_display_InteractiveObject.prototype.__cleanup.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__cleanup();
		}
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__cleanupRemovedChildren: function() {
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__scrollRect != null) {
			return;
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			var childRect = openfl_geom_Rectangle.__pool.get();
			child.__getFilterBounds(childRect,childWorldTransform);
			rect.__expand(childRect.x,childRect.y,childRect.width,childRect.height);
			openfl_geom_Rectangle.__pool.release(childRect);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getRenderBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			var hitTest = false;
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i])) {
				hitTest = true;
				if(stack == null) {
					break;
				}
			}
			return hitTest;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__readGraphicsData: function(graphicsData,recurse) {
		openfl_display_InteractiveObject.prototype.__readGraphicsData.call(this,graphicsData,recurse);
		if(recurse) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__readGraphicsData(graphicsData,recurse);
			}
		}
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__stopAllMovieClips: function() {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__stopAllMovieClips();
		}
	}
	,__tabTest: function(stack) {
		openfl_display_InteractiveObject.prototype.__tabTest.call(this,stack);
		if(!this.get_tabChildren()) {
			return;
		}
		var interactive = false;
		var interactiveObject = null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			interactive = child.__getInteractive(null);
			if(interactive) {
				interactiveObject = child;
				interactiveObject.__tabTest(stack);
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,get_tabChildren: function() {
		return this.__tabChildren;
	}
	,set_tabChildren: function(value) {
		if(this.__tabChildren != value) {
			this.__tabChildren = value;
			this.dispatchEvent(new openfl_events_Event("tabChildrenChange",true,false));
		}
		return this.__tabChildren;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_tabChildren:"set_tabChildren",get_tabChildren:"get_tabChildren",get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 4;
	this.__buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = "openfl.display.Sprite";
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,__buttonMode: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.__buttonMode && this.useHandCursor) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			if(stack != null) {
				return interactiveOnly;
			} else {
				return true;
			}
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(stack != null && hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_buttonMode: function() {
		return this.__buttonMode;
	}
	,set_buttonMode: function(value) {
		return this.__buttonMode = value;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics",set_buttonMode:"set_buttonMode",get_buttonMode:"get_buttonMode"})
});
var Main = function() {
	this.startFullscreen = false;
	this.skipSplash = true;
	this.framerate = 120;
	this.zoom = -1;
	this.initialState = TitleState;
	this.gameHeight = 720;
	this.gameWidth = 1280;
	openfl_display_Sprite.call(this);
	if(this.stage != null) {
		this.init();
	} else {
		this.addEventListener("addedToStage",$bind(this,this.init));
	}
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	openfl_Lib.get_current().addChild(new Main());
};
Main.webmHandler = null;
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	gameWidth: null
	,gameHeight: null
	,initialState: null
	,zoom: null
	,framerate: null
	,skipSplash: null
	,startFullscreen: null
	,init: function(E) {
		if(this.hasEventListener("addedToStage")) {
			this.removeEventListener("addedToStage",$bind(this,this.init));
		}
		this.setupGame();
	}
	,setupGame: function() {
		var stageWidth = openfl_Lib.get_current().stage.stageWidth;
		var stageHeight = openfl_Lib.get_current().stage.stageHeight;
		if(this.zoom == -1) {
			var ratioX = stageWidth / this.gameWidth;
			var ratioY = stageHeight / this.gameHeight;
			this.zoom = Math.min(ratioX,ratioY);
			this.gameWidth = Math.ceil(stageWidth / this.zoom);
			this.gameHeight = Math.ceil(stageHeight / this.zoom);
		}
		this.framerate = 60;
		this.game = new flixel_FlxGame(this.gameWidth,this.gameHeight,this.initialState,this.zoom,this.framerate,this.framerate,this.skipSplash,this.startFullscreen);
		this.addChild(this.game);
		this.fpsCounter = new openfl_display_FPS(10,3,16777215);
		this.addChild(this.fpsCounter);
		this.toggleFPS(flixel_FlxG.save.data.fps);
	}
	,game: null
	,fpsCounter: null
	,toggleFPS: function(fpsEnabled) {
		this.fpsCounter.set_visible(fpsEnabled);
	}
	,changeFPSColor: function(color) {
		this.fpsCounter.set_textColor(color);
	}
	,setFPSCap: function(cap) {
		openfl_Lib.get_current().stage.set_frameRate(cap);
	}
	,getFPSCap: function() {
		return openfl_Lib.get_current().stage.get_frameRate();
	}
	,getFPS: function() {
		return this.fpsCounter.currentFPS;
	}
	,__class__: Main
});
var DocumentClass = function(current) {
	current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = "DocumentClass";
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var BackgroundDancer = function(x,y) {
	this.danceDir = false;
	flixel_FlxSprite.call(this,x,y);
	var usecahce = flixel_FlxG.save.data.cacheImages;
	usecahce = false;
	this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "limo/limoDancer" + ".png","IMAGE","week4"),Paths.getPath("images/" + "limo/limoDancer" + ".xml","TEXT","week4")));
	this.animation.addByIndices("danceLeft","bg dancer sketch PINK",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
	this.animation.addByIndices("danceRight","bg dancer sketch PINK",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
	this.animation.play("danceLeft");
	this.set_antialiasing(flixel_FlxG.save.data.antialiasing);
};
$hxClasses["BackgroundDancer"] = BackgroundDancer;
BackgroundDancer.__name__ = "BackgroundDancer";
BackgroundDancer.__super__ = flixel_FlxSprite;
BackgroundDancer.prototype = $extend(flixel_FlxSprite.prototype,{
	danceDir: null
	,dance: function() {
		this.danceDir = !this.danceDir;
		if(this.danceDir) {
			this.animation.play("danceRight",true);
		} else {
			this.animation.play("danceLeft",true);
		}
	}
	,__class__: BackgroundDancer
});
var BackgroundGirls = function(x,y) {
	this.danceDir = false;
	flixel_FlxSprite.call(this,x,y);
	var usecahce = flixel_FlxG.save.data.cacheImages;
	usecahce = false;
	this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/bgFreaks" + ".png","IMAGE","week6"),Paths.getPath("images/" + "weeb/bgFreaks" + ".xml","TEXT","week6")));
	this.animation.addByIndices("danceLeft","BG girls group",CoolUtil.numberArray(14),"",24,false);
	this.animation.addByIndices("danceRight","BG girls group",CoolUtil.numberArray(30,15),"",24,false);
	this.animation.play("danceLeft");
};
$hxClasses["BackgroundGirls"] = BackgroundGirls;
BackgroundGirls.__name__ = "BackgroundGirls";
BackgroundGirls.__super__ = flixel_FlxSprite;
BackgroundGirls.prototype = $extend(flixel_FlxSprite.prototype,{
	danceDir: null
	,getScared: function() {
		this.animation.addByIndices("danceLeft","BG fangirls dissuaded",CoolUtil.numberArray(14),"",24,false);
		this.animation.addByIndices("danceRight","BG fangirls dissuaded",CoolUtil.numberArray(30,15),"",24,false);
		this.dance();
	}
	,dance: function() {
		this.danceDir = !this.danceDir;
		if(this.danceDir) {
			this.animation.play("danceRight",true);
		} else {
			this.animation.play("danceLeft",true);
		}
	}
	,__class__: BackgroundGirls
});
var Character = function(x,y,character,isPlayer) {
	if(isPlayer == null) {
		isPlayer = false;
	}
	if(character == null) {
		character = "bf";
	}
	this.danced = false;
	this.holdTimer = 0;
	this.curCharacter = "bf";
	this.isPlayer = false;
	this.debugMode = false;
	flixel_FlxSprite.call(this,x,y);
	this.animOffsets = new haxe_ds_StringMap();
	this.curCharacter = character;
	this.isPlayer = isPlayer;
	var tex;
	this.set_antialiasing(flixel_FlxG.save.data.antialiasing);
	switch(this.curCharacter) {
	case "bf":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		var tex1 = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "BOYFRIEND") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "BOYFRIEND" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "BOYFRIEND" + ".png","IMAGE","shared"),Paths.getPath("images/" + "BOYFRIEND" + ".xml","TEXT","shared"));
		this.set_frames(tex1);
		haxe_Log.trace(tex1.frames.length,{ fileName : "source/Character.hx", lineNumber : 213, className : "Character", methodName : "new"});
		this.animation.addByPrefix("idle","BF idle dance",24,false);
		this.animation.addByPrefix("singUP","BF NOTE UP0",24,false);
		this.animation.addByPrefix("singLEFT","BF NOTE LEFT0",24,false);
		this.animation.addByPrefix("singRIGHT","BF NOTE RIGHT0",24,false);
		this.animation.addByPrefix("singDOWN","BF NOTE DOWN0",24,false);
		this.animation.addByPrefix("singUPmiss","BF NOTE UP MISS",24,false);
		this.animation.addByPrefix("singLEFTmiss","BF NOTE LEFT MISS",24,false);
		this.animation.addByPrefix("singRIGHTmiss","BF NOTE RIGHT MISS",24,false);
		this.animation.addByPrefix("singDOWNmiss","BF NOTE DOWN MISS",24,false);
		this.animation.addByPrefix("hey","BF HEY",24,false);
		this.animation.addByPrefix("firstDeath","BF dies",24,false);
		this.animation.addByPrefix("deathLoop","BF Dead Loop",24,false);
		this.animation.addByPrefix("deathConfirm","BF Dead confirm",24,false);
		this.animation.addByPrefix("scared","BF idle shaking",24);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "bf-car":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		var tex1 = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "bfCar") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "bfCar" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "bfCar" + ".png","IMAGE","shared"),Paths.getPath("images/" + "bfCar" + ".xml","TEXT","shared"));
		this.set_frames(tex1);
		this.animation.addByPrefix("idle","BF idle dance",24,false);
		this.animation.addByPrefix("singUP","BF NOTE UP0",24,false);
		this.animation.addByPrefix("singLEFT","BF NOTE LEFT0",24,false);
		this.animation.addByPrefix("singRIGHT","BF NOTE RIGHT0",24,false);
		this.animation.addByPrefix("singDOWN","BF NOTE DOWN0",24,false);
		this.animation.addByPrefix("singUPmiss","BF NOTE UP MISS",24,false);
		this.animation.addByPrefix("singLEFTmiss","BF NOTE LEFT MISS",24,false);
		this.animation.addByPrefix("singRIGHTmiss","BF NOTE RIGHT MISS",24,false);
		this.animation.addByPrefix("singDOWNmiss","BF NOTE DOWN MISS",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "bf-christmas":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		var tex1 = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "bfChristmas") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "bfChristmas" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "bfChristmas" + ".png","IMAGE","shared"),Paths.getPath("images/" + "bfChristmas" + ".xml","TEXT","shared"));
		this.set_frames(tex1);
		this.animation.addByPrefix("idle","BF idle dance",24,false);
		this.animation.addByPrefix("singUP","BF NOTE UP0",24,false);
		this.animation.addByPrefix("singLEFT","BF NOTE LEFT0",24,false);
		this.animation.addByPrefix("singRIGHT","BF NOTE RIGHT0",24,false);
		this.animation.addByPrefix("singDOWN","BF NOTE DOWN0",24,false);
		this.animation.addByPrefix("singUPmiss","BF NOTE UP MISS",24,false);
		this.animation.addByPrefix("singLEFTmiss","BF NOTE LEFT MISS",24,false);
		this.animation.addByPrefix("singRIGHTmiss","BF NOTE RIGHT MISS",24,false);
		this.animation.addByPrefix("singDOWNmiss","BF NOTE DOWN MISS",24,false);
		this.animation.addByPrefix("hey","BF HEY",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "bf-pixel":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.set_frames(isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "bfPixel") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "bfPixel" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "bfPixel" + ".png","IMAGE","shared"),Paths.getPath("images/" + "bfPixel" + ".xml","TEXT","shared")));
		this.animation.addByPrefix("idle","BF IDLE",24,false);
		this.animation.addByPrefix("singUP","BF UP NOTE",24,false);
		this.animation.addByPrefix("singLEFT","BF LEFT NOTE",24,false);
		this.animation.addByPrefix("singRIGHT","BF RIGHT NOTE",24,false);
		this.animation.addByPrefix("singDOWN","BF DOWN NOTE",24,false);
		this.animation.addByPrefix("singUPmiss","BF UP MISS",24,false);
		this.animation.addByPrefix("singLEFTmiss","BF LEFT MISS",24,false);
		this.animation.addByPrefix("singRIGHTmiss","BF RIGHT MISS",24,false);
		this.animation.addByPrefix("singDOWNmiss","BF DOWN MISS",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.playAnim("idle");
		var _g = this;
		_g.set_width(_g.get_width() - 100);
		var _g = this;
		_g.set_height(_g.get_height() - 100);
		this.set_antialiasing(false);
		this.set_flipX(true);
		break;
	case "bf-pixel-dead":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.set_frames(isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "bfPixelsDEAD") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "bfPixelsDEAD" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "bfPixelsDEAD" + ".png","IMAGE","shared"),Paths.getPath("images/" + "bfPixelsDEAD" + ".xml","TEXT","shared")));
		this.animation.addByPrefix("singUP","BF Dies pixel",24,false);
		this.animation.addByPrefix("firstDeath","BF Dies pixel",24,false);
		this.animation.addByPrefix("deathLoop","Retry Loop",24,false);
		this.animation.addByPrefix("deathConfirm","RETRY CONFIRM",24,false);
		this.animation.play("firstDeath");
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("firstDeath");
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		this.set_flipX(true);
		break;
	case "dad":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		tex = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "DADDY_DEAREST") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "DADDY_DEAREST" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "DADDY_DEAREST" + ".png","IMAGE","shared"),Paths.getPath("images/" + "DADDY_DEAREST" + ".xml","TEXT","shared"));
		this.set_frames(tex);
		this.animation.addByPrefix("idle","Dad idle dance",24,false);
		this.animation.addByPrefix("singUP","Dad Sing Note UP",24,false);
		this.animation.addByPrefix("singRIGHT","Dad Sing Note RIGHT",24,false);
		this.animation.addByPrefix("singDOWN","Dad Sing Note DOWN",24,false);
		this.animation.addByPrefix("singLEFT","Dad Sing Note LEFT",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "gf":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		tex = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "GF_assets") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "GF_assets" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "GF_assets" + ".png","IMAGE","shared"),Paths.getPath("images/" + "GF_assets" + ".xml","TEXT","shared"));
		this.set_frames(tex);
		this.animation.addByPrefix("cheer","GF Cheer",24,false);
		this.animation.addByPrefix("singLEFT","GF left note",24,false);
		this.animation.addByPrefix("singRIGHT","GF Right Note",24,false);
		this.animation.addByPrefix("singUP","GF Up Note",24,false);
		this.animation.addByPrefix("singDOWN","GF Down Note",24,false);
		this.animation.addByIndices("sad","gf sad",[0,1,2,3,4,5,6,7,8,9,10,11,12],"",24,false);
		this.animation.addByIndices("danceLeft","GF Dancing Beat",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF Dancing Beat",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.animation.addByIndices("hairBlow","GF Dancing Beat Hair blowing",[0,1,2,3],"",24);
		this.animation.addByIndices("hairFall","GF Dancing Beat Hair Landing",[0,1,2,3,4,5,6,7,8,9,10,11],"",24,false);
		this.animation.addByPrefix("scared","GF FEAR",24);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	case "gf-car":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		tex = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "gfCar") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "gfCar" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "gfCar" + ".png","IMAGE","shared"),Paths.getPath("images/" + "gfCar" + ".xml","TEXT","shared"));
		this.set_frames(tex);
		this.animation.addByIndices("singUP","GF Dancing Beat Hair blowing CAR",[0],"",24,false);
		this.animation.addByIndices("danceLeft","GF Dancing Beat Hair blowing CAR",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF Dancing Beat Hair blowing CAR",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	case "gf-christmas":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		tex = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "gfChristmas") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "gfChristmas" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "gfChristmas" + ".png","IMAGE","shared"),Paths.getPath("images/" + "gfChristmas" + ".xml","TEXT","shared"));
		this.set_frames(tex);
		this.animation.addByPrefix("cheer","GF Cheer",24,false);
		this.animation.addByPrefix("singLEFT","GF left note",24,false);
		this.animation.addByPrefix("singRIGHT","GF Right Note",24,false);
		this.animation.addByPrefix("singUP","GF Up Note",24,false);
		this.animation.addByPrefix("singDOWN","GF Down Note",24,false);
		this.animation.addByIndices("sad","gf sad",[0,1,2,3,4,5,6,7,8,9,10,11,12],"",24,false);
		this.animation.addByIndices("danceLeft","GF Dancing Beat",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF Dancing Beat",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.animation.addByIndices("hairBlow","GF Dancing Beat Hair blowing",[0,1,2,3],"",24);
		this.animation.addByIndices("hairFall","GF Dancing Beat Hair Landing",[0,1,2,3,4,5,6,7,8,9,10,11],"",24,false);
		this.animation.addByPrefix("scared","GF FEAR",24);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	case "gf-pixel":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		tex = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "gfPixel") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "gfPixel" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "gfPixel" + ".png","IMAGE","shared"),Paths.getPath("images/" + "gfPixel" + ".xml","TEXT","shared"));
		this.set_frames(tex);
		this.animation.addByIndices("singUP","GF IDLE",[2],"",24,false);
		this.animation.addByIndices("danceLeft","GF IDLE",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.animation.addByIndices("danceRight","GF IDLE",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		this.setGraphicSize(this.get_width() * PlayState.daPixelZoom | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		break;
	case "mom":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		tex = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "Mom_Assets") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "Mom_Assets" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "Mom_Assets" + ".png","IMAGE","shared"),Paths.getPath("images/" + "Mom_Assets" + ".xml","TEXT","shared"));
		this.set_frames(tex);
		this.animation.addByPrefix("idle","Mom Idle",24,false);
		this.animation.addByPrefix("singUP","Mom Up Pose",24,false);
		this.animation.addByPrefix("singDOWN","MOM DOWN POSE",24,false);
		this.animation.addByPrefix("singLEFT","Mom Left Pose",24,false);
		this.animation.addByPrefix("singRIGHT","Mom Pose Left",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "mom-car":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		tex = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "momCar") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "momCar" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "momCar" + ".png","IMAGE","shared"),Paths.getPath("images/" + "momCar" + ".xml","TEXT","shared"));
		this.set_frames(tex);
		this.animation.addByPrefix("idle","Mom Idle",24,false);
		this.animation.addByPrefix("singUP","Mom Up Pose",24,false);
		this.animation.addByPrefix("singDOWN","MOM DOWN POSE",24,false);
		this.animation.addByPrefix("singLEFT","Mom Left Pose",24,false);
		this.animation.addByPrefix("singRIGHT","Mom Pose Left",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "monster":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		tex = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "Monster_Assets") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "Monster_Assets" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "Monster_Assets" + ".png","IMAGE","shared"),Paths.getPath("images/" + "Monster_Assets" + ".xml","TEXT","shared"));
		this.set_frames(tex);
		this.animation.addByPrefix("idle","monster idle",24,false);
		this.animation.addByPrefix("singUP","monster up note",24,false);
		this.animation.addByPrefix("singDOWN","monster down",24,false);
		this.animation.addByPrefix("singLEFT","Monster left note",24,false);
		this.animation.addByPrefix("singRIGHT","Monster Right note",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "monster-christmas":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		tex = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "monsterChristmas") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "monsterChristmas" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "monsterChristmas" + ".png","IMAGE","shared"),Paths.getPath("images/" + "monsterChristmas" + ".xml","TEXT","shared"));
		this.set_frames(tex);
		this.animation.addByPrefix("idle","monster idle",24,false);
		this.animation.addByPrefix("singUP","monster up note",24,false);
		this.animation.addByPrefix("singDOWN","monster down",24,false);
		this.animation.addByPrefix("singLEFT","Monster left note",24,false);
		this.animation.addByPrefix("singRIGHT","Monster Right note",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "parents-christmas":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.set_frames(isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "mom_dad_christmas_assets") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "mom_dad_christmas_assets" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "mom_dad_christmas_assets" + ".png","IMAGE","shared"),Paths.getPath("images/" + "mom_dad_christmas_assets" + ".xml","TEXT","shared")));
		this.animation.addByPrefix("idle","Parent Christmas Idle",24,false);
		this.animation.addByPrefix("singUP","Parent Up Note Dad",24,false);
		this.animation.addByPrefix("singDOWN","Parent Down Note Dad",24,false);
		this.animation.addByPrefix("singLEFT","Parent Left Note Dad",24,false);
		this.animation.addByPrefix("singRIGHT","Parent Right Note Dad",24,false);
		this.animation.addByPrefix("singUP-alt","Parent Up Note Mom",24,false);
		this.animation.addByPrefix("singDOWN-alt","Parent Down Note Mom",24,false);
		this.animation.addByPrefix("singLEFT-alt","Parent Left Note Mom",24,false);
		this.animation.addByPrefix("singRIGHT-alt","Parent Right Note Mom",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		break;
	case "pico":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		tex = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "Pico_FNF_assetss") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "Pico_FNF_assetss" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "Pico_FNF_assetss" + ".png","IMAGE","shared"),Paths.getPath("images/" + "Pico_FNF_assetss" + ".xml","TEXT","shared"));
		this.set_frames(tex);
		this.animation.addByPrefix("idle","Pico Idle Dance",24,false);
		this.animation.addByPrefix("singUP","pico Up note0",24,false);
		this.animation.addByPrefix("singDOWN","Pico Down Note0",24,false);
		if(isPlayer) {
			this.animation.addByPrefix("singLEFT","Pico NOTE LEFT0",24,false);
			this.animation.addByPrefix("singRIGHT","Pico Note Right0",24,false);
			this.animation.addByPrefix("singRIGHTmiss","Pico Note Right Miss",24,false);
			this.animation.addByPrefix("singLEFTmiss","Pico NOTE LEFT miss",24,false);
		} else {
			this.animation.addByPrefix("singLEFT","Pico Note Right0",24,false);
			this.animation.addByPrefix("singRIGHT","Pico NOTE LEFT0",24,false);
			this.animation.addByPrefix("singRIGHTmiss","Pico NOTE LEFT miss",24,false);
			this.animation.addByPrefix("singLEFTmiss","Pico Note Right Miss",24,false);
		}
		this.animation.addByPrefix("singUPmiss","pico Up note miss",24);
		this.animation.addByPrefix("singDOWNmiss","Pico Down Note MISS",24);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.set_flipX(true);
		break;
	case "senpai":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.set_frames(isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "senpai") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "senpai" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "senpai" + ".png","IMAGE","shared"),Paths.getPath("images/" + "senpai" + ".xml","TEXT","shared")));
		this.animation.addByPrefix("idle","Senpai Idle",24,false);
		this.animation.addByPrefix("singUP","SENPAI UP NOTE",24,false);
		this.animation.addByPrefix("singLEFT","SENPAI LEFT NOTE",24,false);
		this.animation.addByPrefix("singRIGHT","SENPAI RIGHT NOTE",24,false);
		this.animation.addByPrefix("singDOWN","SENPAI DOWN NOTE",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		break;
	case "senpai-angry":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.set_frames(isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "senpai") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "senpai" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "senpai" + ".png","IMAGE","shared"),Paths.getPath("images/" + "senpai" + ".xml","TEXT","shared")));
		this.animation.addByPrefix("idle","Angry Senpai Idle",24,false);
		this.animation.addByPrefix("singUP","Angry Senpai UP NOTE",24,false);
		this.animation.addByPrefix("singLEFT","Angry Senpai LEFT NOTE",24,false);
		this.animation.addByPrefix("singRIGHT","Angry Senpai RIGHT NOTE",24,false);
		this.animation.addByPrefix("singDOWN","Angry Senpai DOWN NOTE",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("idle");
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.set_antialiasing(false);
		break;
	case "spirit":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.set_frames(isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(Paths.getPath("images/" + ("characters/" + "spirit") + ".png","IMAGE",null),Paths.getPath("images/characters/" + "spirit" + ".txt","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(Paths.getPath("images/" + "spirit" + ".png","IMAGE","shared"),Paths.getPath("images/" + "spirit" + ".txt","TEXT","shared")));
		this.animation.addByPrefix("idle","idle spirit_",24,false);
		this.animation.addByPrefix("singUP","up_",24,false);
		this.animation.addByPrefix("singRIGHT","right_",24,false);
		this.animation.addByPrefix("singLEFT","left_",24,false);
		this.animation.addByPrefix("singDOWN","spirit down_",24,false);
		this.loadOffsetFile(this.curCharacter);
		this.setGraphicSize(this.get_width() * 6 | 0);
		this.updateHitbox();
		this.playAnim("idle");
		this.set_antialiasing(false);
		break;
	case "spooky":
		var isCharacter = true;
		if(isCharacter == null) {
			isCharacter = false;
		}
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		tex = isCharacter ? usecahce ? null : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + "spooky_kids_assets") + ".png","IMAGE","shared"),Paths.getPath("images/characters/" + "spooky_kids_assets" + ".xml","TEXT","shared")) : flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "spooky_kids_assets" + ".png","IMAGE","shared"),Paths.getPath("images/" + "spooky_kids_assets" + ".xml","TEXT","shared"));
		this.set_frames(tex);
		this.animation.addByPrefix("singUP","spooky UP NOTE",24,false);
		this.animation.addByPrefix("singDOWN","spooky DOWN note",24,false);
		this.animation.addByPrefix("singLEFT","note sing left",24,false);
		this.animation.addByPrefix("singRIGHT","spooky sing right",24,false);
		this.animation.addByIndices("danceLeft","spooky dance idle",[0,2,6],"",12,false);
		this.animation.addByIndices("danceRight","spooky dance idle",[8,10,12,14],"",12,false);
		this.loadOffsetFile(this.curCharacter);
		this.playAnim("danceRight");
		break;
	}
	this.dance();
	if(isPlayer) {
		this.set_flipX(!this.flipX);
		if(!StringTools.startsWith(this.curCharacter,"bf")) {
			var oldRight = this.animation._animations.h["singRIGHT"].frames;
			this.animation._animations.h["singRIGHT"].frames = this.animation._animations.h["singLEFT"].frames;
			this.animation._animations.h["singLEFT"].frames = oldRight;
			if(this.animation._animations.h["singRIGHTmiss"] != null) {
				var oldMiss = this.animation._animations.h["singRIGHTmiss"].frames;
				this.animation._animations.h["singRIGHTmiss"].frames = this.animation._animations.h["singLEFTmiss"].frames;
				this.animation._animations.h["singLEFTmiss"].frames = oldMiss;
			}
		}
	}
};
$hxClasses["Character"] = Character;
Character.__name__ = "Character";
Character.__super__ = flixel_FlxSprite;
Character.prototype = $extend(flixel_FlxSprite.prototype,{
	animOffsets: null
	,debugMode: null
	,isPlayer: null
	,curCharacter: null
	,holdTimer: null
	,loadOffsetFile: function(character,library) {
		if(library == null) {
			library = "shared";
		}
		var offset = CoolUtil.coolTextFile(Paths.getPath("" + ("images/characters/" + character + "Offsets") + ".txt","TEXT",library));
		var _g = 0;
		var _g1 = offset.length;
		while(_g < _g1) {
			var i = _g++;
			var data = offset[i].split(" ");
			this.addOffset(data[0],Std.parseInt(data[1]),Std.parseInt(data[2]));
		}
	}
	,update: function(elapsed) {
		if(!StringTools.startsWith(this.curCharacter,"bf")) {
			if(StringTools.startsWith(this.animation._curAnim.name,"sing")) {
				this.holdTimer += elapsed;
			}
			var dadVar = 4;
			if(this.curCharacter == "dad") {
				dadVar = 6.1;
			}
			if(this.holdTimer >= Conductor.stepCrochet * dadVar * 0.001) {
				haxe_Log.trace("dance",{ fileName : "source/Character.hx", lineNumber : 434, className : "Character", methodName : "update"});
				this.dance();
				this.holdTimer = 0;
			}
		}
		if(this.curCharacter == "gf") {
			if(this.animation._curAnim.name == "hairFall" && this.animation._curAnim.finished) {
				this.playAnim("danceRight");
			}
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,danced: null
	,dance: function(forced,altAnim) {
		if(altAnim == null) {
			altAnim = false;
		}
		if(forced == null) {
			forced = false;
		}
		if(!this.debugMode) {
			switch(this.curCharacter) {
			case "gf":case "gf-car":case "gf-christmas":case "gf-pixel":
				if(!StringTools.startsWith(this.animation._curAnim.name,"hair")) {
					this.danced = !this.danced;
					if(this.danced) {
						this.playAnim("danceRight");
					} else {
						this.playAnim("danceLeft");
					}
				}
				break;
			case "spooky":
				this.danced = !this.danced;
				if(this.danced) {
					this.playAnim("danceRight");
				} else {
					this.playAnim("danceLeft");
				}
				break;
			default:
				if(altAnim && this.animation._animations.h["idle-alt"] != null) {
					this.playAnim("idle-alt",forced);
				} else {
					this.playAnim("idle",forced);
				}
			}
		}
	}
	,playAnim: function(AnimName,Force,Reversed,Frame) {
		if(Frame == null) {
			Frame = 0;
		}
		if(Reversed == null) {
			Reversed = false;
		}
		if(Force == null) {
			Force = false;
		}
		if(StringTools.endsWith(AnimName,"alt") && this.animation._animations.h[AnimName] == null) {
			AnimName = AnimName.split("-")[0];
		}
		this.animation.play(AnimName,Force,Reversed,Frame);
		var daOffset = this.animOffsets.h[AnimName];
		if(Object.prototype.hasOwnProperty.call(this.animOffsets.h,AnimName)) {
			this.offset.set(daOffset[0],daOffset[1]);
		} else {
			this.offset.set(0,0);
		}
		if(this.curCharacter == "gf") {
			if(AnimName == "singLEFT") {
				this.danced = true;
			} else if(AnimName == "singRIGHT") {
				this.danced = false;
			}
			if(AnimName == "singUP" || AnimName == "singDOWN") {
				this.danced = !this.danced;
			}
		}
	}
	,addOffset: function(name,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var v = [x,y];
		this.animOffsets.h[name] = v;
	}
	,__class__: Character
});
var Boyfriend = function(x,y,char) {
	if(char == null) {
		char = "bf";
	}
	this.stunned = false;
	Character.call(this,x,y,char,true);
};
$hxClasses["Boyfriend"] = Boyfriend;
Boyfriend.__name__ = "Boyfriend";
Boyfriend.__super__ = Character;
Boyfriend.prototype = $extend(Character.prototype,{
	stunned: null
	,update: function(elapsed) {
		if(!this.debugMode) {
			if(StringTools.startsWith(this.animation._curAnim.name,"sing")) {
				this.holdTimer += elapsed;
			} else {
				this.holdTimer = 0;
			}
			if(StringTools.endsWith(this.animation._curAnim.name,"miss") && this.animation._curAnim.finished && !this.debugMode) {
				this.playAnim("idle",true,false,10);
			}
			if(this.animation._curAnim.name == "firstDeath" && this.animation._curAnim.finished) {
				this.playAnim("deathLoop");
			}
		}
		Character.prototype.update.call(this,elapsed);
	}
	,__class__: Boyfriend
});
var ChartingBox = function(x,y,originalNote) {
	flixel_FlxSprite.call(this,x,y);
	this.connectedNote = originalNote;
	var color = flixel_util_FlxColor._new();
	var Alpha = 255;
	if(Alpha == null) {
		Alpha = 255;
	}
	color &= -16711681;
	color |= 11337728;
	color &= -65281;
	color |= 55296;
	color &= -256;
	color |= 230;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	this.makeGraphic(40,40,color);
	this.set_alpha(0.4);
};
$hxClasses["ChartingBox"] = ChartingBox;
ChartingBox.__name__ = "ChartingBox";
ChartingBox.__super__ = flixel_FlxSprite;
ChartingBox.prototype = $extend(flixel_FlxSprite.prototype,{
	connectedNote: null
	,connectedNoteData: null
	,__class__: ChartingBox
});
var flixel_group_FlxTypedGroup = function(MaxSize) {
	if(MaxSize == null) {
		MaxSize = 0;
	}
	this._marker = 0;
	this.length = 0;
	flixel_FlxBasic.call(this);
	this.members = [];
	this.set_maxSize(Math.abs(MaxSize) | 0);
	this.flixelType = 2;
};
$hxClasses["flixel.group.FlxTypedGroup"] = flixel_group_FlxTypedGroup;
flixel_group_FlxTypedGroup.__name__ = "flixel.group.FlxTypedGroup";
flixel_group_FlxTypedGroup.overlaps = function(Callback,Group,X,Y,InScreenSpace,Camera) {
	var result = false;
	if(Group != null) {
		var i = 0;
		var l = Group.length;
		var basic;
		while(i < l) {
			basic = Group.members[i++];
			if(basic != null && Callback(basic,X,Y,InScreenSpace,Camera)) {
				result = true;
				break;
			}
		}
	}
	return result;
};
flixel_group_FlxTypedGroup.resolveGroup = function(ObjectOrGroup) {
	var group = null;
	if(ObjectOrGroup != null) {
		if(ObjectOrGroup.flixelType == 2) {
			group = ObjectOrGroup;
		} else if(ObjectOrGroup.flixelType == 4) {
			var spriteGroup = ObjectOrGroup;
			group = spriteGroup.group;
		}
	}
	return group;
};
flixel_group_FlxTypedGroup.__super__ = flixel_FlxBasic;
flixel_group_FlxTypedGroup.prototype = $extend(flixel_FlxBasic.prototype,{
	members: null
	,maxSize: null
	,length: null
	,_memberAdded: null
	,_memberRemoved: null
	,_marker: null
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		flixel_util_FlxDestroyUtil.destroy(this._memberAdded);
		flixel_util_FlxDestroyUtil.destroy(this._memberRemoved);
		if(this.members != null) {
			var i = 0;
			var basic = null;
			while(i < this.length) {
				basic = this.members[i++];
				if(basic != null) {
					basic.destroy();
				}
			}
			this.members = null;
		}
	}
	,update: function(elapsed) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.active) {
				basic.update(elapsed);
			}
		}
	}
	,draw: function() {
		var i = 0;
		var basic = null;
		var oldDefaultCameras = flixel_FlxCamera._defaultCameras;
		if(this.get_cameras() != null) {
			flixel_FlxCamera._defaultCameras = this.get_cameras();
		}
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.visible) {
				basic.draw();
			}
		}
		flixel_FlxCamera._defaultCameras = oldDefaultCameras;
	}
	,add: function(Object1) {
		if(Object1 == null) {
			return null;
		}
		if(this.members.indexOf(Object1) >= 0) {
			return Object1;
		}
		var index = this.getFirstNull();
		if(index != -1) {
			this.members[index] = Object1;
			if(index >= this.length) {
				this.length = index + 1;
			}
			if(this._memberAdded != null) {
				this._memberAdded.dispatch(Object1);
			}
			return Object1;
		}
		if(this.maxSize > 0 && this.length >= this.maxSize) {
			return Object1;
		}
		this.members.push(Object1);
		this.length++;
		if(this._memberAdded != null) {
			this._memberAdded.dispatch(Object1);
		}
		return Object1;
	}
	,insert: function(position,object) {
		if(object == null) {
			return null;
		}
		if(this.members.indexOf(object) >= 0) {
			return object;
		}
		if(position < this.length && this.members[position] == null) {
			this.members[position] = object;
			if(this._memberAdded != null) {
				this._memberAdded.dispatch(object);
			}
			return object;
		}
		if(this.maxSize > 0 && this.length >= this.maxSize) {
			return object;
		}
		this.members.splice(position,0,object);
		this.length++;
		if(this._memberAdded != null) {
			this._memberAdded.dispatch(object);
		}
		return object;
	}
	,recycle: function(ObjectClass,ObjectFactory,Force,Revive) {
		if(Revive == null) {
			Revive = true;
		}
		if(Force == null) {
			Force = false;
		}
		var basic = null;
		if(this.maxSize > 0) {
			if(this.length < this.maxSize) {
				var object = null;
				if(ObjectFactory != null) {
					object = ObjectFactory();
					this.add(object);
				} else if(ObjectClass != null) {
					object = Type.createInstance(ObjectClass,[]);
					this.add(object);
				}
				return object;
			} else {
				basic = this.members[this._marker++];
				if(this._marker >= this.maxSize) {
					this._marker = 0;
				}
				if(Revive) {
					basic.revive();
				}
				return basic;
			}
		} else {
			basic = this.getFirstAvailable(ObjectClass,Force);
			if(basic != null) {
				if(Revive) {
					basic.revive();
				}
				return basic;
			}
			var object = null;
			if(ObjectFactory != null) {
				object = ObjectFactory();
				this.add(object);
			} else if(ObjectClass != null) {
				object = Type.createInstance(ObjectClass,[]);
				this.add(object);
			}
			return object;
		}
	}
	,recycleCreateObject: function(ObjectClass,ObjectFactory) {
		var object = null;
		if(ObjectFactory != null) {
			object = ObjectFactory();
			this.add(object);
		} else if(ObjectClass != null) {
			object = Type.createInstance(ObjectClass,[]);
			this.add(object);
		}
		return object;
	}
	,remove: function(Object1,Splice) {
		if(Splice == null) {
			Splice = false;
		}
		if(this.members == null) {
			return null;
		}
		var index = this.members.indexOf(Object1);
		if(index < 0) {
			return null;
		}
		if(Splice) {
			this.members.splice(index,1);
			this.length--;
		} else {
			this.members[index] = null;
		}
		if(this._memberRemoved != null) {
			this._memberRemoved.dispatch(Object1);
		}
		return Object1;
	}
	,replace: function(OldObject,NewObject) {
		var index = this.members.indexOf(OldObject);
		if(index < 0) {
			return null;
		}
		this.members[index] = NewObject;
		if(this._memberRemoved != null) {
			this._memberRemoved.dispatch(OldObject);
		}
		if(this._memberAdded != null) {
			this._memberAdded.dispatch(NewObject);
		}
		return NewObject;
	}
	,sort: function(Function1,Order) {
		if(Order == null) {
			Order = -1;
		}
		var _g = Function1;
		var a1 = Order;
		var tmp = function(a2,a3) {
			return _g(a1,a2,a3);
		};
		this.members.sort(tmp);
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) {
			Force = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.exists && (ObjectClass == null || js_Boot.__instanceof(basic,ObjectClass))) {
				var tmp;
				if(Force) {
					var c = js_Boot.getClass(basic);
					tmp = c.__name__ != ObjectClass.__name__;
				} else {
					tmp = false;
				}
				if(tmp) {
					continue;
				}
				return this.members[i - 1];
			}
		}
		return null;
	}
	,getFirstNull: function() {
		var i = 0;
		while(i < this.length) {
			if(this.members[i] == null) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,getFirstExisting: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				return basic;
			}
		}
		return null;
	}
	,getFirstAlive: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) {
				return basic;
			}
		}
		return null;
	}
	,getFirstDead: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) {
				return basic;
			}
		}
		return null;
	}
	,countLiving: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) {
					count = 0;
				}
				if(basic.exists && basic.alive) {
					++count;
				}
			}
		}
		return count;
	}
	,countDead: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) {
					count = 0;
				}
				if(!basic.alive) {
					++count;
				}
			}
		}
		return count;
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) {
			Length = 0;
		}
		if(StartIndex == null) {
			StartIndex = 0;
		}
		if(StartIndex < 0) {
			StartIndex = 0;
		}
		if(Length <= 0) {
			Length = this.length;
		}
		return flixel_FlxG.random.getObject_flixel_group_FlxTypedGroup_T(this.members,null,StartIndex,Length);
	}
	,clear: function() {
		this.length = 0;
		if(this._memberRemoved != null) {
			var _g = 0;
			var _g1 = this.members;
			while(_g < _g1.length) {
				var member = _g1[_g];
				++_g;
				if(member != null) {
					this._memberRemoved.dispatch(member);
				}
			}
		}
		flixel_util_FlxArrayUtil.clearArray(this.members);
	}
	,kill: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				basic.kill();
			}
		}
		flixel_FlxBasic.prototype.kill.call(this);
	}
	,revive: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.exists) {
				basic.revive();
			}
		}
		flixel_FlxBasic.prototype.revive.call(this);
	}
	,iterator: function(filter) {
		return new flixel_group_FlxTypedGroupIterator(this.members,filter);
	}
	,forEach: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEach(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachAlive: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachAlive(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachDead: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachDead(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachExists: function(Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachExists(Function1,Recurse);
					}
				}
				Function1(basic);
			}
		}
	}
	,forEachOfType: function(ObjectClass,Function1,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachOfType(ObjectClass,Function1,Recurse);
					}
				}
				if(js_Boot.__instanceof(basic,ObjectClass)) {
					Function1(basic);
				}
			}
		}
	}
	,set_maxSize: function(Size) {
		this.maxSize = Math.abs(Size) | 0;
		if(this._marker >= this.maxSize) {
			this._marker = 0;
		}
		if(this.maxSize == 0 || this.members == null || this.maxSize >= this.length) {
			return this.maxSize;
		}
		var i = this.maxSize;
		var l = this.length;
		var basic = null;
		while(i < l) {
			basic = this.members[i++];
			if(basic != null) {
				if(this._memberRemoved != null) {
					this._memberRemoved.dispatch(basic);
				}
				basic.destroy();
			}
		}
		flixel_util_FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T(this.members,this.maxSize);
		this.length = this.members.length;
		return this.maxSize;
	}
	,get_memberAdded: function() {
		if(this._memberAdded == null) {
			this._memberAdded = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._memberAdded;
	}
	,get_memberRemoved: function() {
		if(this._memberRemoved == null) {
			this._memberRemoved = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._memberRemoved;
	}
	,__class__: flixel_group_FlxTypedGroup
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{get_memberRemoved:"get_memberRemoved",get_memberAdded:"get_memberAdded",set_maxSize:"set_maxSize"})
});
var flixel_FlxState = function(MaxSize) {
	this._requestSubStateReset = false;
	this.destroySubStates = true;
	this.persistentDraw = true;
	this.persistentUpdate = false;
	flixel_group_FlxTypedGroup.call(this,MaxSize);
};
$hxClasses["flixel.FlxState"] = flixel_FlxState;
flixel_FlxState.__name__ = "flixel.FlxState";
flixel_FlxState.__super__ = flixel_group_FlxTypedGroup;
flixel_FlxState.prototype = $extend(flixel_group_FlxTypedGroup.prototype,{
	persistentUpdate: null
	,persistentDraw: null
	,destroySubStates: null
	,subState: null
	,_requestedSubState: null
	,_requestSubStateReset: null
	,_subStateOpened: null
	,_subStateClosed: null
	,create: function() {
	}
	,draw: function() {
		if(this.persistentDraw || this.subState == null) {
			flixel_group_FlxTypedGroup.prototype.draw.call(this);
		}
		if(this.subState != null) {
			this.subState.draw();
		}
	}
	,openSubState: function(SubState) {
		this._requestSubStateReset = true;
		this._requestedSubState = SubState;
	}
	,closeSubState: function() {
		this._requestSubStateReset = true;
	}
	,resetSubState: function() {
		if(this.subState != null) {
			if(this.subState.closeCallback != null) {
				this.subState.closeCallback();
			}
			if(this._subStateClosed != null) {
				this._subStateClosed.dispatch(this.subState);
			}
			if(this.destroySubStates) {
				this.subState.destroy();
			}
		}
		this.subState = this._requestedSubState;
		this._requestedSubState = null;
		if(this.subState != null) {
			if(!this.persistentUpdate) {
				flixel_FlxG.inputs.onStateSwitch();
			}
			this.subState._parentState = this;
			if(!this.subState._created) {
				this.subState._created = true;
				this.subState.create();
			}
			if(this.subState.openCallback != null) {
				this.subState.openCallback();
			}
			if(this._subStateOpened != null) {
				this._subStateOpened.dispatch(this.subState);
			}
		}
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.destroy(this._subStateOpened);
		flixel_util_FlxDestroyUtil.destroy(this._subStateClosed);
		if(this.subState != null) {
			this.subState.destroy();
			this.subState = null;
		}
		flixel_group_FlxTypedGroup.prototype.destroy.call(this);
	}
	,switchTo: function(nextState) {
		return true;
	}
	,onFocusLost: function() {
	}
	,onFocus: function() {
	}
	,onResize: function(Width,Height) {
	}
	,tryUpdate: function(elapsed) {
		if(this.persistentUpdate || this.subState == null) {
			this.update(elapsed);
		}
		if(this._requestSubStateReset) {
			this._requestSubStateReset = false;
			this.resetSubState();
		}
		if(this.subState != null) {
			this.subState.tryUpdate(elapsed);
		}
	}
	,get_bgColor: function() {
		return flixel_FlxG.cameras.get_bgColor();
	}
	,set_bgColor: function(Value) {
		return flixel_FlxG.cameras.set_bgColor(Value);
	}
	,get_subStateOpened: function() {
		if(this._subStateOpened == null) {
			this._subStateOpened = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._subStateOpened;
	}
	,get_subStateClosed: function() {
		if(this._subStateClosed == null) {
			this._subStateClosed = new flixel_util__$FlxSignal_FlxSignal1();
		}
		return this._subStateClosed;
	}
	,__class__: flixel_FlxState
	,__properties__: $extend(flixel_group_FlxTypedGroup.prototype.__properties__,{get_subStateClosed:"get_subStateClosed",get_subStateOpened:"get_subStateOpened",set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"})
});
var flixel_addons_transition_FlxTransitionableState = function(TransIn,TransOut) {
	this._exiting = false;
	this.transOutFinished = false;
	this.transIn = TransIn;
	this.transOut = TransOut;
	if(this.transIn == null && flixel_addons_transition_FlxTransitionableState.defaultTransIn != null) {
		this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
	}
	if(this.transOut == null && flixel_addons_transition_FlxTransitionableState.defaultTransOut != null) {
		this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
	}
	flixel_FlxState.call(this);
};
$hxClasses["flixel.addons.transition.FlxTransitionableState"] = flixel_addons_transition_FlxTransitionableState;
flixel_addons_transition_FlxTransitionableState.__name__ = "flixel.addons.transition.FlxTransitionableState";
flixel_addons_transition_FlxTransitionableState.__super__ = flixel_FlxState;
flixel_addons_transition_FlxTransitionableState.prototype = $extend(flixel_FlxState.prototype,{
	transIn: null
	,transOut: null
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		this.transIn = null;
		this.transOut = null;
		this._onExit = null;
	}
	,create: function() {
		flixel_FlxState.prototype.create.call(this);
		this.transitionIn();
	}
	,switchTo: function(nextState) {
		if(!this.get_hasTransOut()) {
			return true;
		}
		if(!this._exiting) {
			this.transitionToState(nextState);
		}
		return this.transOutFinished;
	}
	,transitionToState: function(nextState) {
		this._exiting = true;
		this.transitionOut(function() {
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		});
		if(flixel_addons_transition_FlxTransitionableState.skipNextTransOut) {
			flixel_addons_transition_FlxTransitionableState.skipNextTransOut = false;
			this.finishTransOut();
		}
	}
	,transitionIn: function() {
		if(this.transIn != null && this.transIn.type != "none") {
			if(flixel_addons_transition_FlxTransitionableState.skipNextTransIn) {
				flixel_addons_transition_FlxTransitionableState.skipNextTransIn = false;
				if(this.finishTransIn != null) {
					this.finishTransIn();
				}
				return;
			}
			var _trans = this.createTransition(this.transIn);
			_trans.setStatus(3);
			this.openSubState(_trans);
			_trans.set_finishCallback($bind(this,this.finishTransIn));
			_trans.start(1);
		}
	}
	,transitionOut: function(OnExit) {
		this._onExit = OnExit;
		if(this.get_hasTransOut()) {
			var _trans = this.createTransition(this.transOut);
			_trans.setStatus(2);
			this.openSubState(_trans);
			_trans.set_finishCallback($bind(this,this.finishTransOut));
			_trans.start(0);
		} else {
			this._onExit();
		}
	}
	,transOutFinished: null
	,_exiting: null
	,_onExit: null
	,get_hasTransIn: function() {
		if(this.transIn != null) {
			return this.transIn.type != "none";
		} else {
			return false;
		}
	}
	,get_hasTransOut: function() {
		if(this.transOut != null) {
			return this.transOut.type != "none";
		} else {
			return false;
		}
	}
	,createTransition: function(data) {
		switch(data.type) {
		case "fade":
			return new flixel_addons_transition_Transition(data);
		case "tiles":
			return new flixel_addons_transition_Transition(data);
		default:
			return null;
		}
	}
	,finishTransIn: function() {
		this.closeSubState();
	}
	,finishTransOut: function() {
		this.transOutFinished = true;
		if(!this._exiting) {
			this.closeSubState();
		}
		if(this._onExit != null) {
			this._onExit();
		}
	}
	,__class__: flixel_addons_transition_FlxTransitionableState
	,__properties__: $extend(flixel_FlxState.prototype.__properties__,{get_hasTransOut:"get_hasTransOut",get_hasTransIn:"get_hasTransIn"})
});
var flixel_addons_ui_interfaces_IEventGetter = function() { };
$hxClasses["flixel.addons.ui.interfaces.IEventGetter"] = flixel_addons_ui_interfaces_IEventGetter;
flixel_addons_ui_interfaces_IEventGetter.__name__ = "flixel.addons.ui.interfaces.IEventGetter";
flixel_addons_ui_interfaces_IEventGetter.__isInterface__ = true;
flixel_addons_ui_interfaces_IEventGetter.prototype = {
	getEvent: null
	,getRequest: null
	,__class__: flixel_addons_ui_interfaces_IEventGetter
};
var flixel_addons_ui_interfaces_IFlxUIState = function() { };
$hxClasses["flixel.addons.ui.interfaces.IFlxUIState"] = flixel_addons_ui_interfaces_IFlxUIState;
flixel_addons_ui_interfaces_IFlxUIState.__name__ = "flixel.addons.ui.interfaces.IFlxUIState";
flixel_addons_ui_interfaces_IFlxUIState.__isInterface__ = true;
flixel_addons_ui_interfaces_IFlxUIState.__interfaces__ = [flixel_addons_ui_interfaces_IEventGetter];
flixel_addons_ui_interfaces_IFlxUIState.prototype = {
	forceFocus: null
	,tooltips: null
	,cursor: null
	,_tongue: null
	,__class__: flixel_addons_ui_interfaces_IFlxUIState
};
var flixel_addons_ui_FlxUIState = function(TransIn,TransOut) {
	this.getTextFallback = null;
	this._reload_countdown = 0;
	this._reload = false;
	this.reload_ui_on_resize = false;
	this._xml_id = "";
	this._cursorHidden = false;
	this.hideCursorOnSubstate = false;
	this.cursor = null;
	flixel_addons_transition_FlxTransitionableState.call(this,TransIn,TransOut);
};
$hxClasses["flixel.addons.ui.FlxUIState"] = flixel_addons_ui_FlxUIState;
flixel_addons_ui_FlxUIState.__name__ = "flixel.addons.ui.FlxUIState";
flixel_addons_ui_FlxUIState.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIState,flixel_addons_ui_interfaces_IEventGetter];
flixel_addons_ui_FlxUIState.__super__ = flixel_addons_transition_FlxTransitionableState;
flixel_addons_ui_FlxUIState.prototype = $extend(flixel_addons_transition_FlxTransitionableState.prototype,{
	destroyed: null
	,cursor: null
	,hideCursorOnSubstate: null
	,_cursorHidden: null
	,tooltips: null
	,_xml_id: null
	,_makeCursor: null
	,_ui_vars: null
	,_ui: null
	,_tongue: null
	,reload_ui_on_resize: null
	,_reload: null
	,_reload_countdown: null
	,getTextFallback: null
	,create: function() {
		if(flixel_addons_ui_FlxUIState.static_tongue != null) {
			this._tongue = flixel_addons_ui_FlxUIState.static_tongue;
		}
		if(this._makeCursor == true) {
			this.cursor = this.createCursor();
		}
		this.tooltips = new flixel_addons_ui_FlxUITooltipManager(this);
		var liveFile = null;
		this._ui = this.createUI(null,this,null,this._tongue);
		this.add(this._ui);
		if(this.getTextFallback != null) {
			this._ui.getTextFallback = this.getTextFallback;
		}
		if(this._xml_id != null && this._xml_id != "") {
			var data = null;
			var errorMsg = "";
			if(liveFile == null) {
				try {
					data = flixel_addons_ui_U.xml(this._xml_id);
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					var _g1 = haxe_Exception.caught(_g).unwrap();
					if(typeof(_g1) == "string") {
						var msg = _g1;
						errorMsg = msg;
					} else {
						throw _g;
					}
				}
				if(data == null) {
					try {
						data = flixel_addons_ui_U.xml(this._xml_id,"xml",true,"");
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						var _g1 = haxe_Exception.caught(_g).unwrap();
						if(typeof(_g1) == "string") {
							var msg2 = _g1;
							errorMsg += ", " + msg2;
						} else {
							throw _g;
						}
					}
				}
			}
			if(data == null) {
				if(liveFile != null) {
					this.loadUIFromData(liveFile);
				}
			} else {
				this.loadUIFromData(data);
			}
		} else {
			this.loadUIFromData(null);
		}
		if(this.cursor != null && this._ui != null) {
			this.add(this.cursor);
			this.cursor.addWidgetsFromUI(this._ui);
			this.cursor.findVisibleLocation(0);
		}
		this.tooltips.init();
		flixel_addons_transition_FlxTransitionableState.prototype.create.call(this);
		this.cleanup();
	}
	,update: function(elapsed) {
		flixel_addons_transition_FlxTransitionableState.prototype.update.call(this,elapsed);
		if(this.tooltips != null) {
			this.tooltips.update(elapsed);
		}
		if(this._reload) {
			if(this._reload_countdown > 0) {
				this._reload_countdown--;
				if(this._reload_countdown == 0) {
					this.reloadUI();
				}
			}
		}
	}
	,cleanup: function() {
		this._ui.cleanup();
	}
	,_cleanupUIVars: function() {
		if(this._ui_vars != null) {
			var key = haxe_ds_StringMap.keysIterator(this._ui_vars.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._ui_vars;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._ui_vars = null;
		}
	}
	,setUIVariable: function(key,value) {
		if(this._ui != null) {
			this._ui.setVariable(key,value);
		} else {
			if(this._ui_vars == null) {
				this._ui_vars = new haxe_ds_StringMap();
			}
			this._ui_vars.h[key] = value;
		}
	}
	,resizeScreen: function(width,height) {
		if(height == null) {
			height = 600;
		}
		if(width == null) {
			width = 800;
		}
	}
	,openSubState: function(SubState) {
		if(this.cursor != null && this.hideCursorOnSubstate && this.cursor.visible == true) {
			this._cursorHidden = true;
			this.cursor.set_visible(false);
		}
		flixel_addons_transition_FlxTransitionableState.prototype.openSubState.call(this,SubState);
	}
	,closeSubState: function() {
		if(this.cursor != null && this.hideCursorOnSubstate && this._cursorHidden) {
			this._cursorHidden = false;
			this.cursor.set_visible(true);
		}
		flixel_addons_transition_FlxTransitionableState.prototype.closeSubState.call(this);
	}
	,onResize: function(Width,Height) {
		if(this.reload_ui_on_resize) {
			flixel_FlxG.scaleMode.onMeasure(Width,Height);
			this._reload_countdown = 1;
			this._reload = true;
		}
	}
	,onShowTooltip: function(t) {
	}
	,destroy: function() {
		this.destroyed = true;
		if(this._ui != null) {
			this._ui.destroy();
			this.remove(this._ui,true);
			this._ui = null;
		}
		if(this.tooltips != null) {
			this.tooltips.destroy();
			this.tooltips = null;
		}
		flixel_addons_transition_FlxTransitionableState.prototype.destroy.call(this);
	}
	,forceFocus: function(b,thing) {
		if(this._ui != null) {
			if(b) {
				this._ui.set_focus(thing);
			} else {
				this._ui.set_focus(null);
			}
		}
	}
	,onCursorEvent: function(code,target) {
		this.getEvent(code,target,null);
	}
	,getEvent: function(id,sender,data,params) {
	}
	,getRequest: function(id,sender,data,params) {
		return null;
	}
	,getText: function(Flag,Context,Safe) {
		if(Safe == null) {
			Safe = true;
		}
		if(Context == null) {
			Context = "ui";
		}
		if(this._tongue != null) {
			return this._tongue.get(Flag,Context,Safe);
		}
		if(this.getTextFallback != null) {
			return this.getTextFallback(Flag,Context,Safe);
		}
		return Flag;
	}
	,createCursor: function() {
		return new flixel_addons_ui_FlxUICursor($bind(this,this.onCursorEvent));
	}
	,createUI: function(data,ptr,superIndex_,tongue_,liveFilePath_) {
		if(liveFilePath_ == null) {
			liveFilePath_ = "";
		}
		var flxui = new flixel_addons_ui_FlxUI(data,ptr,superIndex_,tongue_,liveFilePath_,this._ui_vars);
		this._cleanupUIVars();
		return flxui;
	}
	,loadUIFromData: function(data) {
		this._ui.load(data);
	}
	,reloadUI: function(e) {
		if(this._ui != null) {
			this.remove(this._ui,true);
			this._ui.destroy();
			this._ui = null;
		}
		this._ui = this.createUI(null,this,null,this._tongue);
		this.add(this._ui);
		var data = flixel_addons_ui_U.xml(this._xml_id);
		if(data != null) {
			this.loadUIFromData(data);
		}
		this._reload = false;
		this._reload_countdown = 0;
	}
	,__class__: flixel_addons_ui_FlxUIState
});
var MusicBeatState = function(TransIn,TransOut) {
	this.skippedFrames = 0;
	var color = flixel_util_FlxColor._new();
	color &= -16711681;
	color |= 9699328;
	color &= -65281;
	color |= 0;
	color &= -256;
	color |= 211;
	color &= 16777215;
	color |= -16777216;
	var color1 = flixel_util_FlxColor._new();
	color1 &= -16711681;
	color1 |= 4915200;
	color1 &= -65281;
	color1 |= 0;
	color1 &= -256;
	color1 |= 130;
	color1 &= 16777215;
	color1 |= -16777216;
	var color2 = flixel_util_FlxColor._new();
	color2 &= -16711681;
	color2 |= 0;
	color2 &= -65281;
	color2 |= 0;
	color2 &= -256;
	color2 |= 255;
	color2 &= 16777215;
	color2 |= -16777216;
	var color3 = flixel_util_FlxColor._new();
	color3 &= -16711681;
	color3 |= 0;
	color3 &= -65281;
	color3 |= 65280;
	color3 &= -256;
	color3 |= 0;
	color3 &= 16777215;
	color3 |= -16777216;
	var color4 = flixel_util_FlxColor._new();
	color4 &= -16711681;
	color4 |= 16711680;
	color4 &= -65281;
	color4 |= 65280;
	color4 &= -256;
	color4 |= 0;
	color4 &= 16777215;
	color4 |= -16777216;
	var color5 = flixel_util_FlxColor._new();
	color5 &= -16711681;
	color5 |= 16711680;
	color5 &= -65281;
	color5 |= 32512;
	color5 &= -256;
	color5 |= 0;
	color5 &= 16777215;
	color5 |= -16777216;
	var color6 = flixel_util_FlxColor._new();
	color6 &= -16711681;
	color6 |= 16711680;
	color6 &= -65281;
	color6 |= 0;
	color6 &= -256;
	color6 |= 0;
	color6 &= 16777215;
	color6 |= -16777216;
	this.array = [color,color1,color2,color3,color4,color5,color6];
	this.assets = [];
	this.curDecimalBeat = 0;
	this.curBeat = 0;
	this.curStep = 0;
	this.lastStep = 0;
	this.lastBeat = 0;
	flixel_addons_ui_FlxUIState.call(this,TransIn,TransOut);
};
$hxClasses["MusicBeatState"] = MusicBeatState;
MusicBeatState.__name__ = "MusicBeatState";
MusicBeatState.__super__ = flixel_addons_ui_FlxUIState;
MusicBeatState.prototype = $extend(flixel_addons_ui_FlxUIState.prototype,{
	lastBeat: null
	,lastStep: null
	,curStep: null
	,curBeat: null
	,curDecimalBeat: null
	,get_controls: function() {
		return PlayerSettings.player1.controls;
	}
	,assets: null
	,add: function(Object1) {
		if(flixel_FlxG.save.data.optimize) {
			this.assets.push(Object1);
		}
		return flixel_addons_ui_FlxUIState.prototype.add.call(this,Object1);
	}
	,clean: function() {
		if(flixel_FlxG.save.data.optimize) {
			var _g = 0;
			var _g1 = this.assets;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				this.remove(i);
			}
		}
	}
	,create: function() {
		TimingStruct.clearTimings();
		(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).setFPSCap(flixel_FlxG.save.data.fpsCap);
		if(this.transIn != null) {
			haxe_Log.trace("reg " + Std.string(this.transIn.region),{ fileName : "source/MusicBeatState.hx", lineNumber : 52, className : "MusicBeatState", methodName : "create"});
		}
		flixel_addons_ui_FlxUIState.prototype.create.call(this);
	}
	,array: null
	,skippedFrames: null
	,update: function(elapsed) {
		if(Conductor.songPosition < 0) {
			this.curDecimalBeat = 0;
		} else if(TimingStruct.AllTimings.length > 1) {
			var data = TimingStruct.getTimingAtTimestamp(Conductor.songPosition);
			Conductor.crochet = 60 / data.bpm * 1000;
			var step = 60 / data.bpm * 1000 / 4;
			var startInMS = data.startTime * 1000;
			this.curDecimalBeat = data.startBeat + (Conductor.songPosition / 1000 - data.startTime) * (data.bpm / 60);
			var ste = Math.floor(data.startStep + (Conductor.songPosition - startInMS) / step);
			if(ste >= 0) {
				if(ste > this.curStep) {
					var _g = this.curStep;
					var _g1 = ste;
					while(_g < _g1) {
						var i = _g++;
						this.curStep++;
						this.updateBeat();
						this.stepHit();
					}
				} else if(ste < this.curStep) {
					haxe_Log.trace("reset steps for some reason?? at " + Conductor.songPosition,{ fileName : "source/MusicBeatState.hx", lineNumber : 125, className : "MusicBeatState", methodName : "update"});
					this.curStep = ste;
					this.updateBeat();
					this.stepHit();
				}
			}
		} else {
			this.curDecimalBeat = Conductor.songPosition / 1000 * (Conductor.bpm / 60);
			var nextStep = Math.floor(Conductor.songPosition / Conductor.stepCrochet);
			if(nextStep >= 0) {
				if(nextStep > this.curStep) {
					var _g = this.curStep;
					var _g1 = nextStep;
					while(_g < _g1) {
						var i = _g++;
						this.curStep++;
						this.updateBeat();
						this.stepHit();
					}
				} else if(nextStep < this.curStep) {
					haxe_Log.trace("(no bpm change) reset steps for some reason?? at " + Conductor.songPosition,{ fileName : "source/MusicBeatState.hx", lineNumber : 151, className : "MusicBeatState", methodName : "update"});
					this.curStep = nextStep;
					this.updateBeat();
					this.stepHit();
				}
			}
			Conductor.crochet = 60 / Conductor.bpm * 1000;
		}
		if(flixel_FlxG.save.data.fpsRain && this.skippedFrames >= 6) {
			if(MusicBeatState.currentColor >= this.array.length) {
				MusicBeatState.currentColor = 0;
			}
			(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).changeFPSColor(this.array[MusicBeatState.currentColor]);
			MusicBeatState.currentColor++;
			this.skippedFrames = 0;
		} else {
			this.skippedFrames++;
		}
		if(($_=(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)),$bind($_,$_.getFPSCap)) != flixel_FlxG.save.data.fpsCap && flixel_FlxG.save.data.fpsCap <= 290) {
			(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).setFPSCap(flixel_FlxG.save.data.fpsCap);
		}
		flixel_addons_ui_FlxUIState.prototype.update.call(this,elapsed);
	}
	,updateBeat: function() {
		this.lastBeat = this.curBeat;
		this.curBeat = Math.floor(this.curStep / 4);
	}
	,updateCurStep: function() {
		var lastChange = { stepTime : 0, songTime : 0, bpm : 0};
		var _g = 0;
		var _g1 = Conductor.bpmChangeMap.length;
		while(_g < _g1) {
			var i = _g++;
			if(Conductor.songPosition >= Conductor.bpmChangeMap[i].songTime) {
				lastChange = Conductor.bpmChangeMap[i];
			}
		}
		return lastChange.stepTime + Math.floor((Conductor.songPosition - lastChange.songTime) / Conductor.stepCrochet);
	}
	,stepHit: function() {
		if(this.curStep % 4 == 0) {
			this.beatHit();
		}
	}
	,beatHit: function() {
	}
	,fancyOpenURL: function(schmancy) {
		var prefix = "";
		if(!new EReg("^https?://","").match(schmancy)) {
			prefix = "http://";
		}
		openfl_Lib.getURL(new openfl_net_URLRequest(prefix + schmancy),"_blank");
	}
	,__class__: MusicBeatState
	,__properties__: $extend(flixel_addons_ui_FlxUIState.prototype.__properties__,{get_controls:"get_controls"})
});
var ChartingState = function(TransIn,TransOut) {
	this.daSpacing = 0.3;
	this.curSelectedNoteObject = null;
	this.once = false;
	this.lastAction = "";
	this.selectInitialY = 0;
	this.selectInitialX = 0;
	this.deletedNotes = [];
	this.pastedNotes = [];
	this.copiedNotes = [];
	this.waitingForRelease = false;
	this.snapSelection = 3;
	this.shownNotes = [];
	this.lastUpdatedSection = null;
	this.updateFrame = 0;
	this.lastBPM = 0;
	this.currentBPM = 0;
	this.changeIndex = 0;
	this.diff = 0;
	this.doSnapShit = false;
	this.writingNotes = false;
	this.updatedSection = false;
	this.Typeables = [];
	this.chartEvents = [];
	this.currentEventPosition = 0;
	this.savedValue = "";
	this.savedType = "";
	this.currentSelectedEventName = "";
	this.claps = [];
	this.height = 0;
	this.player1 = new Boyfriend(0,0,"bf");
	this.player2 = new Character(0,0,"dad");
	this.tempBpm = 0;
	this.defaultSnap = true;
	this.subDivisions = 1;
	this.GRID_SIZE = 40;
	this.amountSteps = 0;
	this.curSong = "Dad Battle";
	this.curSection = 0;
	this.zoomFactor = 0.4;
	this.beatsShown = 1;
	this.deezNuts = new haxe_ds_IntMap();
	this.snap = 16;
	this.playClaps = false;
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["ChartingState"] = ChartingState;
ChartingState.__name__ = "ChartingState";
ChartingState.instance = null;
ChartingState._song = null;
ChartingState.leftIcon = null;
ChartingState.rightIcon = null;
ChartingState.__super__ = MusicBeatState;
ChartingState.prototype = $extend(MusicBeatState.prototype,{
	_file: null
	,playClaps: null
	,snap: null
	,deezNuts: null
	,UI_box: null
	,UI_options: null
	,beatsShown: null
	,zoomFactor: null
	,curSection: null
	,bpmTxt: null
	,strumLine: null
	,curSong: null
	,amountSteps: null
	,bullshitUI: null
	,writingNotesText: null
	,highlight: null
	,GRID_SIZE: null
	,subDivisions: null
	,defaultSnap: null
	,dummyArrow: null
	,curRenderedNotes: null
	,curRenderedSustains: null
	,gridBG: null
	,sectionRenderes: null
	,typingShit: null
	,curSelectedNote: null
	,tempBpm: null
	,gridBlackLine: null
	,vocals: null
	,player2: null
	,player1: null
	,height: null
	,lastNote: null
	,lines: null
	,claps: null
	,snapText: null
	,camFollow: null
	,create: function() {
		this.curSection = ChartingState.lastSection;
		haxe_Log.trace(1 > Infinity,{ fileName : "source/ChartingState.hx", lineNumber : 142, className : "ChartingState", methodName : "create"});
		flixel_FlxG.mouse.set_visible(true);
		ChartingState.instance = this;
		this.deezNuts.h[4] = 1;
		this.deezNuts.h[8] = 2;
		this.deezNuts.h[12] = 3;
		this.deezNuts.h[16] = 4;
		this.deezNuts.h[24] = 6;
		this.deezNuts.h[32] = 8;
		this.deezNuts.h[64] = 16;
		this.sectionRenderes = new flixel_group_FlxTypedGroup();
		this.lines = new flixel_group_FlxTypedGroup();
		this.texts = new flixel_group_FlxTypedGroup();
		TimingStruct.clearTimings();
		if(PlayState.SONG != null) {
			ChartingState._song = PlayState.SONG;
		} else {
			ChartingState._song = { chartVersion : ChartingState.latestChartVersion, song : "Test", notes : [], eventObjects : [], bpm : 150, needsVoices : true, player1 : "bf", player2 : "dad", gfVersion : "gf", noteStyle : "normal", stage : "stage", speed : 1, validScore : false};
		}
		this.addGrid(1);
		if(ChartingState._song.chartVersion == null) {
			ChartingState._song.chartVersion = "2";
		}
		this.snapText = new flixel_text_FlxText(60,10,0,"",14);
		this.snapText.scrollFactor.set();
		this.curRenderedNotes = new flixel_group_FlxTypedGroup();
		this.curRenderedSustains = new flixel_group_FlxTypedGroup();
		flixel_FlxG.mouse.set_visible(true);
		this.tempBpm = ChartingState._song.bpm;
		this.addSection();
		this.loadSong(ChartingState._song.song);
		Conductor.changeBPM(ChartingState._song.bpm);
		Conductor.mapBPMChanges(ChartingState._song);
		ChartingState.leftIcon = new HealthIcon(ChartingState._song.player1);
		ChartingState.rightIcon = new HealthIcon(ChartingState._song.player2);
		var index = 0;
		if(ChartingState._song.eventObjects == null) {
			ChartingState._song.eventObjects = [new Event("Init BPM",0,ChartingState._song.bpm,"BPM Change")];
		}
		if(ChartingState._song.eventObjects.length == 0) {
			ChartingState._song.eventObjects = [new Event("Init BPM",0,ChartingState._song.bpm,"BPM Change")];
		}
		haxe_Log.trace("goin",{ fileName : "source/ChartingState.hx", lineNumber : 227, className : "ChartingState", methodName : "create"});
		var currentIndex = 0;
		var _g = 0;
		var _g1 = ChartingState._song.eventObjects;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var name = Reflect.field(i,"name");
			var type = Reflect.field(i,"type");
			var pos = Reflect.field(i,"position");
			var value = Reflect.field(i,"value");
			if(type == "BPM Change") {
				var beat = pos;
				var endBeat = Infinity;
				TimingStruct.addTiming(beat,value,endBeat,0);
				if(currentIndex != 0) {
					var data = TimingStruct.AllTimings[currentIndex - 1];
					data.endBeat = beat;
					data.length = (data.endBeat - data.startBeat) / (data.bpm / 60);
					var step = 60 / data.bpm * 1000 / 4;
					TimingStruct.AllTimings[currentIndex].startStep = Math.floor(data.endBeat / (data.bpm / 60) * 1000 / step);
					TimingStruct.AllTimings[currentIndex].startTime = data.startTime + data.length;
				}
				++currentIndex;
			}
		}
		var lastSeg = TimingStruct.AllTimings[TimingStruct.AllTimings.length - 1];
		var _g = 0;
		var _g1 = TimingStruct.AllTimings.length;
		while(_g < _g1) {
			var i = _g++;
			var seg = TimingStruct.AllTimings[i];
			if(i == TimingStruct.AllTimings.length - 1) {
				lastSeg = seg;
			}
		}
		this.recalculateAllSectionTimes();
		haxe_Log.trace("Song length in MS: " + flixel_FlxG.sound.music._length,{ fileName : "source/ChartingState.hx", lineNumber : 272, className : "ChartingState", methodName : "create"});
		var _g = 0;
		while(_g < 9000000) {
			var i = _g++;
			var seg = TimingStruct.getTimingAtBeat(i);
			var start = (i - seg.startBeat) / (seg.bpm / 60);
			var time = (seg.startTime + start) * 1000;
			if(time > flixel_FlxG.sound.music._length) {
				break;
			}
			ChartingState.lengthInBeats = i;
		}
		ChartingState.lengthInSteps = ChartingState.lengthInBeats * 4;
		haxe_Log.trace("LENGTH IN STEPS " + ChartingState.lengthInSteps + " | LENGTH IN BEATS " + ChartingState.lengthInBeats + " | SECTIONS: " + Math.floor((ChartingState.lengthInSteps + 16) / 16),{ fileName : "source/ChartingState.hx", lineNumber : 291, className : "ChartingState", methodName : "create"});
		var sections = Math.floor((ChartingState.lengthInSteps + 16) / 16);
		var targetY = this.getYfromStrum(flixel_FlxG.sound.music._length);
		haxe_Log.trace("TARGET " + targetY,{ fileName : "source/ChartingState.hx", lineNumber : 297, className : "ChartingState", methodName : "create"});
		var _g = 0;
		var _g1 = Math.round(targetY / 640) + 1920;
		while(_g < _g1) {
			var awfgaw = _g++;
			var renderer = new SectionRender(0,640 * awfgaw,this.GRID_SIZE);
			if(ChartingState._song.notes[awfgaw] == null) {
				ChartingState._song.notes.push(this.newSection(16,true,false,false));
			}
			renderer.section = ChartingState._song.notes[awfgaw];
			this.sectionRenderes.add(renderer);
			var down = this.getYfromStrum(renderer.section.startTime) * this.zoomFactor;
			var sectionicon = ChartingState._song.notes[awfgaw].mustHitSection ? new HealthIcon(ChartingState._song.player1).clone() : new HealthIcon(ChartingState._song.player2).clone();
			sectionicon.set_x(-95);
			sectionicon.set_y(down - 75);
			sectionicon.setGraphicSize(0,45);
			renderer.icon = sectionicon;
			renderer.lastUpdated = ChartingState._song.notes[awfgaw].mustHitSection;
			this.add(sectionicon);
			this.height = Math.floor(renderer.y);
		}
		haxe_Log.trace(this.height,{ fileName : "source/ChartingState.hx", lineNumber : 324, className : "ChartingState", methodName : "create"});
		this.gridBlackLine = new flixel_FlxSprite(this.gridBG.get_width() / 2).makeGraphic(2,this.height,-16777216);
		ChartingState.leftIcon.setGraphicSize(0,45);
		ChartingState.rightIcon.setGraphicSize(0,45);
		this.add(ChartingState.leftIcon);
		this.add(ChartingState.rightIcon);
		ChartingState.leftIcon.setPosition(0,-100);
		ChartingState.rightIcon.setPosition(this.gridBG.get_width() / 2,-100);
		ChartingState.leftIcon.scrollFactor.set();
		ChartingState.rightIcon.scrollFactor.set();
		this.bpmTxt = new flixel_text_FlxText(1000,50,0,"",16);
		this.bpmTxt.scrollFactor.set();
		this.add(this.bpmTxt);
		this.strumLine = new flixel_FlxSprite(0,0).makeGraphic(this.GRID_SIZE * 8 | 0,4);
		this.dummyArrow = new flixel_FlxSprite().makeGraphic(this.GRID_SIZE,this.GRID_SIZE);
		var tabs = [{ name : "Song", label : "Song Data"},{ name : "Section", label : "Section Data"},{ name : "Note", label : "Note Data"},{ name : "Assets", label : "Assets"}];
		this.UI_box = new flixel_addons_ui_FlxUITabMenu(null,null,tabs,null,true);
		this.UI_box.scrollFactor.set();
		this.UI_box.resize(300,400);
		this.UI_box.set_x(flixel_FlxG.width / 2 + 40);
		this.UI_box.set_y(20);
		var opt_tabs = [{ name : "Options", label : "Song Options"},{ name : "Events", label : "Song Events"}];
		this.UI_options = new flixel_addons_ui_FlxUITabMenu(null,null,opt_tabs,null,true);
		this.UI_options.scrollFactor.set();
		this.UI_options.set_selected_tab(0);
		this.UI_options.resize(300,200);
		this.UI_options.set_x(this.UI_box.x);
		this.UI_options.set_y(flixel_FlxG.height - 300);
		this.add(this.UI_options);
		this.add(this.UI_box);
		this.addSongUI();
		this.addSectionUI();
		this.addNoteUI();
		this.addOptionsUI();
		this.addEventsUI();
		this.regenerateLines();
		this.updateGrid();
		haxe_Log.trace("bruh",{ fileName : "source/ChartingState.hx", lineNumber : 390, className : "ChartingState", methodName : "create"});
		this.add(this.sectionRenderes);
		this.add(this.dummyArrow);
		this.add(this.strumLine);
		this.add(this.lines);
		this.add(this.texts);
		this.add(this.gridBlackLine);
		this.add(this.curRenderedNotes);
		this.add(this.curRenderedSustains);
		this.selectedBoxes = new flixel_group_FlxTypedGroup();
		this.add(this.selectedBoxes);
		haxe_Log.trace("bruh",{ fileName : "source/ChartingState.hx", lineNumber : 423, className : "ChartingState", methodName : "create"});
		this.add(this.snapText);
		haxe_Log.trace("bruh",{ fileName : "source/ChartingState.hx", lineNumber : 428, className : "ChartingState", methodName : "create"});
		haxe_Log.trace("create",{ fileName : "source/ChartingState.hx", lineNumber : 430, className : "ChartingState", methodName : "create"});
		TimingStruct.clearTimings();
		var currentIndex = 0;
		var _g = 0;
		var _g1 = ChartingState._song.eventObjects;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.type == "BPM Change") {
				var beat = i.position;
				var endBeat = Infinity;
				TimingStruct.addTiming(beat,i.value,endBeat,0);
				if(currentIndex != 0) {
					var data = TimingStruct.AllTimings[currentIndex - 1];
					data.endBeat = beat;
					data.length = (data.endBeat - data.startBeat) / (data.bpm / 60);
					var step = 60 / data.bpm * 1000 / 4;
					TimingStruct.AllTimings[currentIndex].startStep = Math.floor(data.endBeat / (data.bpm / 60) * 1000 / step);
					TimingStruct.AllTimings[currentIndex].startTime = data.startTime + data.length;
				}
				++currentIndex;
			}
		}
		MusicBeatState.prototype.create.call(this);
	}
	,texts: null
	,regenerateLines: function() {
		while(this.lines.members.length > 0) {
			this.lines.members[0].destroy();
			HxOverrides.remove(this.lines.members,this.lines.members[0]);
		}
		while(this.texts.members.length > 0) {
			this.texts.members[0].destroy();
			HxOverrides.remove(this.texts.members,this.texts.members[0]);
		}
		haxe_Log.trace("removed lines and texts",{ fileName : "source/ChartingState.hx", lineNumber : 476, className : "ChartingState", methodName : "regenerateLines"});
		if(ChartingState._song.eventObjects != null) {
			var _g = 0;
			var _g1 = ChartingState._song.eventObjects;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var seg = TimingStruct.getTimingAtBeat(i.position);
				var posi = 0;
				if(seg != null) {
					var start = (i.position - seg.startBeat) / (seg.bpm / 60);
					posi = seg.startTime + start;
				}
				var pos = this.getYfromStrum(posi * 1000) * this.zoomFactor;
				if(pos < 0) {
					pos = 0;
				}
				var type = i.type;
				var text = new flixel_text_FlxText(-190,pos,0,i.name + "\n" + type + "\n" + i.value,12);
				var line = new flixel_FlxSprite(0,pos).makeGraphic(this.GRID_SIZE * 8 | 0,4,-16776961);
				line.set_alpha(0.2);
				this.lines.add(line);
				this.texts.add(text);
				this.add(line);
				this.add(text);
			}
		}
		var i = new flixel_group_FlxTypedGroupIterator(this.sectionRenderes.members,null);
		while(i.hasNext()) {
			var i1 = i.next();
			var pos = this.getYfromStrum(i1.section.startTime) * this.zoomFactor;
			i1.icon.set_y(pos - 75);
			var line = new flixel_FlxSprite(0,pos).makeGraphic(this.GRID_SIZE * 8 | 0,4,-16777216);
			line.set_alpha(0.4);
			this.lines.add(line);
		}
	}
	,addGrid: function(divisions) {
		if(divisions == null) {
			divisions = 1;
		}
		var h = this.GRID_SIZE / divisions;
		if(Math.floor(h) != h) {
			h = this.GRID_SIZE;
		}
		this.remove(this.gridBG);
		this.gridBG = flixel_addons_display_FlxGridOverlay.create(this.GRID_SIZE,h | 0,this.GRID_SIZE * 8,this.GRID_SIZE * 16);
		haxe_Log.trace(this.gridBG.get_height(),{ fileName : "source/ChartingState.hx", lineNumber : 531, className : "ChartingState", methodName : "addGrid"});
		haxe_Log.trace("height of " + Math.floor(ChartingState.lengthInSteps),{ fileName : "source/ChartingState.hx", lineNumber : 535, className : "ChartingState", methodName : "addGrid"});
		var totalHeight = 0;
		this.remove(this.gridBlackLine);
		this.gridBlackLine = new flixel_FlxSprite(this.gridBG.get_width() / 2).makeGraphic(2,Math.floor(ChartingState.lengthInSteps) | 0,-16777216);
		this.add(this.gridBlackLine);
	}
	,stepperDiv: null
	,check_snap: null
	,listOfEvents: null
	,currentSelectedEventName: null
	,savedType: null
	,savedValue: null
	,currentEventPosition: null
	,containsName: function(name,events) {
		var _g = 0;
		while(_g < events.length) {
			var i = events[_g];
			++_g;
			var thisName = Reflect.field(i,"name");
			if(thisName == name) {
				return i;
			}
		}
		return null;
	}
	,chartEvents: null
	,Typeables: null
	,addEventsUI: function() {
		var _gthis = this;
		if(ChartingState._song.eventObjects == null) {
			ChartingState._song.eventObjects = [new Event("Init BPM",0,ChartingState._song.bpm,"BPM Change")];
		}
		var firstEvent = "";
		if(Lambda.count(ChartingState._song.eventObjects) != 0) {
			firstEvent = ChartingState._song.eventObjects[0].name;
		}
		var listLabel = new flixel_text_FlxText(10,5,null,"List of Events");
		var nameLabel = new flixel_text_FlxText(150,5,null,"Event Name");
		var eventName = new flixel_addons_ui_FlxUIInputText(150,20,80,"");
		var typeLabel = new flixel_text_FlxText(10,45,null,"Type of Event");
		var eventType = new flixel_addons_ui_FlxUIDropDownMenu(10,60,flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(["BPM Change","Scroll Speed Change"],true));
		var valueLabel = new flixel_text_FlxText(150,45,null,"Event Value");
		var eventValue = new flixel_addons_ui_FlxUIInputText(150,60,80,"");
		var eventSave = new flixel_ui_FlxButton(10,155,"Save Event",function() {
			var pog = new Event(_gthis.currentSelectedEventName,_gthis.currentEventPosition,HelperFunctions.truncateFloat(parseFloat(_gthis.savedValue),3),_gthis.savedType);
			haxe_Log.trace("trying to save " + _gthis.currentSelectedEventName,{ fileName : "source/ChartingState.hx", lineNumber : 605, className : "ChartingState", methodName : "addEventsUI"});
			var obj = _gthis.containsName(pog.name,ChartingState._song.eventObjects);
			if(pog.name == "") {
				return;
			}
			haxe_Log.trace("yeah we can save it",{ fileName : "source/ChartingState.hx", lineNumber : 613, className : "ChartingState", methodName : "addEventsUI"});
			if(obj != null) {
				HxOverrides.remove(ChartingState._song.eventObjects,obj);
			}
			ChartingState._song.eventObjects.push(pog);
			haxe_Log.trace(ChartingState._song.eventObjects.length,{ fileName : "source/ChartingState.hx", lineNumber : 619, className : "ChartingState", methodName : "addEventsUI"});
			TimingStruct.clearTimings();
			var currentIndex = 0;
			var _g = 0;
			var _g1 = ChartingState._song.eventObjects;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var name = Reflect.field(i,"name");
				var type = Reflect.field(i,"type");
				var pos = Reflect.field(i,"position");
				var value = Reflect.field(i,"value");
				haxe_Log.trace(i.type,{ fileName : "source/ChartingState.hx", lineNumber : 631, className : "ChartingState", methodName : "addEventsUI"});
				if(type == "BPM Change") {
					var beat = pos;
					var endBeat = Infinity;
					TimingStruct.addTiming(beat,value,endBeat,0);
					if(currentIndex != 0) {
						var data = TimingStruct.AllTimings[currentIndex - 1];
						data.endBeat = beat;
						data.length = (data.endBeat - data.startBeat) / (data.bpm / 60);
						var step = 60 / data.bpm * 1000 / 4;
						TimingStruct.AllTimings[currentIndex].startStep = Math.floor(data.endBeat / (data.bpm / 60) * 1000 / step);
						TimingStruct.AllTimings[currentIndex].startTime = data.startTime + data.length;
					}
					++currentIndex;
				}
			}
			if(pog.type == "BPM Change") {
				_gthis.recalculateAllSectionTimes();
			}
			_gthis.regenerateLines();
			var listofnames = [];
			var _g2_current = 0;
			var _g2_array = ChartingState._song.eventObjects;
			while(_g2_current < _g2_array.length) {
				var _g3_value = _g2_array[_g2_current];
				var _g3_key = _g2_current++;
				var key = _g3_key;
				var value = _g3_value;
				listofnames.push(value.name);
			}
			_gthis.listOfEvents.setData(flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(listofnames,true));
			_gthis.listOfEvents.set_selectedLabel(pog.name);
			haxe_Log.trace("end",{ fileName : "source/ChartingState.hx", lineNumber : 669, className : "ChartingState", methodName : "addEventsUI"});
		});
		var posLabel = new flixel_text_FlxText(150,85,null,"Event Position");
		var eventPos = new flixel_addons_ui_FlxUIInputText(150,100,80,"");
		var eventAdd = new flixel_ui_FlxButton(95,155,"Add Event",function() {
			var pog = new Event("New Event " + HelperFunctions.truncateFloat(_gthis.curDecimalBeat,3),HelperFunctions.truncateFloat(_gthis.curDecimalBeat,3),ChartingState._song.bpm,"BPM Change");
			haxe_Log.trace("adding " + pog.name,{ fileName : "source/ChartingState.hx", lineNumber : 677, className : "ChartingState", methodName : "addEventsUI"});
			var obj = _gthis.containsName(pog.name,ChartingState._song.eventObjects);
			if(obj != null) {
				return;
			}
			haxe_Log.trace("yeah we can add it",{ fileName : "source/ChartingState.hx", lineNumber : 684, className : "ChartingState", methodName : "addEventsUI"});
			ChartingState._song.eventObjects.push(pog);
			eventName.set_text(pog.name);
			eventType.set_selectedLabel(pog.type);
			eventValue.set_text(pog.value + "");
			eventPos.set_text(pog.position + "");
			_gthis.currentSelectedEventName = pog.name;
			_gthis.currentEventPosition = pog.position;
			_gthis.savedType = pog.type;
			_gthis.savedValue = pog.value + "";
			var listofnames = [];
			var _g_current = 0;
			var _g_array = ChartingState._song.eventObjects;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var key = _g1_key;
				var value = _g1_value;
				listofnames.push(value.name);
			}
			_gthis.listOfEvents.setData(flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(listofnames,true));
			_gthis.listOfEvents.set_selectedLabel(pog.name);
			TimingStruct.clearTimings();
			var currentIndex = 0;
			var _g = 0;
			var _g1 = ChartingState._song.eventObjects;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var name = Reflect.field(i,"name");
				var type = Reflect.field(i,"type");
				var pos = Reflect.field(i,"position");
				var value = Reflect.field(i,"value");
				haxe_Log.trace(i.type,{ fileName : "source/ChartingState.hx", lineNumber : 718, className : "ChartingState", methodName : "addEventsUI"});
				if(type == "BPM Change") {
					var beat = pos;
					var endBeat = Infinity;
					TimingStruct.addTiming(beat,value,endBeat,0);
					if(currentIndex != 0) {
						var data = TimingStruct.AllTimings[currentIndex - 1];
						data.endBeat = beat;
						data.length = (data.endBeat - data.startBeat) / (data.bpm / 60);
						var step = 60 / data.bpm * 1000 / 4;
						TimingStruct.AllTimings[currentIndex].startStep = Math.floor(data.endBeat / (data.bpm / 60) * 1000 / step);
						TimingStruct.AllTimings[currentIndex].startTime = data.startTime + data.length;
					}
					++currentIndex;
				}
			}
			haxe_Log.trace("BPM CHANGES:",{ fileName : "source/ChartingState.hx", lineNumber : 740, className : "ChartingState", methodName : "addEventsUI"});
			var _g = 0;
			var _g1 = TimingStruct.AllTimings;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				haxe_Log.trace(i.bpm + " - START: " + i.startBeat + " - END: " + i.endBeat + " - START-TIME: " + i.startTime,{ fileName : "source/ChartingState.hx", lineNumber : 743, className : "ChartingState", methodName : "addEventsUI"});
			}
			_gthis.recalculateAllSectionTimes();
			_gthis.regenerateLines();
		});
		var eventRemove = new flixel_ui_FlxButton(180,155,"Remove Event",function() {
			haxe_Log.trace("lets see if we can remove " + _gthis.listOfEvents.get_selectedLabel(),{ fileName : "source/ChartingState.hx", lineNumber : 753, className : "ChartingState", methodName : "addEventsUI"});
			var obj = _gthis.containsName(_gthis.listOfEvents.get_selectedLabel(),ChartingState._song.eventObjects);
			haxe_Log.trace(obj,{ fileName : "source/ChartingState.hx", lineNumber : 757, className : "ChartingState", methodName : "addEventsUI"});
			if(obj == null) {
				return;
			}
			haxe_Log.trace("yeah we can remove it it",{ fileName : "source/ChartingState.hx", lineNumber : 762, className : "ChartingState", methodName : "addEventsUI"});
			HxOverrides.remove(ChartingState._song.eventObjects,obj);
			var firstEvent = ChartingState._song.eventObjects[0];
			if(firstEvent == null) {
				ChartingState._song.eventObjects.push(new Event("Init BPM",0,ChartingState._song.bpm,"BPM Change"));
				firstEvent = ChartingState._song.eventObjects[0];
			}
			eventName.set_text(firstEvent.name);
			eventType.set_selectedLabel(firstEvent.type);
			eventValue.set_text(firstEvent.value + "");
			eventPos.set_text(firstEvent.position + "");
			_gthis.currentSelectedEventName = firstEvent.name;
			_gthis.currentEventPosition = firstEvent.position;
			_gthis.savedType = firstEvent.type;
			_gthis.savedValue = firstEvent.value + "";
			var listofnames = [];
			var _g_current = 0;
			var _g_array = ChartingState._song.eventObjects;
			while(_g_current < _g_array.length) {
				var _g1_value = _g_array[_g_current];
				var _g1_key = _g_current++;
				var key = _g1_key;
				var value = _g1_value;
				listofnames.push(value.name);
			}
			_gthis.listOfEvents.setData(flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(listofnames,true));
			_gthis.listOfEvents.set_selectedLabel(firstEvent.name);
			TimingStruct.clearTimings();
			var currentIndex = 0;
			var _g = 0;
			var _g1 = ChartingState._song.eventObjects;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var name = Reflect.field(i,"name");
				var type = Reflect.field(i,"type");
				var pos = Reflect.field(i,"position");
				var value = Reflect.field(i,"value");
				haxe_Log.trace(i.type,{ fileName : "source/ChartingState.hx", lineNumber : 804, className : "ChartingState", methodName : "addEventsUI"});
				if(type == "BPM Change") {
					var beat = pos;
					var endBeat = Infinity;
					TimingStruct.addTiming(beat,value,endBeat,0);
					if(currentIndex != 0) {
						var data = TimingStruct.AllTimings[currentIndex - 1];
						data.endBeat = beat;
						data.length = (data.endBeat - data.startBeat) / (data.bpm / 60);
						var step = 60 / data.bpm * 1000 / 4;
						TimingStruct.AllTimings[currentIndex].startStep = Math.floor(data.endBeat / (data.bpm / 60) * 1000 / step);
						TimingStruct.AllTimings[currentIndex].startTime = data.startTime + data.length;
					}
					++currentIndex;
				}
			}
			_gthis.recalculateAllSectionTimes();
			_gthis.regenerateLines();
		});
		var updatePos = new flixel_ui_FlxButton(150,120,"Update Pos",function() {
			var obj = _gthis.containsName(_gthis.currentSelectedEventName,ChartingState._song.eventObjects);
			if(obj == null) {
				return;
			}
			_gthis.currentEventPosition = _gthis.curDecimalBeat;
			obj.position = _gthis.currentEventPosition;
			eventPos.set_text(_gthis.currentEventPosition + "");
		});
		var listofnames = [];
		var firstEventObject = null;
		var _g = 0;
		var _g1 = ChartingState._song.eventObjects;
		while(_g < _g1.length) {
			var event = _g1[_g];
			++_g;
			var name = Reflect.field(event,"name");
			var type = Reflect.field(event,"type");
			var pos = Reflect.field(event,"position");
			var value = Reflect.field(event,"value");
			haxe_Log.trace(value,{ fileName : "source/ChartingState.hx", lineNumber : 854, className : "ChartingState", methodName : "addEventsUI"});
			var eventt = new Event(name,pos,value,type);
			this.chartEvents.push(eventt);
			listofnames.push(name);
		}
		ChartingState._song.eventObjects = this.chartEvents;
		if(listofnames.length == 0) {
			listofnames.push("");
		}
		if(ChartingState._song.eventObjects.length != 0) {
			firstEventObject = ChartingState._song.eventObjects[0];
		}
		haxe_Log.trace("bruh",{ fileName : "source/ChartingState.hx", lineNumber : 869, className : "ChartingState", methodName : "addEventsUI"});
		if(firstEvent != "") {
			haxe_Log.trace(firstEventObject,{ fileName : "source/ChartingState.hx", lineNumber : 874, className : "ChartingState", methodName : "addEventsUI"});
			eventName.set_text(firstEventObject.name);
			haxe_Log.trace("bruh",{ fileName : "source/ChartingState.hx", lineNumber : 876, className : "ChartingState", methodName : "addEventsUI"});
			eventType.set_selectedLabel(firstEventObject.type);
			haxe_Log.trace("bruh",{ fileName : "source/ChartingState.hx", lineNumber : 878, className : "ChartingState", methodName : "addEventsUI"});
			eventValue.set_text(firstEventObject.value + "");
			haxe_Log.trace("bruh",{ fileName : "source/ChartingState.hx", lineNumber : 880, className : "ChartingState", methodName : "addEventsUI"});
			this.currentSelectedEventName = firstEventObject.name;
			haxe_Log.trace("bruh",{ fileName : "source/ChartingState.hx", lineNumber : 882, className : "ChartingState", methodName : "addEventsUI"});
			this.currentEventPosition = firstEventObject.position;
			haxe_Log.trace("bruh",{ fileName : "source/ChartingState.hx", lineNumber : 884, className : "ChartingState", methodName : "addEventsUI"});
			eventPos.set_text(this.currentEventPosition + "");
			haxe_Log.trace("bruh",{ fileName : "source/ChartingState.hx", lineNumber : 886, className : "ChartingState", methodName : "addEventsUI"});
		}
		this.listOfEvents = new flixel_addons_ui_FlxUIDropDownMenu(10,20,flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(listofnames,true),function(name) {
			var event = _gthis.containsName(_gthis.listOfEvents.get_selectedLabel(),ChartingState._song.eventObjects);
			if(event == null) {
				return;
			}
			haxe_Log.trace("selecting " + name + " found: " + Std.string(event),{ fileName : "source/ChartingState.hx", lineNumber : 896, className : "ChartingState", methodName : "addEventsUI"});
			eventName.set_text(event.name);
			eventValue.set_text(event.value + "");
			eventPos.set_text(event.position + "");
			eventType.set_selectedLabel(event.type);
			_gthis.currentSelectedEventName = event.name;
			_gthis.currentEventPosition = event.position;
		});
		eventValue.callback = function(string,string2) {
			haxe_Log.trace(string + " - value",{ fileName : "source/ChartingState.hx", lineNumber : 908, className : "ChartingState", methodName : "addEventsUI"});
			_gthis.savedValue = string;
		};
		eventType.callback = function(type) {
			_gthis.savedType = eventType.get_selectedLabel();
		};
		eventName.callback = function(string,string2) {
			var obj = _gthis.containsName(_gthis.currentSelectedEventName,ChartingState._song.eventObjects);
			if(obj == null) {
				_gthis.currentSelectedEventName = string;
				return;
			}
			obj = _gthis.containsName(string,ChartingState._song.eventObjects);
			if(obj != null) {
				return;
			}
			obj = _gthis.containsName(_gthis.currentSelectedEventName,ChartingState._song.eventObjects);
			obj.name = string;
			_gthis.currentSelectedEventName = string;
		};
		haxe_Log.trace("bruh",{ fileName : "source/ChartingState.hx", lineNumber : 932, className : "ChartingState", methodName : "addEventsUI"});
		this.Typeables.push(eventPos);
		this.Typeables.push(eventValue);
		this.Typeables.push(eventName);
		var tab_events = new flixel_addons_ui_FlxUI(null,this.UI_options);
		tab_events.name = "Events";
		tab_events.add(posLabel);
		tab_events.add(valueLabel);
		tab_events.add(nameLabel);
		tab_events.add(listLabel);
		tab_events.add(typeLabel);
		tab_events.add(eventName);
		tab_events.add(eventValue);
		tab_events.add(eventSave);
		tab_events.add(eventAdd);
		tab_events.add(eventRemove);
		tab_events.add(eventPos);
		tab_events.add(updatePos);
		tab_events.add(eventType);
		tab_events.add(this.listOfEvents);
		this.UI_options.addGroup(tab_events);
	}
	,addOptionsUI: function() {
		var _gthis = this;
		var hitsounds = new flixel_addons_ui_FlxUICheckBox(10,60,null,null,"Play hitsounds",100);
		hitsounds.set_checked(false);
		hitsounds.callback = function() {
			_gthis.playClaps = hitsounds.checked;
		};
		var check_mute_inst = new flixel_addons_ui_FlxUICheckBox(10,90,null,null,"Mute Instrumental",100);
		check_mute_inst.set_checked(false);
		check_mute_inst.callback = function() {
			var vol = 1;
			if(check_mute_inst.checked) {
				vol = 0;
			}
			flixel_FlxG.sound.music.set_volume(vol);
		};
		this.check_snap = new flixel_addons_ui_FlxUICheckBox(80,25,null,null,"Snap to grid",100);
		this.check_snap.set_checked(this.defaultSnap);
		this.check_snap.callback = function() {
			_gthis.defaultSnap = _gthis.check_snap.checked;
			haxe_Log.trace("CHECKED!",{ fileName : "source/ChartingState.hx", lineNumber : 986, className : "ChartingState", methodName : "addOptionsUI"});
		};
		var tab_options = new flixel_addons_ui_FlxUI(null,this.UI_options);
		tab_options.name = "Options";
		tab_options.add(hitsounds);
		tab_options.add(check_mute_inst);
		this.UI_options.addGroup(tab_options);
	}
	,addSongUI: function() {
		var _gthis = this;
		var UI_songTitle = new flixel_addons_ui_FlxUIInputText(10,10,70,ChartingState._song.song,8);
		this.typingShit = UI_songTitle;
		var check_voices = new flixel_addons_ui_FlxUICheckBox(10,25,null,null,"Has voice track",100);
		check_voices.set_checked(ChartingState._song.needsVoices);
		check_voices.callback = function() {
			ChartingState._song.needsVoices = check_voices.checked;
			haxe_Log.trace("CHECKED!",{ fileName : "source/ChartingState.hx", lineNumber : 1007, className : "ChartingState", methodName : "addSongUI"});
		};
		var saveButton = new flixel_ui_FlxButton(110,8,"Save",function() {
			_gthis.saveLevel();
		});
		var reloadSong = new flixel_ui_FlxButton(saveButton.x + saveButton.get_width() + 10,saveButton.y,"Reload Audio",function() {
			_gthis.loadSong(ChartingState._song.song);
		});
		var reloadSongJson = new flixel_ui_FlxButton(reloadSong.x,saveButton.y + 30,"Reload JSON",function() {
			_gthis.loadJson(ChartingState._song.song.toLowerCase());
		});
		var restart = new flixel_ui_FlxButton(10,140,"Reset Chart",function() {
			var _g = 0;
			var _g1 = ChartingState._song.notes.length;
			while(_g < _g1) {
				var ii = _g++;
				var _g2 = 0;
				var _g3 = ChartingState._song.notes[ii].sectionNotes.length;
				while(_g2 < _g3) {
					var i = _g2++;
					ChartingState._song.notes[ii].sectionNotes = [];
				}
			}
			_gthis.resetSection(true);
		});
		var loadAutosaveBtn = new flixel_ui_FlxButton(reloadSongJson.x,reloadSongJson.y + 30,"load autosave",$bind(this,this.loadAutosave));
		var stepperBPM = new flixel_addons_ui_FlxUINumericStepper(10,65,0.1,1,1.0,5000.0,1);
		stepperBPM.set_value(Conductor.bpm);
		stepperBPM.name = "song_bpm";
		var stepperBPMLabel = new flixel_text_FlxText(74,65,null,"BPM");
		var stepperSpeed = new flixel_addons_ui_FlxUINumericStepper(10,80,0.1,1,0.1,10,1);
		stepperSpeed.set_value(ChartingState._song.speed);
		stepperSpeed.name = "song_speed";
		var stepperSpeedLabel = new flixel_text_FlxText(74,80,null,"Scroll Speed");
		var stepperVocalVol = new flixel_addons_ui_FlxUINumericStepper(10,95,0.1,1,0.1,10,1);
		stepperVocalVol.set_value(this.vocals._volume);
		stepperVocalVol.name = "song_vocalvol";
		var stepperVocalVolLabel = new flixel_text_FlxText(74,95,null,"Vocal Volume");
		var stepperSongVol = new flixel_addons_ui_FlxUINumericStepper(10,110,0.1,1,0.1,10,1);
		stepperSongVol.set_value(flixel_FlxG.sound.music._volume);
		stepperSongVol.name = "song_instvol";
		var stepperSongVolLabel = new flixel_text_FlxText(74,110,null,"Instrumental Volume");
		var shiftNoteDialLabel = new flixel_text_FlxText(10,245,null,"Shift Note FWD by (Section)");
		var stepperShiftNoteDial = new flixel_addons_ui_FlxUINumericStepper(10,260,1,0,-1000,1000,0);
		stepperShiftNoteDial.name = "song_shiftnote";
		var shiftNoteDialLabel2 = new flixel_text_FlxText(10,275,null,"Shift Note FWD by (Step)");
		var stepperShiftNoteDialstep = new flixel_addons_ui_FlxUINumericStepper(10,290,1,0,-1000,1000,0);
		stepperShiftNoteDialstep.name = "song_shiftnotems";
		var shiftNoteDialLabel3 = new flixel_text_FlxText(10,305,null,"Shift Note FWD by (ms)");
		var stepperShiftNoteDialms = new flixel_addons_ui_FlxUINumericStepper(10,320,1,0,-1000,1000,2);
		stepperShiftNoteDialms.name = "song_shiftnotems";
		var shiftNoteButton = new flixel_ui_FlxButton(10,335,"Shift",function() {
			_gthis.shiftNotes(stepperShiftNoteDial.value | 0,stepperShiftNoteDialstep.value | 0,stepperShiftNoteDialms.value | 0);
		});
		var characters = CoolUtil.coolTextFile(Paths.getPath("data/characterList" + ".txt","TEXT",null));
		var gfVersions = CoolUtil.coolTextFile(Paths.getPath("data/gfVersionList" + ".txt","TEXT",null));
		var stages = CoolUtil.coolTextFile(Paths.getPath("data/stageList" + ".txt","TEXT",null));
		var noteStyles = CoolUtil.coolTextFile(Paths.getPath("data/noteStyleList" + ".txt","TEXT",null));
		var player1DropDown = new flixel_addons_ui_FlxUIDropDownMenu(10,100,flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(characters,true),function(character) {
			ChartingState._song.player1 = characters[Std.parseInt(character)];
		});
		player1DropDown.set_selectedLabel(ChartingState._song.player1);
		var player1Label = new flixel_text_FlxText(10,80,64,"Player 1");
		var player2DropDown = new flixel_addons_ui_FlxUIDropDownMenu(140,100,flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(characters,true),function(character) {
			ChartingState._song.player2 = characters[Std.parseInt(character)];
		});
		player2DropDown.set_selectedLabel(ChartingState._song.player2);
		var player2Label = new flixel_text_FlxText(140,80,64,"Player 2");
		var gfVersionDropDown = new flixel_addons_ui_FlxUIDropDownMenu(10,200,flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(gfVersions,true),function(gfVersion) {
			ChartingState._song.gfVersion = gfVersions[Std.parseInt(gfVersion)];
		});
		gfVersionDropDown.set_selectedLabel(ChartingState._song.gfVersion);
		var gfVersionLabel = new flixel_text_FlxText(10,180,64,"Girlfriend");
		var stageDropDown = new flixel_addons_ui_FlxUIDropDownMenu(140,200,flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(stages,true),function(stage) {
			ChartingState._song.stage = stages[Std.parseInt(stage)];
		});
		stageDropDown.set_selectedLabel(ChartingState._song.stage);
		var stageLabel = new flixel_text_FlxText(140,180,64,"Stage");
		var noteStyleDropDown = new flixel_addons_ui_FlxUIDropDownMenu(10,300,flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray(noteStyles,true),function(noteStyle) {
			ChartingState._song.noteStyle = noteStyles[Std.parseInt(noteStyle)];
		});
		noteStyleDropDown.set_selectedLabel(ChartingState._song.noteStyle);
		var noteStyleLabel = new flixel_text_FlxText(10,280,64,"Note Skin");
		var tab_group_song = new flixel_addons_ui_FlxUI(null,this.UI_box);
		tab_group_song.name = "Song";
		tab_group_song.add(UI_songTitle);
		tab_group_song.add(restart);
		tab_group_song.add(check_voices);
		tab_group_song.add(saveButton);
		tab_group_song.add(reloadSong);
		tab_group_song.add(reloadSongJson);
		tab_group_song.add(loadAutosaveBtn);
		tab_group_song.add(stepperBPM);
		tab_group_song.add(stepperBPMLabel);
		tab_group_song.add(stepperSpeed);
		tab_group_song.add(stepperSpeedLabel);
		tab_group_song.add(stepperVocalVol);
		tab_group_song.add(stepperVocalVolLabel);
		tab_group_song.add(stepperSongVol);
		tab_group_song.add(stepperSongVolLabel);
		tab_group_song.add(shiftNoteDialLabel);
		tab_group_song.add(stepperShiftNoteDial);
		tab_group_song.add(shiftNoteDialLabel2);
		tab_group_song.add(stepperShiftNoteDialstep);
		tab_group_song.add(shiftNoteDialLabel3);
		tab_group_song.add(stepperShiftNoteDialms);
		tab_group_song.add(shiftNoteButton);
		var tab_group_assets = new flixel_addons_ui_FlxUI(null,this.UI_box);
		tab_group_assets.name = "Assets";
		tab_group_assets.add(noteStyleDropDown);
		tab_group_assets.add(noteStyleLabel);
		tab_group_assets.add(gfVersionDropDown);
		tab_group_assets.add(gfVersionLabel);
		tab_group_assets.add(stageDropDown);
		tab_group_assets.add(stageLabel);
		tab_group_assets.add(player1DropDown);
		tab_group_assets.add(player2DropDown);
		tab_group_assets.add(player1Label);
		tab_group_assets.add(player2Label);
		this.UI_box.addGroup(tab_group_song);
		this.UI_box.addGroup(tab_group_assets);
		this.camFollow = new flixel_FlxObject(280,0,1,1);
		this.add(this.camFollow);
		flixel_FlxG.camera.follow(this.camFollow);
	}
	,stepperLength: null
	,check_mustHitSection: null
	,check_changeBPM: null
	,stepperSectionBPM: null
	,check_p1AltAnim: null
	,check_p2AltAnim: null
	,addSectionUI: function() {
		var _gthis = this;
		var tab_group_section = new flixel_addons_ui_FlxUI(null,this.UI_box);
		tab_group_section.name = "Section";
		var stepperCopy = new flixel_addons_ui_FlxUINumericStepper(110,132,1,1,-999,999,0);
		var stepperCopyLabel = new flixel_text_FlxText(174,132,null,"sections back");
		var copyButton = new flixel_ui_FlxButton(10,130,"Copy last section",function() {
			_gthis.copySection(stepperCopy.value | 0);
		});
		var clearSectionButton = new flixel_ui_FlxButton(10,150,"Clear Section",$bind(this,this.clearSection));
		var swapSection = new flixel_ui_FlxButton(10,170,"Swap Section",function() {
			var secit = ChartingState._song.notes[_gthis.curSection];
			if(secit != null) {
				var newSwaps = [];
				haxe_Log.trace(ChartingState._song.notes[_gthis.curSection],{ fileName : "source/ChartingState.hx", lineNumber : 1212, className : "ChartingState", methodName : "addSectionUI"});
				var _g = 0;
				var _g1 = secit.sectionNotes.length;
				while(_g < _g1) {
					var i = _g++;
					var note = secit.sectionNotes[i];
					if(note[1] < 4) {
						note[1] += 4;
					} else {
						note[1] -= 4;
					}
					newSwaps.push(note);
				}
				secit.sectionNotes = newSwaps;
				var _g = 0;
				var _g1 = _gthis.shownNotes;
				while(_g < _g1.length) {
					var i = _g1[_g];
					++_g;
					var _g2 = 0;
					while(_g2 < newSwaps.length) {
						var ii = newSwaps[_g2];
						++_g2;
						if(i.strumTime == ii[0] && i.noteData == ii[1] % 4) {
							i.set_x(Math.floor(ii[1] * _gthis.GRID_SIZE));
							i.set_y(Math.floor(_gthis.getYfromStrum(ii[0]) * _gthis.zoomFactor));
							if(i.sustainLength > 0 && i.noteCharterObject != null) {
								i.noteCharterObject.set_x(i.x + _gthis.GRID_SIZE / 2);
							}
						}
					}
				}
			}
		});
		this.check_mustHitSection = new flixel_addons_ui_FlxUICheckBox(10,30,null,null,"Camera Points to P1?",100,null,function() {
			var sect = _gthis.lastUpdatedSection;
			haxe_Log.trace(sect,{ fileName : "source/ChartingState.hx", lineNumber : 1242, className : "ChartingState", methodName : "addSectionUI"});
			if(sect == null) {
				return;
			}
			sect.mustHitSection = _gthis.check_mustHitSection.checked;
			var i = new flixel_group_FlxTypedGroupIterator(_gthis.sectionRenderes.members,null);
			while(i.hasNext()) {
				var i1 = i.next();
				if(i1.section.startTime == sect.startTime) {
					var cachedY = i1.icon.y;
					_gthis.remove(i1.icon);
					var sectionicon = _gthis.check_mustHitSection.checked ? new HealthIcon(ChartingState._song.player1).clone() : new HealthIcon(ChartingState._song.player2).clone();
					sectionicon.set_x(-95);
					sectionicon.set_y(cachedY);
					sectionicon.setGraphicSize(0,45);
					i1.icon = sectionicon;
					i1.lastUpdated = sect.mustHitSection;
					_gthis.add(sectionicon);
				}
			}
		});
		this.check_mustHitSection.set_checked(true);
		this.check_p1AltAnim = new flixel_addons_ui_FlxUICheckBox(10,340,null,null,"P1 Alternate Animation",100);
		this.check_p1AltAnim.name = "check_p1AltAnim";
		this.check_p2AltAnim = new flixel_addons_ui_FlxUICheckBox(200,340,null,null,"P2 Alternate Animation",100);
		this.check_p2AltAnim.name = "check_p2AltAnim";
		var refresh = new flixel_ui_FlxButton(10,60,"Refresh Section",function() {
			var section = _gthis.getSectionByTime(Conductor.songPosition);
			if(section == null) {
				return;
			}
			_gthis.check_mustHitSection.set_checked(section.mustHitSection);
			_gthis.check_p1AltAnim.set_checked(section.p1AltAnim);
			_gthis.check_p2AltAnim.set_checked(section.p2AltAnim);
		});
		var startSection = new flixel_ui_FlxButton(10,85,"Play Here",function() {
			PlayState.SONG = ChartingState._song;
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
			if(!PlayState.isSM) {
				var _this = _gthis.vocals;
				_this.cleanup(_this.autoDestroy,true);
			}
			PlayState.startTime = ChartingState._song.notes[_gthis.curSection].startTime;
			var nextState = LoadingState.getNextState(new PlayState(),false);
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		});
		tab_group_section.add(refresh);
		tab_group_section.add(startSection);
		tab_group_section.add(this.check_mustHitSection);
		tab_group_section.add(this.check_p1AltAnim);
		tab_group_section.add(this.check_p2AltAnim);
		tab_group_section.add(clearSectionButton);
		tab_group_section.add(swapSection);
		this.UI_box.addGroup(tab_group_section);
	}
	,stepperSusLength: null
	,tab_group_note: null
	,goToSection: function(section) {
		var beat = section * 4;
		var data = TimingStruct.getTimingAtBeat(beat);
		if(data == null) {
			return;
		}
		flixel_FlxG.sound.music.set_time((data.startTime + (beat - data.startBeat) / (data.bpm / 60)) * 1000);
		if(!PlayState.isSM) {
			this.vocals.set_time(flixel_FlxG.sound.music._time);
		}
		this.curSection = section;
		haxe_Log.trace("Going too " + flixel_FlxG.sound.music._time + " | " + section + " | Which is at " + beat,{ fileName : "source/ChartingState.hx", lineNumber : 1326, className : "ChartingState", methodName : "goToSection"});
		if(flixel_FlxG.sound.music._time < 0) {
			flixel_FlxG.sound.music.set_time(0);
		} else if(flixel_FlxG.sound.music._time > flixel_FlxG.sound.music._length) {
			flixel_FlxG.sound.music.set_time(flixel_FlxG.sound.music._length);
		}
	}
	,check_naltAnim: null
	,addNoteUI: function() {
		var _gthis = this;
		this.tab_group_note = new flixel_addons_ui_FlxUI(null,this.UI_box);
		this.tab_group_note.name = "Note";
		this.writingNotesText = new flixel_addons_ui_FlxUIText(20,100,0,"");
		this.writingNotesText.setFormat("Arial",20,-1,"left",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.stepperSusLength = new flixel_addons_ui_FlxUINumericStepper(10,10,Conductor.stepCrochet / 2,0,0,Conductor.stepCrochet * 16 * 4);
		this.stepperSusLength.set_value(0);
		this.stepperSusLength.name = "note_susLength";
		this.check_naltAnim = new flixel_addons_ui_FlxUICheckBox(10,150,null,null,"Toggle Alternative Animation",100);
		this.check_naltAnim.callback = function() {
			if(_gthis.curSelectedNote != null) {
				var i = new flixel_group_FlxTypedGroupIterator(_gthis.selectedBoxes.members,null);
				while(i.hasNext()) {
					var i1 = i.next();
					i1.connectedNoteData[3] = _gthis.check_naltAnim.checked;
					var _g = 0;
					var _g1 = ChartingState._song.notes;
					while(_g < _g1.length) {
						var ii = _g1[_g];
						++_g;
						var _g2 = 0;
						var _g3 = ii.sectionNotes;
						while(_g2 < _g3.length) {
							var n = _g3[_g2];
							++_g2;
							if(n[0] == i1.connectedNoteData[0] && n[1] == i1.connectedNoteData[1]) {
								n[3] = i1.connectedNoteData[3];
							}
						}
					}
				}
			}
		};
		var stepperSusLengthLabel = new flixel_text_FlxText(74,10,null,"Note Sustain Length");
		var applyLength = new flixel_ui_FlxButton(10,100,"Apply Data");
		this.tab_group_note.add(this.stepperSusLength);
		this.tab_group_note.add(stepperSusLengthLabel);
		this.tab_group_note.add(applyLength);
		this.tab_group_note.add(this.check_naltAnim);
		this.UI_box.addGroup(this.tab_group_note);
	}
	,pasteNotesFromArray: function(array,fromStrum) {
		if(fromStrum == null) {
			fromStrum = true;
		}
		var _g = 0;
		while(_g < array.length) {
			var i = array[_g];
			++_g;
			var strum = i[0];
			if(fromStrum) {
				strum += Conductor.songPosition;
			}
			var section = 0;
			var _g1 = 0;
			var _g2 = ChartingState._song.notes;
			while(_g1 < _g2.length) {
				var ii = _g2[_g1];
				++_g1;
				if(ii.startTime <= strum && ii.endTime > strum) {
					haxe_Log.trace("new strum " + strum + " - at section " + section,{ fileName : "source/ChartingState.hx", lineNumber : 1404, className : "ChartingState", methodName : "pasteNotesFromArray"});
					var newData = [strum,i[1],i[2]];
					ii.sectionNotes.push(newData);
					var thing = ii.sectionNotes[ii.sectionNotes.length - 1];
					var note = new Note(strum,Math.floor(i[1] % 4),null,false,true);
					note.rawNoteData = i[1];
					note.sustainLength = i[2];
					note.setGraphicSize(Math.floor(this.GRID_SIZE),Math.floor(this.GRID_SIZE));
					note.updateHitbox();
					note.set_x(Math.floor(i[1] * this.GRID_SIZE));
					note.charterSelected = true;
					note.set_y(Math.floor(this.getYfromStrum(strum) * this.zoomFactor));
					var box = new ChartingBox(note.x,note.y,note);
					box.connectedNoteData = thing;
					this.selectedBoxes.add(box);
					this.curRenderedNotes.add(note);
					this.pastedNotes.push(note);
					if(note.sustainLength > 0) {
						var sustainVis = new flixel_FlxSprite(note.x + this.GRID_SIZE / 2,note.y + this.GRID_SIZE).makeGraphic(8,Math.floor(this.getYfromStrum(note.strumTime + note.sustainLength) * this.zoomFactor - note.y));
						note.noteCharterObject = sustainVis;
						this.curRenderedSustains.add(sustainVis);
					}
					haxe_Log.trace("section new length: " + ii.sectionNotes.length,{ fileName : "source/ChartingState.hx", lineNumber : 1440, className : "ChartingState", methodName : "pasteNotesFromArray"});
					continue;
				}
				++section;
			}
		}
	}
	,loadSong: function(daSong) {
		var _gthis = this;
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		var tmp = flixel_FlxG.sound;
		var songLowercase = StringTools.replace(daSong," ","-").toLowerCase();
		switch(songLowercase) {
		case "dad-battle":
			songLowercase = "dadbattle";
			break;
		case "philly-nice":
			songLowercase = "philly";
			break;
		}
		tmp.playMusic("songs:assets/songs/" + songLowercase + "/Inst." + "mp3",0.6);
		var tmp = new flixel_system_FlxSound();
		var songLowercase = StringTools.replace(daSong," ","-").toLowerCase();
		switch(songLowercase) {
		case "dad-battle":
			songLowercase = "dadbattle";
			break;
		case "philly-nice":
			songLowercase = "philly";
			break;
		}
		this.vocals = tmp.loadEmbedded("songs:assets/songs/" + songLowercase + "/Voices." + "mp3");
		flixel_FlxG.sound.list.add(this.vocals);
		flixel_FlxG.sound.music.pause();
		if(!PlayState.isSM) {
			this.vocals.pause();
		}
		flixel_FlxG.sound.music.onComplete = function() {
			if(!PlayState.isSM) {
				_gthis.vocals.pause();
			}
			flixel_FlxG.sound.music.pause();
		};
	}
	,generateUI: function() {
		while(this.bullshitUI.members.length > 0) this.bullshitUI.remove(this.bullshitUI.members[0],true);
		var title = new flixel_text_FlxText(this.UI_box.x + 20,this.UI_box.y + 20,0);
		this.bullshitUI.add(title);
	}
	,getEvent: function(id,sender,data,params) {
		if(id == "click_check_box") {
			var check = sender;
			var label = check.getLabel().text;
			switch(label) {
			case "P1 Alternate Animation":
				this.getSectionByTime(Conductor.songPosition).p1AltAnim = check.checked;
				break;
			case "P2 Alternate Animation":
				this.getSectionByTime(Conductor.songPosition).p2AltAnim = check.checked;
				break;
			}
		} else if(id == "change_numeric_stepper" && ((sender) instanceof flixel_addons_ui_FlxUINumericStepper)) {
			var nums = sender;
			var wname = nums.name;
			switch(wname) {
			case "divisions":
				this.subDivisions = nums.value;
				this.updateGrid();
				break;
			case "note_susLength":
				if(this.curSelectedNote == null) {
					return;
				}
				if(nums.value <= 0) {
					nums.set_value(0);
				}
				this.curSelectedNote[2] = nums.value;
				this.updateGrid();
				break;
			case "section_bpm":
				if(nums.value <= 0.1) {
					nums.set_value(0.1);
				}
				this.getSectionByTime(Conductor.songPosition).bpm = nums.value | 0;
				this.updateGrid();
				break;
			case "section_length":
				if(nums.value <= 4) {
					nums.set_value(4);
				}
				this.getSectionByTime(Conductor.songPosition).lengthInSteps = nums.value | 0;
				this.updateGrid();
				break;
			case "song_bpm":
				if(nums.value <= 0) {
					nums.set_value(1);
				}
				ChartingState._song.bpm = nums.value;
				if(ChartingState._song.eventObjects[0].type != "BPM Change") {
					lime_app_Application.current.__window.alert("i'm crying, first event isn't a bpm change. fuck you");
				} else {
					ChartingState._song.eventObjects[0].value = nums.value;
				}
				break;
			case "song_instvol":
				if(nums.value <= 0.1) {
					nums.set_value(0.1);
				}
				flixel_FlxG.sound.music.set_volume(nums.value);
				break;
			case "song_speed":
				if(nums.value <= 0) {
					nums.set_value(0);
				}
				ChartingState._song.speed = nums.value;
				break;
			case "song_vocalvol":
				if(nums.value <= 0.1) {
					nums.set_value(0.1);
				}
				if(!PlayState.isSM) {
					this.vocals.set_volume(nums.value);
				}
				break;
			}
		}
	}
	,updatedSection: null
	,stepStartTime: function(step) {
		return Conductor.bpm / (step / 4) / 60;
	}
	,sectionStartTime: function(customIndex) {
		if(customIndex == null) {
			customIndex = -1;
		}
		if(customIndex == -1) {
			customIndex = this.curSection;
		}
		var daBPM = Conductor.bpm;
		var daPos = 0;
		var _g = 0;
		var _g1 = customIndex;
		while(_g < _g1) {
			var i = _g++;
			daPos += 4 * (60000 / daBPM);
		}
		return daPos;
	}
	,writingNotes: null
	,doSnapShit: null
	,diff: null
	,changeIndex: null
	,currentBPM: null
	,lastBPM: null
	,updateFrame: null
	,lastUpdatedSection: null
	,resizeEverything: function() {
		this.regenerateLines();
	}
	,shownNotes: null
	,snapSelection: null
	,selectedBoxes: null
	,waitingForRelease: null
	,selectBox: null
	,copiedNotes: null
	,pastedNotes: null
	,deletedNotes: null
	,selectInitialX: null
	,selectInitialY: null
	,lastAction: null
	,update: function(elapsed) {
		var _gthis = this;
		this.updateHeads();
		var i = new flixel_group_FlxTypedGroupIterator(this.sectionRenderes.members,null);
		while(i.hasNext()) {
			var i1 = i.next();
			var diff = i1.y - this.strumLine.y;
			if(diff < 4000 && diff >= -4000) {
				i1.set_active(true);
				i1.set_visible(true);
			} else {
				i1.set_active(false);
				i1.set_visible(false);
			}
		}
		this.shownNotes = [];
		var note = new flixel_group_FlxTypedGroupIterator(this.curRenderedNotes.members,null);
		while(note.hasNext()) {
			var note1 = note.next();
			var diff = note1.strumTime - Conductor.songPosition;
			if(diff < 8000 && diff >= -8000) {
				this.shownNotes.push(note1);
				note1.set_y(this.getYfromStrum(note1.strumTime) * this.zoomFactor);
				if(note1.sustainLength > 0) {
					if(note1.noteCharterObject != null) {
						if(note1.noteCharterObject.y != note1.y + this.GRID_SIZE) {
							note1.noteCharterObject.set_y(note1.y + this.GRID_SIZE);
							note1.noteCharterObject.makeGraphic(8,Math.floor(this.getYfromStrum(note1.strumTime + note1.sustainLength) * this.zoomFactor - note1.y),-1);
						}
					}
				}
				note1.set_active(true);
				note1.set_visible(true);
			} else {
				note1.set_active(false);
				note1.set_visible(false);
			}
		}
		var _g = 0;
		var _g1 = this.selectedBoxes.members;
		while(_g < _g1.length) {
			var ii = _g1[_g];
			++_g;
			ii.set_x(ii.connectedNote.x);
			ii.set_y(ii.connectedNote.y);
		}
		var doInput = true;
		var _g = 0;
		var _g1 = this.Typeables;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.hasFocus) {
				doInput = false;
			}
		}
		if(doInput) {
			if(flixel_FlxG.mouse.wheel != 0) {
				flixel_FlxG.sound.music.pause();
				if(!PlayState.isSM) {
					this.vocals.pause();
				}
				this.claps.splice(0,this.claps.length);
				var _this = flixel_FlxG.keys.pressed;
				if(_this.keyManager.checkStatus(17,_this.status) && !this.waitingForRelease) {
					var amount = flixel_FlxG.mouse.wheel;
					if(amount > 0) {
						amount = 0;
					}
					var increase = 0;
					if(amount < 0) {
						increase = -0.02;
					} else {
						increase = 0.02;
					}
					this.zoomFactor += increase;
					if(this.zoomFactor > 2) {
						this.zoomFactor = 2;
					}
					if(this.zoomFactor < 0.1) {
						this.zoomFactor = 0.1;
					}
					this.resizeEverything();
				} else {
					var amount = flixel_FlxG.mouse.wheel;
					if(amount > 0 && this.strumLine.y < 0) {
						amount = 0;
					}
					if(this.doSnapShit) {
						var increase = 0;
						var beats = 0;
						if(amount < 0) {
							increase = 1 / this.deezNuts.h[this.snap];
							beats = Math.floor(this.curDecimalBeat * this.deezNuts.h[this.snap] + 0.001) / this.deezNuts.h[this.snap] + increase;
						} else {
							increase = -1 / this.deezNuts.h[this.snap];
							beats = (Math.ceil(this.curDecimalBeat * this.deezNuts.h[this.snap]) - 0.001) / this.deezNuts.h[this.snap] + increase;
						}
						haxe_Log.trace("SNAP - " + this.snap + " INCREASE - " + increase + " - GO TO BEAT " + beats,{ fileName : "source/ChartingState.hx", lineNumber : 1776, className : "ChartingState", methodName : "update"});
						var data = TimingStruct.getTimingAtBeat(beats);
						if(beats <= 0) {
							flixel_FlxG.sound.music.set_time(0);
						}
						var bpm = data != null ? data.bpm : ChartingState._song.bpm;
						if(data != null) {
							flixel_FlxG.sound.music.set_time((data.startTime + (beats - data.startBeat) / (bpm / 60)) * 1000);
						}
					} else {
						var _g = flixel_FlxG.sound.music;
						_g.set_time(_g._time - flixel_FlxG.mouse.wheel * Conductor.stepCrochet * 0.4);
					}
					if(flixel_FlxG.sound.music._time > flixel_FlxG.sound.music._length) {
						flixel_FlxG.sound.music.set_time(flixel_FlxG.sound.music._length);
					}
					if(!PlayState.isSM) {
						this.vocals.set_time(flixel_FlxG.sound.music._time);
					}
				}
			}
			var tmp;
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(39,_this.status)) {
				var _this = flixel_FlxG.keys.pressed;
				tmp = !_this.keyManager.checkStatus(17,_this.status);
			} else {
				tmp = false;
			}
			if(tmp) {
				this.goToSection(this.curSection + 1);
			} else {
				var tmp;
				var _this = flixel_FlxG.keys.justPressed;
				if(_this.keyManager.checkStatus(37,_this.status)) {
					var _this = flixel_FlxG.keys.pressed;
					tmp = !_this.keyManager.checkStatus(17,_this.status);
				} else {
					tmp = false;
				}
				if(tmp) {
					this.goToSection(this.curSection - 1);
				}
			}
			var tmp;
			var _this = flixel_FlxG.mouse._leftButton;
			if(_this.current == 1 || _this.current == 2) {
				var _this = flixel_FlxG.keys.pressed;
				tmp = _this.keyManager.checkStatus(17,_this.status);
			} else {
				tmp = false;
			}
			if(tmp) {
				if(!this.waitingForRelease) {
					haxe_Log.trace("creating select box",{ fileName : "source/ChartingState.hx", lineNumber : 1811, className : "ChartingState", methodName : "update"});
					this.waitingForRelease = true;
					this.selectBox = new flixel_FlxSprite(flixel_FlxG.mouse.x,flixel_FlxG.mouse.y);
					var tmp = this.selectBox;
					var color = flixel_util_FlxColor._new();
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color &= -16711681;
					color |= 11337728;
					color &= -65281;
					color |= 55296;
					color &= -256;
					color |= 230;
					color &= 16777215;
					color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					tmp.makeGraphic(0,0,color);
					this.selectBox.set_alpha(0.4);
					this.selectInitialX = this.selectBox.x;
					this.selectInitialY = this.selectBox.y;
					this.add(this.selectBox);
				} else if(this.waitingForRelease) {
					haxe_Log.trace(this.selectBox.get_width() + " | " + this.selectBox.get_height(),{ fileName : "source/ChartingState.hx", lineNumber : 1826, className : "ChartingState", methodName : "update"});
					this.selectBox.set_x(Math.min(flixel_FlxG.mouse.x,this.selectInitialX));
					this.selectBox.set_y(Math.min(flixel_FlxG.mouse.y,this.selectInitialY));
					var tmp = this.selectBox;
					var tmp1 = Math.floor(Math.abs(flixel_FlxG.mouse.x - this.selectInitialX));
					var tmp2 = Math.floor(Math.abs(flixel_FlxG.mouse.y - this.selectInitialY));
					var color = flixel_util_FlxColor._new();
					var Alpha = 255;
					if(Alpha == null) {
						Alpha = 255;
					}
					color &= -16711681;
					color |= 11337728;
					color &= -65281;
					color |= 55296;
					color &= -256;
					color |= 230;
					color &= 16777215;
					color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
					tmp.makeGraphic(tmp1,tmp2,color);
				}
			}
			if(flixel_FlxG.mouse._leftButton.current == -1 && this.waitingForRelease) {
				haxe_Log.trace("released!",{ fileName : "source/ChartingState.hx", lineNumber : 1836, className : "ChartingState", methodName : "update"});
				this.waitingForRelease = false;
				while(this.selectedBoxes.members.length != 0 && this.selectBox.get_width() > 10 && this.selectBox.get_height() > 10) {
					this.selectedBoxes.members[0].connectedNote.charterSelected = false;
					this.selectedBoxes.members[0].destroy();
					HxOverrides.remove(this.selectedBoxes.members,this.selectedBoxes.members[0]);
				}
				var i = new flixel_group_FlxTypedGroupIterator(this.curRenderedNotes.members,null);
				while(i.hasNext()) {
					var i1 = i.next();
					if(i1.overlaps(this.selectBox) && !i1.charterSelected) {
						haxe_Log.trace("seleting " + i1.strumTime,{ fileName : "source/ChartingState.hx", lineNumber : 1850, className : "ChartingState", methodName : "update"});
						this.selectNote(i1,false);
					}
				}
				this.selectBox.destroy();
				this.remove(this.selectBox);
			}
			var tmp;
			var _this = flixel_FlxG.keys.pressed;
			if(_this.keyManager.checkStatus(17,_this.status)) {
				var _this = flixel_FlxG.keys.justPressed;
				tmp = _this.keyManager.checkStatus(68,_this.status);
			} else {
				tmp = false;
			}
			if(tmp) {
				this.lastAction = "delete";
				var notesToBeDeleted = [];
				this.deletedNotes = [];
				var _g = 0;
				var _g1 = this.selectedBoxes.members.length;
				while(_g < _g1) {
					var i = _g++;
					this.deletedNotes.push([this.selectedBoxes.members[i].connectedNote.strumTime,this.selectedBoxes.members[i].connectedNote.rawNoteData,this.selectedBoxes.members[i].connectedNote.sustainLength]);
					notesToBeDeleted.push(this.selectedBoxes.members[i].connectedNote);
				}
				var _g = 0;
				while(_g < notesToBeDeleted.length) {
					var i = notesToBeDeleted[_g];
					++_g;
					this.deleteNote(i);
				}
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(46,_this.status)) {
				this.lastAction = "delete";
				var notesToBeDeleted = [];
				this.deletedNotes = [];
				var _g = 0;
				var _g1 = this.selectedBoxes.members.length;
				while(_g < _g1) {
					var i = _g++;
					this.deletedNotes.push([this.selectedBoxes.members[i].connectedNote.strumTime,this.selectedBoxes.members[i].connectedNote.rawNoteData,this.selectedBoxes.members[i].connectedNote.sustainLength]);
					notesToBeDeleted.push(this.selectedBoxes.members[i].connectedNote);
				}
				var _g = 0;
				while(_g < notesToBeDeleted.length) {
					var i = notesToBeDeleted[_g];
					++_g;
					this.deleteNote(i);
				}
			}
			var tmp;
			var _this = flixel_FlxG.keys.pressed;
			if(_this.keyManager.checkStatus(17,_this.status)) {
				var _this = flixel_FlxG.keys.justPressed;
				tmp = _this.keyManager.checkStatus(67,_this.status);
			} else {
				tmp = false;
			}
			if(tmp) {
				if(this.selectedBoxes.members.length != 0) {
					this.copiedNotes = [];
					var _g = 0;
					var _g1 = this.selectedBoxes.members;
					while(_g < _g1.length) {
						var i = _g1[_g];
						++_g;
						this.copiedNotes.push([i.connectedNote.strumTime,i.connectedNote.rawNoteData,i.connectedNote.sustainLength,i.connectedNote.isAlt]);
					}
					var firstNote = this.copiedNotes[0][0];
					var _g = 0;
					var _g1 = this.copiedNotes;
					while(_g < _g1.length) {
						var i = _g1[_g];
						++_g;
						haxe_Log.trace("Normalized time: " + Std.string(i[0] -= firstNote) + " | " + Std.string(i[1]),{ fileName : "source/ChartingState.hx", lineNumber : 1907, className : "ChartingState", methodName : "update"});
					}
					haxe_Log.trace(this.copiedNotes.length,{ fileName : "source/ChartingState.hx", lineNumber : 1910, className : "ChartingState", methodName : "update"});
				}
			}
			var tmp;
			var _this = flixel_FlxG.keys.pressed;
			if(_this.keyManager.checkStatus(17,_this.status)) {
				var _this = flixel_FlxG.keys.justPressed;
				tmp = _this.keyManager.checkStatus(86,_this.status);
			} else {
				tmp = false;
			}
			if(tmp) {
				if(this.copiedNotes.length != 0) {
					while(this.selectedBoxes.members.length != 0) {
						this.selectedBoxes.members[0].connectedNote.charterSelected = false;
						this.selectedBoxes.members[0].destroy();
						HxOverrides.remove(this.selectedBoxes.members,this.selectedBoxes.members[0]);
					}
					haxe_Log.trace("Pasting " + this.copiedNotes.length,{ fileName : "source/ChartingState.hx", lineNumber : 1925, className : "ChartingState", methodName : "update"});
					this.pasteNotesFromArray(this.copiedNotes);
					this.lastAction = "paste";
				}
			}
			var tmp;
			var _this = flixel_FlxG.keys.pressed;
			if(_this.keyManager.checkStatus(17,_this.status)) {
				var _this = flixel_FlxG.keys.justPressed;
				tmp = _this.keyManager.checkStatus(90,_this.status);
			} else {
				tmp = false;
			}
			if(tmp) {
				switch(this.lastAction) {
				case "delete":
					haxe_Log.trace("undoing delete",{ fileName : "source/ChartingState.hx", lineNumber : 1951, className : "ChartingState", methodName : "update"});
					if(this.deletedNotes.length != 0) {
						haxe_Log.trace("undoing delete",{ fileName : "source/ChartingState.hx", lineNumber : 1954, className : "ChartingState", methodName : "update"});
						this.pasteNotesFromArray(this.deletedNotes,false);
						this.deletedNotes = [];
					}
					break;
				case "paste":
					haxe_Log.trace("undo paste",{ fileName : "source/ChartingState.hx", lineNumber : 1939, className : "ChartingState", methodName : "update"});
					if(this.pastedNotes.length != 0) {
						var _g = 0;
						var _g1 = this.pastedNotes;
						while(_g < _g1.length) {
							var i = _g1[_g];
							++_g;
							if(this.curRenderedNotes.members.indexOf(i) != -1) {
								this.deleteNote(i);
							}
						}
						this.pastedNotes = [];
					}
					break;
				}
			}
		}
		if(this.updateFrame == 4) {
			TimingStruct.clearTimings();
			var currentIndex = 0;
			var _g = 0;
			var _g1 = ChartingState._song.eventObjects;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.type == "BPM Change") {
					var beat = i.position;
					var endBeat = Infinity;
					TimingStruct.addTiming(beat,i.value,endBeat,0);
					if(currentIndex != 0) {
						var data = TimingStruct.AllTimings[currentIndex - 1];
						data.endBeat = beat;
						data.length = (data.endBeat - data.startBeat) / (data.bpm / 60);
						var step = 60 / data.bpm * 1000 / 4;
						TimingStruct.AllTimings[currentIndex].startStep = Math.floor(data.endBeat / (data.bpm / 60) * 1000 / step);
						TimingStruct.AllTimings[currentIndex].startTime = data.startTime + data.length;
					}
					++currentIndex;
				}
			}
			this.recalculateAllSectionTimes();
			this.regenerateLines();
			this.updateFrame++;
		} else if(this.updateFrame != 5) {
			this.updateFrame++;
		}
		this.snapText.set_text("Snap: 1/" + this.snap + " (" + (this.doSnapShit ? "Shift to disable, CTRL Left or Right to increase/decrease" : "Snap Disabled, Shift to renable.") + ")\nAdd Notes: 1-8 (or click)\nZoom: " + this.zoomFactor);
		var tmp;
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(39,_this.status)) {
			var _this = flixel_FlxG.keys.pressed;
			tmp = _this.keyManager.checkStatus(17,_this.status);
		} else {
			tmp = false;
		}
		if(tmp) {
			this.snapSelection++;
			var index = 6;
			if(this.snapSelection > 6) {
				this.snapSelection = 6;
			}
			if(this.snapSelection < 0) {
				this.snapSelection = 0;
			}
			var v = this.deezNuts.keys();
			while(v.hasNext()) {
				var v1 = v.next();
				haxe_Log.trace(v1,{ fileName : "source/ChartingState.hx", lineNumber : 2011, className : "ChartingState", methodName : "update"});
				if(index == this.snapSelection) {
					haxe_Log.trace("found " + v1 + " at " + index,{ fileName : "source/ChartingState.hx", lineNumber : 2014, className : "ChartingState", methodName : "update"});
					this.snap = v1;
				}
				--index;
			}
			haxe_Log.trace("new snap " + this.snap + " | " + this.snapSelection,{ fileName : "source/ChartingState.hx", lineNumber : 2019, className : "ChartingState", methodName : "update"});
		}
		var tmp;
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(37,_this.status)) {
			var _this = flixel_FlxG.keys.pressed;
			tmp = _this.keyManager.checkStatus(17,_this.status);
		} else {
			tmp = false;
		}
		if(tmp) {
			this.snapSelection--;
			if(this.snapSelection > 6) {
				this.snapSelection = 6;
			}
			if(this.snapSelection < 0) {
				this.snapSelection = 0;
			}
			var index = 6;
			var v = this.deezNuts.keys();
			while(v.hasNext()) {
				var v1 = v.next();
				haxe_Log.trace(v1,{ fileName : "source/ChartingState.hx", lineNumber : 2030, className : "ChartingState", methodName : "update"});
				if(index == this.snapSelection) {
					haxe_Log.trace("found " + v1 + " at " + index,{ fileName : "source/ChartingState.hx", lineNumber : 2033, className : "ChartingState", methodName : "update"});
					this.snap = v1;
				}
				--index;
			}
			haxe_Log.trace("new snap " + this.snap + " | " + this.snapSelection,{ fileName : "source/ChartingState.hx", lineNumber : 2038, className : "ChartingState", methodName : "update"});
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(16,_this.status)) {
			this.doSnapShit = !this.doSnapShit;
		}
		this.doSnapShit = this.defaultSnap;
		var _this = flixel_FlxG.keys.pressed;
		if(_this.keyManager.checkStatus(16,_this.status)) {
			this.doSnapShit = !this.defaultSnap;
		}
		this.check_snap.set_checked(this.doSnapShit);
		Conductor.songPosition = flixel_FlxG.sound.music._time;
		ChartingState._song.song = this.typingShit.text;
		var timingSeg = TimingStruct.getTimingAtTimestamp(Conductor.songPosition);
		var start = Conductor.songPosition;
		if(timingSeg != null) {
			var timingSegBpm = timingSeg.bpm;
			this.currentBPM = timingSegBpm;
			if(this.currentBPM != Conductor.bpm) {
				haxe_Log.trace("BPM CHANGE to " + this.currentBPM,{ fileName : "source/ChartingState.hx", lineNumber : 2069, className : "ChartingState", methodName : "update"});
				Conductor.changeBPM(this.currentBPM,false);
			}
			var pog = (this.curDecimalBeat - timingSeg.startBeat) / (Conductor.bpm / 60);
			start = (timingSeg.startTime + pog) * 1000;
		}
		var weird = this.getSectionByTime(start,true);
		if(weird != null) {
			if(this.lastUpdatedSection != this.getSectionByTime(start,true)) {
				this.lastUpdatedSection = weird;
				this.check_mustHitSection.set_checked(weird.mustHitSection);
				this.check_p1AltAnim.set_checked(weird.p1AltAnim);
				this.check_p2AltAnim.set_checked(weird.p2AltAnim);
			}
		}
		this.strumLine.set_y(this.getYfromStrum(start) * this.zoomFactor);
		this.camFollow.set_y(this.strumLine.y);
		this.bpmTxt.set_text(Std.string(flixel_math_FlxMath.roundDecimal(Conductor.songPosition / 1000,2)) + " / " + Std.string(flixel_math_FlxMath.roundDecimal(flixel_FlxG.sound.music._length / 1000,2)) + "\nCur Section: " + this.curSection + "\nCurBPM: " + this.currentBPM + "\nCurBeat: " + HelperFunctions.truncateFloat(this.curDecimalBeat,3) + "\nCurStep: " + this.curStep + "\nZoom: " + HelperFunctions.truncateFloat(this.zoomFactor,2));
		var _this = flixel_FlxG.keys.justPressed;
		var left = _this.keyManager.checkStatus(49,_this.status);
		var _this = flixel_FlxG.keys.justPressed;
		var down = _this.keyManager.checkStatus(50,_this.status);
		var _this = flixel_FlxG.keys.justPressed;
		var up = _this.keyManager.checkStatus(51,_this.status);
		var _this = flixel_FlxG.keys.justPressed;
		var right = _this.keyManager.checkStatus(52,_this.status);
		var _this = flixel_FlxG.keys.justPressed;
		var leftO = _this.keyManager.checkStatus(53,_this.status);
		var _this = flixel_FlxG.keys.justPressed;
		var downO = _this.keyManager.checkStatus(54,_this.status);
		var _this = flixel_FlxG.keys.justPressed;
		var upO = _this.keyManager.checkStatus(55,_this.status);
		var _this = flixel_FlxG.keys.justPressed;
		var rightO = _this.keyManager.checkStatus(56,_this.status);
		var pressArray = [left,down,up,right,leftO,downO,upO,rightO];
		var $delete = false;
		if(doInput) {
			this.curRenderedNotes.forEach(function(note) {
				if(_gthis.strumLine.overlaps(note) && pressArray[Math.floor(Math.abs(note.noteData))]) {
					_gthis.deleteNote(note);
					$delete = true;
					haxe_Log.trace("deelte note",{ fileName : "source/ChartingState.hx", lineNumber : 2133, className : "ChartingState", methodName : "update"});
				}
			});
			var _g = 0;
			var _g1 = pressArray.length;
			while(_g < _g1) {
				var p = _g++;
				var i = pressArray[p];
				if(i && !$delete) {
					this.addNote(new Note(Conductor.songPosition,p));
				}
			}
		}
		if(this.playClaps) {
			var _g = 0;
			var _g1 = this.shownNotes;
			while(_g < _g1.length) {
				var note = _g1[_g];
				++_g;
				if(note.strumTime <= Conductor.songPosition && this.claps.indexOf(note) == -1 && flixel_FlxG.sound.music._channel != null) {
					this.claps.push(note);
					flixel_FlxG.sound.play(Paths.sound("SNAP"));
				}
			}
		}
		if(flixel_FlxG.mouse._leftButton.current == 2 && !this.waitingForRelease) {
			if(flixel_FlxG.mouse.overlaps(this.curRenderedNotes)) {
				this.curRenderedNotes.forEach(function(note) {
					if(flixel_FlxG.mouse.overlaps(note)) {
						var _this = flixel_FlxG.keys.pressed;
						if(_this.keyManager.checkStatus(17,_this.status)) {
							_gthis.selectNote(note,false);
						} else {
							_gthis.deleteNote(note);
						}
					}
				});
			} else if(flixel_FlxG.mouse.x > 0 && flixel_FlxG.mouse.x < this.gridBG.get_width() && flixel_FlxG.mouse.y > 0 && flixel_FlxG.mouse.y < this.height) {
				this.addNote();
			}
		}
		if(flixel_FlxG.mouse.x > 0 && flixel_FlxG.mouse.x < this.gridBG.get_width() && flixel_FlxG.mouse.y > 0 && flixel_FlxG.mouse.y < this.height) {
			this.dummyArrow.set_visible(true);
			this.dummyArrow.set_x(Math.floor(flixel_FlxG.mouse.x / this.GRID_SIZE) * this.GRID_SIZE);
			this.dummyArrow.set_y(Math.floor(flixel_FlxG.mouse.y / (this.GRID_SIZE / this.deezNuts.h[this.snap])) * (this.GRID_SIZE / this.deezNuts.h[this.snap]));
		} else {
			this.dummyArrow.set_visible(false);
		}
		if(doInput) {
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(13,_this.status)) {
				ChartingState.lastSection = this.curSection;
				PlayState.SONG = ChartingState._song;
				var _this = flixel_FlxG.sound.music;
				_this.cleanup(_this.autoDestroy,true);
				if(!PlayState.isSM) {
					var _this = this.vocals;
					_this.cleanup(_this.autoDestroy,true);
				}
				var nextState = LoadingState.getNextState(new PlayState(),false);
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(69,_this.status)) {
				this.changeNoteSustain(60 / (timingSeg != null ? timingSeg.bpm : ChartingState._song.bpm) * 1000 / 4);
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(81,_this.status)) {
				this.changeNoteSustain(-(60 / (timingSeg != null ? timingSeg.bpm : ChartingState._song.bpm) * 1000 / 4));
			}
			var tmp;
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(67,_this.status)) {
				var _this = flixel_FlxG.keys.pressed;
				tmp = !_this.keyManager.checkStatus(17,_this.status);
			} else {
				tmp = false;
			}
			if(tmp) {
				var sect = ChartingState._song.notes[this.curSection];
				sect.mustHitSection = !sect.mustHitSection;
				var i = this.sectionRenderes.members[this.curSection];
				var cachedY = i.icon.y;
				this.remove(i.icon);
				var sectionicon = sect.mustHitSection ? new HealthIcon(ChartingState._song.player1).clone() : new HealthIcon(ChartingState._song.player2).clone();
				sectionicon.set_x(-95);
				sectionicon.set_y(cachedY);
				sectionicon.setGraphicSize(0,45);
				i.icon = sectionicon;
				i.lastUpdated = sect.mustHitSection;
				this.add(sectionicon);
				haxe_Log.trace("must hit " + (sect.mustHitSection == null ? "null" : "" + sect.mustHitSection),{ fileName : "source/ChartingState.hx", lineNumber : 2319, className : "ChartingState", methodName : "update"});
			}
			var tmp;
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(86,_this.status)) {
				var _this = flixel_FlxG.keys.pressed;
				tmp = !_this.keyManager.checkStatus(17,_this.status);
			} else {
				tmp = false;
			}
			if(tmp) {
				haxe_Log.trace("swap",{ fileName : "source/ChartingState.hx", lineNumber : 2324, className : "ChartingState", methodName : "update"});
				var secit = ChartingState._song.notes[this.curSection];
				if(secit != null) {
					var newSwaps = [];
					haxe_Log.trace(ChartingState._song.notes[this.curSection],{ fileName : "source/ChartingState.hx", lineNumber : 2330, className : "ChartingState", methodName : "update"});
					var _g = 0;
					var _g1 = secit.sectionNotes.length;
					while(_g < _g1) {
						var i = _g++;
						var note = secit.sectionNotes[i];
						if(note[1] < 4) {
							note[1] += 4;
						} else {
							note[1] -= 4;
						}
						newSwaps.push(note);
					}
					secit.sectionNotes = newSwaps;
					var _g = 0;
					var _g1 = this.shownNotes;
					while(_g < _g1.length) {
						var i = _g1[_g];
						++_g;
						var _g2 = 0;
						while(_g2 < newSwaps.length) {
							var ii = newSwaps[_g2];
							++_g2;
							if(i.strumTime == ii[0] && i.noteData == ii[1] % 4) {
								i.set_x(Math.floor(ii[1] * this.GRID_SIZE));
								i.set_y(Math.floor(this.getYfromStrum(ii[0]) * this.zoomFactor));
								if(i.sustainLength > 0 && i.noteCharterObject != null) {
									i.noteCharterObject.set_x(i.x + this.GRID_SIZE / 2);
								}
							}
						}
					}
				}
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(9,_this.status)) {
				var _this = flixel_FlxG.keys.pressed;
				if(_this.keyManager.checkStatus(16,_this.status)) {
					var _g = this.UI_box;
					_g.set_selected_tab(_g.get_selected_tab() - 1);
					if(this.UI_box.get_selected_tab() < 0) {
						this.UI_box.set_selected_tab(2);
					}
				} else {
					var _g = this.UI_box;
					_g.set_selected_tab(_g.get_selected_tab() + 1);
					if(this.UI_box.get_selected_tab() >= 3) {
						this.UI_box.set_selected_tab(0);
					}
				}
			}
			if(!this.typingShit.hasFocus) {
				var shiftThing = 1;
				var _this = flixel_FlxG.keys.pressed;
				if(_this.keyManager.checkStatus(16,_this.status)) {
					shiftThing = 4;
				}
				var _this = flixel_FlxG.keys.justPressed;
				if(_this.keyManager.checkStatus(32,_this.status)) {
					if(flixel_FlxG.sound.music._channel != null) {
						flixel_FlxG.sound.music.pause();
						if(!PlayState.isSM) {
							this.vocals.pause();
						}
						this.claps.splice(0,this.claps.length);
					} else {
						if(!PlayState.isSM) {
							this.vocals.play();
						}
						flixel_FlxG.sound.music.play();
					}
				}
				if(flixel_FlxG.sound.music._time < 0 || this.curDecimalBeat < 0) {
					flixel_FlxG.sound.music.set_time(0);
				}
				var _this = flixel_FlxG.keys.pressed;
				if(!_this.keyManager.checkStatus(16,_this.status)) {
					var tmp;
					var _this = flixel_FlxG.keys.pressed;
					if(!_this.keyManager.checkStatus(87,_this.status)) {
						var _this = flixel_FlxG.keys.pressed;
						tmp = _this.keyManager.checkStatus(83,_this.status);
					} else {
						tmp = true;
					}
					if(tmp) {
						flixel_FlxG.sound.music.pause();
						if(!PlayState.isSM) {
							this.vocals.pause();
						}
						this.claps.splice(0,this.claps.length);
						var daTime = 700 * flixel_FlxG.elapsed;
						var _this = flixel_FlxG.keys.pressed;
						if(_this.keyManager.checkStatus(87,_this.status)) {
							var _g = flixel_FlxG.sound.music;
							_g.set_time(_g._time - daTime);
						} else {
							var _g = flixel_FlxG.sound.music;
							_g.set_time(_g._time + daTime);
						}
						if(!PlayState.isSM) {
							this.vocals.set_time(flixel_FlxG.sound.music._time);
						}
					}
				} else {
					var tmp;
					var _this = flixel_FlxG.keys.justPressed;
					if(!_this.keyManager.checkStatus(87,_this.status)) {
						var _this = flixel_FlxG.keys.justPressed;
						tmp = _this.keyManager.checkStatus(83,_this.status);
					} else {
						tmp = true;
					}
					if(tmp) {
						flixel_FlxG.sound.music.pause();
						if(!PlayState.isSM) {
							this.vocals.pause();
						}
						var daTime = Conductor.stepCrochet * 2;
						var _this = flixel_FlxG.keys.justPressed;
						if(_this.keyManager.checkStatus(87,_this.status)) {
							var _g = flixel_FlxG.sound.music;
							_g.set_time(_g._time - daTime);
						} else {
							var _g = flixel_FlxG.sound.music;
							_g.set_time(_g._time + daTime);
						}
						if(!PlayState.isSM) {
							this.vocals.set_time(flixel_FlxG.sound.music._time);
						}
					}
				}
			}
		}
		ChartingState._song.bpm = this.tempBpm;
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,changeNoteSustain: function(value) {
		if(this.curSelectedNote != null) {
			if(this.curSelectedNote[2] != null) {
				this.curSelectedNote[2] += value;
				this.curSelectedNote[2] = Math.max(this.curSelectedNote[2],0);
				if(this.curSelectedNoteObject.noteCharterObject != null) {
					this.curRenderedSustains.remove(this.curSelectedNoteObject.noteCharterObject);
				}
				var sustainVis = new flixel_FlxSprite(this.curSelectedNoteObject.x + this.GRID_SIZE / 2,this.curSelectedNoteObject.y + this.GRID_SIZE).makeGraphic(8,Math.floor(this.getYfromStrum(this.curSelectedNoteObject.strumTime + this.curSelectedNote[2]) * this.zoomFactor - this.curSelectedNoteObject.y));
				this.curSelectedNoteObject.sustainLength = this.curSelectedNote[2];
				haxe_Log.trace("new sustain " + this.curSelectedNoteObject.sustainLength,{ fileName : "source/ChartingState.hx", lineNumber : 2471, className : "ChartingState", methodName : "changeNoteSustain"});
				this.curSelectedNoteObject.noteCharterObject = sustainVis;
				this.curRenderedSustains.add(sustainVis);
			}
		}
		this.updateNoteUI();
	}
	,resetSection: function(songBeginning) {
		if(songBeginning == null) {
			songBeginning = false;
		}
		flixel_FlxG.sound.music.pause();
		if(!PlayState.isSM) {
			this.vocals.pause();
		}
		flixel_FlxG.sound.music.set_time(0);
		if(!PlayState.isSM) {
			this.vocals.set_time(flixel_FlxG.sound.music._time);
		}
		this.updateGrid();
		if(!songBeginning) {
			this.updateSectionUI();
		}
	}
	,changeSection: function(sec,updateMusic) {
		if(updateMusic == null) {
			updateMusic = true;
		}
		if(sec == null) {
			sec = 0;
		}
		haxe_Log.trace("changing section" + sec,{ fileName : "source/ChartingState.hx", lineNumber : 2502, className : "ChartingState", methodName : "changeSection"});
		if(ChartingState._song.notes[sec] != null) {
			haxe_Log.trace("naw im not null",{ fileName : "source/ChartingState.hx", lineNumber : 2506, className : "ChartingState", methodName : "changeSection"});
			this.curSection = sec;
			this.updateGrid();
			if(updateMusic) {
				flixel_FlxG.sound.music.pause();
				if(!PlayState.isSM) {
					this.vocals.pause();
				}
				flixel_FlxG.sound.music.set_time(this.sectionStartTime());
				if(!PlayState.isSM) {
					this.vocals.set_time(flixel_FlxG.sound.music._time);
				}
				this.updateCurStep();
			}
			this.updateGrid();
			this.updateSectionUI();
		} else {
			haxe_Log.trace("bro wtf I AM NULL",{ fileName : "source/ChartingState.hx", lineNumber : 2535, className : "ChartingState", methodName : "changeSection"});
		}
	}
	,copySection: function(sectionNum) {
		if(sectionNum == null) {
			sectionNum = 1;
		}
		var a = this.curSection;
		var daSec = a > sectionNum ? a : sectionNum;
		var sect = this.lastUpdatedSection;
		if(sect == null) {
			return;
		}
		var _g = 0;
		var _g1 = ChartingState._song.notes[daSec - sectionNum].sectionNotes;
		while(_g < _g1.length) {
			var note = _g1[_g];
			++_g;
			var strum = note[0] + Conductor.stepCrochet * (ChartingState._song.notes[daSec].lengthInSteps * sectionNum);
			var copiedNote = [strum,note[1],note[2],note[3]];
			sect.sectionNotes.push(copiedNote);
		}
		this.updateGrid();
	}
	,updateSectionUI: function() {
		var sec = this.getSectionByTime(Conductor.songPosition);
		if(sec == null) {
			this.check_mustHitSection.set_checked(true);
			this.check_p1AltAnim.set_checked(false);
			this.check_p2AltAnim.set_checked(false);
		} else {
			this.check_mustHitSection.set_checked(sec.mustHitSection);
			this.check_p1AltAnim.set_checked(sec.p1AltAnim);
			this.check_p2AltAnim.set_checked(sec.p2AltAnim);
		}
	}
	,updateHeads: function() {
		if(this.check_mustHitSection.checked) {
			ChartingState.leftIcon.animation.play(ChartingState._song.player1);
			ChartingState.rightIcon.animation.play(ChartingState._song.player2);
		} else {
			ChartingState.leftIcon.animation.play(ChartingState._song.player2);
			ChartingState.rightIcon.animation.play(ChartingState._song.player1);
		}
	}
	,updateNoteUI: function() {
		if(this.curSelectedNote != null) {
			this.stepperSusLength.set_value(this.curSelectedNote[2]);
			if(this.curSelectedNote[3] != null) {
				this.check_naltAnim.set_checked(this.curSelectedNote[3]);
			} else {
				this.curSelectedNote[3] = false;
				this.check_naltAnim.set_checked(false);
			}
		}
	}
	,updateGrid: function() {
		while(this.curRenderedNotes.members.length > 0) this.curRenderedNotes.remove(this.curRenderedNotes.members[0],true);
		while(this.curRenderedSustains.members.length > 0) this.curRenderedSustains.remove(this.curRenderedSustains.members[0],true);
		var currentSection = 0;
		var _g = 0;
		var _g1 = ChartingState._song.notes;
		while(_g < _g1.length) {
			var section = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = section.sectionNotes;
			while(_g2 < _g3.length) {
				var i = _g3[_g2];
				++_g2;
				var seg = TimingStruct.getTimingAtTimestamp(i[0]);
				var daNoteInfo = i[1];
				var daStrumTime = i[0];
				var daSus = i[2];
				var note = new Note(daStrumTime,daNoteInfo % 4,null,false,true,i[3]);
				note.rawNoteData = daNoteInfo;
				note.sustainLength = daSus;
				note.setGraphicSize(Math.floor(this.GRID_SIZE),Math.floor(this.GRID_SIZE));
				note.updateHitbox();
				note.set_x(Math.floor(daNoteInfo * this.GRID_SIZE));
				note.set_y(Math.floor(this.getYfromStrum(daStrumTime) * this.zoomFactor));
				if(this.curSelectedNote != null) {
					if(this.curSelectedNote[0] == note.strumTime) {
						this.lastNote = note;
					}
				}
				this.curRenderedNotes.add(note);
				var stepCrochet = 60 / seg.bpm * 1000 / 4;
				if(daSus > 0) {
					var sustainVis = new flixel_FlxSprite(note.x + this.GRID_SIZE / 2,note.y + this.GRID_SIZE).makeGraphic(8,Math.floor(this.getYfromStrum(note.strumTime + note.sustainLength) * this.zoomFactor - note.y));
					note.noteCharterObject = sustainVis;
					this.curRenderedSustains.add(sustainVis);
				}
			}
			++currentSection;
		}
	}
	,addSection: function(lengthInSteps) {
		if(lengthInSteps == null) {
			lengthInSteps = 16;
		}
		var daPos = 0;
		var start = 0;
		var bpm = ChartingState._song.bpm;
		var _g = 0;
		var _g1 = this.curSection;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = TimingStruct.AllTimings;
			while(_g2 < _g3.length) {
				var ii = _g3[_g2];
				++_g2;
				var data = TimingStruct.getTimingAtTimestamp(start);
				if((data != null ? data.bpm : ChartingState._song.bpm) != bpm && bpm != ii.bpm) {
					bpm = ii.bpm;
				}
			}
			start += 4 * (60 / bpm) * 1000;
		}
		var sec = { startTime : daPos, endTime : Infinity, lengthInSteps : lengthInSteps, bpm : ChartingState._song.bpm, changeBPM : false, mustHitSection : true, sectionNotes : [], typeOfSection : 0, altAnim : false, p1AltAnim : false, p2AltAnim : false};
		ChartingState._song.notes.push(sec);
	}
	,selectNote: function(note,deleteAllBoxes) {
		if(deleteAllBoxes == null) {
			deleteAllBoxes = true;
		}
		var swagNum = 0;
		if(deleteAllBoxes) {
			while(this.selectedBoxes.members.length != 0) {
				this.selectedBoxes.members[0].connectedNote.charterSelected = false;
				this.selectedBoxes.members[0].destroy();
				HxOverrides.remove(this.selectedBoxes.members,this.selectedBoxes.members[0]);
			}
		}
		var _g = 0;
		var _g1 = ChartingState._song.notes;
		while(_g < _g1.length) {
			var sec = _g1[_g];
			++_g;
			swagNum = 0;
			var _g2 = 0;
			var _g3 = sec.sectionNotes;
			while(_g2 < _g3.length) {
				var i = _g3[_g2];
				++_g2;
				if(i[0] == note.strumTime && i[1] == note.rawNoteData) {
					this.curSelectedNote = sec.sectionNotes[swagNum];
					if(this.curSelectedNoteObject != null) {
						this.curSelectedNoteObject.charterSelected = false;
					}
					this.curSelectedNoteObject = note;
					if(!note.charterSelected) {
						var box = new ChartingBox(note.x,note.y,note);
						box.connectedNoteData = i;
						this.selectedBoxes.add(box);
						note.charterSelected = true;
						this.curSelectedNoteObject.charterSelected = true;
					}
				}
				++swagNum;
			}
		}
		this.updateNoteUI();
	}
	,deleteNote: function(note) {
		this.lastNote = note;
		var section = this.getSectionByTime(note.strumTime);
		var found = false;
		var _g = 0;
		var _g1 = section.sectionNotes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i[0] == note.strumTime && i[1] == note.rawNoteData) {
				HxOverrides.remove(section.sectionNotes,i);
				found = true;
			}
		}
		if(!found) {
			var _g = 0;
			var _g1 = ChartingState._song.notes;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = i.sectionNotes;
				while(_g2 < _g3.length) {
					var n = _g3[_g2];
					++_g2;
					if(n[0] == note.strumTime && n[1] == note.rawNoteData) {
						HxOverrides.remove(i.sectionNotes,n);
					}
				}
			}
		}
		this.curRenderedNotes.remove(note);
		if(note.sustainLength > 0) {
			this.curRenderedSustains.remove(note.noteCharterObject);
		}
		var _g = 0;
		var _g1 = this.selectedBoxes.members.length;
		while(_g < _g1) {
			var i = _g++;
			var box = this.selectedBoxes.members[i];
			if(box.connectedNote == note) {
				HxOverrides.remove(this.selectedBoxes.members,box);
				box.destroy();
				return;
			}
		}
	}
	,clearSection: function() {
		this.getSectionByTime(Conductor.songPosition).sectionNotes = [];
		this.updateGrid();
	}
	,clearSong: function() {
		var _g = 0;
		var _g1 = ChartingState._song.notes.length;
		while(_g < _g1) {
			var daSection = _g++;
			ChartingState._song.notes[daSection].sectionNotes = [];
		}
		this.updateGrid();
	}
	,newSection: function(lengthInSteps,mustHitSection,p1AltAnim,p2AltAnim) {
		if(p2AltAnim == null) {
			p2AltAnim = true;
		}
		if(p1AltAnim == null) {
			p1AltAnim = true;
		}
		if(mustHitSection == null) {
			mustHitSection = false;
		}
		if(lengthInSteps == null) {
			lengthInSteps = 16;
		}
		var daPos = 0;
		var currentSeg = TimingStruct.AllTimings[TimingStruct.AllTimings.length - 1];
		var currentBeat = 4;
		var _g = 0;
		var _g1 = ChartingState._song.notes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			currentBeat += 4;
		}
		if(currentSeg == null) {
			return null;
		}
		var start = (currentBeat - currentSeg.startBeat) / (currentSeg.bpm / 60);
		daPos = (currentSeg.startTime + start) * 1000;
		var sec = { startTime : daPos, endTime : Infinity, lengthInSteps : lengthInSteps, bpm : ChartingState._song.bpm, changeBPM : false, mustHitSection : mustHitSection, sectionNotes : [], typeOfSection : 0, altAnim : false, p1AltAnim : p1AltAnim, p2AltAnim : p2AltAnim};
		return sec;
	}
	,recalculateAllSectionTimes: function() {
		haxe_Log.trace("RECALCULATING SECTION TIMES",{ fileName : "source/ChartingState.hx", lineNumber : 2873, className : "ChartingState", methodName : "recalculateAllSectionTimes"});
		var _g = 0;
		var _g1 = ChartingState._song.notes.length;
		while(_g < _g1) {
			var i = _g++;
			var section = ChartingState._song.notes[i];
			var currentBeat = 4 * i;
			var currentSeg = TimingStruct.getTimingAtBeat(currentBeat);
			if(currentSeg == null) {
				return;
			}
			var start = (currentBeat - currentSeg.startBeat) / (currentSeg.bpm / 60);
			section.startTime = (currentSeg.startTime + start) * 1000;
			if(i != 0) {
				ChartingState._song.notes[i - 1].endTime = section.startTime;
			}
			section.endTime = Infinity;
		}
		this.once = true;
	}
	,once: null
	,shiftNotes: function(measure,step,ms) {
		if(ms == null) {
			ms = 0;
		}
		if(step == null) {
			step = 0;
		}
		if(measure == null) {
			measure = 0;
		}
		var newSong = [];
		var millisecadd = (measure * 4 + step / 4) * (60000 / this.currentBPM) + ms;
		var totaladdsection = millisecadd / (60000 / this.currentBPM) / 4 | 0;
		haxe_Log.trace(millisecadd,{ fileName : "source/ChartingState.hx", lineNumber : 2906, className : "ChartingState", methodName : "shiftNotes", customParams : [totaladdsection]});
		if(millisecadd > 0) {
			var _g = 0;
			var _g1 = totaladdsection;
			while(_g < _g1) {
				var i = _g++;
				newSong.unshift(this.newSection());
			}
		}
		var _g = 0;
		var _g1 = ChartingState._song.notes.length;
		while(_g < _g1) {
			var daSection1 = _g++;
			newSong.push(this.newSection(16,ChartingState._song.notes[daSection1].mustHitSection,ChartingState._song.notes[daSection1].p1AltAnim,ChartingState._song.notes[daSection1].p2AltAnim));
		}
		var _g = 0;
		var _g1 = ChartingState._song.notes.length;
		while(_g < _g1) {
			var daSection = _g++;
			var aimtosetsection = daSection + (totaladdsection | 0);
			if(aimtosetsection < 0) {
				aimtosetsection = 0;
			}
			newSong[aimtosetsection].mustHitSection = ChartingState._song.notes[daSection].mustHitSection;
			newSong[aimtosetsection].p1AltAnim = ChartingState._song.notes[daSection].p1AltAnim;
			newSong[aimtosetsection].p2AltAnim = ChartingState._song.notes[daSection].p2AltAnim;
			var _g2 = 0;
			var _g3 = ChartingState._song.notes[daSection].sectionNotes.length;
			while(_g2 < _g3) {
				var daNote = _g2++;
				var newtiming = ChartingState._song.notes[daSection].sectionNotes[daNote][0] + millisecadd;
				if(newtiming < 0) {
					newtiming = 0;
				}
				var futureSection = Math.floor(newtiming / 4 / (60000 / this.currentBPM));
				ChartingState._song.notes[daSection].sectionNotes[daNote][0] = newtiming;
				newSong[futureSection].sectionNotes.push(ChartingState._song.notes[daSection].sectionNotes[daNote]);
			}
		}
		ChartingState._song.notes = newSong;
		this.recalculateAllSectionTimes();
		this.updateGrid();
		this.updateSectionUI();
		this.updateNoteUI();
	}
	,getSectionByTime: function(ms,changeCurSectionIndex) {
		if(changeCurSectionIndex == null) {
			changeCurSectionIndex = false;
		}
		var index = 0;
		var _g = 0;
		var _g1 = ChartingState._song.notes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(ms >= i.startTime && ms < i.endTime) {
				if(changeCurSectionIndex) {
					this.curSection = index;
				}
				return i;
			}
			++index;
		}
		return null;
	}
	,getNoteByTime: function(ms) {
		var _g = 0;
		var _g1 = ChartingState._song.notes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = i.sectionNotes;
			while(_g2 < _g3.length) {
				var n = _g3[_g2];
				++_g2;
				if(n[0] == ms) {
					return i;
				}
			}
		}
		return null;
	}
	,curSelectedNoteObject: null
	,addNote: function(n) {
		var strum = this.getStrumTime(this.dummyArrow.y) / this.zoomFactor;
		haxe_Log.trace(strum + " from " + this.dummyArrow.y,{ fileName : "source/ChartingState.hx", lineNumber : 2988, className : "ChartingState", methodName : "addNote"});
		haxe_Log.trace("adding note with " + strum + " from dummyArrow",{ fileName : "source/ChartingState.hx", lineNumber : 2990, className : "ChartingState", methodName : "addNote"});
		var section = this.getSectionByTime(strum);
		if(section == null) {
			return;
		}
		var noteStrum = strum;
		var noteData = Math.floor(flixel_FlxG.mouse.x / this.GRID_SIZE);
		var noteSus = 0;
		if(n != null) {
			section.sectionNotes.push([n.strumTime,n.noteData,n.sustainLength,false]);
		} else {
			section.sectionNotes.push([noteStrum,noteData,noteSus,false]);
		}
		var thingy = section.sectionNotes[section.sectionNotes.length - 1];
		this.curSelectedNote = thingy;
		var seg = TimingStruct.getTimingAtTimestamp(noteStrum);
		if(n == null) {
			var note = new Note(noteStrum,noteData % 4,null,false,true);
			note.rawNoteData = noteData;
			note.sustainLength = noteSus;
			note.setGraphicSize(Math.floor(this.GRID_SIZE),Math.floor(this.GRID_SIZE));
			note.updateHitbox();
			note.set_x(Math.floor(noteData * this.GRID_SIZE));
			if(this.curSelectedNoteObject != null) {
				this.curSelectedNoteObject.charterSelected = false;
			}
			this.curSelectedNoteObject = note;
			while(this.selectedBoxes.members.length != 0) {
				this.selectedBoxes.members[0].connectedNote.charterSelected = false;
				this.selectedBoxes.members[0].destroy();
				HxOverrides.remove(this.selectedBoxes.members,this.selectedBoxes.members[0]);
			}
			this.curSelectedNoteObject.charterSelected = true;
			note.set_y(Math.floor(this.getYfromStrum(noteStrum) * this.zoomFactor));
			var box = new ChartingBox(note.x,note.y,note);
			box.connectedNoteData = thingy;
			this.selectedBoxes.add(box);
			this.curRenderedNotes.add(note);
		} else {
			var note = new Note(n.strumTime,n.noteData % 4,null,false,true,n.isAlt);
			note.rawNoteData = n.noteData;
			note.sustainLength = noteSus;
			note.setGraphicSize(Math.floor(this.GRID_SIZE),Math.floor(this.GRID_SIZE));
			note.updateHitbox();
			note.set_x(Math.floor(n.noteData * this.GRID_SIZE));
			if(this.curSelectedNoteObject != null) {
				this.curSelectedNoteObject.charterSelected = false;
			}
			this.curSelectedNoteObject = note;
			while(this.selectedBoxes.members.length != 0) {
				this.selectedBoxes.members[0].connectedNote.charterSelected = false;
				this.selectedBoxes.members[0].destroy();
				HxOverrides.remove(this.selectedBoxes.members,this.selectedBoxes.members[0]);
			}
			var box = new ChartingBox(note.x,note.y,note);
			box.connectedNoteData = thingy;
			this.selectedBoxes.add(box);
			this.curSelectedNoteObject.charterSelected = true;
			note.set_y(Math.floor(this.getYfromStrum(n.strumTime) * this.zoomFactor));
			this.curRenderedNotes.add(note);
		}
		this.updateNoteUI();
		this.autosaveSong();
	}
	,getStrumTime: function(yPos) {
		return flixel_math_FlxMath.remapToRange(yPos,0,ChartingState.lengthInSteps,0,ChartingState.lengthInSteps);
	}
	,getYfromStrum: function(strumTime) {
		return flixel_math_FlxMath.remapToRange(strumTime,0,ChartingState.lengthInSteps,0,ChartingState.lengthInSteps);
	}
	,daSpacing: null
	,loadLevel: function() {
		haxe_Log.trace(ChartingState._song.notes,{ fileName : "source/ChartingState.hx", lineNumber : 3115, className : "ChartingState", methodName : "loadLevel"});
	}
	,getNotes: function() {
		var noteData = [];
		var _g = 0;
		var _g1 = ChartingState._song.notes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			noteData.push(i.sectionNotes);
		}
		return noteData;
	}
	,loadJson: function(song) {
		var difficultyArray = ["-easy","","-hard"];
		var format = StringTools.replace(PlayState.SONG.song.toLowerCase()," ","-");
		switch(format) {
		case "Dad-Battle":
			format = "Dadbattle";
			break;
		case "Philly-Nice":
			format = "Philly";
			break;
		}
		PlayState.SONG = Song.loadFromJson(format + difficultyArray[PlayState.storyDifficulty],format);
		var nextState = LoadingState.getNextState(new ChartingState(),false);
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
	}
	,loadAutosave: function() {
		PlayState.SONG = Song.parseJSONshit(flixel_FlxG.save.data.autosave);
		var nextState = LoadingState.getNextState(new ChartingState(),false);
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
	}
	,autosaveSong: function() {
		flixel_FlxG.save.data.autosave = JSON.stringify({ "song" : ChartingState._song});
		flixel_FlxG.save.flush();
	}
	,saveLevel: function() {
		var difficultyArray = ["-easy","","-hard"];
		var json = { "song" : ChartingState._song};
		var data = JSON.stringify(json,null," ");
		if(data != null && data.length > 0) {
			this._file = new openfl_net_FileReference();
			this._file.addEventListener("complete",$bind(this,this.onSaveComplete));
			this._file.addEventListener("cancel",$bind(this,this.onSaveCancel));
			this._file.addEventListener("ioError",$bind(this,this.onSaveError));
			this._file.save(StringTools.trim(data),ChartingState._song.song.toLowerCase() + difficultyArray[PlayState.storyDifficulty] + ".json");
		}
	}
	,onSaveComplete: function(_) {
		this._file.removeEventListener("complete",$bind(this,this.onSaveComplete));
		this._file.removeEventListener("cancel",$bind(this,this.onSaveCancel));
		this._file.removeEventListener("ioError",$bind(this,this.onSaveError));
		this._file = null;
	}
	,onSaveCancel: function(_) {
		this._file.removeEventListener("complete",$bind(this,this.onSaveComplete));
		this._file.removeEventListener("cancel",$bind(this,this.onSaveCancel));
		this._file.removeEventListener("ioError",$bind(this,this.onSaveError));
		this._file = null;
	}
	,onSaveError: function(_) {
		this._file.removeEventListener("complete",$bind(this,this.onSaveComplete));
		this._file.removeEventListener("cancel",$bind(this,this.onSaveCancel));
		this._file.removeEventListener("ioError",$bind(this,this.onSaveError));
		this._file = null;
	}
	,__class__: ChartingState
});
Math.__name__ = "Math";
var Conductor = function() {
};
$hxClasses["Conductor"] = Conductor;
Conductor.__name__ = "Conductor";
Conductor.songPosition = null;
Conductor.lastSongPos = null;
Conductor.recalculateTimings = function() {
	Conductor.safeFrames = flixel_FlxG.save.data.frames;
	Conductor.safeZoneOffset = Math.floor(Conductor.safeFrames / 60 * 1000);
	Conductor.timeScale = Conductor.safeZoneOffset / 166;
};
Conductor.mapBPMChanges = function(song) {
	Conductor.bpmChangeMap = [];
	var curBPM = song.bpm;
	var totalSteps = 0;
	var totalPos = 0;
	var _g = 0;
	var _g1 = song.notes.length;
	while(_g < _g1) {
		var i = _g++;
		if(song.notes[i].changeBPM && song.notes[i].bpm != curBPM) {
			curBPM = song.notes[i].bpm;
			var event = { stepTime : totalSteps, songTime : totalPos, bpm : curBPM};
			Conductor.bpmChangeMap.push(event);
		}
		var deltaSteps = song.notes[i].lengthInSteps;
		totalSteps += deltaSteps;
		totalPos += 60 / curBPM * 1000 / 4 * deltaSteps;
	}
	haxe_Log.trace("new BPM map BUDDY " + Std.string(Conductor.bpmChangeMap),{ fileName : "source/Conductor.hx", lineNumber : 68, className : "Conductor", methodName : "mapBPMChanges"});
};
Conductor.recalculateTimingStruct = function(SONG) {
	var _g = 0;
	var _g1 = SONG.eventObjects;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
	}
};
Conductor.changeBPM = function(newBpm,recalcLength) {
	if(recalcLength == null) {
		recalcLength = true;
	}
	Conductor.bpm = newBpm;
	Conductor.crochet = 60 / Conductor.bpm * 1000;
	Conductor.stepCrochet = Conductor.crochet / 4;
};
Conductor.prototype = {
	__class__: Conductor
};
var Device = $hxEnums["Device"] = { __ename__ : "Device", __constructs__ : ["Keys","Gamepad"]
	,Keys: {_hx_index:0,__enum__:"Device",toString:$estr}
	,Gamepad: ($_=function(id) { return {_hx_index:1,id:id,__enum__:"Device",toString:$estr}; },$_.__params__ = ["id"],$_)
};
var Control = $hxEnums["Control"] = { __ename__ : "Control", __constructs__ : ["UP","LEFT","RIGHT","DOWN","RESET","ACCEPT","BACK","PAUSE","CHEAT"]
	,UP: {_hx_index:0,__enum__:"Control",toString:$estr}
	,LEFT: {_hx_index:1,__enum__:"Control",toString:$estr}
	,RIGHT: {_hx_index:2,__enum__:"Control",toString:$estr}
	,DOWN: {_hx_index:3,__enum__:"Control",toString:$estr}
	,RESET: {_hx_index:4,__enum__:"Control",toString:$estr}
	,ACCEPT: {_hx_index:5,__enum__:"Control",toString:$estr}
	,BACK: {_hx_index:6,__enum__:"Control",toString:$estr}
	,PAUSE: {_hx_index:7,__enum__:"Control",toString:$estr}
	,CHEAT: {_hx_index:8,__enum__:"Control",toString:$estr}
};
var KeyboardScheme = $hxEnums["KeyboardScheme"] = { __ename__ : "KeyboardScheme", __constructs__ : ["Solo","Duo","None","Custom"]
	,Solo: {_hx_index:0,__enum__:"KeyboardScheme",toString:$estr}
	,Duo: ($_=function(first) { return {_hx_index:1,first:first,__enum__:"KeyboardScheme",toString:$estr}; },$_.__params__ = ["first"],$_)
	,None: {_hx_index:2,__enum__:"KeyboardScheme",toString:$estr}
	,Custom: {_hx_index:3,__enum__:"KeyboardScheme",toString:$estr}
};
var flixel_input_actions_FlxActionSet = function(Name,DigitalActions,AnalogActions) {
	this.active = true;
	this.name = "";
	this.name = Name;
	if(DigitalActions == null) {
		DigitalActions = [];
	}
	if(AnalogActions == null) {
		AnalogActions = [];
	}
	this.digitalActions = DigitalActions;
	this.analogActions = AnalogActions;
};
$hxClasses["flixel.input.actions.FlxActionSet"] = flixel_input_actions_FlxActionSet;
flixel_input_actions_FlxActionSet.__name__ = "flixel.input.actions.FlxActionSet";
flixel_input_actions_FlxActionSet.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_actions_FlxActionSet.fromJson = function(Data,CallbackDigital,CallbackAnalog) {
	var digitalActions = [];
	var analogActions = [];
	if(Data == null) {
		return null;
	}
	if(Data.digitalActions != null) {
		var arrD = Data.digitalActions;
		var _g = 0;
		while(_g < arrD.length) {
			var d = arrD[_g];
			++_g;
			var dName = d;
			var action = new flixel_input_actions_FlxActionDigital(dName,CallbackDigital);
			digitalActions.push(action);
		}
	}
	if(Data.analogActions != null) {
		var arrA = Data.analogActions;
		var _g = 0;
		while(_g < arrA.length) {
			var a = arrA[_g];
			++_g;
			var aName = a;
			var action = new flixel_input_actions_FlxActionAnalog(aName,CallbackAnalog);
			analogActions.push(action);
		}
	}
	if(Data.name != null) {
		var name = Data.name;
		var set = new flixel_input_actions_FlxActionSet(name,digitalActions,analogActions);
		return set;
	}
	return null;
};
flixel_input_actions_FlxActionSet.prototype = {
	name: null
	,digitalActions: null
	,analogActions: null
	,active: null
	,toJson: function() {
		var space = "\t";
		return JSON.stringify(this,function(key,value) {
			if(((value) instanceof flixel_input_actions_FlxAction)) {
				var fa = value;
				return { "type" : fa.type, "name" : fa.name, "steamHandle" : fa.steamHandle};
			}
			return value;
		},space);
	}
	,attachSteamController: function(Handle,Attach) {
		if(Attach == null) {
			Attach = true;
		}
		this.attachSteamControllerSub(Handle,Attach,flixel_input_actions_FlxInputType.DIGITAL,this.digitalActions,null);
		this.attachSteamControllerSub(Handle,Attach,flixel_input_actions_FlxInputType.ANALOG,null,this.analogActions);
	}
	,add: function(Action1) {
		if(Action1.type == flixel_input_actions_FlxInputType.DIGITAL) {
			var dAction = Action1;
			if(this.digitalActions.indexOf(dAction) != -1) {
				return false;
			}
			this.digitalActions.push(dAction);
			return true;
		} else if(Action1.type == flixel_input_actions_FlxInputType.ANALOG) {
			var aAction = Action1;
			if(this.analogActions.indexOf(aAction) != -1) {
				return false;
			}
			this.analogActions.push(aAction);
			return true;
		}
		return false;
	}
	,destroy: function() {
		this.digitalActions = flixel_util_FlxDestroyUtil.destroyArray(this.digitalActions);
		this.analogActions = flixel_util_FlxDestroyUtil.destroyArray(this.analogActions);
	}
	,remove: function(Action1,Destroy) {
		if(Destroy == null) {
			Destroy = true;
		}
		var result = false;
		if(Action1.type == flixel_input_actions_FlxInputType.DIGITAL) {
			result = HxOverrides.remove(this.digitalActions,Action1);
			if(result && Destroy) {
				Action1.destroy();
			}
		} else if(Action1.type == flixel_input_actions_FlxInputType.ANALOG) {
			result = HxOverrides.remove(this.analogActions,Action1);
			if(result && Destroy) {
				Action1.destroy();
			}
		}
		return result;
	}
	,update: function() {
		if(!this.active) {
			return;
		}
		var _g = 0;
		var _g1 = this.digitalActions;
		while(_g < _g1.length) {
			var digitalAction = _g1[_g];
			++_g;
			digitalAction.update();
		}
		var _g = 0;
		var _g1 = this.analogActions;
		while(_g < _g1.length) {
			var analogAction = _g1[_g];
			++_g;
			analogAction.update();
		}
	}
	,attachSteamControllerSub: function(Handle,Attach,InputType,DigitalActions,AnalogActions) {
		var length = InputType == flixel_input_actions_FlxInputType.DIGITAL ? DigitalActions.length : AnalogActions.length;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			var action = InputType == flixel_input_actions_FlxInputType.DIGITAL ? DigitalActions[i] : AnalogActions[i];
			if(action.steamHandle != -1) {
				var inputExists = false;
				var theInput = null;
				if(action.inputs != null) {
					var _g2 = 0;
					var _g3 = action.inputs;
					while(_g2 < _g3.length) {
						var input = _g3[_g2];
						++_g2;
						if(input.device == flixel_input_actions_FlxInputDevice.STEAM_CONTROLLER && input.deviceID == Handle) {
							inputExists = true;
							theInput = input;
						}
					}
				}
				if(Attach) {
					if(!inputExists) {
						if(InputType == flixel_input_actions_FlxInputType.DIGITAL) {
							DigitalActions[i].add(new flixel_input_actions_FlxActionInputDigitalSteam(action.steamHandle,2,Handle));
						} else if(InputType == flixel_input_actions_FlxInputType.ANALOG) {
							AnalogActions[i].add(new flixel_input_actions_FlxActionInputAnalogSteam(action.steamHandle,1,3,Handle));
						}
					}
				} else if(inputExists) {
					action.remove(theInput);
				}
			}
		}
	}
	,__class__: flixel_input_actions_FlxActionSet
};
var Controls = function(name,scheme) {
	if(scheme == null) {
		scheme = KeyboardScheme.None;
	}
	this.keyboardScheme = KeyboardScheme.None;
	this.gamepadsAdded = [];
	this.byName = new haxe_ds_StringMap();
	this._cheat = new flixel_input_actions_FlxActionDigital("cheat");
	this._reset = new flixel_input_actions_FlxActionDigital("reset");
	this._pause = new flixel_input_actions_FlxActionDigital("pause");
	this._back = new flixel_input_actions_FlxActionDigital("back");
	this._accept = new flixel_input_actions_FlxActionDigital("accept");
	this._downR = new flixel_input_actions_FlxActionDigital("down-release");
	this._rightR = new flixel_input_actions_FlxActionDigital("right-release");
	this._leftR = new flixel_input_actions_FlxActionDigital("left-release");
	this._upR = new flixel_input_actions_FlxActionDigital("up-release");
	this._downP = new flixel_input_actions_FlxActionDigital("down-press");
	this._rightP = new flixel_input_actions_FlxActionDigital("right-press");
	this._leftP = new flixel_input_actions_FlxActionDigital("left-press");
	this._upP = new flixel_input_actions_FlxActionDigital("up-press");
	this._down = new flixel_input_actions_FlxActionDigital("down");
	this._right = new flixel_input_actions_FlxActionDigital("right");
	this._left = new flixel_input_actions_FlxActionDigital("left");
	this._up = new flixel_input_actions_FlxActionDigital("up");
	flixel_input_actions_FlxActionSet.call(this,name);
	this.add(this._up);
	this.add(this._left);
	this.add(this._right);
	this.add(this._down);
	this.add(this._upP);
	this.add(this._leftP);
	this.add(this._rightP);
	this.add(this._downP);
	this.add(this._upR);
	this.add(this._leftR);
	this.add(this._rightR);
	this.add(this._downR);
	this.add(this._accept);
	this.add(this._back);
	this.add(this._pause);
	this.add(this._reset);
	this.add(this._cheat);
	var _g = 0;
	var _g1 = this.digitalActions;
	while(_g < _g1.length) {
		var action = _g1[_g];
		++_g;
		this.byName.h[action.name] = action;
	}
	this.setKeyboardScheme(scheme,false);
};
$hxClasses["Controls"] = Controls;
Controls.__name__ = "Controls";
Controls.init = function() {
	var actions = new flixel_input_actions_FlxActionManager();
	flixel_FlxG.inputs.add_flixel_input_actions_FlxActionManager(actions);
};
Controls.addKeys = function(action,keys,state) {
	var _g = 0;
	while(_g < keys.length) {
		var key = keys[_g];
		++_g;
		action.addKey(key,state);
	}
};
Controls.removeKeys = function(action,keys) {
	var i = action.inputs.length;
	while(i-- > 0) {
		var input = action.inputs[i];
		if(input.device == flixel_input_actions_FlxInputDevice.KEYBOARD && keys.indexOf(input.inputID) != -1) {
			action.remove(input);
		}
	}
};
Controls.addButtons = function(action,buttons,state,id) {
	var _g = 0;
	while(_g < buttons.length) {
		var button = buttons[_g];
		++_g;
		action.addGamepad(button,state,id);
	}
};
Controls.removeButtons = function(action,gamepadID,buttons) {
	var i = action.inputs.length;
	while(i-- > 0) {
		var input = action.inputs[i];
		if(input.device == flixel_input_actions_FlxInputDevice.GAMEPAD && (gamepadID == -1 || input.deviceID == gamepadID) && buttons.indexOf(input.inputID) != -1) {
			action.remove(input);
		}
	}
};
Controls.isDevice = function(input,device) {
	switch(device._hx_index) {
	case 0:
		return input.device == flixel_input_actions_FlxInputDevice.KEYBOARD;
	case 1:
		var id = device.id;
		if(input.device == flixel_input_actions_FlxInputDevice.GAMEPAD) {
			if(id != -1) {
				return input.deviceID == id;
			} else {
				return true;
			}
		} else {
			return false;
		}
		break;
	}
};
Controls.isGamepad = function(input,deviceID) {
	if(input.device == flixel_input_actions_FlxInputDevice.GAMEPAD) {
		if(deviceID != -1) {
			return input.deviceID == deviceID;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
Controls.__super__ = flixel_input_actions_FlxActionSet;
Controls.prototype = $extend(flixel_input_actions_FlxActionSet.prototype,{
	_up: null
	,_left: null
	,_right: null
	,_down: null
	,_upP: null
	,_leftP: null
	,_rightP: null
	,_downP: null
	,_upR: null
	,_leftR: null
	,_rightR: null
	,_downR: null
	,_accept: null
	,_back: null
	,_pause: null
	,_reset: null
	,_cheat: null
	,byName: null
	,gamepadsAdded: null
	,keyboardScheme: null
	,get_UP: function() {
		return this._up.check();
	}
	,get_LEFT: function() {
		return this._left.check();
	}
	,get_RIGHT: function() {
		return this._right.check();
	}
	,get_DOWN: function() {
		return this._down.check();
	}
	,get_UP_P: function() {
		return this._upP.check();
	}
	,get_LEFT_P: function() {
		return this._leftP.check();
	}
	,get_RIGHT_P: function() {
		return this._rightP.check();
	}
	,get_DOWN_P: function() {
		return this._downP.check();
	}
	,get_UP_R: function() {
		return this._upR.check();
	}
	,get_LEFT_R: function() {
		return this._leftR.check();
	}
	,get_RIGHT_R: function() {
		return this._rightR.check();
	}
	,get_DOWN_R: function() {
		return this._downR.check();
	}
	,get_ACCEPT: function() {
		return this._accept.check();
	}
	,get_BACK: function() {
		return this._back.check();
	}
	,get_PAUSE: function() {
		return this._pause.check();
	}
	,get_RESET: function() {
		return this._reset.check();
	}
	,get_CHEAT: function() {
		return this._cheat.check();
	}
	,update: function() {
		flixel_input_actions_FlxActionSet.prototype.update.call(this);
	}
	,checkByName: function(name) {
		return this.byName.h[name].check();
	}
	,getDialogueName: function(action) {
		var input = action.inputs[0];
		var _g = input.device;
		switch(_g._hx_index) {
		case 3:
			var tmp = input.inputID;
			return "[" + (tmp == null ? "null" : flixel_input_keyboard_FlxKey.toStringMap.h[tmp]) + "]";
		case 4:
			var tmp = input.inputID;
			return "(" + (tmp == null ? "null" : flixel_input_gamepad_FlxGamepadInputID.toStringMap.h[tmp]) + ")";
		default:
			var device = _g;
			throw haxe_Exception.thrown("unhandled device: " + Std.string(device));
		}
	}
	,getDialogueNameFromToken: function(token) {
		return this.getDialogueName(this.getActionFromControl(Type.createEnum(Control,token.toUpperCase(),null)));
	}
	,getActionFromControl: function(control) {
		switch(control._hx_index) {
		case 0:
			return this._up;
		case 1:
			return this._left;
		case 2:
			return this._right;
		case 3:
			return this._down;
		case 4:
			return this._reset;
		case 5:
			return this._accept;
		case 6:
			return this._back;
		case 7:
			return this._pause;
		case 8:
			return this._cheat;
		}
	}
	,forEachBound: function(control,func) {
		switch(control._hx_index) {
		case 0:
			func(this._up,1);
			func(this._upP,2);
			func(this._upR,-1);
			break;
		case 1:
			func(this._left,1);
			func(this._leftP,2);
			func(this._leftR,-1);
			break;
		case 2:
			func(this._right,1);
			func(this._rightP,2);
			func(this._rightR,-1);
			break;
		case 3:
			func(this._down,1);
			func(this._downP,2);
			func(this._downR,-1);
			break;
		case 4:
			func(this._reset,2);
			break;
		case 5:
			func(this._accept,2);
			break;
		case 6:
			func(this._back,2);
			break;
		case 7:
			func(this._pause,2);
			break;
		case 8:
			func(this._cheat,2);
			break;
		}
	}
	,replaceBinding: function(control,device,toAdd,toRemove) {
		if(toAdd == toRemove) {
			return;
		}
		switch(device._hx_index) {
		case 0:
			if(toRemove != null) {
				this.unbindKeys(control,[toRemove]);
			}
			if(toAdd != null) {
				this.bindKeys(control,[toAdd]);
			}
			break;
		case 1:
			var id = device.id;
			if(toRemove != null) {
				this.unbindButtons(control,id,[toRemove]);
			}
			if(toAdd != null) {
				this.bindButtons(control,id,[toAdd]);
			}
			break;
		}
	}
	,copyFrom: function(controls,device) {
		var _g = haxe_ds_StringMap.kvIterator(controls.byName.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var name = _g1.key;
			var action = _g1.value;
			var _g2 = 0;
			var _g3 = action.inputs;
			while(_g2 < _g3.length) {
				var input = _g3[_g2];
				++_g2;
				if(device == null || Controls.isDevice(input,device)) {
					this.byName.h[name].add(input);
				}
			}
		}
		if(device == null) {
			var _g = 0;
			var _g1 = controls.gamepadsAdded;
			while(_g < _g1.length) {
				var gamepad = _g1[_g];
				++_g;
				if(this.gamepadsAdded.indexOf(gamepad) == -1) {
					this.gamepadsAdded.push(gamepad);
				}
			}
			this.mergeKeyboardScheme(controls.keyboardScheme);
		} else {
			switch(device._hx_index) {
			case 0:
				this.mergeKeyboardScheme(controls.keyboardScheme);
				break;
			case 1:
				var id = device.id;
				this.gamepadsAdded.push(id);
				break;
			}
		}
	}
	,copyTo: function(controls,device) {
		controls.copyFrom(this,device);
	}
	,mergeKeyboardScheme: function(scheme) {
		if(scheme != KeyboardScheme.None) {
			if(this.keyboardScheme._hx_index == 2) {
				this.keyboardScheme = scheme;
			} else {
				this.keyboardScheme = KeyboardScheme.Custom;
			}
		}
	}
	,bindKeys: function(control,keys) {
		switch(control._hx_index) {
		case 0:
			var action = this._up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 1:
			var action = this._left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 2:
			var action = this._right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 3:
			var action = this._down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 4:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 5:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 6:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 7:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 8:
			var action = this._cheat;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		}
	}
	,unbindKeys: function(control,keys) {
		switch(control._hx_index) {
		case 0:
			Controls.removeKeys(this._up,keys);
			Controls.removeKeys(this._upP,keys);
			Controls.removeKeys(this._upR,keys);
			break;
		case 1:
			Controls.removeKeys(this._left,keys);
			Controls.removeKeys(this._leftP,keys);
			Controls.removeKeys(this._leftR,keys);
			break;
		case 2:
			Controls.removeKeys(this._right,keys);
			Controls.removeKeys(this._rightP,keys);
			Controls.removeKeys(this._rightR,keys);
			break;
		case 3:
			Controls.removeKeys(this._down,keys);
			Controls.removeKeys(this._downP,keys);
			Controls.removeKeys(this._downR,keys);
			break;
		case 4:
			Controls.removeKeys(this._reset,keys);
			break;
		case 5:
			Controls.removeKeys(this._accept,keys);
			break;
		case 6:
			Controls.removeKeys(this._back,keys);
			break;
		case 7:
			Controls.removeKeys(this._pause,keys);
			break;
		case 8:
			Controls.removeKeys(this._cheat,keys);
			break;
		}
	}
	,setKeyboardScheme: function(scheme,reset) {
		if(reset == null) {
			reset = true;
		}
		this.loadKeyBinds();
	}
	,loadKeyBinds: function() {
		this.removeKeyboard();
		if(this.gamepadsAdded.length != 0) {
			this.removeGamepad();
		}
		KeyBinds.keyCheck();
		var buttons = new haxe_ds_EnumValueMap();
		var s = flixel_FlxG.save.data.gpupBind;
		s = s.toUpperCase();
		buttons.set(Control.UP,[Object.prototype.hasOwnProperty.call(flixel_input_gamepad_FlxGamepadInputID.fromStringMap.h,s) ? flixel_input_gamepad_FlxGamepadInputID.fromStringMap.h[s] : -1]);
		var s = flixel_FlxG.save.data.gpleftBind;
		s = s.toUpperCase();
		buttons.set(Control.LEFT,[Object.prototype.hasOwnProperty.call(flixel_input_gamepad_FlxGamepadInputID.fromStringMap.h,s) ? flixel_input_gamepad_FlxGamepadInputID.fromStringMap.h[s] : -1]);
		var s = flixel_FlxG.save.data.gpdownBind;
		s = s.toUpperCase();
		buttons.set(Control.DOWN,[Object.prototype.hasOwnProperty.call(flixel_input_gamepad_FlxGamepadInputID.fromStringMap.h,s) ? flixel_input_gamepad_FlxGamepadInputID.fromStringMap.h[s] : -1]);
		var s = flixel_FlxG.save.data.gprightBind;
		s = s.toUpperCase();
		buttons.set(Control.RIGHT,[Object.prototype.hasOwnProperty.call(flixel_input_gamepad_FlxGamepadInputID.fromStringMap.h,s) ? flixel_input_gamepad_FlxGamepadInputID.fromStringMap.h[s] : -1]);
		buttons.set(Control.ACCEPT,[0]);
		buttons.set(Control.BACK,[1]);
		buttons.set(Control.PAUSE,[7]);
		this.addGamepad(0,buttons);
		var s = flixel_FlxG.save.data.upBind;
		s = s.toUpperCase();
		var keys = [Object.prototype.hasOwnProperty.call(flixel_input_keyboard_FlxKey.fromStringMap.h,s) ? flixel_input_keyboard_FlxKey.fromStringMap.h[s] : -1,38];
		switch(Control.UP._hx_index) {
		case 0:
			var action = this._up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 1:
			var action = this._left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 2:
			var action = this._right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 3:
			var action = this._down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 4:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 5:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 6:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 7:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 8:
			var action = this._cheat;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		}
		var s = flixel_FlxG.save.data.downBind;
		s = s.toUpperCase();
		var keys = [Object.prototype.hasOwnProperty.call(flixel_input_keyboard_FlxKey.fromStringMap.h,s) ? flixel_input_keyboard_FlxKey.fromStringMap.h[s] : -1,40];
		switch(Control.DOWN._hx_index) {
		case 0:
			var action = this._up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 1:
			var action = this._left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 2:
			var action = this._right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 3:
			var action = this._down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 4:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 5:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 6:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 7:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 8:
			var action = this._cheat;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		}
		var s = flixel_FlxG.save.data.leftBind;
		s = s.toUpperCase();
		var keys = [Object.prototype.hasOwnProperty.call(flixel_input_keyboard_FlxKey.fromStringMap.h,s) ? flixel_input_keyboard_FlxKey.fromStringMap.h[s] : -1,37];
		switch(Control.LEFT._hx_index) {
		case 0:
			var action = this._up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 1:
			var action = this._left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 2:
			var action = this._right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 3:
			var action = this._down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 4:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 5:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 6:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 7:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 8:
			var action = this._cheat;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		}
		var s = flixel_FlxG.save.data.rightBind;
		s = s.toUpperCase();
		var keys = [Object.prototype.hasOwnProperty.call(flixel_input_keyboard_FlxKey.fromStringMap.h,s) ? flixel_input_keyboard_FlxKey.fromStringMap.h[s] : -1,39];
		switch(Control.RIGHT._hx_index) {
		case 0:
			var action = this._up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 1:
			var action = this._left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 2:
			var action = this._right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 3:
			var action = this._down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 4:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 5:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 6:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 7:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 8:
			var action = this._cheat;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		}
		var keys = [90,32,13];
		switch(Control.ACCEPT._hx_index) {
		case 0:
			var action = this._up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 1:
			var action = this._left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 2:
			var action = this._right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 3:
			var action = this._down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 4:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 5:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 6:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 7:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 8:
			var action = this._cheat;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		}
		var keys = [8,27];
		switch(Control.BACK._hx_index) {
		case 0:
			var action = this._up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 1:
			var action = this._left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 2:
			var action = this._right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 3:
			var action = this._down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 4:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 5:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 6:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 7:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 8:
			var action = this._cheat;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		}
		var keys = [13,27];
		switch(Control.PAUSE._hx_index) {
		case 0:
			var action = this._up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 1:
			var action = this._left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 2:
			var action = this._right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 3:
			var action = this._down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 4:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 5:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 6:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 7:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 8:
			var action = this._cheat;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		}
		var s = flixel_FlxG.save.data.killBind;
		s = s.toUpperCase();
		var keys = [Object.prototype.hasOwnProperty.call(flixel_input_keyboard_FlxKey.fromStringMap.h,s) ? flixel_input_keyboard_FlxKey.fromStringMap.h[s] : -1];
		switch(Control.RESET._hx_index) {
		case 0:
			var action = this._up;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._upR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 1:
			var action = this._left;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._leftR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 2:
			var action = this._right;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._rightR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 3:
			var action = this._down;
			var state = 1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downP;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			var action = this._downR;
			var state = -1;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 4:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 5:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 6:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 7:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		case 8:
			var action = this._cheat;
			var state = 2;
			var _g = 0;
			while(_g < keys.length) {
				var key = keys[_g];
				++_g;
				action.addKey(key,state);
			}
			break;
		}
	}
	,removeKeyboard: function() {
		var _g = 0;
		var _g1 = this.digitalActions;
		while(_g < _g1.length) {
			var action = _g1[_g];
			++_g;
			var i = action.inputs.length;
			while(i-- > 0) {
				var input = action.inputs[i];
				if(input.device == flixel_input_actions_FlxInputDevice.KEYBOARD) {
					action.remove(input);
				}
			}
		}
	}
	,addGamepad: function(id,buttonMap) {
		if(this.gamepadsAdded.indexOf(id) != -1) {
			HxOverrides.remove(this.gamepadsAdded,id);
		}
		this.gamepadsAdded.push(id);
		var _g = new haxe_iterators_MapKeyValueIterator(buttonMap);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var control = _g1.key;
			var buttons = _g1.value;
			var id1 = id;
			var buttons1 = buttons;
			switch(control._hx_index) {
			case 0:
				var action = this._up;
				var state = 1;
				var _g2 = 0;
				while(_g2 < buttons1.length) {
					var button = buttons1[_g2];
					++_g2;
					action.addGamepad(button,state,id1);
				}
				var action1 = this._upP;
				var state1 = 2;
				var _g3 = 0;
				while(_g3 < buttons1.length) {
					var button1 = buttons1[_g3];
					++_g3;
					action1.addGamepad(button1,state1,id1);
				}
				var action2 = this._upR;
				var state2 = -1;
				var _g4 = 0;
				while(_g4 < buttons1.length) {
					var button2 = buttons1[_g4];
					++_g4;
					action2.addGamepad(button2,state2,id1);
				}
				break;
			case 1:
				var action3 = this._left;
				var state3 = 1;
				var _g5 = 0;
				while(_g5 < buttons1.length) {
					var button3 = buttons1[_g5];
					++_g5;
					action3.addGamepad(button3,state3,id1);
				}
				var action4 = this._leftP;
				var state4 = 2;
				var _g6 = 0;
				while(_g6 < buttons1.length) {
					var button4 = buttons1[_g6];
					++_g6;
					action4.addGamepad(button4,state4,id1);
				}
				var action5 = this._leftR;
				var state5 = -1;
				var _g7 = 0;
				while(_g7 < buttons1.length) {
					var button5 = buttons1[_g7];
					++_g7;
					action5.addGamepad(button5,state5,id1);
				}
				break;
			case 2:
				var action6 = this._right;
				var state6 = 1;
				var _g8 = 0;
				while(_g8 < buttons1.length) {
					var button6 = buttons1[_g8];
					++_g8;
					action6.addGamepad(button6,state6,id1);
				}
				var action7 = this._rightP;
				var state7 = 2;
				var _g9 = 0;
				while(_g9 < buttons1.length) {
					var button7 = buttons1[_g9];
					++_g9;
					action7.addGamepad(button7,state7,id1);
				}
				var action8 = this._rightR;
				var state8 = -1;
				var _g10 = 0;
				while(_g10 < buttons1.length) {
					var button8 = buttons1[_g10];
					++_g10;
					action8.addGamepad(button8,state8,id1);
				}
				break;
			case 3:
				var action9 = this._down;
				var state9 = 1;
				var _g11 = 0;
				while(_g11 < buttons1.length) {
					var button9 = buttons1[_g11];
					++_g11;
					action9.addGamepad(button9,state9,id1);
				}
				var action10 = this._downP;
				var state10 = 2;
				var _g12 = 0;
				while(_g12 < buttons1.length) {
					var button10 = buttons1[_g12];
					++_g12;
					action10.addGamepad(button10,state10,id1);
				}
				var action11 = this._downR;
				var state11 = -1;
				var _g13 = 0;
				while(_g13 < buttons1.length) {
					var button11 = buttons1[_g13];
					++_g13;
					action11.addGamepad(button11,state11,id1);
				}
				break;
			case 4:
				var action12 = this._reset;
				var state12 = 2;
				var _g14 = 0;
				while(_g14 < buttons1.length) {
					var button12 = buttons1[_g14];
					++_g14;
					action12.addGamepad(button12,state12,id1);
				}
				break;
			case 5:
				var action13 = this._accept;
				var state13 = 2;
				var _g15 = 0;
				while(_g15 < buttons1.length) {
					var button13 = buttons1[_g15];
					++_g15;
					action13.addGamepad(button13,state13,id1);
				}
				break;
			case 6:
				var action14 = this._back;
				var state14 = 2;
				var _g16 = 0;
				while(_g16 < buttons1.length) {
					var button14 = buttons1[_g16];
					++_g16;
					action14.addGamepad(button14,state14,id1);
				}
				break;
			case 7:
				var action15 = this._pause;
				var state15 = 2;
				var _g17 = 0;
				while(_g17 < buttons1.length) {
					var button15 = buttons1[_g17];
					++_g17;
					action15.addGamepad(button15,state15,id1);
				}
				break;
			case 8:
				var action16 = this._cheat;
				var state16 = 2;
				var _g18 = 0;
				while(_g18 < buttons1.length) {
					var button16 = buttons1[_g18];
					++_g18;
					action16.addGamepad(button16,state16,id1);
				}
				break;
			}
		}
	}
	,addGamepadLiteral: function(id,buttonMap) {
		this.gamepadsAdded.push(id);
		var _g = new haxe_iterators_MapKeyValueIterator(buttonMap);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var control = _g1.key;
			var buttons = _g1.value;
			var id1 = id;
			var buttons1 = buttons;
			switch(control._hx_index) {
			case 0:
				var action = this._up;
				var state = 1;
				var _g2 = 0;
				while(_g2 < buttons1.length) {
					var button = buttons1[_g2];
					++_g2;
					action.addGamepad(button,state,id1);
				}
				var action1 = this._upP;
				var state1 = 2;
				var _g3 = 0;
				while(_g3 < buttons1.length) {
					var button1 = buttons1[_g3];
					++_g3;
					action1.addGamepad(button1,state1,id1);
				}
				var action2 = this._upR;
				var state2 = -1;
				var _g4 = 0;
				while(_g4 < buttons1.length) {
					var button2 = buttons1[_g4];
					++_g4;
					action2.addGamepad(button2,state2,id1);
				}
				break;
			case 1:
				var action3 = this._left;
				var state3 = 1;
				var _g5 = 0;
				while(_g5 < buttons1.length) {
					var button3 = buttons1[_g5];
					++_g5;
					action3.addGamepad(button3,state3,id1);
				}
				var action4 = this._leftP;
				var state4 = 2;
				var _g6 = 0;
				while(_g6 < buttons1.length) {
					var button4 = buttons1[_g6];
					++_g6;
					action4.addGamepad(button4,state4,id1);
				}
				var action5 = this._leftR;
				var state5 = -1;
				var _g7 = 0;
				while(_g7 < buttons1.length) {
					var button5 = buttons1[_g7];
					++_g7;
					action5.addGamepad(button5,state5,id1);
				}
				break;
			case 2:
				var action6 = this._right;
				var state6 = 1;
				var _g8 = 0;
				while(_g8 < buttons1.length) {
					var button6 = buttons1[_g8];
					++_g8;
					action6.addGamepad(button6,state6,id1);
				}
				var action7 = this._rightP;
				var state7 = 2;
				var _g9 = 0;
				while(_g9 < buttons1.length) {
					var button7 = buttons1[_g9];
					++_g9;
					action7.addGamepad(button7,state7,id1);
				}
				var action8 = this._rightR;
				var state8 = -1;
				var _g10 = 0;
				while(_g10 < buttons1.length) {
					var button8 = buttons1[_g10];
					++_g10;
					action8.addGamepad(button8,state8,id1);
				}
				break;
			case 3:
				var action9 = this._down;
				var state9 = 1;
				var _g11 = 0;
				while(_g11 < buttons1.length) {
					var button9 = buttons1[_g11];
					++_g11;
					action9.addGamepad(button9,state9,id1);
				}
				var action10 = this._downP;
				var state10 = 2;
				var _g12 = 0;
				while(_g12 < buttons1.length) {
					var button10 = buttons1[_g12];
					++_g12;
					action10.addGamepad(button10,state10,id1);
				}
				var action11 = this._downR;
				var state11 = -1;
				var _g13 = 0;
				while(_g13 < buttons1.length) {
					var button11 = buttons1[_g13];
					++_g13;
					action11.addGamepad(button11,state11,id1);
				}
				break;
			case 4:
				var action12 = this._reset;
				var state12 = 2;
				var _g14 = 0;
				while(_g14 < buttons1.length) {
					var button12 = buttons1[_g14];
					++_g14;
					action12.addGamepad(button12,state12,id1);
				}
				break;
			case 5:
				var action13 = this._accept;
				var state13 = 2;
				var _g15 = 0;
				while(_g15 < buttons1.length) {
					var button13 = buttons1[_g15];
					++_g15;
					action13.addGamepad(button13,state13,id1);
				}
				break;
			case 6:
				var action14 = this._back;
				var state14 = 2;
				var _g16 = 0;
				while(_g16 < buttons1.length) {
					var button14 = buttons1[_g16];
					++_g16;
					action14.addGamepad(button14,state14,id1);
				}
				break;
			case 7:
				var action15 = this._pause;
				var state15 = 2;
				var _g17 = 0;
				while(_g17 < buttons1.length) {
					var button15 = buttons1[_g17];
					++_g17;
					action15.addGamepad(button15,state15,id1);
				}
				break;
			case 8:
				var action16 = this._cheat;
				var state16 = 2;
				var _g18 = 0;
				while(_g18 < buttons1.length) {
					var button16 = buttons1[_g18];
					++_g18;
					action16.addGamepad(button16,state16,id1);
				}
				break;
			}
		}
	}
	,removeGamepad: function(deviceID) {
		if(deviceID == null) {
			deviceID = -1;
		}
		var _g = 0;
		var _g1 = this.digitalActions;
		while(_g < _g1.length) {
			var action = _g1[_g];
			++_g;
			var i = action.inputs.length;
			while(i-- > 0) {
				var input = action.inputs[i];
				if(input.device == flixel_input_actions_FlxInputDevice.GAMEPAD && (deviceID == -1 || input.deviceID == deviceID)) {
					action.remove(input);
				}
			}
		}
		HxOverrides.remove(this.gamepadsAdded,deviceID);
	}
	,addDefaultGamepad: function(id) {
		var _g = new haxe_ds_EnumValueMap();
		_g.set(Control.ACCEPT,[0]);
		_g.set(Control.BACK,[1]);
		_g.set(Control.UP,[11,34]);
		_g.set(Control.DOWN,[12,36]);
		_g.set(Control.LEFT,[13,37]);
		_g.set(Control.RIGHT,[14,35]);
		_g.set(Control.PAUSE,[7]);
		_g.set(Control.RESET,[3]);
		this.gamepadsAdded.push(id);
		var _g1 = new haxe_iterators_MapKeyValueIterator(_g);
		while(_g1.hasNext()) {
			var _g = _g1.next();
			var control = _g.key;
			var buttons = _g.value;
			var id1 = id;
			var buttons1 = buttons;
			switch(control._hx_index) {
			case 0:
				var action = this._up;
				var state = 1;
				var _g2 = 0;
				while(_g2 < buttons1.length) {
					var button = buttons1[_g2];
					++_g2;
					action.addGamepad(button,state,id1);
				}
				var action1 = this._upP;
				var state1 = 2;
				var _g3 = 0;
				while(_g3 < buttons1.length) {
					var button1 = buttons1[_g3];
					++_g3;
					action1.addGamepad(button1,state1,id1);
				}
				var action2 = this._upR;
				var state2 = -1;
				var _g4 = 0;
				while(_g4 < buttons1.length) {
					var button2 = buttons1[_g4];
					++_g4;
					action2.addGamepad(button2,state2,id1);
				}
				break;
			case 1:
				var action3 = this._left;
				var state3 = 1;
				var _g5 = 0;
				while(_g5 < buttons1.length) {
					var button3 = buttons1[_g5];
					++_g5;
					action3.addGamepad(button3,state3,id1);
				}
				var action4 = this._leftP;
				var state4 = 2;
				var _g6 = 0;
				while(_g6 < buttons1.length) {
					var button4 = buttons1[_g6];
					++_g6;
					action4.addGamepad(button4,state4,id1);
				}
				var action5 = this._leftR;
				var state5 = -1;
				var _g7 = 0;
				while(_g7 < buttons1.length) {
					var button5 = buttons1[_g7];
					++_g7;
					action5.addGamepad(button5,state5,id1);
				}
				break;
			case 2:
				var action6 = this._right;
				var state6 = 1;
				var _g8 = 0;
				while(_g8 < buttons1.length) {
					var button6 = buttons1[_g8];
					++_g8;
					action6.addGamepad(button6,state6,id1);
				}
				var action7 = this._rightP;
				var state7 = 2;
				var _g9 = 0;
				while(_g9 < buttons1.length) {
					var button7 = buttons1[_g9];
					++_g9;
					action7.addGamepad(button7,state7,id1);
				}
				var action8 = this._rightR;
				var state8 = -1;
				var _g10 = 0;
				while(_g10 < buttons1.length) {
					var button8 = buttons1[_g10];
					++_g10;
					action8.addGamepad(button8,state8,id1);
				}
				break;
			case 3:
				var action9 = this._down;
				var state9 = 1;
				var _g11 = 0;
				while(_g11 < buttons1.length) {
					var button9 = buttons1[_g11];
					++_g11;
					action9.addGamepad(button9,state9,id1);
				}
				var action10 = this._downP;
				var state10 = 2;
				var _g12 = 0;
				while(_g12 < buttons1.length) {
					var button10 = buttons1[_g12];
					++_g12;
					action10.addGamepad(button10,state10,id1);
				}
				var action11 = this._downR;
				var state11 = -1;
				var _g13 = 0;
				while(_g13 < buttons1.length) {
					var button11 = buttons1[_g13];
					++_g13;
					action11.addGamepad(button11,state11,id1);
				}
				break;
			case 4:
				var action12 = this._reset;
				var state12 = 2;
				var _g14 = 0;
				while(_g14 < buttons1.length) {
					var button12 = buttons1[_g14];
					++_g14;
					action12.addGamepad(button12,state12,id1);
				}
				break;
			case 5:
				var action13 = this._accept;
				var state13 = 2;
				var _g15 = 0;
				while(_g15 < buttons1.length) {
					var button13 = buttons1[_g15];
					++_g15;
					action13.addGamepad(button13,state13,id1);
				}
				break;
			case 6:
				var action14 = this._back;
				var state14 = 2;
				var _g16 = 0;
				while(_g16 < buttons1.length) {
					var button14 = buttons1[_g16];
					++_g16;
					action14.addGamepad(button14,state14,id1);
				}
				break;
			case 7:
				var action15 = this._pause;
				var state15 = 2;
				var _g17 = 0;
				while(_g17 < buttons1.length) {
					var button15 = buttons1[_g17];
					++_g17;
					action15.addGamepad(button15,state15,id1);
				}
				break;
			case 8:
				var action16 = this._cheat;
				var state16 = 2;
				var _g18 = 0;
				while(_g18 < buttons1.length) {
					var button16 = buttons1[_g18];
					++_g18;
					action16.addGamepad(button16,state16,id1);
				}
				break;
			}
		}
	}
	,bindButtons: function(control,id,buttons) {
		switch(control._hx_index) {
		case 0:
			var action = this._up;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._upP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._upR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 1:
			var action = this._left;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._leftP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._leftR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 2:
			var action = this._right;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._rightP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._rightR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 3:
			var action = this._down;
			var state = 1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._downP;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			var action = this._downR;
			var state = -1;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 4:
			var action = this._reset;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 5:
			var action = this._accept;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 6:
			var action = this._back;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 7:
			var action = this._pause;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		case 8:
			var action = this._cheat;
			var state = 2;
			var _g = 0;
			while(_g < buttons.length) {
				var button = buttons[_g];
				++_g;
				action.addGamepad(button,state,id);
			}
			break;
		}
	}
	,unbindButtons: function(control,gamepadID,buttons) {
		switch(control._hx_index) {
		case 0:
			Controls.removeButtons(this._up,gamepadID,buttons);
			Controls.removeButtons(this._upP,gamepadID,buttons);
			Controls.removeButtons(this._upR,gamepadID,buttons);
			break;
		case 1:
			Controls.removeButtons(this._left,gamepadID,buttons);
			Controls.removeButtons(this._leftP,gamepadID,buttons);
			Controls.removeButtons(this._leftR,gamepadID,buttons);
			break;
		case 2:
			Controls.removeButtons(this._right,gamepadID,buttons);
			Controls.removeButtons(this._rightP,gamepadID,buttons);
			Controls.removeButtons(this._rightR,gamepadID,buttons);
			break;
		case 3:
			Controls.removeButtons(this._down,gamepadID,buttons);
			Controls.removeButtons(this._downP,gamepadID,buttons);
			Controls.removeButtons(this._downR,gamepadID,buttons);
			break;
		case 4:
			Controls.removeButtons(this._reset,gamepadID,buttons);
			break;
		case 5:
			Controls.removeButtons(this._accept,gamepadID,buttons);
			break;
		case 6:
			Controls.removeButtons(this._back,gamepadID,buttons);
			break;
		case 7:
			Controls.removeButtons(this._pause,gamepadID,buttons);
			break;
		case 8:
			Controls.removeButtons(this._cheat,gamepadID,buttons);
			break;
		}
	}
	,getInputsFor: function(control,device,list) {
		if(list == null) {
			list = [];
		}
		switch(device._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = this.getActionFromControl(control).inputs;
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				if(input.device == flixel_input_actions_FlxInputDevice.KEYBOARD) {
					list.push(input.inputID);
				}
			}
			break;
		case 1:
			var id = device.id;
			var _g = 0;
			var _g1 = this.getActionFromControl(control).inputs;
			while(_g < _g1.length) {
				var input = _g1[_g];
				++_g;
				if(input.deviceID == id) {
					list.push(input.inputID);
				}
			}
			break;
		}
		return list;
	}
	,removeDevice: function(device) {
		switch(device._hx_index) {
		case 0:
			this.setKeyboardScheme(KeyboardScheme.None);
			break;
		case 1:
			var id = device.id;
			this.removeGamepad(id);
			break;
		}
	}
	,__class__: Controls
	,__properties__: {get_CHEAT:"get_CHEAT",get_RESET:"get_RESET",get_PAUSE:"get_PAUSE",get_BACK:"get_BACK",get_ACCEPT:"get_ACCEPT",get_DOWN_R:"get_DOWN_R",get_RIGHT_R:"get_RIGHT_R",get_LEFT_R:"get_LEFT_R",get_UP_R:"get_UP_R",get_DOWN_P:"get_DOWN_P",get_RIGHT_P:"get_RIGHT_P",get_LEFT_P:"get_LEFT_P",get_UP_P:"get_UP_P",get_DOWN:"get_DOWN",get_RIGHT:"get_RIGHT",get_LEFT:"get_LEFT",get_UP:"get_UP"}
});
var ConvertScore = function() { };
$hxClasses["ConvertScore"] = ConvertScore;
ConvertScore.__name__ = "ConvertScore";
ConvertScore.convertScore = function(noteDiff) {
	var daRating = Ratings.CalculateRating(noteDiff,166);
	switch(daRating) {
	case "bad":
		return 0;
	case "good":
		return 200;
	case "shit":
		return -300;
	case "sick":
		return 350;
	}
	return 0;
};
var CoolUtil = function() { };
$hxClasses["CoolUtil"] = CoolUtil;
CoolUtil.__name__ = "CoolUtil";
CoolUtil.difficultyFromInt = function(difficulty) {
	return CoolUtil.difficultyArray[difficulty];
};
CoolUtil.coolTextFile = function(path) {
	var daList = StringTools.trim(lime_utils_Assets.getText(path)).split("\n");
	var _g = 0;
	var _g1 = daList.length;
	while(_g < _g1) {
		var i = _g++;
		daList[i] = StringTools.trim(daList[i]);
	}
	return daList;
};
CoolUtil.coolStringFile = function(path) {
	var daList = StringTools.trim(path).split("\n");
	var _g = 0;
	var _g1 = daList.length;
	while(_g < _g1) {
		var i = _g++;
		daList[i] = StringTools.trim(daList[i]);
	}
	return daList;
};
CoolUtil.numberArray = function(max,min) {
	if(min == null) {
		min = 0;
	}
	var dumbArray = [];
	var _g = min;
	var _g1 = max;
	while(_g < _g1) {
		var i = _g++;
		dumbArray.push(i);
	}
	return dumbArray;
};
var DialogueBox = function(talkingRight,dialogueList) {
	if(talkingRight == null) {
		talkingRight = true;
	}
	this.isEnding = false;
	this.dialogueStarted = false;
	this.dialogueOpened = false;
	this.dialogueList = [];
	this.curCharacter = "";
	var _gthis = this;
	flixel_group_FlxTypedSpriteGroup.call(this);
	switch(PlayState.SONG.song.toLowerCase()) {
	case "senpai":
		flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "Lunchbox" + "." + "mp3","MUSIC",null),0);
		var _this = flixel_FlxG.sound.music;
		var Duration = 1;
		var From = 0;
		var To = 0.8;
		if(To == null) {
			To = 1;
		}
		if(From == null) {
			From = 0;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(_this._channel == null) {
			_this.play();
		}
		if(_this.fadeTween != null) {
			_this.fadeTween.cancel();
		}
		_this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
		break;
	case "thorns":
		flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "LunchboxScary" + "." + "mp3","MUSIC",null),0);
		var _this = flixel_FlxG.sound.music;
		var Duration = 1;
		var From = 0;
		var To = 0.8;
		if(To == null) {
			To = 1;
		}
		if(From == null) {
			From = 0;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(_this._channel == null) {
			_this.play();
		}
		if(_this.fadeTween != null) {
			_this.fadeTween.cancel();
		}
		_this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
		break;
	}
	this.bgFade = new flixel_FlxSprite(-200,-200).makeGraphic(flixel_FlxG.width * 1.3 | 0,flixel_FlxG.height * 1.3 | 0,-4988968);
	this.bgFade.scrollFactor.set();
	this.bgFade.set_alpha(0);
	this.add(this.bgFade);
	new flixel_util_FlxTimer().start(0.83,function(tmr) {
		var _g = _gthis.bgFade;
		_g.set_alpha(_g.alpha + 0.139999999999999986);
		if(_gthis.bgFade.alpha > 0.7) {
			_gthis.bgFade.set_alpha(0.7);
		}
	},5);
	this.box = new flixel_FlxSprite(-20,45);
	var hasDialog = false;
	switch(PlayState.SONG.song.toLowerCase()) {
	case "roses":
		hasDialog = true;
		flixel_FlxG.sound.play(Paths.sound("ANGRY_TEXT_BOX"));
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.box.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-senpaiMad" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-senpaiMad" + ".xml","TEXT",library)));
		this.box.animation.addByPrefix("normalOpen","SENPAI ANGRY IMPACT SPEECH",24,false);
		this.box.animation.addByIndices("normal","SENPAI ANGRY IMPACT SPEECH",[4],"",24);
		break;
	case "senpai":
		hasDialog = true;
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.box.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-pixel" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-pixel" + ".xml","TEXT",library)));
		this.box.animation.addByPrefix("normalOpen","Text Box Appear",24,false);
		this.box.animation.addByIndices("normal","Text Box Appear",[4],"",24);
		break;
	case "thorns":
		hasDialog = true;
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.box.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-evil" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/pixelUI/dialogueBox-evil" + ".xml","TEXT",library)));
		this.box.animation.addByPrefix("normalOpen","Spirit Textbox spawn",24,false);
		this.box.animation.addByIndices("normal","Spirit Textbox spawn",[11],"",24);
		var face = new flixel_FlxSprite(320,170).loadGraphic(Paths.getPath("images/" + "weeb/spiritFaceForward" + ".png","IMAGE",null));
		face.setGraphicSize(face.get_width() * 6 | 0);
		this.add(face);
		break;
	}
	this.dialogueList = dialogueList;
	if(!hasDialog) {
		return;
	}
	this.portraitLeft = new flixel_FlxSprite(-20,40);
	var library = null;
	var usecahce = flixel_FlxG.save.data.cacheImages;
	usecahce = false;
	this.portraitLeft.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/senpaiPortrait" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/senpaiPortrait" + ".xml","TEXT",library)));
	this.portraitLeft.animation.addByPrefix("enter","Senpai Portrait Enter",24,false);
	this.portraitLeft.setGraphicSize(this.portraitLeft.get_width() * PlayState.daPixelZoom * 0.9 | 0);
	this.portraitLeft.updateHitbox();
	this.portraitLeft.scrollFactor.set();
	this.add(this.portraitLeft);
	this.portraitLeft.set_visible(false);
	this.portraitRight = new flixel_FlxSprite(0,40);
	var library = null;
	var usecahce = flixel_FlxG.save.data.cacheImages;
	usecahce = false;
	this.portraitRight.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/bfPortrait" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/bfPortrait" + ".xml","TEXT",library)));
	this.portraitRight.animation.addByPrefix("enter","Boyfriend portrait enter",24,false);
	this.portraitRight.setGraphicSize(this.portraitRight.get_width() * PlayState.daPixelZoom * 0.9 | 0);
	this.portraitRight.updateHitbox();
	this.portraitRight.scrollFactor.set();
	this.add(this.portraitRight);
	this.portraitRight.set_visible(false);
	this.box.animation.play("normalOpen");
	this.box.setGraphicSize(this.box.get_width() * PlayState.daPixelZoom * 0.9 | 0);
	this.box.updateHitbox();
	this.add(this.box);
	this.box.screenCenter(flixel_util_FlxAxes.X);
	this.portraitLeft.screenCenter(flixel_util_FlxAxes.X);
	this.handSelect = new flixel_FlxSprite(flixel_FlxG.width * 0.9,flixel_FlxG.height * 0.9).loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/hand_textbox" + ".png","IMAGE",null));
	this.add(this.handSelect);
	var tmp = !talkingRight;
	this.dropText = new flixel_text_FlxText(242,502,flixel_FlxG.width * 0.6 | 0,"",32);
	this.dropText.set_font("Pixel Arial 11 Bold");
	this.dropText.set_color(-2583404);
	this.add(this.dropText);
	this.swagDialogue = new flixel_addons_text_FlxTypeText(240,500,flixel_FlxG.width * 0.6 | 0,"",32);
	this.swagDialogue.set_font("Pixel Arial 11 Bold");
	this.swagDialogue.set_color(-12640223);
	var tmp = flixel_FlxG.sound.load(Paths.sound("pixelText"),0.6);
	this.swagDialogue.sounds = [tmp];
	this.add(this.swagDialogue);
	this.dialogue = new Alphabet(0,80,"",false,true);
};
$hxClasses["DialogueBox"] = DialogueBox;
DialogueBox.__name__ = "DialogueBox";
DialogueBox.__super__ = flixel_group_FlxTypedSpriteGroup;
DialogueBox.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	box: null
	,curCharacter: null
	,dialogue: null
	,dialogueList: null
	,swagDialogue: null
	,dropText: null
	,finishThing: null
	,portraitLeft: null
	,portraitRight: null
	,handSelect: null
	,bgFade: null
	,dialogueOpened: null
	,dialogueStarted: null
	,update: function(elapsed) {
		var _gthis = this;
		if(PlayState.SONG.song.toLowerCase() == "roses") {
			this.portraitLeft.set_visible(false);
		}
		if(PlayState.SONG.song.toLowerCase() == "thorns") {
			this.portraitLeft.set_visible(false);
			this.swagDialogue.set_color(-1);
			this.dropText.set_color(-16777216);
		}
		this.dropText.set_text(this.swagDialogue.text);
		if(this.box.animation._curAnim != null) {
			if(this.box.animation._curAnim.name == "normalOpen" && this.box.animation._curAnim.finished) {
				this.box.animation.play("normal");
				this.dialogueOpened = true;
			}
		}
		if(this.dialogueOpened && !this.dialogueStarted) {
			this.startDialogue();
			this.dialogueStarted = true;
		}
		if(PlayerSettings.player1.controls._accept.check() && this.dialogueStarted == true) {
			this.remove(this.dialogue);
			flixel_FlxG.sound.play(Paths.sound("clickText"),0.8);
			if(this.dialogueList[1] == null && this.dialogueList[0] != null) {
				if(!this.isEnding) {
					this.isEnding = true;
					if(PlayState.SONG.song.toLowerCase() == "senpai" || PlayState.SONG.song.toLowerCase() == "thorns") {
						var _this = flixel_FlxG.sound.music;
						var Duration = 2.2;
						var To = 0;
						if(To == null) {
							To = 0;
						}
						if(Duration == null) {
							Duration = 1;
						}
						if(_this.fadeTween != null) {
							_this.fadeTween.cancel();
						}
						_this.fadeTween = flixel_tweens_FlxTween.num(_this._volume,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
					}
					new flixel_util_FlxTimer().start(0.2,function(tmr) {
						var _g = _gthis.box;
						_g.set_alpha(_g.alpha - 0.2);
						var _g = _gthis.bgFade;
						_g.set_alpha(_g.alpha - 0.139999999999999986);
						_gthis.portraitLeft.set_visible(false);
						_gthis.portraitRight.set_visible(false);
						var _g = _gthis.swagDialogue;
						_g.set_alpha(_g.alpha - 0.2);
						_gthis.dropText.set_alpha(_gthis.swagDialogue.alpha);
					},5);
					new flixel_util_FlxTimer().start(1.2,function(tmr) {
						_gthis.finishThing();
						_gthis.kill();
					});
				}
			} else {
				HxOverrides.remove(this.dialogueList,this.dialogueList[0]);
				this.startDialogue();
			}
		}
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
	}
	,isEnding: null
	,startDialogue: function() {
		this.cleanDialog();
		this.swagDialogue.resetText(this.dialogueList[0]);
		this.swagDialogue.start(0.04,true);
		switch(this.curCharacter) {
		case "bf":
			this.portraitLeft.set_visible(false);
			if(!this.portraitRight.visible) {
				this.portraitRight.set_visible(true);
				this.portraitRight.animation.play("enter");
			}
			break;
		case "dad":
			this.portraitRight.set_visible(false);
			if(!this.portraitLeft.visible) {
				this.portraitLeft.set_visible(true);
				this.portraitLeft.animation.play("enter");
			}
			break;
		}
	}
	,cleanDialog: function() {
		var splitName = this.dialogueList[0].split(":");
		this.curCharacter = splitName[1];
		this.dialogueList[0] = StringTools.trim(HxOverrides.substr(this.dialogueList[0],splitName[1].length + 2,null));
	}
	,__class__: DialogueBox
});
var SmallNote = function(strum,data) {
	this.strumTime = strum;
	this.noteData = data;
};
$hxClasses["SmallNote"] = SmallNote;
SmallNote.__name__ = "SmallNote";
SmallNote.prototype = {
	strumTime: null
	,noteData: null
	,__class__: SmallNote
};
var DiffCalc = function() { };
$hxClasses["DiffCalc"] = DiffCalc;
DiffCalc.__name__ = "DiffCalc";
DiffCalc.CalculateDiff = function(song,accuracy) {
	if(accuracy == null) {
		accuracy = .93;
	}
	var cleanedNotes = [];
	if(song.notes == null) {
		return 0.0;
	}
	if(song.notes.length == 0) {
		return 0.0;
	}
	var _g = 0;
	var _g1 = song.notes;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = i.sectionNotes;
		while(_g2 < _g3.length) {
			var ii = _g3[_g2];
			++_g2;
			var gottaHitNote = i.mustHitSection;
			if(ii[1] >= 3 && gottaHitNote) {
				cleanedNotes.push(new SmallNote(ii[0],Math.floor(Math.abs(ii[1]))));
			}
			if(ii[1] <= 4 && !gottaHitNote) {
				cleanedNotes.push(new SmallNote(ii[0],Math.floor(Math.abs(ii[1]))));
			}
		}
	}
	haxe_Log.trace("calcuilafjwaf " + cleanedNotes.length,{ fileName : "source/DiffCalc.hx", lineNumber : 49, className : "DiffCalc", methodName : "CalculateDiff"});
	var handOne = [];
	var handTwo = [];
	cleanedNotes.sort(function(a,b) {
		return a.strumTime - b.strumTime | 0;
	});
	var firstNoteTime = cleanedNotes[0].strumTime;
	var _g = 0;
	while(_g < cleanedNotes.length) {
		var i = cleanedNotes[_g];
		++_g;
		i.strumTime = (i.strumTime - firstNoteTime) * 2;
	}
	var _g = 0;
	while(_g < cleanedNotes.length) {
		var i = cleanedNotes[_g];
		++_g;
		switch(i.noteData) {
		case 0:
			handOne.push(i);
			break;
		case 1:
			handOne.push(i);
			break;
		case 2:
			handTwo.push(i);
			break;
		case 3:
			handTwo.push(i);
			break;
		}
	}
	var leftHandCol = [];
	var leftMHandCol = [];
	var rightMHandCol = [];
	var rightHandCol = [];
	var _g = 0;
	var _g1 = handOne.length - 1;
	while(_g < _g1) {
		var i = _g++;
		if(handOne[i].noteData == 0) {
			leftHandCol.push(handOne[i].strumTime);
		} else {
			leftMHandCol.push(handOne[i].strumTime);
		}
	}
	var _g = 0;
	var _g1 = handTwo.length - 1;
	while(_g < _g1) {
		var i = _g++;
		if(handTwo[i].noteData == 3) {
			rightHandCol.push(handTwo[i].strumTime);
		} else {
			rightMHandCol.push(handTwo[i].strumTime);
		}
	}
	var length = cleanedNotes[cleanedNotes.length - 1].strumTime / 1000 / 0.5;
	var this1 = new Array(Math.floor(length));
	var segmentsOne = this1;
	var this1 = new Array(Math.floor(length));
	var segmentsTwo = this1;
	var _g = 0;
	var _g1 = segmentsOne.length;
	while(_g < _g1) {
		var i = _g++;
		segmentsOne[i] = [];
	}
	var _g = 0;
	var _g1 = segmentsTwo.length;
	while(_g < _g1) {
		var i = _g++;
		segmentsTwo[i] = [];
	}
	var _g = 0;
	while(_g < handOne.length) {
		var i = handOne[_g];
		++_g;
		var index = i.strumTime * 2 / 1000 | 0;
		if(index + 1 > length) {
			continue;
		}
		segmentsOne[index].push(i);
	}
	var _g = 0;
	while(_g < handTwo.length) {
		var i = handTwo[_g];
		++_g;
		var index = i.strumTime * 2 / 1000 | 0;
		if(index + 1 > length) {
			continue;
		}
		segmentsTwo[index].push(i);
	}
	var hand_npsOne = [];
	var hand_npsTwo = [];
	var _g = 0;
	while(_g < segmentsOne.length) {
		var i = segmentsOne[_g];
		++_g;
		if(i == null) {
			continue;
		}
		hand_npsOne.push(i.length * DiffCalc.scale * 1.6);
	}
	var _g = 0;
	while(_g < segmentsTwo.length) {
		var i = segmentsTwo[_g];
		++_g;
		if(i == null) {
			continue;
		}
		hand_npsTwo.push(i.length * DiffCalc.scale * 1.6);
	}
	var hand_diffOne = [];
	var hand_diffTwo = [];
	var _g = 0;
	var _g1 = segmentsOne.length;
	while(_g < _g1) {
		var i = _g++;
		var ve = segmentsOne[i];
		if(ve == null) {
			continue;
		}
		var fuckYouOne = [];
		var fuckYouTwo = [];
		var _g2 = 0;
		while(_g2 < ve.length) {
			var note = ve[_g2];
			++_g2;
			switch(note.noteData) {
			case 0:
				fuckYouOne.push(note);
				break;
			case 1:
				fuckYouTwo.push(note);
				break;
			}
		}
		var one = DiffCalc.fingieCalc(fuckYouOne,leftHandCol);
		var two = DiffCalc.fingieCalc(fuckYouTwo,leftMHandCol);
		var bigFuck = ((one > two ? one : two) * 8 + hand_npsOne[i] / DiffCalc.scale * 5) / 13 * DiffCalc.scale;
		hand_diffOne.push(bigFuck);
	}
	var _g = 0;
	var _g1 = segmentsTwo.length;
	while(_g < _g1) {
		var i = _g++;
		var ve = segmentsTwo[i];
		if(ve == null) {
			continue;
		}
		var fuckYouOne = [];
		var fuckYouTwo = [];
		var _g2 = 0;
		while(_g2 < ve.length) {
			var note = ve[_g2];
			++_g2;
			switch(note.noteData) {
			case 2:
				fuckYouOne.push(note);
				break;
			case 3:
				fuckYouTwo.push(note);
				break;
			}
		}
		var one = DiffCalc.fingieCalc(fuckYouOne,rightMHandCol);
		var two = DiffCalc.fingieCalc(fuckYouTwo,rightHandCol);
		var bigFuck = ((one > two ? one : two) * 8 + hand_npsTwo[i] / DiffCalc.scale * 5) / 13 * DiffCalc.scale;
		hand_diffTwo.push(bigFuck);
	}
	DiffCalc.smoothBrain(hand_npsOne,0);
	DiffCalc.smoothBrain(hand_npsTwo,0);
	DiffCalc.smoothBrainTwo(hand_diffOne);
	DiffCalc.smoothBrainTwo(hand_diffTwo);
	DiffCalc.smoothBrain(hand_npsOne,0);
	DiffCalc.smoothBrain(hand_npsTwo,0);
	DiffCalc.smoothBrainTwo(hand_diffOne);
	DiffCalc.smoothBrainTwo(hand_diffTwo);
	DiffCalc.smoothBrain(hand_npsOne,0);
	DiffCalc.smoothBrain(hand_npsTwo,0);
	DiffCalc.smoothBrainTwo(hand_diffOne);
	DiffCalc.smoothBrainTwo(hand_diffTwo);
	DiffCalc.smoothBrain(hand_npsOne,0);
	DiffCalc.smoothBrain(hand_npsTwo,0);
	DiffCalc.smoothBrainTwo(hand_diffOne);
	DiffCalc.smoothBrainTwo(hand_diffTwo);
	var point_npsOne = [];
	var point_npsTwo = [];
	var _g = 0;
	while(_g < segmentsOne.length) {
		var i = segmentsOne[_g];
		++_g;
		if(i == null) {
			continue;
		}
		point_npsOne.push(i.length);
	}
	var _g = 0;
	while(_g < segmentsTwo.length) {
		var i = segmentsTwo[_g];
		++_g;
		if(i == null) {
			continue;
		}
		point_npsTwo.push(i.length);
	}
	var maxPoints = 0;
	var _g = 0;
	while(_g < point_npsOne.length) {
		var i = point_npsOne[_g];
		++_g;
		maxPoints += i;
	}
	var _g = 0;
	while(_g < point_npsTwo.length) {
		var i = point_npsTwo[_g];
		++_g;
		maxPoints += i;
	}
	if(accuracy > .965) {
		accuracy = .965;
	}
	DiffCalc.lastDiffHandOne = hand_diffOne;
	DiffCalc.lastDiffHandTwo = hand_diffTwo;
	return HelperFunctions.truncateFloat(DiffCalc.chisel(accuracy,hand_diffOne,hand_diffTwo,point_npsOne,point_npsTwo,maxPoints),2);
};
DiffCalc.chisel = function(scoreGoal,diffOne,diffTwo,pointsOne,pointsTwo,maxPoints) {
	var lowerBound = 0;
	var upperBound = 100;
	while(upperBound - lowerBound > 0.01) {
		var average = (upperBound + lowerBound) / 2;
		var amtOfPoints = DiffCalc.calcuate(average,diffOne,pointsOne) + DiffCalc.calcuate(average,diffTwo,pointsTwo);
		if(amtOfPoints / maxPoints < scoreGoal) {
			lowerBound = average;
		} else {
			upperBound = average;
		}
	}
	return upperBound;
};
DiffCalc.calcuate = function(midPoint,diff,points) {
	var output = 0;
	var _g = 0;
	var _g1 = diff.length;
	while(_g < _g1) {
		var i = _g++;
		var res = diff[i];
		if(midPoint > res) {
			output += points[i];
		} else {
			output += points[i] * Math.pow(midPoint / res,1.2);
		}
	}
	return output;
};
DiffCalc.findStupid = function(strumTime,array) {
	var _g = 0;
	var _g1 = array.length;
	while(_g < _g1) {
		var i = _g++;
		if(array[i] == strumTime) {
			return i;
		}
	}
	return -1;
};
DiffCalc.fingieCalc = function(floats,columArray) {
	var sum = 0;
	if(floats.length == 0) {
		return 0;
	}
	var startIndex = DiffCalc.findStupid(floats[0].strumTime,columArray);
	if(startIndex == -1) {
		return 0;
	}
	var _g = 0;
	while(_g < floats.length) {
		var i = floats[_g];
		++_g;
		sum += columArray[startIndex + 1] - columArray[startIndex];
		++startIndex;
	}
	if(sum == 0) {
		return 0;
	}
	return 1375 * floats.length / sum;
};
DiffCalc.smoothBrain = function(npsVector,weirdchamp) {
	var floatOne = weirdchamp;
	var floatTwo = weirdchamp;
	var _g = 0;
	var _g1 = npsVector.length;
	while(_g < _g1) {
		var i = _g++;
		var result = npsVector[i];
		var chunker = floatOne;
		floatOne = floatTwo;
		floatTwo = result;
		npsVector[i] = (chunker + floatOne + floatTwo) / 3;
	}
};
DiffCalc.smoothBrainTwo = function(diffVector) {
	var floatZero = 0;
	var _g = 0;
	var _g1 = diffVector.length;
	while(_g < _g1) {
		var i = _g++;
		var result = diffVector[i];
		var fuck = floatZero;
		floatZero = result;
		diffVector[i] = (fuck + floatZero) / 2;
	}
};
var flixel_FlxSubState = function(BGColor) {
	if(BGColor == null) {
		BGColor = 0;
	}
	this._created = false;
	flixel_FlxState.call(this);
	this.closeCallback = null;
	this.openCallback = null;
	if(flixel_FlxG.renderTile) {
		this._bgSprite = new flixel_system_FlxBGSprite();
	}
	this.set_bgColor(BGColor);
};
$hxClasses["flixel.FlxSubState"] = flixel_FlxSubState;
flixel_FlxSubState.__name__ = "flixel.FlxSubState";
flixel_FlxSubState.__super__ = flixel_FlxState;
flixel_FlxSubState.prototype = $extend(flixel_FlxState.prototype,{
	openCallback: null
	,closeCallback: null
	,_bgSprite: null
	,_parentState: null
	,_bgColor: null
	,_created: null
	,draw: function() {
		if(flixel_FlxG.renderBlit) {
			var _g = 0;
			var _g1 = this.get_cameras();
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				camera.fill(this._bgColor);
			}
		} else {
			this._bgSprite.draw();
		}
		flixel_FlxState.prototype.draw.call(this);
	}
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		this.closeCallback = null;
		this.openCallback = null;
		this._parentState = null;
		this._bgSprite = null;
	}
	,close: function() {
		if(this._parentState != null && this._parentState.subState == this) {
			this._parentState.closeSubState();
		}
	}
	,get_bgColor: function() {
		return this._bgColor;
	}
	,set_bgColor: function(Value) {
		if(flixel_FlxG.renderTile && this._bgSprite != null) {
			this._bgSprite.get_pixels().setPixel32(0,0,Value);
		}
		return this._bgColor = Value;
	}
	,__class__: flixel_FlxSubState
});
var DiffOverview = function(BGColor) {
	this.unspawnNotes = [];
	this.frames = 0;
	this.oldStep = 0;
	this.currentStep = 0;
	this.stopDoingShit = false;
	flixel_FlxSubState.call(this,BGColor);
};
$hxClasses["DiffOverview"] = DiffOverview;
DiffOverview.__name__ = "DiffOverview";
DiffOverview.__super__ = flixel_FlxSubState;
DiffOverview.prototype = $extend(flixel_FlxSubState.prototype,{
	blackBox: null
	,handOne: null
	,handTwo: null
	,giantText: null
	,SONG: null
	,strumLine: null
	,camHUD: null
	,offset: null
	,create: function() {
		Conductor.songPosition = 0;
		Conductor.lastSongPos = 0;
		this.camHUD = new flixel_FlxCamera();
		this.camHUD.bgColor &= 16777215;
		this.camHUD.bgColor |= 0;
		var camGame = new flixel_FlxCamera();
		flixel_FlxG.cameras.add(camGame);
		flixel_FlxG.cameras.add(this.camHUD);
		flixel_FlxCamera._defaultCameras = [camGame];
		DiffOverview.playerStrums = new flixel_group_FlxTypedGroup();
		this.SONG = FreeplayState.songData.h[FreeplayState.songs[FreeplayState.curSelected].songName][FreeplayState.curDifficulty];
		this.strumLine = new flixel_FlxSprite(0,flixel_FlxG.height / 2 - 295).makeGraphic(flixel_FlxG.width,10);
		this.strumLine.scrollFactor.set();
		this.blackBox = new flixel_FlxSprite(0,0).makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		this.blackBox.set_alpha(0);
		this.add(this.blackBox);
		FreeplayState.openedPreview = true;
		this.handOne = DiffCalc.lastDiffHandOne;
		this.handTwo = DiffCalc.lastDiffHandTwo;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var babyArrow = new flixel_FlxSprite(0,this.strumLine.y);
			var usecahce = flixel_FlxG.save.data.cacheImages;
			usecahce = false;
			babyArrow.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "NOTE_assets" + ".png","IMAGE","shared"),Paths.getPath("images/" + "NOTE_assets" + ".xml","TEXT","shared")));
			babyArrow.animation.addByPrefix("green","arrowUP");
			babyArrow.animation.addByPrefix("blue","arrowDOWN");
			babyArrow.animation.addByPrefix("purple","arrowLEFT");
			babyArrow.animation.addByPrefix("red","arrowRIGHT");
			babyArrow.set_antialiasing(flixel_FlxG.save.data.antialiasing);
			babyArrow.setGraphicSize(babyArrow.get_width() * 0.7 | 0);
			switch(Math.abs(i)) {
			case 0:
				var _g1 = babyArrow;
				_g1.set_x(_g1.x + Note.swagWidth * 0);
				babyArrow.animation.addByPrefix("static","arrowLEFT");
				babyArrow.animation.addByPrefix("pressed","left press",24,false);
				babyArrow.animation.addByPrefix("confirm","left confirm",24,false);
				break;
			case 1:
				var _g2 = babyArrow;
				_g2.set_x(_g2.x + Note.swagWidth);
				babyArrow.animation.addByPrefix("static","arrowDOWN");
				babyArrow.animation.addByPrefix("pressed","down press",24,false);
				babyArrow.animation.addByPrefix("confirm","down confirm",24,false);
				break;
			case 2:
				var _g3 = babyArrow;
				_g3.set_x(_g3.x + Note.swagWidth * 2);
				babyArrow.animation.addByPrefix("static","arrowUP");
				babyArrow.animation.addByPrefix("pressed","up press",24,false);
				babyArrow.animation.addByPrefix("confirm","up confirm",24,false);
				break;
			case 3:
				var _g4 = babyArrow;
				_g4.set_x(_g4.x + Note.swagWidth * 3);
				babyArrow.animation.addByPrefix("static","arrowRIGHT");
				babyArrow.animation.addByPrefix("pressed","right press",24,false);
				babyArrow.animation.addByPrefix("confirm","right confirm",24,false);
				break;
			}
			babyArrow.updateHitbox();
			babyArrow.scrollFactor.set();
			var _g5 = babyArrow;
			_g5.set_y(_g5.y - 10);
			babyArrow.set_alpha(1);
			babyArrow.ID = i;
			DiffOverview.playerStrums.add(babyArrow);
			babyArrow.animation.play("static");
			var _g6 = babyArrow;
			_g6.set_x(_g6.x + 50);
			var _g7 = babyArrow;
			_g7.set_x(_g7.x + flixel_FlxG.width / 2);
		}
		this.add(DiffOverview.playerStrums);
		this.generateSong("assItch");
		DiffOverview.playerStrums.set_cameras([this.camHUD]);
		this.notes.set_cameras([this.camHUD]);
		this.blackBox.set_cameras([this.camHUD]);
		this.blackBox.set_x(DiffOverview.playerStrums.members[0].x);
		this.blackBox.set_y(this.strumLine.y);
		this.camHUD.set_zoom(0.6);
		this.camHUD.set_alpha(0);
		this.camHUD.set_height(5000);
		this.blackBox.set_height(this.camHUD.height);
		var _g = this.camHUD;
		_g.set_x(_g.x + 280);
		var _g = this.blackBox;
		_g.set_y(_g.y - 100);
		var _g = this.blackBox;
		_g.set_x(_g.x - 100);
		this.offset = new flixel_text_FlxText(10,flixel_FlxG.height - 40,0,"Offset: " + HelperFunctions.truncateFloat(flixel_FlxG.save.data.offset,0) + " (LEFT/RIGHT to decrease/increase)",16);
		var _this = this.offset;
		var Color = -16777216;
		var Size = 4;
		var Quality = 1;
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		_this.set_borderStyle(flixel_text_FlxTextBorderStyle.OUTLINE);
		_this.set_borderColor(Color);
		_this.set_borderSize(Size);
		_this.set_borderQuality(Quality);
		this.offset.set_color(-1);
		this.offset.scrollFactor.set();
		flixel_tweens_FlxTween.tween(this.blackBox,{ alpha : 0.5},1,{ ease : flixel_tweens_FlxEase.expoInOut});
		flixel_tweens_FlxTween.tween(this.camHUD,{ alpha : 1},0.5,{ ease : flixel_tweens_FlxEase.expoInOut});
		flixel_tweens_FlxTween.tween(this.offset,{ alpha : 1},0.5,{ ease : flixel_tweens_FlxEase.expoInOut});
		haxe_Log.trace("pog",{ fileName : "source/DiffOverview.hx", lineNumber : 165, className : "DiffOverview", methodName : "create"});
		flixel_FlxSubState.prototype.create.call(this);
	}
	,endSong: function() {
		if(this.stopDoingShit) {
			return;
		}
	}
	,resyncVocals: function() {
		this.vocals.pause();
		flixel_FlxG.sound.music.play();
		Conductor.songPosition = flixel_FlxG.sound.music._time;
		this.vocals.set_time(Conductor.songPosition);
		this.vocals.play();
	}
	,stopDoingShit: null
	,currentStep: null
	,oldStep: null
	,updateCurStep: function() {
		var lastChange = { stepTime : 0, songTime : 0, bpm : 0};
		var _g = 0;
		var _g1 = Conductor.bpmChangeMap.length;
		while(_g < _g1) {
			var i = _g++;
			if(Conductor.songPosition >= Conductor.bpmChangeMap[i].songTime) {
				lastChange = Conductor.bpmChangeMap[i];
			}
		}
		this.currentStep = lastChange.stepTime + Math.floor((Conductor.songPosition - lastChange.songTime) / Conductor.stepCrochet);
	}
	,stepHit: function() {
		if(flixel_FlxG.sound.music._time > Conductor.songPosition + 20 || flixel_FlxG.sound.music._time < Conductor.songPosition - 20) {
			haxe_Log.trace("resync",{ fileName : "source/DiffOverview.hx", lineNumber : 211, className : "DiffOverview", methodName : "stepHit"});
			this.resyncVocals();
		}
		this.oldStep = this.currentStep;
	}
	,offsetChange: function() {
		var _g = 0;
		var _g1 = this.unspawnNotes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.strumTime = i.baseStrum + flixel_FlxG.save.data.offset;
		}
		var i = new flixel_group_FlxTypedGroupIterator(this.notes.members,null);
		while(i.hasNext()) {
			var i1 = i.next();
			i1.strumTime = i1.baseStrum + flixel_FlxG.save.data.offset;
		}
	}
	,frames: null
	,update: function(elapsed) {
		var _gthis = this;
		flixel_FlxSubState.prototype.update.call(this,elapsed);
		if(this.frames < 10) {
			this.frames++;
			return;
		}
		if(this.stopDoingShit) {
			return;
		}
		this.updateCurStep();
		if(this.oldStep != this.currentStep && this.currentStep > 0) {
			this.stepHit();
		}
		var _this = flixel_FlxG.keys.pressed;
		if(_this.keyManager.checkStatus(32,_this.status)) {
			this.stopDoingShit = true;
			this.quit();
		}
		var gamepad = flixel_FlxG.gamepads.lastActive;
		if(gamepad != null) {
			var _this = gamepad.justPressed;
			var id = 2;
			var _this1 = _this.gamepad;
			var Status = _this.status;
			var tmp;
			switch(id) {
			case -2:
				tmp = _this1.anyButton(Status);
				break;
			case -1:
				tmp = !_this1.anyButton(Status);
				break;
			default:
				var RawID = _this1.mapping.getRawID(id);
				var button = _this1.buttons[RawID];
				tmp = button != null && button.hasState(Status);
			}
			if(tmp) {
				this.stopDoingShit = true;
				this.quit();
			}
		}
		if(this.vocals != null) {
			if(this.vocals._channel != null) {
				Conductor.songPosition += flixel_FlxG.elapsed * 1000;
			}
		}
		if(this.unspawnNotes[0] != null) {
			if(this.unspawnNotes[0].strumTime - Conductor.songPosition < 3500) {
				var dunceNote = this.unspawnNotes[0];
				this.notes.add(dunceNote);
				var index = this.unspawnNotes.indexOf(dunceNote);
				this.unspawnNotes.splice(index,1);
			}
		}
		this.notes.forEachAlive(function(daNote) {
			if(daNote.tooLate) {
				daNote.set_active(false);
				daNote.set_visible(false);
			} else {
				daNote.set_visible(true);
				daNote.set_active(true);
			}
			daNote.set_y(DiffOverview.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].y - 0.45 * (Conductor.songPosition - daNote.strumTime) * flixel_math_FlxMath.roundDecimal(_gthis.SONG.speed,2));
			if(daNote.isSustainNote) {
				var _g = daNote;
				_g.set_y(_g.y - daNote.get_height() / 2);
				if((!daNote.mustPress || daNote.wasGoodHit || daNote.prevNote.wasGoodHit && !daNote.canBeHit) && daNote.y + daNote.offset.y * daNote.scale.y <= _gthis.strumLine.y + Note.swagWidth / 2) {
					var swagRect = new flixel_math_FlxRect(0,0,daNote.get_width() / daNote.scale.x,daNote.get_height() / daNote.scale.y);
					swagRect.y = (DiffOverview.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].y + Note.swagWidth / 2 - daNote.y) / daNote.scale.y;
					swagRect.height -= swagRect.y;
					daNote.set_clipRect(swagRect);
				}
			}
			daNote.set_visible(DiffOverview.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].visible);
			daNote.set_x(DiffOverview.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].x);
			if(!daNote.isSustainNote) {
				daNote.set_angle(DiffOverview.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].angle);
			}
			daNote.set_alpha(DiffOverview.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].alpha);
			if(daNote.y < _gthis.strumLine.y) {
				if(daNote.canBeHit && daNote.mustPress || daNote.tooLate && daNote.mustPress) {
					daNote.wasGoodHit = true;
					_gthis.vocals.set_volume(1);
					daNote.kill();
					_gthis.notes.remove(daNote,true);
					daNote.destroy();
				}
			}
		});
	}
	,quit: function() {
		flixel_tweens_FlxTween.tween(this.blackBox,{ alpha : 0},1,{ ease : flixel_tweens_FlxEase.expoInOut});
		flixel_tweens_FlxTween.tween(this.camHUD,{ alpha : 0},1,{ ease : flixel_tweens_FlxEase.expoInOut});
		flixel_tweens_FlxTween.tween(this.offset,{ alpha : 0},1,{ ease : flixel_tweens_FlxEase.expoInOut});
		var _this = this.vocals;
		if(_this.fadeTween != null) {
			_this.fadeTween.cancel();
		}
		_this.fadeTween = flixel_tweens_FlxTween.num(_this._volume,0,1,{ onComplete : null},$bind(_this,_this.volumeTween));
		FreeplayState.openedPreview = false;
	}
	,vocals: null
	,notes: null
	,unspawnNotes: null
	,generateSong: function(dataPath) {
		var songData = FreeplayState.songData.h[FreeplayState.songs[FreeplayState.curSelected].songName][FreeplayState.curDifficulty];
		Conductor.changeBPM(songData.bpm);
		if(this.SONG.needsVoices) {
			var tmp = new flixel_system_FlxSound();
			var songLowercase = StringTools.replace(this.SONG.song," ","-").toLowerCase();
			switch(songLowercase) {
			case "dad-battle":
				songLowercase = "dadbattle";
				break;
			case "philly-nice":
				songLowercase = "philly";
				break;
			}
			this.vocals = tmp.loadEmbedded("songs:assets/songs/" + songLowercase + "/Voices." + "mp3");
		} else {
			this.vocals = new flixel_system_FlxSound();
		}
		haxe_Log.trace("loaded vocals",{ fileName : "source/DiffOverview.hx", lineNumber : 402, className : "DiffOverview", methodName : "generateSong"});
		flixel_FlxG.sound.list.add(this.vocals);
		this.notes = new flixel_group_FlxTypedGroup();
		this.add(this.notes);
		var noteData = songData.notes;
		var playerCounter = 0;
		var daBeats = 0;
		var _g = 0;
		while(_g < noteData.length) {
			var section = noteData[_g];
			++_g;
			var coolSection = section.lengthInSteps / 4 | 0;
			var _g1 = 0;
			var _g2 = section.sectionNotes;
			while(_g1 < _g2.length) {
				var songNotes = _g2[_g1];
				++_g1;
				var daStrumTime = songNotes[0] + flixel_FlxG.save.data.offset;
				if(daStrumTime < 0) {
					daStrumTime = 0;
				}
				var daNoteData = songNotes[1] % 4 | 0;
				var gottaHitNote = section.mustHitSection;
				if(songNotes[1] > 3) {
					gottaHitNote = !section.mustHitSection;
				}
				var oldNote;
				if(this.unspawnNotes.length > 0) {
					oldNote = this.unspawnNotes[this.unspawnNotes.length - 1 | 0];
				} else {
					oldNote = null;
				}
				var swagNote = new Note(daStrumTime,daNoteData,oldNote,false,true);
				if(!gottaHitNote) {
					continue;
				}
				swagNote.baseStrum = Math.round(songNotes[0]);
				swagNote.sustainLength = songNotes[2];
				swagNote.scrollFactor.set(0,0);
				var susLength = swagNote.sustainLength;
				susLength /= Conductor.stepCrochet;
				this.unspawnNotes.push(swagNote);
				var _g3 = 0;
				var _g4 = Math.floor(susLength);
				while(_g3 < _g4) {
					var susNote = _g3++;
					oldNote = this.unspawnNotes[this.unspawnNotes.length - 1 | 0];
					var sustainNote = new Note(daStrumTime + Conductor.stepCrochet * susNote + Conductor.stepCrochet,daNoteData,oldNote,true,true);
					sustainNote.scrollFactor.set();
					this.unspawnNotes.push(sustainNote);
					sustainNote.mustPress = gottaHitNote;
					if(sustainNote.mustPress) {
						var _g5 = sustainNote;
						_g5.set_x(_g5.x + flixel_FlxG.width / 2);
					}
				}
				swagNote.mustPress = gottaHitNote;
				if(swagNote.mustPress) {
					var _g6 = swagNote;
					_g6.set_x(_g6.x + flixel_FlxG.width / 2);
				}
			}
			++daBeats;
		}
		this.unspawnNotes.sort($bind(this,this.sortByShit));
		Conductor.mapBPMChanges(this.SONG);
		Conductor.changeBPM(this.SONG.bpm);
		var tmp = flixel_FlxG.sound;
		var songLowercase = StringTools.replace(this.SONG.song," ","-").toLowerCase();
		switch(songLowercase) {
		case "dad-battle":
			songLowercase = "dadbattle";
			break;
		case "philly-nice":
			songLowercase = "philly";
			break;
		}
		tmp.playMusic("songs:assets/songs/" + songLowercase + "/Inst." + "mp3",1,false);
		flixel_FlxG.sound.music.onComplete = $bind(this,this.endSong);
		this.vocals.play();
	}
	,sortByShit: function(Obj1,Obj2) {
		var Value1 = Obj1.strumTime;
		var Value2 = Obj2.strumTime;
		var result = 0;
		if(Value1 < Value2) {
			result = -1;
		} else if(Value1 > Value2) {
			result = 1;
		}
		return result;
	}
	,__class__: DiffOverview
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var EtternaFunctions = function() { };
$hxClasses["EtternaFunctions"] = EtternaFunctions;
EtternaFunctions.__name__ = "EtternaFunctions";
EtternaFunctions.erf = function(x) {
	var sign = 1;
	if(x < 0) {
		sign = -1;
	}
	x = Math.abs(x);
	var t = 1.0 / (1.0 + EtternaFunctions.p * x);
	var y = 1.0 - ((((EtternaFunctions.a5 * t + EtternaFunctions.a4) * t + EtternaFunctions.a3) * t + EtternaFunctions.a2) * t + EtternaFunctions.a1) * t * Math.exp(-x * x);
	return sign * y;
};
EtternaFunctions.getNotes = function() {
	var notes = 0;
	var _g = 0;
	var _g1 = PlayState.SONG.notes.length;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g3 = PlayState.SONG.notes[i].sectionNotes.length;
		while(_g2 < _g3) {
			var ii = _g2++;
			var n = PlayState.SONG.notes[i].sectionNotes[ii];
			if(n[1] <= 0) {
				++notes;
			}
		}
	}
	return notes;
};
EtternaFunctions.getHolds = function() {
	var notes = 0;
	var _g = 0;
	var _g1 = PlayState.SONG.notes.length;
	while(_g < _g1) {
		var i = _g++;
		haxe_Log.trace(PlayState.SONG.notes[i],{ fileName : "source/EtternaFunctions.hx", lineNumber : 46, className : "EtternaFunctions", methodName : "getHolds"});
		var _g2 = 0;
		var _g3 = PlayState.SONG.notes[i].sectionNotes.length;
		while(_g2 < _g3) {
			var ii = _g2++;
			var n = PlayState.SONG.notes[i].sectionNotes[ii];
			haxe_Log.trace(n,{ fileName : "source/EtternaFunctions.hx", lineNumber : 50, className : "EtternaFunctions", methodName : "getHolds"});
			if(n[1] > 0) {
				++notes;
			}
		}
	}
	return notes;
};
EtternaFunctions.getMapMaxScore = function() {
	return EtternaFunctions.getNotes() * 350;
};
EtternaFunctions.wife3 = function(maxms,ts) {
	var max_points = 1.0;
	var miss_weight = -5.5;
	var ridic = 5 * ts;
	var max_boo_weight = 180 * ts;
	var ts_pow = 0.75;
	var zero = 65 * Math.pow(ts,ts_pow);
	var power = 2.5;
	var dev = 22.7 * Math.pow(ts,ts_pow);
	if(maxms <= ridic) {
		return max_points;
	} else if(maxms <= zero) {
		return max_points * EtternaFunctions.erf((zero - maxms) / dev);
	} else if(maxms <= max_boo_weight) {
		return (maxms - zero) * miss_weight / (max_boo_weight - zero);
	} else {
		return miss_weight;
	}
};
var FreeplayState = function(TransIn,TransOut) {
	this.iconArray = [];
	this.curPlaying = false;
	this.combo = "";
	this.intendedScore = 0;
	this.lerpScore = 0;
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["FreeplayState"] = FreeplayState;
FreeplayState.__name__ = "FreeplayState";
FreeplayState.loadDiff = function(diff,format,name,array) {
	try {
		array.push(Song.loadFromJson(Highscore.formatSong(format,diff),name));
	} catch( _g ) {
	}
};
FreeplayState.__super__ = MusicBeatState;
FreeplayState.prototype = $extend(MusicBeatState.prototype,{
	selector: null
	,scoreText: null
	,comboText: null
	,diffText: null
	,diffCalcText: null
	,previewtext: null
	,lerpScore: null
	,intendedScore: null
	,combo: null
	,grpSongs: null
	,curPlaying: null
	,iconArray: null
	,create: function() {
		this.clean();
		var initSonglist = CoolUtil.coolTextFile(Paths.getPath("data/freeplaySonglist" + ".txt","TEXT",null));
		FreeplayState.songData = new haxe_ds_StringMap();
		FreeplayState.songs = [];
		var _g = 0;
		var _g1 = initSonglist.length;
		while(_g < _g1) {
			var i = _g++;
			var data = initSonglist[i].split(":");
			var meta = new SongMetadata(data[0],Std.parseInt(data[2]),data[1]);
			var format = StringTools.replace(meta.songName," ","-");
			switch(format) {
			case "Dad-Battle":
				format = "Dadbattle";
				break;
			case "Philly-Nice":
				format = "Philly";
				break;
			}
			var diffs = [];
			var diffsThatExist = [];
			diffsThatExist = ["Easy","Normal","Hard"];
			if(diffsThatExist.indexOf("Easy") != -1) {
				FreeplayState.loadDiff(0,format,meta.songName,diffs);
			}
			if(diffsThatExist.indexOf("Normal") != -1) {
				FreeplayState.loadDiff(1,format,meta.songName,diffs);
			}
			if(diffsThatExist.indexOf("Hard") != -1) {
				FreeplayState.loadDiff(2,format,meta.songName,diffs);
			}
			meta.diffs = diffsThatExist;
			if(diffsThatExist.length != 3) {
				haxe_Log.trace("I ONLY FOUND " + Std.string(diffsThatExist),{ fileName : "source/FreeplayState.hx", lineNumber : 118, className : "FreeplayState", methodName : "create"});
			}
			FreeplayState.songData.h[meta.songName] = diffs;
			haxe_Log.trace("loaded diffs for " + meta.songName,{ fileName : "source/FreeplayState.hx", lineNumber : 121, className : "FreeplayState", methodName : "create"});
			FreeplayState.songs.push(meta);
		}
		haxe_Log.trace("tryin to load sm files",{ fileName : "source/FreeplayState.hx", lineNumber : 126, className : "FreeplayState", methodName : "create"});
		var isDebug = false;
		this.persistentUpdate = true;
		var bg = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "menuBGBlue" + ".png","IMAGE",null));
		bg.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(bg);
		this.grpSongs = new flixel_group_FlxTypedGroup();
		this.add(this.grpSongs);
		var _g = 0;
		var _g1 = FreeplayState.songs.length;
		while(_g < _g1) {
			var i = _g++;
			var songText = new Alphabet(0,70 * i + 30,FreeplayState.songs[i].songName,true,false,true);
			songText.isMenuItem = true;
			songText.targetY = i;
			this.grpSongs.add(songText);
			var icon = new HealthIcon(FreeplayState.songs[i].songCharacter);
			icon.sprTracker = songText;
			this.iconArray.push(icon);
			this.add(icon);
		}
		this.scoreText = new flixel_text_FlxText(flixel_FlxG.width * 0.7,5,0,"",32);
		this.scoreText.setFormat("assets/fonts/" + "vcr.ttf",32,-1,"right");
		var scoreBG = new flixel_FlxSprite(this.scoreText.x - 6,0).makeGraphic(flixel_FlxG.width * 0.35 | 0,105,-16777216);
		scoreBG.set_alpha(0.6);
		this.add(scoreBG);
		this.diffText = new flixel_text_FlxText(this.scoreText.x,this.scoreText.y + 36,0,"",24);
		this.diffText.set_font(this.scoreText._font);
		this.add(this.diffText);
		this.diffCalcText = new flixel_text_FlxText(this.scoreText.x,this.scoreText.y + 66,0,"",24);
		this.diffCalcText.set_font(this.scoreText._font);
		this.add(this.diffCalcText);
		this.previewtext = new flixel_text_FlxText(this.scoreText.x,this.scoreText.y + 94,0,"" + (KeyBinds.gamepad ? "X" : "SPACE") + " to preview",24);
		this.previewtext.set_font(this.scoreText._font);
		this.comboText = new flixel_text_FlxText(this.diffText.x + 100,this.diffText.y,0,"",24);
		this.comboText.set_font(this.diffText._font);
		this.add(this.comboText);
		this.add(this.scoreText);
		this.changeSelection();
		this.changeDiff();
		this.selector = new flixel_text_FlxText();
		this.selector.set_size(40);
		this.selector.set_text(">");
		var swag = new Alphabet(1,0,"swag");
		MusicBeatState.prototype.create.call(this);
	}
	,addSong: function(songName,weekNum,songCharacter) {
		FreeplayState.songs.push(new SongMetadata(songName,weekNum,songCharacter));
	}
	,addWeek: function(songs,weekNum,songCharacters) {
		if(songCharacters == null) {
			songCharacters = ["dad"];
		}
		var num = 0;
		var _g = 0;
		while(_g < songs.length) {
			var song = songs[_g];
			++_g;
			this.addSong(song,weekNum,songCharacters[num]);
			if(songCharacters.length != 1) {
				++num;
			}
		}
	}
	,update: function(elapsed) {
		MusicBeatState.prototype.update.call(this,elapsed);
		if(flixel_FlxG.sound.music._volume < 0.7) {
			var _g = flixel_FlxG.sound.music;
			_g.set_volume(_g._volume + 0.5 * flixel_FlxG.elapsed);
		}
		var a = this.lerpScore;
		this.lerpScore = Math.floor(a + 0.4 * (this.intendedScore - a));
		if(Math.abs(this.lerpScore - this.intendedScore) <= 10) {
			this.lerpScore = this.intendedScore;
		}
		this.scoreText.set_text("PERSONAL BEST:" + this.lerpScore);
		this.comboText.set_text(this.combo + "\n");
		if(flixel_FlxG.sound.music._volume > 0.8) {
			var _g = flixel_FlxG.sound.music;
			_g.set_volume(_g._volume - 0.5 * flixel_FlxG.elapsed);
		}
		var _this = flixel_FlxG.keys.justPressed;
		var upP = _this.keyManager.checkStatus(38,_this.status);
		var _this = flixel_FlxG.keys.justPressed;
		var downP = _this.keyManager.checkStatus(40,_this.status);
		var _this = flixel_FlxG.keys.justPressed;
		var accepted = _this.keyManager.checkStatus(13,_this.status);
		var gamepad = flixel_FlxG.gamepads.lastActive;
		if(gamepad != null) {
			var _this = gamepad.justPressed;
			var id = 11;
			var _this1 = _this.gamepad;
			var Status = _this.status;
			var tmp;
			switch(id) {
			case -2:
				tmp = _this1.anyButton(Status);
				break;
			case -1:
				tmp = !_this1.anyButton(Status);
				break;
			default:
				var RawID = _this1.mapping.getRawID(id);
				var button = _this1.buttons[RawID];
				tmp = button != null && button.hasState(Status);
			}
			if(tmp) {
				this.changeSelection(-1);
			}
			var _this = gamepad.justPressed;
			var id = 12;
			var _this1 = _this.gamepad;
			var Status = _this.status;
			var tmp;
			switch(id) {
			case -2:
				tmp = _this1.anyButton(Status);
				break;
			case -1:
				tmp = !_this1.anyButton(Status);
				break;
			default:
				var RawID = _this1.mapping.getRawID(id);
				var button = _this1.buttons[RawID];
				tmp = button != null && button.hasState(Status);
			}
			if(tmp) {
				this.changeSelection(1);
			}
			var _this = gamepad.justPressed;
			var id = 13;
			var _this1 = _this.gamepad;
			var Status = _this.status;
			var tmp;
			switch(id) {
			case -2:
				tmp = _this1.anyButton(Status);
				break;
			case -1:
				tmp = !_this1.anyButton(Status);
				break;
			default:
				var RawID = _this1.mapping.getRawID(id);
				var button = _this1.buttons[RawID];
				tmp = button != null && button.hasState(Status);
			}
			if(tmp) {
				this.changeDiff(-1);
			}
			var _this = gamepad.justPressed;
			var id = 14;
			var _this1 = _this.gamepad;
			var Status = _this.status;
			var tmp;
			switch(id) {
			case -2:
				tmp = _this1.anyButton(Status);
				break;
			case -1:
				tmp = !_this1.anyButton(Status);
				break;
			default:
				var RawID = _this1.mapping.getRawID(id);
				var button = _this1.buttons[RawID];
				tmp = button != null && button.hasState(Status);
			}
			if(tmp) {
				this.changeDiff(1);
			}
		}
		if(upP) {
			this.changeSelection(-1);
		}
		if(downP) {
			this.changeSelection(1);
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(37,_this.status)) {
			this.changeDiff(-1);
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(39,_this.status)) {
			this.changeDiff(1);
		}
		if(PlayerSettings.player1.controls._back.check()) {
			var nextState = new MainMenuState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		if(accepted) {
			var songFormat = StringTools.replace(FreeplayState.songs[FreeplayState.curSelected].songName," ","-");
			switch(songFormat) {
			case "Dad-Battle":
				songFormat = "Dadbattle";
				break;
			case "Philly-Nice":
				songFormat = "Philly";
				break;
			}
			var hmm;
			try {
				hmm = FreeplayState.songData.h[FreeplayState.songs[FreeplayState.curSelected].songName][FreeplayState.curDifficulty];
				if(hmm == null) {
					return;
				}
			} catch( _g ) {
				return;
			}
			PlayState.SONG = Song.conversionChecks(hmm);
			PlayState.isStoryMode = false;
			PlayState.storyDifficulty = FreeplayState.curDifficulty;
			PlayState.storyWeek = FreeplayState.songs[FreeplayState.curSelected].week;
			haxe_Log.trace("CUR WEEK" + PlayState.storyWeek,{ fileName : "source/FreeplayState.hx", lineNumber : 388, className : "FreeplayState", methodName : "update"});
			PlayState.isSM = false;
			var nextState = LoadingState.getNextState(new PlayState(),false);
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
			this.clean();
		}
	}
	,changeDiff: function(change) {
		if(change == null) {
			change = 0;
		}
		if(FreeplayState.songs[FreeplayState.curSelected].diffs.indexOf(CoolUtil.difficultyFromInt(FreeplayState.curDifficulty + change)) == -1) {
			return;
		}
		FreeplayState.curDifficulty += change;
		if(FreeplayState.curDifficulty < 0) {
			FreeplayState.curDifficulty = 2;
		}
		if(FreeplayState.curDifficulty > 2) {
			FreeplayState.curDifficulty = 0;
		}
		var songHighscore = StringTools.replace(FreeplayState.songs[FreeplayState.curSelected].songName," ","-");
		switch(songHighscore) {
		case "Dad-Battle":
			songHighscore = "Dadbattle";
			break;
		case "Philly-Nice":
			songHighscore = "Philly";
			break;
		}
		this.intendedScore = Highscore.getScore(songHighscore,FreeplayState.curDifficulty);
		this.combo = Highscore.getCombo(songHighscore,FreeplayState.curDifficulty);
		this.diffCalcText.set_text("RATING: " + DiffCalc.CalculateDiff(FreeplayState.songData.h[FreeplayState.songs[FreeplayState.curSelected].songName][FreeplayState.curDifficulty]));
		this.diffText.set_text(CoolUtil.difficultyFromInt(FreeplayState.curDifficulty).toUpperCase());
	}
	,changeSelection: function(change) {
		if(change == null) {
			change = 0;
		}
		flixel_FlxG.sound.play(Paths.sound("scrollMenu"),0.4);
		FreeplayState.curSelected += change;
		if(FreeplayState.curSelected < 0) {
			FreeplayState.curSelected = FreeplayState.songs.length - 1;
		}
		if(FreeplayState.curSelected >= FreeplayState.songs.length) {
			FreeplayState.curSelected = 0;
		}
		if(FreeplayState.songs[FreeplayState.curSelected].diffs.length != 3) {
			switch(FreeplayState.songs[FreeplayState.curSelected].diffs[0]) {
			case "Easy":
				FreeplayState.curDifficulty = 0;
				break;
			case "Hard":
				FreeplayState.curDifficulty = 2;
				break;
			case "Normal":
				FreeplayState.curDifficulty = 1;
				break;
			}
		}
		var songHighscore = StringTools.replace(FreeplayState.songs[FreeplayState.curSelected].songName," ","-");
		switch(songHighscore) {
		case "Dad-Battle":
			songHighscore = "Dadbattle";
			break;
		case "Philly-Nice":
			songHighscore = "Philly";
			break;
		}
		this.intendedScore = Highscore.getScore(songHighscore,FreeplayState.curDifficulty);
		this.combo = Highscore.getCombo(songHighscore,FreeplayState.curDifficulty);
		this.diffCalcText.set_text("RATING: " + DiffCalc.CalculateDiff(FreeplayState.songData.h[FreeplayState.songs[FreeplayState.curSelected].songName][FreeplayState.curDifficulty]));
		this.diffText.set_text(CoolUtil.difficultyFromInt(FreeplayState.curDifficulty).toUpperCase());
		var hmm;
		try {
			hmm = FreeplayState.songData.h[FreeplayState.songs[FreeplayState.curSelected].songName][FreeplayState.curDifficulty];
			if(hmm != null) {
				Conductor.changeBPM(hmm.bpm);
			}
		} catch( _g ) {
		}
		if(FreeplayState.openedPreview) {
			this.closeSubState();
			this.openSubState(new DiffOverview());
		}
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.iconArray.length;
		while(_g < _g1) {
			var i = _g++;
			this.iconArray[i].set_alpha(0.6);
		}
		this.iconArray[FreeplayState.curSelected].set_alpha(1);
		var _g = 0;
		var _g1 = this.grpSongs.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - FreeplayState.curSelected;
			++bullShit;
			item.set_alpha(0.6);
			if(item.targetY == 0) {
				item.set_alpha(1);
			}
		}
	}
	,__class__: FreeplayState
});
var SongMetadata = function(song,week,songCharacter) {
	this.diffs = [];
	this.songCharacter = "";
	this.week = 0;
	this.songName = "";
	this.songName = song;
	this.week = week;
	this.songCharacter = songCharacter;
};
$hxClasses["SongMetadata"] = SongMetadata;
SongMetadata.__name__ = "SongMetadata";
SongMetadata.prototype = {
	songName: null
	,week: null
	,songCharacter: null
	,diffs: null
	,__class__: SongMetadata
};
var GameDimensions = function() { };
$hxClasses["GameDimensions"] = GameDimensions;
GameDimensions.__name__ = "GameDimensions";
var MusicBeatSubstate = function() {
	this.curBeat = 0;
	this.curStep = 0;
	this.lastStep = 0;
	this.lastBeat = 0;
	flixel_FlxSubState.call(this);
};
$hxClasses["MusicBeatSubstate"] = MusicBeatSubstate;
MusicBeatSubstate.__name__ = "MusicBeatSubstate";
MusicBeatSubstate.__super__ = flixel_FlxSubState;
MusicBeatSubstate.prototype = $extend(flixel_FlxSubState.prototype,{
	lastBeat: null
	,lastStep: null
	,curStep: null
	,curBeat: null
	,get_controls: function() {
		return PlayerSettings.player1.controls;
	}
	,update: function(elapsed) {
		var nextStep = this.updateCurStep();
		if(nextStep >= 0) {
			if(nextStep > this.curStep) {
				var _g = this.curStep;
				var _g1 = nextStep;
				while(_g < _g1) {
					var i = _g++;
					this.curStep++;
					this.updateBeat();
					this.stepHit();
				}
			} else if(nextStep < this.curStep) {
				this.curStep = nextStep;
				this.updateBeat();
				this.stepHit();
			}
		}
		flixel_FlxSubState.prototype.update.call(this,elapsed);
	}
	,updateBeat: function() {
		this.lastBeat = this.curBeat;
		this.curBeat = Math.floor(this.curStep / 4);
	}
	,updateCurStep: function() {
		var lastChange = { stepTime : 0, songTime : 0, bpm : 0};
		var _g = 0;
		var _g1 = Conductor.bpmChangeMap.length;
		while(_g < _g1) {
			var i = _g++;
			if(Conductor.songPosition > Conductor.bpmChangeMap[i].songTime) {
				lastChange = Conductor.bpmChangeMap[i];
			}
		}
		return lastChange.stepTime + Math.floor((Conductor.songPosition - lastChange.songTime) / Conductor.stepCrochet);
	}
	,stepHit: function() {
		if(this.curStep % 4 == 0) {
			this.beatHit();
		}
	}
	,beatHit: function() {
	}
	,__class__: MusicBeatSubstate
	,__properties__: $extend(flixel_FlxSubState.prototype.__properties__,{get_controls:"get_controls"})
});
var GameOverSubstate = function(x,y) {
	this.isEnding = false;
	this.startVibin = false;
	this.stageSuffix = "";
	var daStage = PlayState.curStage;
	var daBf = "";
	if(PlayState.SONG.player1 == "bf-pixel") {
		this.stageSuffix = "-pixel";
		daBf = "bf-pixel-dead";
	} else {
		daBf = "bf";
	}
	MusicBeatSubstate.call(this);
	Conductor.songPosition = 0;
	this.bf = new Boyfriend(x,y,daBf);
	this.add(this.bf);
	this.camFollow = new flixel_FlxObject(this.bf.getGraphicMidpoint().x,this.bf.getGraphicMidpoint().y,1,1);
	this.add(this.camFollow);
	flixel_FlxG.sound.play(Paths.sound("fnf_loss_sfx" + this.stageSuffix));
	Conductor.changeBPM(100);
	flixel_FlxG.camera.scroll.set();
	flixel_FlxG.camera.target = null;
	this.bf.playAnim("firstDeath");
};
$hxClasses["GameOverSubstate"] = GameOverSubstate;
GameOverSubstate.__name__ = "GameOverSubstate";
GameOverSubstate.__super__ = MusicBeatSubstate;
GameOverSubstate.prototype = $extend(MusicBeatSubstate.prototype,{
	bf: null
	,camFollow: null
	,stageSuffix: null
	,startVibin: null
	,update: function(elapsed) {
		MusicBeatSubstate.prototype.update.call(this,elapsed);
		if(PlayerSettings.player1.controls._accept.check()) {
			this.endBullshit();
		}
		if(flixel_FlxG.save.data.InstantRespawn) {
			var nextState = LoadingState.getNextState(new PlayState(),false);
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		if(PlayerSettings.player1.controls._back.check()) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
			if(PlayState.isStoryMode) {
				var nextState = new StoryMenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else {
				var nextState = new FreeplayState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
			PlayState.loadRep = false;
		}
		if(this.bf.animation._curAnim.name == "firstDeath" && this.bf.animation._curAnim.curFrame == 12) {
			flixel_FlxG.camera.follow(this.camFollow,flixel_FlxCameraFollowStyle.LOCKON,0.01);
		}
		if(this.bf.animation._curAnim.name == "firstDeath" && this.bf.animation._curAnim.finished) {
			flixel_FlxG.sound.playMusic(Paths.getPath("music/" + ("gameOver" + this.stageSuffix) + "." + "mp3","MUSIC",null));
			this.startVibin = true;
		}
		if(flixel_FlxG.sound.music._channel != null) {
			Conductor.songPosition = flixel_FlxG.sound.music._time;
		}
	}
	,beatHit: function() {
		MusicBeatSubstate.prototype.beatHit.call(this);
		if(this.startVibin && !this.isEnding) {
			this.bf.playAnim("deathLoop",true);
		}
	}
	,isEnding: null
	,endBullshit: function() {
		if(!this.isEnding) {
			PlayState.startTime = 0;
			this.isEnding = true;
			this.bf.playAnim("deathConfirm",true);
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
			flixel_FlxG.sound.play(Paths.getPath("music/" + ("gameOverEnd" + this.stageSuffix) + "." + "mp3","MUSIC",null));
			new flixel_util_FlxTimer().start(0.7,function(tmr) {
				flixel_FlxG.camera.fade(-16777216,2,false,function() {
					var nextState = LoadingState.getNextState(new PlayState(),false);
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				});
			});
		}
	}
	,__class__: GameOverSubstate
});
var GameplayCustomizeState = function(TransIn,TransOut) {
	this.defaultY = flixel_FlxG.height / 2 - 50;
	this.defaultX = flixel_FlxG.width * 0.55 - 135;
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["GameplayCustomizeState"] = GameplayCustomizeState;
GameplayCustomizeState.__name__ = "GameplayCustomizeState";
GameplayCustomizeState.__super__ = MusicBeatState;
GameplayCustomizeState.prototype = $extend(MusicBeatState.prototype,{
	defaultX: null
	,defaultY: null
	,background: null
	,curt: null
	,front: null
	,sick: null
	,text: null
	,blackBorder: null
	,bf: null
	,dad: null
	,gf: null
	,strumLine: null
	,strumLineNotes: null
	,playerStrums: null
	,camHUD: null
	,create: function() {
		this.sick = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "sick" + ".png","IMAGE","shared"));
		this.sick.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.sick.scrollFactor.set();
		this.background = new flixel_FlxSprite(-1000,-200).loadGraphic(Paths.getPath("images/" + "stageback" + ".png","IMAGE","shared"));
		this.curt = new flixel_FlxSprite(-500,-300).loadGraphic(Paths.getPath("images/" + "stagecurtains" + ".png","IMAGE","shared"));
		this.front = new flixel_FlxSprite(-650,600).loadGraphic(Paths.getPath("images/" + "stagefront" + ".png","IMAGE","shared"));
		this.background.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.curt.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.front.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.persistentUpdate = true;
		MusicBeatState.prototype.create.call(this);
		this.camHUD = new flixel_FlxCamera();
		this.camHUD.bgColor &= 16777215;
		this.camHUD.bgColor |= 0;
		flixel_FlxG.cameras.add(this.camHUD);
		this.camHUD.set_zoom(flixel_FlxG.save.data.zoom);
		this.background.scrollFactor.set(0.9,0.9);
		this.curt.scrollFactor.set(0.9,0.9);
		this.front.scrollFactor.set(0.9,0.9);
		this.add(this.background);
		this.add(this.front);
		this.add(this.curt);
		var camFollow = new flixel_FlxObject(0,0,1,1);
		this.dad = new Character(100,100,"dad");
		this.bf = new Boyfriend(770,450,"bf");
		this.gf = new Character(400,130,"gf");
		this.gf.scrollFactor.set(0.95,0.95);
		var camPos = new flixel_math_FlxPoint(this.dad.getGraphicMidpoint().x + 400,this.dad.getGraphicMidpoint().y);
		camFollow.setPosition(camPos.x,camPos.y);
		this.add(this.gf);
		this.add(this.bf);
		this.add(this.dad);
		this.add(this.sick);
		this.add(camFollow);
		flixel_FlxG.camera.follow(camFollow,flixel_FlxCameraFollowStyle.LOCKON,0.01);
		flixel_FlxG.camera.set_zoom(0.9);
		var _this = flixel_FlxG.camera;
		var point = camFollow.getPosition();
		_this.scroll.set(point.x - _this.width * 0.5,point.y - _this.height * 0.5);
		if(point._weak) {
			point.put();
		}
		this.strumLine = new flixel_FlxSprite(0,flixel_FlxG.save.data.strumline).makeGraphic(flixel_FlxG.width,14);
		this.strumLine.scrollFactor.set();
		this.strumLine.set_alpha(0.4);
		this.add(this.strumLine);
		if(flixel_FlxG.save.data.downscroll) {
			this.strumLine.set_y(flixel_FlxG.height - 165);
		}
		this.strumLineNotes = new flixel_group_FlxTypedGroup();
		this.add(this.strumLineNotes);
		this.playerStrums = new flixel_group_FlxTypedGroup();
		this.sick.set_cameras([this.camHUD]);
		this.strumLine.set_cameras([this.camHUD]);
		this.playerStrums.set_cameras([this.camHUD]);
		this.generateStaticArrows(0);
		this.generateStaticArrows(1);
		this.text = new flixel_text_FlxText(5,flixel_FlxG.height + 40,0,"Click and drag around gameplay elements to customize their positions. Press R to reset. Q/E to change zoom. Press Escape to go back.",12);
		this.text.scrollFactor.set();
		this.text.setFormat("VCR OSD Mono",16,-1,"left",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.blackBorder = new flixel_FlxSprite(-30,flixel_FlxG.height + 40).makeGraphic(this.text.get_width() + 900 | 0,this.text.get_height() + 600 | 0,-16777216);
		this.blackBorder.set_alpha(0.5);
		this.background.set_cameras([this.camHUD]);
		this.text.set_cameras([this.camHUD]);
		this.text.scrollFactor.set();
		this.background.scrollFactor.set();
		this.add(this.blackBorder);
		this.add(this.text);
		flixel_tweens_FlxTween.tween(this.text,{ y : flixel_FlxG.height - 18},2,{ ease : flixel_tweens_FlxEase.elasticInOut});
		flixel_tweens_FlxTween.tween(this.blackBorder,{ y : flixel_FlxG.height - 18},2,{ ease : flixel_tweens_FlxEase.elasticInOut});
		if(!flixel_FlxG.save.data.changedHit) {
			flixel_FlxG.save.data.changedHitX = this.defaultX;
			flixel_FlxG.save.data.changedHitY = this.defaultY;
		}
		this.sick.set_x(flixel_FlxG.save.data.changedHitX);
		this.sick.set_y(flixel_FlxG.save.data.changedHitY);
		flixel_FlxG.mouse.set_visible(true);
	}
	,update: function(elapsed) {
		if(flixel_FlxG.sound.music != null) {
			Conductor.songPosition = flixel_FlxG.sound.music._time;
		}
		MusicBeatState.prototype.update.call(this,elapsed);
		if(flixel_FlxG.save.data.zoom < 0.8) {
			flixel_FlxG.save.data.zoom = 0.8;
		}
		if(flixel_FlxG.save.data.zoom > 1.2) {
			flixel_FlxG.save.data.zoom = 1.2;
		}
		flixel_FlxG.camera.set_zoom(0.9 + 0.95 * (flixel_FlxG.camera.zoom - 0.9));
		var a = flixel_FlxG.save.data.zoom;
		this.camHUD.set_zoom(a + 0.95 * (this.camHUD.zoom - a));
		var tmp;
		if(flixel_FlxG.mouse.overlaps(this.sick)) {
			var _this = flixel_FlxG.mouse._leftButton;
			tmp = _this.current == 1 || _this.current == 2;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.sick.set_x(flixel_FlxG.mouse.x - this.sick.get_width() / 2 - 60);
			this.sick.set_y(flixel_FlxG.mouse.y - this.sick.get_height() - 60);
		}
		var i = new flixel_group_FlxTypedGroupIterator(this.playerStrums.members,null);
		while(i.hasNext()) {
			var i1 = i.next();
			i1.set_y(this.strumLine.y);
		}
		var i = new flixel_group_FlxTypedGroupIterator(this.strumLineNotes.members,null);
		while(i.hasNext()) {
			var i1 = i.next();
			i1.set_y(this.strumLine.y);
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(81,_this.status)) {
			flixel_FlxG.save.data.zoom += 0.02;
			this.camHUD.set_zoom(flixel_FlxG.save.data.zoom);
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(69,_this.status)) {
			flixel_FlxG.save.data.zoom -= 0.02;
			this.camHUD.set_zoom(flixel_FlxG.save.data.zoom);
		}
		if(flixel_FlxG.mouse.overlaps(this.sick) && flixel_FlxG.mouse._leftButton.current == -1) {
			flixel_FlxG.save.data.changedHitX = this.sick.x;
			flixel_FlxG.save.data.changedHitY = this.sick.y;
			flixel_FlxG.save.data.changedHit = true;
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(82,_this.status)) {
			this.sick.set_x(this.defaultX);
			this.sick.set_y(this.defaultY);
			flixel_FlxG.save.data.zoom = 1;
			this.camHUD.set_zoom(flixel_FlxG.save.data.zoom);
			flixel_FlxG.save.data.changedHitX = this.sick.x;
			flixel_FlxG.save.data.changedHitY = this.sick.y;
			flixel_FlxG.save.data.changedHit = false;
		}
		if(PlayerSettings.player1.controls._back.check()) {
			flixel_FlxG.mouse.set_visible(false);
			flixel_FlxG.sound.play(Paths.sound("cancelMenu"));
			var nextState = new OptionsMenu();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
	}
	,beatHit: function() {
		MusicBeatState.prototype.beatHit.call(this);
		this.bf.playAnim("idle",true);
		this.dad.dance(true);
		this.gf.dance();
		var _g = flixel_FlxG.camera;
		_g.set_zoom(_g.zoom + 0.015);
		var _g = this.camHUD;
		_g.set_zoom(_g.zoom + 0.010);
		haxe_Log.trace("beat",{ fileName : "source/GameplayCustomizeState.hx", lineNumber : 236, className : "GameplayCustomizeState", methodName : "beatHit"});
	}
	,generateStaticArrows: function(player) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var babyArrow = new flixel_FlxSprite(0,this.strumLine.y);
			var usecahce = flixel_FlxG.save.data.cacheImages;
			usecahce = false;
			babyArrow.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "NOTE_assets" + ".png","IMAGE","shared"),Paths.getPath("images/" + "NOTE_assets" + ".xml","TEXT","shared")));
			babyArrow.animation.addByPrefix("green","arrowUP");
			babyArrow.animation.addByPrefix("blue","arrowDOWN");
			babyArrow.animation.addByPrefix("purple","arrowLEFT");
			babyArrow.animation.addByPrefix("red","arrowRIGHT");
			babyArrow.set_antialiasing(flixel_FlxG.save.data.antialiasing);
			babyArrow.setGraphicSize(babyArrow.get_width() * 0.7 | 0);
			switch(Math.abs(i)) {
			case 0:
				var _g1 = babyArrow;
				_g1.set_x(_g1.x + Note.swagWidth * 0);
				babyArrow.animation.addByPrefix("static","arrowLEFT");
				babyArrow.animation.addByPrefix("pressed","left press",24,false);
				babyArrow.animation.addByPrefix("confirm","left confirm",24,false);
				break;
			case 1:
				var _g2 = babyArrow;
				_g2.set_x(_g2.x + Note.swagWidth);
				babyArrow.animation.addByPrefix("static","arrowDOWN");
				babyArrow.animation.addByPrefix("pressed","down press",24,false);
				babyArrow.animation.addByPrefix("confirm","down confirm",24,false);
				break;
			case 2:
				var _g3 = babyArrow;
				_g3.set_x(_g3.x + Note.swagWidth * 2);
				babyArrow.animation.addByPrefix("static","arrowUP");
				babyArrow.animation.addByPrefix("pressed","up press",24,false);
				babyArrow.animation.addByPrefix("confirm","up confirm",24,false);
				break;
			case 3:
				var _g4 = babyArrow;
				_g4.set_x(_g4.x + Note.swagWidth * 3);
				babyArrow.animation.addByPrefix("static","arrowRIGHT");
				babyArrow.animation.addByPrefix("pressed","right press",24,false);
				babyArrow.animation.addByPrefix("confirm","right confirm",24,false);
				break;
			}
			babyArrow.updateHitbox();
			babyArrow.scrollFactor.set();
			babyArrow.ID = i;
			if(player == 1) {
				this.playerStrums.add(babyArrow);
			}
			babyArrow.animation.play("static");
			var _g5 = babyArrow;
			_g5.set_x(_g5.x + 50);
			var _g6 = babyArrow;
			_g6.set_x(_g6.x + flixel_FlxG.width / 2 * player);
			this.strumLineNotes.add(babyArrow);
		}
	}
	,__class__: GameplayCustomizeState
});
var GitarooPause = function() {
	this.replaySelect = false;
	MusicBeatState.call(this);
};
$hxClasses["GitarooPause"] = GitarooPause;
GitarooPause.__name__ = "GitarooPause";
GitarooPause.__super__ = MusicBeatState;
GitarooPause.prototype = $extend(MusicBeatState.prototype,{
	replayButton: null
	,cancelButton: null
	,replaySelect: null
	,create: function() {
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		var bg = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "pauseAlt/pauseBG" + ".png","IMAGE",null));
		bg.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(bg);
		var bf = new flixel_FlxSprite(0,30);
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		bf.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "pauseAlt/bfLol" + ".png","IMAGE",library),Paths.getPath("images/" + "pauseAlt/bfLol" + ".xml","TEXT",library)));
		bf.animation.addByPrefix("lol","funnyThing",13);
		bf.animation.play("lol");
		bf.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(bf);
		bf.screenCenter(flixel_util_FlxAxes.X);
		this.replayButton = new flixel_FlxSprite(flixel_FlxG.width * 0.28,flixel_FlxG.height * 0.7);
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.replayButton.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "pauseAlt/pauseUI" + ".png","IMAGE",library),Paths.getPath("images/" + "pauseAlt/pauseUI" + ".xml","TEXT",library)));
		this.replayButton.animation.addByPrefix("selected","bluereplay",0,false);
		this.replayButton.animation.appendByPrefix("selected","yellowreplay");
		this.replayButton.animation.play("selected");
		this.replayButton.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(this.replayButton);
		this.cancelButton = new flixel_FlxSprite(flixel_FlxG.width * 0.58,this.replayButton.y);
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.cancelButton.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "pauseAlt/pauseUI" + ".png","IMAGE",library),Paths.getPath("images/" + "pauseAlt/pauseUI" + ".xml","TEXT",library)));
		this.cancelButton.animation.addByPrefix("selected","bluecancel",0,false);
		this.cancelButton.animation.appendByPrefix("selected","cancelyellow");
		this.cancelButton.animation.play("selected");
		this.cancelButton.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(this.cancelButton);
		this.changeThing();
		MusicBeatState.prototype.create.call(this);
	}
	,update: function(elapsed) {
		if(PlayerSettings.player1.controls._leftP.check() || PlayerSettings.player1.controls._rightP.check()) {
			this.changeThing();
		}
		if(PlayerSettings.player1.controls._accept.check()) {
			if(this.replaySelect) {
				var nextState = new PlayState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else {
				var nextState = new MainMenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,changeThing: function() {
		this.replaySelect = !this.replaySelect;
		if(this.replaySelect) {
			this.cancelButton.animation._curAnim.set_curFrame(0);
			this.replayButton.animation._curAnim.set_curFrame(1);
		} else {
			this.cancelButton.animation._curAnim.set_curFrame(1);
			this.replayButton.animation._curAnim.set_curFrame(0);
		}
	}
	,__class__: GitarooPause
});
var GlobalVideo = function() { };
$hxClasses["GlobalVideo"] = GlobalVideo;
GlobalVideo.__name__ = "GlobalVideo";
GlobalVideo.video = null;
GlobalVideo.webm = null;
GlobalVideo.setVid = function(vid) {
	GlobalVideo.video = vid;
};
GlobalVideo.getVid = function() {
	return GlobalVideo.video;
};
GlobalVideo.setWebm = function(vid) {
	GlobalVideo.webm = vid;
	GlobalVideo.isWebm = true;
};
GlobalVideo.getWebm = function() {
	return GlobalVideo.webm;
};
GlobalVideo.get = function() {
	if(GlobalVideo.isWebm) {
		return GlobalVideo.getWebm();
	} else {
		return GlobalVideo.getVid();
	}
};
GlobalVideo.calc = function(ind) {
	var stageWidth = openfl_Lib.get_current().stage.stageWidth;
	var stageHeight = openfl_Lib.get_current().stage.stageHeight;
	var width = GameDimensions.width;
	var height = GameDimensions.height;
	var ratioX = height / width;
	var ratioY = width / height;
	var appliedWidth = stageHeight * ratioY;
	var appliedHeight = stageWidth * ratioX;
	var remainingX = stageWidth - appliedWidth;
	var remainingY = stageHeight - appliedHeight;
	remainingX /= 2;
	remainingY /= 2;
	appliedWidth = appliedWidth | 0;
	appliedHeight = appliedHeight | 0;
	if(appliedHeight > stageHeight) {
		remainingY = 0;
		appliedHeight = stageHeight;
	}
	if(appliedWidth > stageWidth) {
		remainingX = 0;
		appliedWidth = stageWidth;
	}
	switch(ind) {
	case 0:
		return remainingX;
	case 1:
		return remainingY;
	case 2:
		return appliedWidth;
	case 3:
		return appliedHeight;
	}
	return null;
};
var HealthIcon = function(char,isPlayer) {
	if(isPlayer == null) {
		isPlayer = false;
	}
	if(char == null) {
		char = "bf";
	}
	this.isOldIcon = false;
	this.isPlayer = false;
	this.char = "bf";
	flixel_FlxSprite.call(this);
	this.char = char;
	this.isPlayer = isPlayer;
	isPlayer = this.isOldIcon = false;
	this.set_antialiasing(flixel_FlxG.save.data.antialiasing);
	this.changeIcon(char);
	this.scrollFactor.set();
};
$hxClasses["HealthIcon"] = HealthIcon;
HealthIcon.__name__ = "HealthIcon";
HealthIcon.__super__ = flixel_FlxSprite;
HealthIcon.prototype = $extend(flixel_FlxSprite.prototype,{
	char: null
	,isPlayer: null
	,isOldIcon: null
	,sprTracker: null
	,swapOldIcon: function() {
		if(this.isOldIcon = !this.isOldIcon) {
			this.changeIcon("bf-old");
		} else {
			this.changeIcon(this.char);
		}
	}
	,changeIcon: function(char) {
		if(char != "bf-pixel" && char != "bf-old") {
			char = char.split("-")[0];
		}
		this.loadGraphic(Paths.getPath("images/" + ("icons/icon-" + char) + ".png","IMAGE",null),true,150,150);
		if(StringTools.endsWith(char,"-pixel") || StringTools.startsWith(char,"senpai") || StringTools.startsWith(char,"spirit")) {
			this.set_antialiasing(false);
		} else {
			this.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		}
		this.animation.add(char,[0,1],0,false,this.isPlayer);
		this.animation.play(char);
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this.sprTracker != null) {
			this.setPosition(this.sprTracker.x + this.sprTracker.get_width() + 10,this.sprTracker.y - 30);
		}
	}
	,__class__: HealthIcon
});
var HelperFunctions = function() { };
$hxClasses["HelperFunctions"] = HelperFunctions;
HelperFunctions.__name__ = "HelperFunctions";
HelperFunctions.truncateFloat = function(number,precision) {
	var num = number;
	num *= Math.pow(10,precision);
	num = Math.round(num) / Math.pow(10,precision);
	return num;
};
HelperFunctions.GCD = function(a,b) {
	if(b == 0) {
		if(a > 0) {
			return a;
		} else {
			return -a;
		}
	} else {
		return HelperFunctions.GCD(b,a % b);
	}
};
var Highscore = function() { };
$hxClasses["Highscore"] = Highscore;
Highscore.__name__ = "Highscore";
Highscore.saveScore = function(song,score,diff) {
	if(diff == null) {
		diff = 0;
	}
	if(score == null) {
		score = 0;
	}
	var daSong = Highscore.formatSong(song,diff);
	var score1 = score;
	if(score1 == null) {
		score1 = 0;
	}
	if(NGio.isLoggedIn) {
		var id = io_newgrounds_NG.core.scoreBoards.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			var board = io_newgrounds_NG.core.scoreBoards.h[id1];
			if(song == board._data.name) {
				board.postScore(score1,"Uhh meow?");
			}
		}
	}
	if(!flixel_FlxG.save.data.botplay) {
		if(Object.prototype.hasOwnProperty.call(Highscore.songScores.h,daSong)) {
			if(Highscore.songScores.h[daSong] < score) {
				Highscore.setScore(daSong,score);
			}
		} else {
			Highscore.setScore(daSong,score);
		}
	} else {
		haxe_Log.trace("BotPlay detected. Score saving is disabled.",{ fileName : "source/Highscore.hx", lineNumber : 35, className : "Highscore", methodName : "saveScore"});
	}
};
Highscore.saveCombo = function(song,combo,diff) {
	if(diff == null) {
		diff = 0;
	}
	var daSong = Highscore.formatSong(song,diff);
	var finalCombo = StringTools.replace(combo.split(")")[0],"(","");
	if(!flixel_FlxG.save.data.botplay) {
		if(Object.prototype.hasOwnProperty.call(Highscore.songCombos.h,daSong)) {
			if(Highscore.getComboInt(Highscore.songCombos.h[daSong]) < Highscore.getComboInt(finalCombo)) {
				Highscore.setCombo(daSong,finalCombo);
			}
		} else {
			Highscore.setCombo(daSong,finalCombo);
		}
	}
};
Highscore.saveWeekScore = function(week,score,diff) {
	if(diff == null) {
		diff = 0;
	}
	if(score == null) {
		score = 0;
	}
	if(week == null) {
		week = 1;
	}
	var score1 = score;
	var song = "Week " + week;
	if(score1 == null) {
		score1 = 0;
	}
	if(NGio.isLoggedIn) {
		var id = io_newgrounds_NG.core.scoreBoards.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			var board = io_newgrounds_NG.core.scoreBoards.h[id1];
			if(song == board._data.name) {
				board.postScore(score1,"Uhh meow?");
			}
		}
	}
	if(!flixel_FlxG.save.data.botplay) {
		var daWeek = Highscore.formatSong("week" + week,diff);
		if(Object.prototype.hasOwnProperty.call(Highscore.songScores.h,daWeek)) {
			if(Highscore.songScores.h[daWeek] < score) {
				Highscore.setScore(daWeek,score);
			}
		} else {
			Highscore.setScore(daWeek,score);
		}
	} else {
		haxe_Log.trace("BotPlay detected. Score saving is disabled.",{ fileName : "source/Highscore.hx", lineNumber : 73, className : "Highscore", methodName : "saveWeekScore"});
	}
};
Highscore.setScore = function(song,score) {
	Highscore.songScores.h[song] = score;
	flixel_FlxG.save.data.songScores = Highscore.songScores;
	flixel_FlxG.save.flush();
};
Highscore.setCombo = function(song,combo) {
	Highscore.songCombos.h[song] = combo;
	flixel_FlxG.save.data.songCombos = Highscore.songCombos;
	flixel_FlxG.save.flush();
};
Highscore.formatSong = function(song,diff) {
	var daSong = song;
	if(diff == 0) {
		daSong += "-easy";
	} else if(diff == 2) {
		daSong += "-hard";
	}
	return daSong;
};
Highscore.getComboInt = function(combo) {
	switch(combo) {
	case "FC":
		return 2;
	case "GFC":
		return 3;
	case "MFC":
		return 4;
	case "SDCB":
		return 1;
	default:
		return 0;
	}
};
Highscore.getScore = function(song,diff) {
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong(song,diff);
	if(!Object.prototype.hasOwnProperty.call(this1.h,key)) {
		Highscore.setScore(Highscore.formatSong(song,diff),0);
	}
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong(song,diff);
	return this1.h[key];
};
Highscore.getCombo = function(song,diff) {
	var this1 = Highscore.songCombos;
	var key = Highscore.formatSong(song,diff);
	if(!Object.prototype.hasOwnProperty.call(this1.h,key)) {
		Highscore.setCombo(Highscore.formatSong(song,diff),"");
	}
	var this1 = Highscore.songCombos;
	var key = Highscore.formatSong(song,diff);
	return this1.h[key];
};
Highscore.getWeekScore = function(week,diff) {
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong("week" + week,diff);
	if(!Object.prototype.hasOwnProperty.call(this1.h,key)) {
		Highscore.setScore(Highscore.formatSong("week" + week,diff),0);
	}
	var this1 = Highscore.songScores;
	var key = Highscore.formatSong("week" + week,diff);
	return this1.h[key];
};
Highscore.load = function() {
	if(flixel_FlxG.save.data.songScores != null) {
		Highscore.songScores = flixel_FlxG.save.data.songScores;
	}
	if(flixel_FlxG.save.data.songCombos != null) {
		Highscore.songCombos = flixel_FlxG.save.data.songCombos;
	}
};
var HitGraph = function(X,Y,Width,Height) {
	this.history = [];
	this.showInput = flixel_FlxG.save.data.inputShow;
	this.maxValue = Math.floor(PlayState.rep.replay.sf / 60 * 1000) + 95;
	this.minValue = -(Math.floor(PlayState.rep.replay.sf / 60 * 1000) + 95);
	openfl_display_Sprite.call(this);
	this.set_x(X);
	this.set_y(Y);
	this._width = Width;
	this._height = Height;
	var bm = new openfl_display_BitmapData(Width,Height);
	bm.draw(this);
	this.bitmap = new openfl_display_Bitmap(bm);
	this._axis = new openfl_display_Shape();
	this._axis.set_x(this._labelWidth + 10);
	var ts = Math.floor(PlayState.rep.replay.sf / 60 * 1000) / 166;
	var early = HitGraph.createTextField(10,10,-1,12);
	var late = HitGraph.createTextField(10,this._height - 20,-1,12);
	early.set_text("Early (" + -166 * ts + "ms)");
	late.set_text("Late (" + 166 * ts + "ms)");
	this.addChild(early);
	this.addChild(late);
	this.addChild(this._axis);
	this.drawAxes();
};
$hxClasses["HitGraph"] = HitGraph;
HitGraph.__name__ = "HitGraph";
HitGraph.createTextField = function(X,Y,Color,Size) {
	if(Size == null) {
		Size = 12;
	}
	if(Color == null) {
		Color = -1;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	return HitGraph.initTextField(new openfl_text_TextField(),X,Y,Color,Size);
};
HitGraph.initTextField = function(tf,X,Y,Color,Size) {
	if(Size == null) {
		Size = 12;
	}
	if(Color == null) {
		Color = -1;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	tf.set_x(X);
	tf.set_y(Y);
	tf.set_multiline(false);
	tf.set_wordWrap(false);
	tf.set_embedFonts(true);
	tf.set_selectable(false);
	tf.set_defaultTextFormat(new openfl_text_TextFormat("assets/fonts/vcr.ttf",Size,Color & 16777215));
	tf.set_alpha((Color >> 24 & 255) / 255);
	tf.set_autoSize(1);
	return tf;
};
HitGraph.__super__ = openfl_display_Sprite;
HitGraph.prototype = $extend(openfl_display_Sprite.prototype,{
	minLabel: null
	,curLabel: null
	,maxLabel: null
	,avgLabel: null
	,minValue: null
	,maxValue: null
	,showInput: null
	,graphColor: null
	,history: null
	,bitmap: null
	,_axis: null
	,_width: null
	,_height: null
	,_unit: null
	,_labelWidth: null
	,_label: null
	,drawAxes: function() {
		var gfx = this._axis.get_graphics();
		gfx.clear();
		gfx.lineStyle(1,16777215,0.5);
		gfx.moveTo(0,0);
		gfx.lineTo(0,this._height);
		gfx.moveTo(0,this._height);
		gfx.lineTo(this._width,this._height);
		gfx.moveTo(0,this._height / 2);
		gfx.lineTo(this._width,this._height / 2);
	}
	,drawJudgementLine: function(ms) {
		var gfx = this.get_graphics();
		gfx.lineStyle(1,this.graphColor,0.3);
		var ts = Math.floor(PlayState.rep.replay.sf / 60 * 1000) / 166;
		var range = Math.max(this.maxValue - this.minValue,this.maxValue * 0.1);
		var value = (ms * ts - this.minValue) / range;
		var pointY = this._axis.get_y() + (-value * this._height - 1 + this._height);
		var graphX = this._axis.get_x() + 1;
		if(ms == 45) {
			gfx.moveTo(graphX,this._axis.get_y() + pointY);
		}
		var graphX = this._axis.get_x() + 1;
		gfx.drawRect(graphX,pointY,this._width,1);
		gfx.lineStyle(1,this.graphColor,1);
	}
	,drawGraph: function() {
		var gfx = this.get_graphics();
		gfx.clear();
		gfx.lineStyle(1,this.graphColor,1);
		gfx.beginFill(65280);
		this.drawJudgementLine(45);
		gfx.endFill();
		gfx.beginFill(16711680);
		this.drawJudgementLine(90);
		gfx.endFill();
		gfx.beginFill(9109504);
		this.drawJudgementLine(135);
		gfx.endFill();
		gfx.beginFill(5767168);
		this.drawJudgementLine(166);
		gfx.endFill();
		gfx.beginFill(65280);
		this.drawJudgementLine(-45);
		gfx.endFill();
		gfx.beginFill(16711680);
		this.drawJudgementLine(-90);
		gfx.endFill();
		gfx.beginFill(9109504);
		this.drawJudgementLine(-135);
		gfx.endFill();
		gfx.beginFill(5767168);
		this.drawJudgementLine(-166);
		gfx.endFill();
		var range = Math.max(this.maxValue - this.minValue,this.maxValue * 0.1);
		var graphX = this._axis.get_x() + 1;
		if(this.showInput) {
			var _g = 0;
			var _g1 = PlayState.rep.replay.ana.anaArray.length;
			while(_g < _g1) {
				var i = _g++;
				var ana = PlayState.rep.replay.ana.anaArray[i];
				var value = (ana.key * 25 - this.minValue) / range;
				if(ana.hit) {
					gfx.beginFill(16776960);
				} else {
					gfx.beginFill(12759680);
				}
				if(ana.hitTime < 0) {
					continue;
				}
				var pointY = -value * this._height - 1 + this._height;
				gfx.drawRect(graphX + this.fitX(ana.hitTime),pointY,2,2);
				gfx.endFill();
			}
		}
		var _g = 0;
		var _g1 = this.history.length;
		while(_g < _g1) {
			var i = _g++;
			var value = (this.history[i][0] - this.minValue) / range;
			var judge = this.history[i][1];
			switch(judge) {
			case "bad":
				gfx.beginFill(16711680);
				break;
			case "good":
				gfx.beginFill(65280);
				break;
			case "miss":
				gfx.beginFill(5767168);
				break;
			case "shit":
				gfx.beginFill(9109504);
				break;
			case "sick":
				gfx.beginFill(65535);
				break;
			default:
				gfx.beginFill(16777215);
			}
			var pointY = -value * this._height - 1 + this._height;
			gfx.drawRect(this.fitX(this.history[i][2]),pointY,4,4);
			gfx.endFill();
		}
		var bm = new openfl_display_BitmapData(this._width,this._height);
		bm.draw(this);
		this.bitmap = new openfl_display_Bitmap(bm);
	}
	,fitX: function(x) {
		return x / flixel_FlxG.sound.music._length * this.get_width();
	}
	,addToHistory: function(diff,judge,time) {
		this.history.push([diff,judge,time]);
	}
	,update: function() {
		this.drawGraph();
	}
	,average: function() {
		var sum = 0;
		var _g = 0;
		var _g1 = this.history;
		while(_g < _g1.length) {
			var value = _g1[_g];
			++_g;
			sum += value;
		}
		return sum / this.history.length;
	}
	,destroy: function() {
		this._axis = flixel_util_FlxDestroyUtil.removeChild(this,this._axis);
		this.history = null;
	}
	,__class__: HitGraph
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = "IntIterator";
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var KadeEngineData = function() { };
$hxClasses["KadeEngineData"] = KadeEngineData;
KadeEngineData.__name__ = "KadeEngineData";
KadeEngineData.initSave = function() {
	if(flixel_FlxG.save.data.weekUnlocked == null) {
		flixel_FlxG.save.data.weekUnlocked = 7;
	}
	if(flixel_FlxG.save.data.newInput == null) {
		flixel_FlxG.save.data.newInput = true;
	}
	if(flixel_FlxG.save.data.downscroll == null) {
		flixel_FlxG.save.data.downscroll = false;
	}
	if(flixel_FlxG.save.data.antialiasing == null) {
		flixel_FlxG.save.data.antialiasing = true;
	}
	if(flixel_FlxG.save.data.missSounds == null) {
		flixel_FlxG.save.data.missSounds = true;
	}
	if(flixel_FlxG.save.data.dfjk == null) {
		flixel_FlxG.save.data.dfjk = false;
	}
	if(flixel_FlxG.save.data.accuracyDisplay == null) {
		flixel_FlxG.save.data.accuracyDisplay = true;
	}
	if(flixel_FlxG.save.data.offset == null) {
		flixel_FlxG.save.data.offset = 0;
	}
	if(flixel_FlxG.save.data.songPosition == null) {
		flixel_FlxG.save.data.songPosition = false;
	}
	if(flixel_FlxG.save.data.fps == null) {
		flixel_FlxG.save.data.fps = false;
	}
	if(flixel_FlxG.save.data.changedHit == null) {
		flixel_FlxG.save.data.changedHitX = -1;
		flixel_FlxG.save.data.changedHitY = -1;
		flixel_FlxG.save.data.changedHit = false;
	}
	if(flixel_FlxG.save.data.fpsRain == null) {
		flixel_FlxG.save.data.fpsRain = false;
	}
	if(flixel_FlxG.save.data.fpsCap == null) {
		flixel_FlxG.save.data.fpsCap = 120;
	}
	if(flixel_FlxG.save.data.fpsCap > 285 || flixel_FlxG.save.data.fpsCap < 60) {
		flixel_FlxG.save.data.fpsCap = 120;
	}
	if(flixel_FlxG.save.data.scrollSpeed == null) {
		flixel_FlxG.save.data.scrollSpeed = 1;
	}
	if(flixel_FlxG.save.data.npsDisplay == null) {
		flixel_FlxG.save.data.npsDisplay = false;
	}
	if(flixel_FlxG.save.data.frames == null) {
		flixel_FlxG.save.data.frames = 10;
	}
	if(flixel_FlxG.save.data.accuracyMod == null) {
		flixel_FlxG.save.data.accuracyMod = 1;
	}
	if(flixel_FlxG.save.data.watermark == null) {
		flixel_FlxG.save.data.watermark = true;
	}
	if(flixel_FlxG.save.data.ghost == null) {
		flixel_FlxG.save.data.ghost = true;
	}
	if(flixel_FlxG.save.data.distractions == null) {
		flixel_FlxG.save.data.distractions = true;
	}
	if(flixel_FlxG.save.data.stepMania == null) {
		flixel_FlxG.save.data.stepMania = false;
	}
	if(flixel_FlxG.save.data.flashing == null) {
		flixel_FlxG.save.data.flashing = true;
	}
	if(flixel_FlxG.save.data.resetButton == null) {
		flixel_FlxG.save.data.resetButton = false;
	}
	if(flixel_FlxG.save.data.InstantRespawn == null) {
		flixel_FlxG.save.data.InstantRespawn = false;
	}
	if(flixel_FlxG.save.data.botplay == null) {
		flixel_FlxG.save.data.botplay = false;
	}
	if(flixel_FlxG.save.data.cpuStrums == null) {
		flixel_FlxG.save.data.cpuStrums = false;
	}
	if(flixel_FlxG.save.data.strumline == null) {
		flixel_FlxG.save.data.strumline = false;
	}
	if(flixel_FlxG.save.data.customStrumLine == null) {
		flixel_FlxG.save.data.customStrumLine = 0;
	}
	if(flixel_FlxG.save.data.camzoom == null) {
		flixel_FlxG.save.data.camzoom = true;
	}
	if(flixel_FlxG.save.data.scoreScreen == null) {
		flixel_FlxG.save.data.scoreScreen = true;
	}
	if(flixel_FlxG.save.data.inputShow == null) {
		flixel_FlxG.save.data.inputShow = false;
	}
	if(flixel_FlxG.save.data.optimize == null) {
		flixel_FlxG.save.data.optimize = false;
	}
	if(flixel_FlxG.save.data.cacheImages == null) {
		flixel_FlxG.save.data.cacheImages = false;
	}
	if(flixel_FlxG.save.data.editorBG == null) {
		flixel_FlxG.save.data.editor = false;
	}
	if(flixel_FlxG.save.data.zoom == null) {
		flixel_FlxG.save.data.zoom = 1;
	}
	var gamepad = flixel_FlxG.gamepads.lastActive;
	KeyBinds.gamepad = gamepad != null;
	Conductor.recalculateTimings();
	PlayerSettings.player1.controls.loadKeyBinds();
	KeyBinds.keyCheck();
	Main.watermarks = flixel_FlxG.save.data.watermark;
	(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).setFPSCap(flixel_FlxG.save.data.fpsCap);
};
var KeyBindMenu = function(BGColor) {
	this.lastKey = "";
	this.frames = 0;
	this.state = "select";
	this.blacklist = ["ESCAPE","ENTER","BACKSPACE","SPACE","TAB"];
	this.tempKey = "";
	this.gpKeys = [flixel_FlxG.save.data.gpleftBind,flixel_FlxG.save.data.gpdownBind,flixel_FlxG.save.data.gpupBind,flixel_FlxG.save.data.gprightBind];
	this.keys = [flixel_FlxG.save.data.leftBind,flixel_FlxG.save.data.downBind,flixel_FlxG.save.data.upBind,flixel_FlxG.save.data.rightBind];
	this.curSelected = 0;
	this.defaultGpKeys = ["DPAD_LEFT","DPAD_DOWN","DPAD_UP","DPAD_RIGHT"];
	this.defaultKeys = ["A","S","W","D","R"];
	this.keyText = ["LEFT","DOWN","UP","RIGHT"];
	flixel_FlxSubState.call(this,BGColor);
};
$hxClasses["KeyBindMenu"] = KeyBindMenu;
KeyBindMenu.__name__ = "KeyBindMenu";
KeyBindMenu.__super__ = flixel_FlxSubState;
KeyBindMenu.prototype = $extend(flixel_FlxSubState.prototype,{
	keyTextDisplay: null
	,keyWarning: null
	,warningTween: null
	,keyText: null
	,defaultKeys: null
	,defaultGpKeys: null
	,curSelected: null
	,keys: null
	,gpKeys: null
	,tempKey: null
	,blacklist: null
	,blackBox: null
	,infoText: null
	,state: null
	,create: function() {
		var _g = 0;
		var _g1 = this.keys.length;
		while(_g < _g1) {
			var i = _g++;
			var k = this.keys[i];
			if(k == null) {
				this.keys[i] = this.defaultKeys[i];
			}
		}
		var _g = 0;
		var _g1 = this.gpKeys.length;
		while(_g < _g1) {
			var i = _g++;
			var k = this.gpKeys[i];
			if(k == null) {
				this.gpKeys[i] = this.defaultGpKeys[i];
			}
		}
		this.persistentUpdate = true;
		this.keyTextDisplay = new flixel_text_FlxText(-10,0,1280,"",72);
		this.keyTextDisplay.scrollFactor.set(0,0);
		this.keyTextDisplay.setFormat("VCR OSD Mono",42,-1,"center",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.keyTextDisplay.set_borderSize(2);
		this.keyTextDisplay.set_borderQuality(3);
		this.blackBox = new flixel_FlxSprite(0,0).makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		this.add(this.blackBox);
		this.infoText = new flixel_text_FlxText(-10,580,1280,"Current Mode: " + (KeyBinds.gamepad ? "GAMEPAD" : "KEYBOARD") + ". Press TAB to switch\n(" + (KeyBinds.gamepad ? "RIGHT Trigger" : "Escape") + " to save, " + (KeyBinds.gamepad ? "LEFT Trigger" : "Backspace") + " to leave without saving. " + (KeyBinds.gamepad ? "START To change a keybind" : "") + ")",72);
		this.infoText.scrollFactor.set(0,0);
		this.infoText.setFormat("VCR OSD Mono",24,-1,"center",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.infoText.set_borderSize(2);
		this.infoText.set_borderQuality(3);
		this.infoText.set_alpha(0);
		this.infoText.screenCenter(flixel_util_FlxAxes.X);
		this.add(this.infoText);
		this.add(this.keyTextDisplay);
		this.blackBox.set_alpha(0);
		this.keyTextDisplay.set_alpha(0);
		flixel_tweens_FlxTween.tween(this.keyTextDisplay,{ alpha : 1},1,{ ease : flixel_tweens_FlxEase.expoInOut});
		flixel_tweens_FlxTween.tween(this.infoText,{ alpha : 1},1.4,{ ease : flixel_tweens_FlxEase.expoInOut});
		flixel_tweens_FlxTween.tween(this.blackBox,{ alpha : 0.7},1,{ ease : flixel_tweens_FlxEase.expoInOut});
		OptionsMenu.instance.acceptInput = false;
		this.textUpdate();
		flixel_FlxSubState.prototype.create.call(this);
	}
	,frames: null
	,update: function(elapsed) {
		var gamepad = flixel_FlxG.gamepads.lastActive;
		if(this.frames <= 10) {
			this.frames++;
		}
		this.infoText.set_text("Current Mode: " + (KeyBinds.gamepad ? "GAMEPAD" : "KEYBOARD") + ". Press TAB to switch\n(" + (KeyBinds.gamepad ? "RIGHT Trigger" : "Escape") + " to save, " + (KeyBinds.gamepad ? "LEFT Trigger" : "Backspace") + " to leave without saving. " + (KeyBinds.gamepad ? "START To change a keybind" : "") + ")\n" + (this.lastKey != "" ? this.lastKey + " is blacklisted!" : ""));
		switch(this.state) {
		case "exiting":
			break;
		case "input":
			this.tempKey = this.keys[this.curSelected];
			this.keys[this.curSelected] = "?";
			if(KeyBinds.gamepad) {
				this.gpKeys[this.curSelected] = "?";
			}
			this.textUpdate();
			this.state = "waiting";
			break;
		case "select":
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(38,_this.status)) {
				flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
				this.changeItem(-1);
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(40,_this.status)) {
				flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
				this.changeItem(1);
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(9,_this.status)) {
				KeyBinds.gamepad = !KeyBinds.gamepad;
				this.textUpdate();
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(13,_this.status)) {
				flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
				this.state = "input";
			} else {
				var _this = flixel_FlxG.keys.justPressed;
				if(_this.keyManager.checkStatus(27,_this.status)) {
					this.quit();
				} else {
					var _this = flixel_FlxG.keys.justPressed;
					if(_this.keyManager.checkStatus(8,_this.status)) {
						this.reset();
					}
				}
			}
			if(gamepad != null) {
				var _this = gamepad.justPressed;
				var id = 11;
				var _this1 = _this.gamepad;
				var Status = _this.status;
				var tmp;
				switch(id) {
				case -2:
					tmp = _this1.anyButton(Status);
					break;
				case -1:
					tmp = !_this1.anyButton(Status);
					break;
				default:
					var RawID = _this1.mapping.getRawID(id);
					var button = _this1.buttons[RawID];
					tmp = button != null && button.hasState(Status);
				}
				if(tmp) {
					flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
					this.changeItem(-1);
					this.textUpdate();
				}
				var _this = gamepad.justPressed;
				var id = 12;
				var _this1 = _this.gamepad;
				var Status = _this.status;
				var tmp;
				switch(id) {
				case -2:
					tmp = _this1.anyButton(Status);
					break;
				case -1:
					tmp = !_this1.anyButton(Status);
					break;
				default:
					var RawID = _this1.mapping.getRawID(id);
					var button = _this1.buttons[RawID];
					tmp = button != null && button.hasState(Status);
				}
				if(tmp) {
					flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
					this.changeItem(1);
					this.textUpdate();
				}
				var _this = gamepad.justPressed;
				var id = 7;
				var _this1 = _this.gamepad;
				var Status = _this.status;
				var tmp;
				switch(id) {
				case -2:
					tmp = _this1.anyButton(Status);
					break;
				case -1:
					tmp = !_this1.anyButton(Status);
					break;
				default:
					var RawID = _this1.mapping.getRawID(id);
					var button = _this1.buttons[RawID];
					tmp = button != null && button.hasState(Status);
				}
				if(tmp && this.frames > 10) {
					flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
					this.state = "input";
				} else {
					var _this = gamepad.justPressed;
					var id = 17;
					var _this1 = _this.gamepad;
					var Status = _this.status;
					var tmp;
					switch(id) {
					case -2:
						tmp = _this1.anyButton(Status);
						break;
					case -1:
						tmp = !_this1.anyButton(Status);
						break;
					default:
						var RawID = _this1.mapping.getRawID(id);
						var button = _this1.buttons[RawID];
						tmp = button != null && button.hasState(Status);
					}
					if(tmp) {
						this.quit();
					} else {
						var _this = gamepad.justPressed;
						var id = 18;
						var _this1 = _this.gamepad;
						var Status = _this.status;
						var tmp;
						switch(id) {
						case -2:
							tmp = _this1.anyButton(Status);
							break;
						case -1:
							tmp = !_this1.anyButton(Status);
							break;
						default:
							var RawID = _this1.mapping.getRawID(id);
							var button = _this1.buttons[RawID];
							tmp = button != null && button.hasState(Status);
						}
						if(tmp) {
							this.reset();
						}
					}
				}
			}
			break;
		case "waiting":
			if(gamepad != null && KeyBinds.gamepad) {
				var _this = flixel_FlxG.keys.justPressed;
				if(_this.keyManager.checkStatus(27,_this.status)) {
					this.gpKeys[this.curSelected] = this.tempKey;
					this.state = "select";
					flixel_FlxG.sound.play(Paths.sound("confirmMenu"));
				}
				var _this = gamepad.justPressed;
				var id = 7;
				var _this1 = _this.gamepad;
				var Status = _this.status;
				var tmp;
				switch(id) {
				case -2:
					tmp = _this1.anyButton(Status);
					break;
				case -1:
					tmp = !_this1.anyButton(Status);
					break;
				default:
					var RawID = _this1.mapping.getRawID(id);
					var button = _this1.buttons[RawID];
					tmp = button != null && button.hasState(Status);
				}
				if(tmp) {
					this.addKeyGamepad(this.defaultKeys[this.curSelected]);
					this.save();
					this.state = "select";
				}
				if(gamepad.justPressed.get_ANY()) {
					var tmp = gamepad.mapping.getID(gamepad.firstJustPressedRawID());
					haxe_Log.trace(tmp == null ? "null" : flixel_input_gamepad_FlxGamepadInputID.toStringMap.h[tmp],{ fileName : "source/KeyBindMenu.hx", lineNumber : 208, className : "KeyBindMenu", methodName : "update"});
					var this1 = gamepad.mapping.getID(gamepad.firstJustPressedRawID());
					this.addKeyGamepad(flixel_input_gamepad_FlxGamepadInputID.toStringMap.h[this1]);
					this.save();
					this.state = "select";
					this.textUpdate();
				}
			} else {
				var _this = flixel_FlxG.keys.justPressed;
				if(_this.keyManager.checkStatus(27,_this.status)) {
					this.keys[this.curSelected] = this.tempKey;
					this.state = "select";
					flixel_FlxG.sound.play(Paths.sound("confirmMenu"));
				} else {
					var _this = flixel_FlxG.keys.justPressed;
					if(_this.keyManager.checkStatus(13,_this.status)) {
						this.addKey(this.defaultKeys[this.curSelected]);
						this.save();
						this.state = "select";
					} else if(flixel_FlxG.keys.justPressed.get_ANY()) {
						var this1 = flixel_FlxG.keys.getIsDown()[0].ID;
						this.addKey(flixel_input_keyboard_FlxKey.toStringMap.h[this1]);
						this.save();
						this.state = "select";
					}
				}
			}
			break;
		default:
			this.state = "select";
		}
		if(flixel_FlxG.keys.justPressed.get_ANY()) {
			this.textUpdate();
		}
		flixel_FlxSubState.prototype.update.call(this,elapsed);
	}
	,textUpdate: function() {
		this.keyTextDisplay.set_text("\n\n");
		if(KeyBinds.gamepad) {
			var textStart = 0 == this.curSelected ? "> " : "  ";
			haxe_Log.trace(this.gpKeys[0],{ fileName : "source/KeyBindMenu.hx", lineNumber : 260, className : "KeyBindMenu", methodName : "textUpdate"});
			var _g = this.keyTextDisplay;
			_g.set_text(_g.text + (textStart + this.keyText[0] + ": " + this.gpKeys[0] + "\n"));
			var textStart = 1 == this.curSelected ? "> " : "  ";
			haxe_Log.trace(this.gpKeys[1],{ fileName : "source/KeyBindMenu.hx", lineNumber : 260, className : "KeyBindMenu", methodName : "textUpdate"});
			var _g = this.keyTextDisplay;
			_g.set_text(_g.text + (textStart + this.keyText[1] + ": " + this.gpKeys[1] + "\n"));
			var textStart = 2 == this.curSelected ? "> " : "  ";
			haxe_Log.trace(this.gpKeys[2],{ fileName : "source/KeyBindMenu.hx", lineNumber : 260, className : "KeyBindMenu", methodName : "textUpdate"});
			var _g = this.keyTextDisplay;
			_g.set_text(_g.text + (textStart + this.keyText[2] + ": " + this.gpKeys[2] + "\n"));
			var textStart = 3 == this.curSelected ? "> " : "  ";
			haxe_Log.trace(this.gpKeys[3],{ fileName : "source/KeyBindMenu.hx", lineNumber : 260, className : "KeyBindMenu", methodName : "textUpdate"});
			var _g = this.keyTextDisplay;
			_g.set_text(_g.text + (textStart + this.keyText[3] + ": " + this.gpKeys[3] + "\n"));
		} else {
			var textStart = 0 == this.curSelected ? "> " : "  ";
			var _g = this.keyTextDisplay;
			_g.set_text(_g.text + (textStart + this.keyText[0] + ": " + (this.keys[0] != this.keyText[0] ? this.keys[0] + " / " : "") + this.keyText[0] + " ARROW\n"));
			var textStart = 1 == this.curSelected ? "> " : "  ";
			var _g = this.keyTextDisplay;
			_g.set_text(_g.text + (textStart + this.keyText[1] + ": " + (this.keys[1] != this.keyText[1] ? this.keys[1] + " / " : "") + this.keyText[1] + " ARROW\n"));
			var textStart = 2 == this.curSelected ? "> " : "  ";
			var _g = this.keyTextDisplay;
			_g.set_text(_g.text + (textStart + this.keyText[2] + ": " + (this.keys[2] != this.keyText[2] ? this.keys[2] + " / " : "") + this.keyText[2] + " ARROW\n"));
			var textStart = 3 == this.curSelected ? "> " : "  ";
			var _g = this.keyTextDisplay;
			_g.set_text(_g.text + (textStart + this.keyText[3] + ": " + (this.keys[3] != this.keyText[3] ? this.keys[3] + " / " : "") + this.keyText[3] + " ARROW\n"));
		}
		this.keyTextDisplay.screenCenter();
	}
	,save: function() {
		flixel_FlxG.save.data.upBind = this.keys[2];
		flixel_FlxG.save.data.downBind = this.keys[1];
		flixel_FlxG.save.data.leftBind = this.keys[0];
		flixel_FlxG.save.data.rightBind = this.keys[3];
		flixel_FlxG.save.data.gpupBind = this.gpKeys[2];
		flixel_FlxG.save.data.gpdownBind = this.gpKeys[1];
		flixel_FlxG.save.data.gpleftBind = this.gpKeys[0];
		flixel_FlxG.save.data.gprightBind = this.gpKeys[3];
		flixel_FlxG.save.flush();
		PlayerSettings.player1.controls.loadKeyBinds();
	}
	,reset: function() {
		this.keys[0] = this.defaultKeys[0];
		this.keys[1] = this.defaultKeys[1];
		this.keys[2] = this.defaultKeys[2];
		this.keys[3] = this.defaultKeys[3];
		this.keys[4] = this.defaultKeys[4];
		this.quit();
	}
	,quit: function() {
		var _gthis = this;
		this.state = "exiting";
		this.save();
		OptionsMenu.instance.acceptInput = true;
		flixel_tweens_FlxTween.tween(this.keyTextDisplay,{ alpha : 0},1,{ ease : flixel_tweens_FlxEase.expoInOut});
		flixel_tweens_FlxTween.tween(this.blackBox,{ alpha : 0},1.1,{ ease : flixel_tweens_FlxEase.expoInOut, onComplete : function(flx) {
			_gthis.close();
		}});
		flixel_tweens_FlxTween.tween(this.infoText,{ alpha : 0},1,{ ease : flixel_tweens_FlxEase.expoInOut});
	}
	,addKeyGamepad: function(r) {
		var shouldReturn = true;
		var notAllowed = ["START"];
		var _g = 0;
		var _g1 = this.gpKeys.length;
		while(_g < _g1) {
			var x = _g++;
			var oK = this.gpKeys[x];
			if(oK == r) {
				this.gpKeys[x] = null;
			}
			if(notAllowed.indexOf(oK) != -1) {
				this.gpKeys[x] = null;
				this.lastKey = r;
				return;
			}
		}
		if(shouldReturn) {
			this.gpKeys[this.curSelected] = r;
			flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
		} else {
			this.gpKeys[this.curSelected] = this.tempKey;
			this.lastKey = r;
		}
	}
	,lastKey: null
	,addKey: function(r) {
		var shouldReturn = true;
		var notAllowed = [];
		var _g = 0;
		var _g1 = this.blacklist;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			notAllowed.push(x);
		}
		haxe_Log.trace(notAllowed,{ fileName : "source/KeyBindMenu.hx", lineNumber : 360, className : "KeyBindMenu", methodName : "addKey"});
		var _g = 0;
		var _g1 = this.keys.length;
		while(_g < _g1) {
			var x = _g++;
			var oK = this.keys[x];
			if(oK == r) {
				this.keys[x] = null;
			}
			if(notAllowed.indexOf(oK) != -1) {
				this.keys[x] = null;
				this.lastKey = oK;
				return;
			}
		}
		if(r.indexOf("NUMPAD") != -1) {
			this.keys[this.curSelected] = null;
			this.lastKey = r;
			return;
		}
		this.lastKey = "";
		if(shouldReturn) {
			this.keys[this.curSelected] = r;
			flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
		} else {
			this.keys[this.curSelected] = this.tempKey;
			this.lastKey = r;
		}
	}
	,changeItem: function(_amount) {
		if(_amount == null) {
			_amount = 0;
		}
		this.curSelected += _amount;
		if(this.curSelected > 3) {
			this.curSelected = 0;
		}
		if(this.curSelected < 0) {
			this.curSelected = 3;
		}
	}
	,__class__: KeyBindMenu
});
var KeyBinds = function() { };
$hxClasses["KeyBinds"] = KeyBinds;
KeyBinds.__name__ = "KeyBinds";
KeyBinds.resetBinds = function() {
	flixel_FlxG.save.data.upBind = "W";
	flixel_FlxG.save.data.downBind = "S";
	flixel_FlxG.save.data.leftBind = "A";
	flixel_FlxG.save.data.rightBind = "D";
	flixel_FlxG.save.data.killBind = "R";
	flixel_FlxG.save.data.gpupBind = "DPAD_UP";
	flixel_FlxG.save.data.gpdownBind = "DPAD_DOWN";
	flixel_FlxG.save.data.gpleftBind = "DPAD_LEFT";
	flixel_FlxG.save.data.gprightBind = "DPAD_RIGHT";
	PlayerSettings.player1.controls.loadKeyBinds();
};
KeyBinds.keyCheck = function() {
	if(flixel_FlxG.save.data.upBind == null) {
		flixel_FlxG.save.data.upBind = "W";
		haxe_Log.trace("No UP",{ fileName : "source/KeyBinds.hx", lineNumber : 36, className : "KeyBinds", methodName : "keyCheck"});
	}
	if(flixel_FlxG.save.data.upBind.indexOf("NUMPAD") != -1) {
		flixel_FlxG.save.data.upBind = "W";
	}
	if(flixel_FlxG.save.data.downBind == null) {
		flixel_FlxG.save.data.downBind = "S";
		haxe_Log.trace("No DOWN",{ fileName : "source/KeyBinds.hx", lineNumber : 42, className : "KeyBinds", methodName : "keyCheck"});
	}
	if(flixel_FlxG.save.data.downBind.indexOf("NUMPAD") != -1) {
		flixel_FlxG.save.data.downBind = "S";
	}
	if(flixel_FlxG.save.data.leftBind == null) {
		flixel_FlxG.save.data.leftBind = "A";
		haxe_Log.trace("No LEFT",{ fileName : "source/KeyBinds.hx", lineNumber : 48, className : "KeyBinds", methodName : "keyCheck"});
	}
	if(flixel_FlxG.save.data.leftBind.indexOf("NUMPAD") != -1) {
		flixel_FlxG.save.data.leftBind = "A";
	}
	if(flixel_FlxG.save.data.rightBind == null) {
		flixel_FlxG.save.data.rightBind = "D";
		haxe_Log.trace("No RIGHT",{ fileName : "source/KeyBinds.hx", lineNumber : 54, className : "KeyBinds", methodName : "keyCheck"});
	}
	if(flixel_FlxG.save.data.rightBind.indexOf("NUMPAD") != -1) {
		flixel_FlxG.save.data.rightBind = "D";
	}
	if(flixel_FlxG.save.data.gpupBind == null) {
		flixel_FlxG.save.data.gpupBind = "DPAD_UP";
		haxe_Log.trace("No GUP",{ fileName : "source/KeyBinds.hx", lineNumber : 61, className : "KeyBinds", methodName : "keyCheck"});
	}
	if(flixel_FlxG.save.data.gpdownBind == null) {
		flixel_FlxG.save.data.gpdownBind = "DPAD_DOWN";
		haxe_Log.trace("No GDOWN",{ fileName : "source/KeyBinds.hx", lineNumber : 65, className : "KeyBinds", methodName : "keyCheck"});
	}
	if(flixel_FlxG.save.data.gpleftBind == null) {
		flixel_FlxG.save.data.gpleftBind = "DPAD_LEFT";
		haxe_Log.trace("No GLEFT",{ fileName : "source/KeyBinds.hx", lineNumber : 69, className : "KeyBinds", methodName : "keyCheck"});
	}
	if(flixel_FlxG.save.data.gprightBind == null) {
		flixel_FlxG.save.data.gprightBind = "DPAD_RIGHT";
		haxe_Log.trace("No GRIGHT",{ fileName : "source/KeyBinds.hx", lineNumber : 73, className : "KeyBinds", methodName : "keyCheck"});
	}
	if(flixel_FlxG.save.data.killBind == null) {
		flixel_FlxG.save.data.killBind = "R";
		haxe_Log.trace("No KILL",{ fileName : "source/KeyBinds.hx", lineNumber : 77, className : "KeyBinds", methodName : "keyCheck"});
	}
	haxe_Log.trace("" + Std.string(flixel_FlxG.save.data.leftBind) + "-" + Std.string(flixel_FlxG.save.data.downBind) + "-" + Std.string(flixel_FlxG.save.data.upBind) + "-" + Std.string(flixel_FlxG.save.data.rightBind),{ fileName : "source/KeyBinds.hx", lineNumber : 80, className : "KeyBinds", methodName : "keyCheck"});
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $getIterator(it);
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
var LoadReplayState = function(TransIn,TransOut) {
	this.isSettingControl = false;
	this.actualNames = [];
	this.controlsStrings = [];
	this.songs = [];
	this.curSelected = 0;
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["LoadReplayState"] = LoadReplayState;
LoadReplayState.__name__ = "LoadReplayState";
LoadReplayState.__super__ = MusicBeatState;
LoadReplayState.prototype = $extend(MusicBeatState.prototype,{
	selector: null
	,curSelected: null
	,songs: null
	,controlsStrings: null
	,actualNames: null
	,grpControls: null
	,versionShit: null
	,poggerDetails: null
	,create: function() {
		var menuBG = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "menuDesat" + ".png","IMAGE",null));
		haxe_Log.trace(this.controlsStrings,{ fileName : "source/LoadReplayState.hx", lineNumber : 45, className : "LoadReplayState", methodName : "create"});
		this.controlsStrings.sort($bind(this,this.sortByDate));
		this.addWeek(["Bopeebo","Fresh","Dadbattle"],1,["dad"]);
		this.addWeek(["Spookeez","South","Monster"],2,["spooky"]);
		this.addWeek(["Pico","Philly","Blammed"],3,["pico"]);
		this.addWeek(["Satin-Panties","High","Milf"],4,["mom"]);
		this.addWeek(["Cocoa","Eggnog","Winter-Horrorland"],5,["parents-christmas","parents-christmas","monster-christmas"]);
		this.addWeek(["Senpai","Roses","Thorns"],6,["senpai","senpai","spirit"]);
		var _g = 0;
		var _g1 = this.controlsStrings.length;
		while(_g < _g1) {
			var i = _g++;
			var string = this.controlsStrings[i];
			this.actualNames[i] = string;
			var rep = Replay.LoadReplay(string);
			this.controlsStrings[i] = string.split("time")[0] + " " + CoolUtil.difficultyFromInt(rep.replay.songDiff).toUpperCase();
		}
		if(this.controlsStrings.length == 0) {
			this.controlsStrings.push("No Replays...");
		}
		menuBG.set_color(-1412611);
		menuBG.setGraphicSize(menuBG.get_width() * 1.1 | 0);
		menuBG.updateHitbox();
		menuBG.screenCenter();
		menuBG.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(menuBG);
		this.grpControls = new flixel_group_FlxTypedGroup();
		this.add(this.grpControls);
		var _g = 0;
		var _g1 = this.controlsStrings.length;
		while(_g < _g1) {
			var i = _g++;
			var controlLabel = new Alphabet(0,70 * i + 30,this.controlsStrings[i],true,false);
			controlLabel.isMenuItem = true;
			controlLabel.targetY = i;
			this.grpControls.add(controlLabel);
		}
		this.versionShit = new flixel_text_FlxText(5,flixel_FlxG.height - 34,0,"Replay Loader (ESCAPE TO GO BACK)\nNOTICE!!!! Replays are in a beta stage, and they are probably not 100% correct. expect misses and other stuff that isn't there!\n",12);
		this.versionShit.scrollFactor.set();
		this.versionShit.setFormat("VCR OSD Mono",16,-1,"left",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.add(this.versionShit);
		this.poggerDetails = new flixel_text_FlxText(5,34,0,"Replay Details - \nnone",12);
		this.poggerDetails.scrollFactor.set();
		this.poggerDetails.setFormat("VCR OSD Mono",16,-1,"left",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.add(this.poggerDetails);
		this.changeSelection(0);
		MusicBeatState.prototype.create.call(this);
	}
	,sortByDate: function(a,b) {
		var aTime = parseFloat(a.split("time")[1]) / 1000;
		var bTime = parseFloat(b.split("time")[1]) / 1000;
		return bTime - aTime | 0;
	}
	,getWeekNumbFromSong: function(songName) {
		var week = 0;
		var _g = 0;
		var _g1 = this.songs.length;
		while(_g < _g1) {
			var i = _g++;
			var pog = this.songs[i];
			if(pog.songName == songName) {
				week = pog.week;
			}
		}
		return week;
	}
	,addSong: function(songName,weekNum,songCharacter) {
		this.songs.push(new SongMetadata(songName,weekNum,songCharacter));
	}
	,addWeek: function(songs,weekNum,songCharacters) {
		if(songCharacters == null) {
			songCharacters = ["bf"];
		}
		var num = 0;
		var _g = 0;
		while(_g < songs.length) {
			var song = songs[_g];
			++_g;
			this.addSong(song,weekNum,songCharacters[num]);
			if(songCharacters.length != 1) {
				++num;
			}
		}
	}
	,update: function(elapsed) {
		MusicBeatState.prototype.update.call(this,elapsed);
		if(PlayerSettings.player1.controls._back.check()) {
			var nextState = new OptionsMenu();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		if(PlayerSettings.player1.controls._upP.check()) {
			this.changeSelection(-1);
		}
		if(PlayerSettings.player1.controls._downP.check()) {
			this.changeSelection(1);
		}
		if(PlayerSettings.player1.controls._accept.check() && this.grpControls.members[this.curSelected].text != "No Replays...") {
			haxe_Log.trace("loading " + this.actualNames[this.curSelected],{ fileName : "source/LoadReplayState.hx", lineNumber : 160, className : "LoadReplayState", methodName : "update"});
			PlayState.rep = Replay.LoadReplay(this.actualNames[this.curSelected]);
			PlayState.loadRep = true;
			if(PlayState.rep.replay.replayGameVer == Replay.version) {
				var songFormat = StringTools.replace(PlayState.rep.replay.songName," ","-");
				switch(songFormat) {
				case "Dad-Battle":
					songFormat = "Dadbattle";
					break;
				case "Philly-Nice":
					songFormat = "Philly";
					break;
				case "dad-battle":
					songFormat = "Dadbattle";
					break;
				case "philly-nice":
					songFormat = "Philly";
					break;
				}
				var poop = "";
				PlayState.isSM = PlayState.rep.replay.sm;
				poop = Highscore.formatSong(songFormat,PlayState.rep.replay.songDiff);
				try {
					if(PlayState.isSM) {
						PlayState.SONG = Song.loadFromJsonRAW(poop);
					} else {
						PlayState.SONG = Song.loadFromJson(poop,PlayState.rep.replay.songName);
					}
				} catch( _g ) {
					lime_app_Application.current.__window.alert("Failed to load the song! Does the JSON exist?","Replays");
					return;
				}
				PlayState.isStoryMode = false;
				PlayState.storyDifficulty = PlayState.rep.replay.songDiff;
				PlayState.storyWeek = this.getWeekNumbFromSong(PlayState.rep.replay.songName);
				var nextState = LoadingState.getNextState(new PlayState(),false);
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else {
				PlayState.rep = null;
				PlayState.loadRep = false;
			}
		}
	}
	,isSettingControl: null
	,changeSelection: function(change) {
		if(change == null) {
			change = 0;
		}
		flixel_FlxG.sound.play(Paths.sound("scrollMenu"),0.4);
		this.curSelected += change;
		if(this.curSelected < 0) {
			this.curSelected = this.grpControls.length - 1;
		}
		if(this.curSelected >= this.grpControls.length) {
			this.curSelected = 0;
		}
		var rep = Replay.LoadReplay(this.actualNames[this.curSelected]);
		this.poggerDetails.set_text("Replay Details - \nDate Created: " + Std.string(rep.replay.timestamp) + "\nSong: " + rep.replay.songName + "\nReplay Version: " + rep.replay.replayGameVer + " (" + (rep.replay.replayGameVer != Replay.version ? "OUTDATED not useable!" : "Latest") + ")\n");
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.grpControls.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - this.curSelected;
			++bullShit;
			item.set_alpha(0.6);
			if(item.targetY == 0) {
				item.set_alpha(1);
			}
		}
	}
	,__class__: LoadReplayState
});
var LoadingState = function(target,stopMusic) {
	this.danceLeft = false;
	this.stopMusic = false;
	MusicBeatState.call(this);
	this.target = target;
	this.stopMusic = stopMusic;
};
$hxClasses["LoadingState"] = LoadingState;
LoadingState.__name__ = "LoadingState";
LoadingState.getSongPath = function() {
	var songLowercase = StringTools.replace(PlayState.SONG.song," ","-").toLowerCase();
	switch(songLowercase) {
	case "dad-battle":
		songLowercase = "dadbattle";
		break;
	case "philly-nice":
		songLowercase = "philly";
		break;
	}
	return "songs:assets/songs/" + songLowercase + "/Inst." + "mp3";
};
LoadingState.getVocalPath = function() {
	var songLowercase = StringTools.replace(PlayState.SONG.song," ","-").toLowerCase();
	switch(songLowercase) {
	case "dad-battle":
		songLowercase = "dadbattle";
		break;
	case "philly-nice":
		songLowercase = "philly";
		break;
	}
	return "songs:assets/songs/" + songLowercase + "/Voices." + "mp3";
};
LoadingState.loadAndSwitchState = function(target,stopMusic) {
	if(stopMusic == null) {
		stopMusic = false;
	}
	var nextState = LoadingState.getNextState(target,stopMusic);
	if(flixel_FlxG.game._state.switchTo(nextState)) {
		flixel_FlxG.game._requestedState = nextState;
	}
};
LoadingState.getNextState = function(target,stopMusic) {
	if(stopMusic == null) {
		stopMusic = false;
	}
	Paths.setCurrentLevel("week" + PlayState.storyWeek);
	var loaded = LoadingState.isSoundLoaded(LoadingState.getSongPath()) && (!PlayState.SONG.needsVoices || LoadingState.isSoundLoaded(LoadingState.getVocalPath())) && LoadingState.isLibraryLoaded("shared");
	if(!loaded) {
		return new LoadingState(target,stopMusic);
	}
	if(stopMusic && flixel_FlxG.sound.music != null) {
		var _this = flixel_FlxG.sound.music;
		_this.cleanup(_this.autoDestroy,true);
	}
	return target;
};
LoadingState.isSoundLoaded = function(path) {
	return openfl_utils_Assets.cache.hasSound(path);
};
LoadingState.isLibraryLoaded = function(library) {
	return openfl_utils_Assets.getLibrary(library) != null;
};
LoadingState.initSongsManifest = function() {
	var id = "songs";
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return lime_app_Future.withValue(library);
	}
	var path = id;
	var rootPath = null;
	var libraryPaths = lime_utils_Assets.libraryPaths;
	if(Object.prototype.hasOwnProperty.call(libraryPaths.h,id)) {
		path = libraryPaths.h[id];
		rootPath = haxe_io_Path.directory(path);
	} else {
		if(StringTools.endsWith(path,".bundle")) {
			rootPath = path;
			path += "/library.json";
		} else {
			rootPath = haxe_io_Path.directory(path);
		}
		path = lime_utils_Assets.__cacheBreak(path);
	}
	lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
		if(manifest == null) {
			promise.error("Cannot parse asset manifest for library \"" + id + "\"");
			return;
		}
		var library = lime_utils_AssetLibrary.fromManifest(manifest);
		if(library == null) {
			promise.error("Cannot open library \"" + id + "\"");
		} else {
			lime_utils_Assets.libraries.h[id] = library;
			library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
			promise.completeWith(lime_app_Future.withValue(library));
		}
	}).onError(function(_) {
		promise.error("There is no asset library with an ID of \"" + id + "\"");
	});
	return promise.future;
};
LoadingState.__super__ = MusicBeatState;
LoadingState.prototype = $extend(MusicBeatState.prototype,{
	target: null
	,stopMusic: null
	,callbacks: null
	,logo: null
	,gfDance: null
	,danceLeft: null
	,create: function() {
		var _gthis = this;
		this.logo = new flixel_FlxSprite(-150,-100);
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.logo.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "logoBumpin" + ".png","IMAGE",library),Paths.getPath("images/" + "logoBumpin" + ".xml","TEXT",library)));
		this.logo.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.logo.animation.addByPrefix("bump","logo bumpin",24);
		this.logo.animation.play("bump");
		this.logo.updateHitbox();
		this.gfDance = new flixel_FlxSprite(flixel_FlxG.width * 0.4,flixel_FlxG.height * 0.07);
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.gfDance.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "gfDanceTitle" + ".png","IMAGE",library),Paths.getPath("images/" + "gfDanceTitle" + ".xml","TEXT",library)));
		this.gfDance.animation.addByIndices("danceLeft","gfDance",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.gfDance.animation.addByIndices("danceRight","gfDance",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.gfDance.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(this.gfDance);
		this.add(this.logo);
		LoadingState.initSongsManifest().onComplete(function(lib) {
			_gthis.callbacks = new MultiCallback($bind(_gthis,_gthis.onLoad));
			var introComplete = _gthis.callbacks.add("introComplete");
			_gthis.checkLoadSong(LoadingState.getSongPath());
			if(PlayState.SONG.needsVoices) {
				_gthis.checkLoadSong(LoadingState.getVocalPath());
			}
			_gthis.checkLibrary("shared");
			if(PlayState.storyWeek > 0) {
				_gthis.checkLibrary("week" + PlayState.storyWeek);
			} else {
				_gthis.checkLibrary("tutorial");
			}
			var fadeTime = 0.5;
			flixel_FlxG.camera.fade(flixel_FlxG.camera.bgColor,fadeTime,true);
			new flixel_util_FlxTimer().start(fadeTime + 1.0,function(_) {
				introComplete();
			});
		});
	}
	,checkLoadSong: function(path) {
		if(!openfl_utils_Assets.cache.hasSound(path)) {
			var library = openfl_utils_Assets.getLibrary("songs");
			var symbolPath = path.split(":").pop();
			var callback = this.callbacks.add("song:" + path);
			openfl_utils_Assets.loadSound(path).onComplete(function(_) {
				callback();
			});
		}
	}
	,checkLibrary: function(library) {
		haxe_Log.trace(openfl_utils_Assets.hasLibrary(library),{ fileName : "source/LoadingState.hx", lineNumber : 95, className : "LoadingState", methodName : "checkLibrary"});
		if(openfl_utils_Assets.getLibrary(library) == null) {
			if(!Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraryPaths.h,library)) {
				throw haxe_Exception.thrown("Missing library: " + library);
			}
			var callback = this.callbacks.add("library:" + library);
			openfl_utils_Assets.loadLibrary(library).onComplete(function(_) {
				callback();
			});
		}
	}
	,beatHit: function() {
		MusicBeatState.prototype.beatHit.call(this);
		this.logo.animation.play("bump");
		this.danceLeft = !this.danceLeft;
		if(this.danceLeft) {
			this.gfDance.animation.play("danceRight");
		} else {
			this.gfDance.animation.play("danceLeft");
		}
	}
	,update: function(elapsed) {
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,onLoad: function() {
		if(this.stopMusic && flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		var nextState = this.target;
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
	}
	,destroy: function() {
		MusicBeatState.prototype.destroy.call(this);
		this.callbacks = null;
	}
	,__class__: LoadingState
});
var MultiCallback = function(callback,logId) {
	this.fired = [];
	this.unfired = new haxe_ds_StringMap();
	this.numRemaining = 0;
	this.length = 0;
	this.logId = null;
	this.callback = callback;
	this.logId = logId;
};
$hxClasses["MultiCallback"] = MultiCallback;
MultiCallback.__name__ = "MultiCallback";
MultiCallback.prototype = {
	callback: null
	,logId: null
	,length: null
	,numRemaining: null
	,unfired: null
	,fired: null
	,add: function(id) {
		if(id == null) {
			id = "untitled";
		}
		var _gthis = this;
		id = "" + this.length + ":" + id;
		this.length++;
		this.numRemaining++;
		var func = null;
		func = function() {
			if(Object.prototype.hasOwnProperty.call(_gthis.unfired.h,id)) {
				var _this = _gthis.unfired;
				if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
					delete(_this.h[id]);
				}
				_gthis.fired.push(id);
				_gthis.numRemaining--;
				if(_gthis.logId != null) {
					if(_gthis.logId != null) {
						haxe_Log.trace("" + _gthis.logId + ": " + ("fired " + id + ", " + _gthis.numRemaining + " remaining"),{ fileName : "source/LoadingState.hx", lineNumber : 305, className : "MultiCallback", methodName : "log"});
					}
				}
				if(_gthis.numRemaining == 0) {
					if(_gthis.logId != null) {
						if(_gthis.logId != null) {
							haxe_Log.trace("" + _gthis.logId + ": " + "all callbacks fired",{ fileName : "source/LoadingState.hx", lineNumber : 305, className : "MultiCallback", methodName : "log"});
						}
					}
					_gthis.callback();
				}
			} else if(_gthis.logId != null) {
				haxe_Log.trace("" + _gthis.logId + ": " + ("already fired " + id),{ fileName : "source/LoadingState.hx", lineNumber : 305, className : "MultiCallback", methodName : "log"});
			}
		};
		this.unfired.h[id] = func;
		return func;
	}
	,log: function(msg) {
		if(this.logId != null) {
			haxe_Log.trace("" + this.logId + ": " + msg,{ fileName : "source/LoadingState.hx", lineNumber : 305, className : "MultiCallback", methodName : "log"});
		}
	}
	,getFired: function() {
		return this.fired.slice();
	}
	,getUnfired: function() {
		var _g = [];
		var id = haxe_ds_StringMap.keysIterator(this.unfired.h);
		while(id.hasNext()) {
			var id1 = id.next();
			_g.push(id1);
		}
		return _g;
	}
	,__class__: MultiCallback
};
var MainMenuState = function(TransIn,TransOut) {
	this.selectedSomethin = false;
	this.optionShit = ["story mode","freeplay","donate","options"];
	this.curSelected = 0;
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["MainMenuState"] = MainMenuState;
MainMenuState.__name__ = "MainMenuState";
MainMenuState.__super__ = MusicBeatState;
MainMenuState.prototype = $extend(MusicBeatState.prototype,{
	curSelected: null
	,menuItems: null
	,optionShit: null
	,newGaming: null
	,newGaming2: null
	,magenta: null
	,camFollow: null
	,create: function() {
		var _gthis = this;
		this.clean();
		if(flixel_FlxG.sound.music._channel == null) {
			flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
		}
		this.persistentUpdate = this.persistentDraw = true;
		var bg = new flixel_FlxSprite(-100).loadGraphic(Paths.getPath("images/" + "menuBG" + ".png","IMAGE",null));
		bg.scrollFactor.set_x(0);
		bg.scrollFactor.set_y(0.10);
		bg.setGraphicSize(bg.get_width() * 1.1 | 0);
		bg.updateHitbox();
		bg.screenCenter();
		bg.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(bg);
		this.camFollow = new flixel_FlxObject(0,0,1,1);
		this.add(this.camFollow);
		this.magenta = new flixel_FlxSprite(-80).loadGraphic(Paths.getPath("images/" + "menuDesat" + ".png","IMAGE",null));
		this.magenta.scrollFactor.set_x(0);
		this.magenta.scrollFactor.set_y(0.10);
		this.magenta.setGraphicSize(this.magenta.get_width() * 1.1 | 0);
		this.magenta.updateHitbox();
		this.magenta.screenCenter();
		this.magenta.set_visible(false);
		this.magenta.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.magenta.set_color(-167525);
		this.add(this.magenta);
		this.menuItems = new flixel_group_FlxTypedGroup();
		this.add(this.menuItems);
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		var tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "FNF_main_menu_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "FNF_main_menu_assets" + ".xml","TEXT",library));
		var _g = 0;
		var _g1 = this.optionShit.length;
		while(_g < _g1) {
			var i = _g++;
			var menuItem = new flixel_FlxSprite(0,flixel_FlxG.height * 1.6);
			menuItem.set_frames(tex);
			menuItem.animation.addByPrefix("idle",this.optionShit[i] + " basic",24);
			menuItem.animation.addByPrefix("selected",this.optionShit[i] + " white",24);
			menuItem.animation.play("idle");
			menuItem.ID = i;
			menuItem.screenCenter(flixel_util_FlxAxes.X);
			this.menuItems.add(menuItem);
			menuItem.scrollFactor.set();
			menuItem.set_antialiasing(flixel_FlxG.save.data.antialiasing);
			if(MainMenuState.firstStart) {
				flixel_tweens_FlxTween.tween(menuItem,{ y : 60 + i * 160},1 + i * 0.25,{ ease : flixel_tweens_FlxEase.expoInOut, onComplete : function(flxTween) {
					MainMenuState.finishedFunnyMove = true;
					_gthis.changeItem();
				}});
			} else {
				menuItem.set_y(60 + i * 160);
			}
		}
		MainMenuState.firstStart = false;
		flixel_FlxG.camera.follow(this.camFollow,null,0.60 * (60 / flixel_FlxG.save.data.fpsCap));
		var versionShit = new flixel_text_FlxText(5,flixel_FlxG.height - 18,0,MainMenuState.gameVer + (Main.watermarks ? " FNF - " + MainMenuState.kadeEngineVer + " Kade Engine" : ""),12);
		versionShit.scrollFactor.set();
		versionShit.setFormat("VCR OSD Mono",16,-1,"left",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.add(versionShit);
		if(flixel_FlxG.save.data.dfjk) {
			PlayerSettings.player1.controls.setKeyboardScheme(KeyboardScheme.Solo,true);
		} else {
			PlayerSettings.player1.controls.setKeyboardScheme(KeyboardScheme.Duo(true),true);
		}
		this.changeItem();
		MusicBeatState.prototype.create.call(this);
	}
	,selectedSomethin: null
	,update: function(elapsed) {
		var _gthis = this;
		if(flixel_FlxG.sound.music._volume < 0.8) {
			var _g = flixel_FlxG.sound.music;
			_g.set_volume(_g._volume + 0.5 * flixel_FlxG.elapsed);
		}
		if(!this.selectedSomethin) {
			var gamepad = flixel_FlxG.gamepads.lastActive;
			if(gamepad != null) {
				var _this = gamepad.justPressed;
				var id = 11;
				var _this1 = _this.gamepad;
				var Status = _this.status;
				var tmp;
				switch(id) {
				case -2:
					tmp = _this1.anyButton(Status);
					break;
				case -1:
					tmp = !_this1.anyButton(Status);
					break;
				default:
					var RawID = _this1.mapping.getRawID(id);
					var button = _this1.buttons[RawID];
					tmp = button != null && button.hasState(Status);
				}
				if(tmp) {
					flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
					this.changeItem(-1);
				}
				var _this = gamepad.justPressed;
				var id = 12;
				var _this1 = _this.gamepad;
				var Status = _this.status;
				var tmp;
				switch(id) {
				case -2:
					tmp = _this1.anyButton(Status);
					break;
				case -1:
					tmp = !_this1.anyButton(Status);
					break;
				default:
					var RawID = _this1.mapping.getRawID(id);
					var button = _this1.buttons[RawID];
					tmp = button != null && button.hasState(Status);
				}
				if(tmp) {
					flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
					this.changeItem(1);
				}
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(38,_this.status)) {
				flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
				this.changeItem(-1);
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(40,_this.status)) {
				flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
				this.changeItem(1);
			}
			if(PlayerSettings.player1.controls._back.check()) {
				var nextState = new TitleState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
			if(PlayerSettings.player1.controls._accept.check()) {
				if(this.optionShit[this.curSelected] == "donate") {
					this.fancyOpenURL("https://ninja-muffin24.itch.io/funkin");
				} else {
					this.selectedSomethin = true;
					flixel_FlxG.sound.play(Paths.sound("confirmMenu"));
					if(flixel_FlxG.save.data.flashing) {
						flixel_effects_FlxFlicker.flicker(this.magenta,1.1,0.15,false);
					}
					this.menuItems.forEach(function(spr) {
						if(_gthis.curSelected != spr.ID) {
							flixel_tweens_FlxTween.tween(spr,{ alpha : 0},1.3,{ ease : flixel_tweens_FlxEase.quadOut, onComplete : function(twn) {
								spr.kill();
							}});
						} else if(flixel_FlxG.save.data.flashing) {
							flixel_effects_FlxFlicker.flicker(spr,1,0.06,false,false,function(flick) {
								_gthis.goToState();
							});
						} else {
							new flixel_util_FlxTimer().start(1,function(tmr) {
								_gthis.goToState();
							});
						}
					});
				}
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
		this.menuItems.forEach(function(spr) {
			spr.screenCenter(flixel_util_FlxAxes.X);
		});
	}
	,goToState: function() {
		var daChoice = this.optionShit[this.curSelected];
		switch(daChoice) {
		case "freeplay":
			var nextState = new FreeplayState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
			haxe_Log.trace("Freeplay Menu Selected",{ fileName : "source/MainMenuState.hx", lineNumber : 250, className : "MainMenuState", methodName : "goToState"});
			break;
		case "options":
			var nextState = new OptionsMenu();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
			break;
		case "story mode":
			var nextState = new StoryMenuState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
			haxe_Log.trace("Story Menu Selected",{ fileName : "source/MainMenuState.hx", lineNumber : 246, className : "MainMenuState", methodName : "goToState"});
			break;
		}
	}
	,changeItem: function(huh) {
		if(huh == null) {
			huh = 0;
		}
		var _gthis = this;
		if(MainMenuState.finishedFunnyMove) {
			this.curSelected += huh;
			if(this.curSelected >= this.menuItems.length) {
				this.curSelected = 0;
			}
			if(this.curSelected < 0) {
				this.curSelected = this.menuItems.length - 1;
			}
		}
		this.menuItems.forEach(function(spr) {
			spr.animation.play("idle");
			if(spr.ID == _gthis.curSelected && MainMenuState.finishedFunnyMove) {
				spr.animation.play("selected");
				_gthis.camFollow.setPosition(spr.getGraphicMidpoint().x,spr.getGraphicMidpoint().y);
			}
			spr.updateHitbox();
		});
	}
	,__class__: MainMenuState
});
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = "ManifestResources";
ManifestResources.preloadLibraries = null;
ManifestResources.preloadLibraryNames = null;
ManifestResources.rootPath = null;
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "./";
	}
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf);
	var bundle;
	var v = ManifestResources.rootPath + "manifest/songs.json";
	lime_utils_Assets.libraryPaths.h["songs"] = v;
	var v = ManifestResources.rootPath + "manifest/shared.json";
	lime_utils_Assets.libraryPaths.h["shared"] = v;
	var v = ManifestResources.rootPath + "manifest/tutorial.json";
	lime_utils_Assets.libraryPaths.h["tutorial"] = v;
	var v = ManifestResources.rootPath + "manifest/week1.json";
	lime_utils_Assets.libraryPaths.h["week1"] = v;
	var v = ManifestResources.rootPath + "manifest/week2.json";
	lime_utils_Assets.libraryPaths.h["week2"] = v;
	var v = ManifestResources.rootPath + "manifest/week3.json";
	lime_utils_Assets.libraryPaths.h["week3"] = v;
	var v = ManifestResources.rootPath + "manifest/week4.json";
	lime_utils_Assets.libraryPaths.h["week4"] = v;
	var v = ManifestResources.rootPath + "manifest/week5.json";
	lime_utils_Assets.libraryPaths.h["week5"] = v;
	var v = ManifestResources.rootPath + "manifest/week6.json";
	lime_utils_Assets.libraryPaths.h["week6"] = v;
	var v = ManifestResources.rootPath + "manifest/sm.json";
	lime_utils_Assets.libraryPaths.h["sm"] = v;
	var data = "{\"name\":null,\"assets\":\"aoy4:pathy46:assets%2Fvideos%2FdaWeirdVid%2FdontDelete.webmy4:sizei10965y4:typey6:BINARYy2:idR1y7:preloadtgoR0y41:assets%2Fdata%2Fsenpai%2Fsenpai-hard.jsonR2i10111R3y4:TEXTR5R7R6tgoR0y36:assets%2Fdata%2Fsenpai%2Fsenpai.jsonR2i9463R3R8R5R9R6tgoR0y41:assets%2Fdata%2Fsenpai%2Fsenpai-easy.jsonR2i8596R3R8R5R10R6tgoR0y35:assets%2Fdata%2Fsenpai%2F-50.offsetR2i1R3R4R5R11R6tgoR0y37:assets%2Fdata%2Fsenpai%2Fdialogue.txtR2i162R3R8R5R12R6tgoR0y39:assets%2Fdata%2Froses%2Froses-easy.jsonR2i5968R3R8R5R13R6tgoR0y39:assets%2Fdata%2Froses%2Froses-hard.jsonR2i8755R3R8R5R14R6tgoR0y34:assets%2Fdata%2Froses%2Froses.jsonR2i7386R3R8R5R15R6tgoR0y36:assets%2Fdata%2Froses%2Fdialogue.txtR2i153R3R8R5R16R6tgoR0y34:assets%2Fdata%2Froses%2F-30.offsetR2i1R3R4R5R17R6tgoR0y33:assets%2Fdata%2FnoteStyleList.txtR2i12R3R8R5R18R6tgoR0y41:assets%2Fdata%2Fphilly%2Fphilly-hard.jsonR2i11686R3R8R5R19R6tgoR0y33:assets%2Fdata%2Fphilly%2F0.offsetR2i1R3R4R5R20R6tgoR0y36:assets%2Fdata%2Fphilly%2Fphilly.jsonR2i9559R3R8R5R21R6tgoR0y41:assets%2Fdata%2Fphilly%2Fphilly-easy.jsonR2i7783R3R8R5R22R6tgoR0y33:assets%2Fdata%2FspecialThanks.txtR2i300R3R8R5R23R6tgoR0y32:assets%2Fdata%2Ftest%2Ftest.jsonR2i12027R3R8R5R24R6tgoR0y42:assets%2Fdata%2Fdadbattle%2Fdadbattle.jsonR2i8913R3R8R5R25R6tgoR0y47:assets%2Fdata%2Fdadbattle%2Fdadbattle-easy.jsonR2i7937R3R8R5R26R6tgoR0y36:assets%2Fdata%2Fdadbattle%2F0.offsetR2i1R3R4R5R27R6tgoR0y47:assets%2Fdata%2Fdadbattle%2Fdadbattle-hard.jsonR2i9756R3R8R5R28R6tgoR0y39:assets%2Fdata%2Fsouth%2Fsouth-easy.jsonR2i8020R3R8R5R29R6tgoR0y34:assets%2Fdata%2Fsouth%2Fsouth.jsonR2i9486R3R8R5R30R6tgoR0y32:assets%2Fdata%2Fsouth%2F0.offsetR2i1R3R4R5R31R6tgoR0y39:assets%2Fdata%2Fsouth%2Fsouth-hard.jsonR2i9549R3R8R5R32R6tgoR0y34:assets%2Fdata%2Fridge%2Fridge.jsonR2i34473R3R8R5R33R6tgoR0y43:assets%2Fdata%2Fmonster%2Fmonster-easy.jsonR2i11767R3R8R5R34R6tgoR0y38:assets%2Fdata%2Fmonster%2Fmonster.jsonR2i13029R3R8R5R35R6tgoR0y34:assets%2Fdata%2Fmonster%2F0.offsetR2i1R3R4R5R36R6tgoR0y43:assets%2Fdata%2Fmonster%2Fmonster-hard.jsonR2i13683R3R8R5R37R6tgoR0y63:assets%2Fdata%2Fwinter-horrorland%2Fwinter-horrorland-easy.jsonR2i11665R3R8R5R38R6tgoR0y44:assets%2Fdata%2Fwinter-horrorland%2F0.offsetR2i1R3R4R5R39R6tgoR0y63:assets%2Fdata%2Fwinter-horrorland%2Fwinter-horrorland-hard.jsonR2i14137R3R8R5R40R6tgoR0y58:assets%2Fdata%2Fwinter-horrorland%2Fwinter-horrorland.jsonR2i12543R3R8R5R41R6tgoR0y33:assets%2Fdata%2FcharacterList.txtR2i146R3R8R5R42R6tgoR0y29:assets%2Fdata%2Fmain-view.xmlR2i123R3R8R5R43R6tgoR0y34:assets%2Fdata%2Fsmash%2Fsmash.jsonR2i102R3R8R5R44R6tgoR0y29:assets%2Fdata%2FstageList.txtR2i59R3R8R5R45R6tgoR0y39:assets%2Fdata%2Fcocoa%2Fcocoa-easy.jsonR2i6275R3R8R5R46R6tgoR0y39:assets%2Fdata%2Fcocoa%2Fcocoa-hard.jsonR2i8808R3R8R5R47R6tgoR0y34:assets%2Fdata%2Fcocoa%2Fcocoa.jsonR2i7187R3R8R5R48R6tgoR0y32:assets%2Fdata%2Fcocoa%2F0.offsetR2i1R3R4R5R49R6tgoR0y45:assets%2Fdata%2Ftutorial%2Ftutorial-easy.jsonR2i5739R3R8R5R50R6tgoR0y39:assets%2Fdata%2Ftutorial%2Fmodchart.luaR2i622R3R8R5R51R6tgoR0y40:assets%2Fdata%2Ftutorial%2Ftutorial.jsonR2i5739R3R8R5R52R6tgoR0y35:assets%2Fdata%2Ftutorial%2F0.offsetR2i1R3R4R5R53R6tgoR0y45:assets%2Fdata%2Ftutorial%2Ftutorial-hard.jsonR2i6335R3R8R5R54R6tgoR0y50:assets%2Fdata%2Fsatin-panties%2Fsatin-panties.jsonR2i10126R3R8R5R55R6tgoR0y40:assets%2Fdata%2Fsatin-panties%2F0.offsetR2i1R3R4R5R56R6tgoR0y55:assets%2Fdata%2Fsatin-panties%2Fsatin-panties-easy.jsonR2i8430R3R8R5R57R6tgoR0y55:assets%2Fdata%2Fsatin-panties%2Fsatin-panties-hard.jsonR2i30817R3R8R5R58R6tgoR0y34:assets%2Fdata%2Ffresh%2Ffresh.jsonR2i6493R3R8R5R59R6tgoR0y39:assets%2Fdata%2Ffresh%2Ffresh-hard.jsonR2i6905R3R8R5R60R6tgoR0y32:assets%2Fdata%2Ffresh%2F0.offsetR2i1R3R4R5R61R6tgoR0y39:assets%2Fdata%2Ffresh%2Ffresh-easy.jsonR2i5857R3R8R5R62R6tgoR0y37:assets%2Fdata%2Fhigh%2Fhigh-hard.jsonR2i9857R3R8R5R63R6tgoR0y31:assets%2Fdata%2Fhigh%2F0.offsetR2i1R3R4R5R64R6tgoR0y37:assets%2Fdata%2Fhigh%2Fhigh-easy.jsonR2i7494R3R8R5R65R6tgoR0y32:assets%2Fdata%2Fhigh%2Fhigh.jsonR2i8511R3R8R5R66R6tgoR0y43:assets%2Fdata%2Fblammed%2Fblammed-hard.jsonR2i11443R3R8R5R67R6tgoR0y38:assets%2Fdata%2Fblammed%2Fblammed.jsonR2i9307R3R8R5R68R6tgoR0y34:assets%2Fdata%2Fblammed%2F0.offsetR2i1R3R4R5R69R6tgoR0y43:assets%2Fdata%2Fblammed%2Fblammed-easy.jsonR2i8228R3R8R5R70R6tgoR0y36:assets%2Fdata%2Feggnog%2Feggnog.jsonR2i9182R3R8R5R71R6tgoR0y33:assets%2Fdata%2Feggnog%2F0.offsetR2i1R3R4R5R72R6tgoR0y41:assets%2Fdata%2Feggnog%2Feggnog-easy.jsonR2i8310R3R8R5R73R6tgoR0y41:assets%2Fdata%2Feggnog%2Feggnog-hard.jsonR2i10238R3R8R5R74R6tgoR0y36:assets%2Fdata%2FfreeplaySonglist.txtR2i333R3R8R5R75R6tgoR0y28:assets%2Fdata%2Fcontrols.txtR2i324R3R8R5R76R6tgoR0y31:assets%2Fdata%2Fmilf%2F0.offsetR2i1R3R4R5R77R6tgoR0y32:assets%2Fdata%2Fmilf%2Fmilf.jsonR2i14047R3R8R5R78R6tgoR0y37:assets%2Fdata%2Fmilf%2Fmilf-easy.jsonR2i12645R3R8R5R79R6tgoR0y37:assets%2Fdata%2Fmilf%2Fmilf-hard.jsonR2i16614R3R8R5R80R6tgoR0y38:assets%2Fdata%2Fbopeebo%2Fbopeebo.jsonR2i4044R3R8R5R81R6tgoR0y43:assets%2Fdata%2Fbopeebo%2Fbopeebo-hard.jsonR2i4140R3R8R5R82R6tgoR0y43:assets%2Fdata%2Fbopeebo%2Fbopeebo-easy.jsonR2i3912R3R8R5R83R6tgoR0y34:assets%2Fdata%2Fbopeebo%2F0.offsetR2i1R3R4R5R84R6tgoR0y37:assets%2Fdata%2Fpico%2Fpico-easy.jsonR2i5669R3R8R5R85R6tgoR0y31:assets%2Fdata%2Fpico%2F0.offsetR2i1R3R4R5R86R6tgoR0y32:assets%2Fdata%2Fpico%2Fpico.jsonR2i6815R3R8R5R87R6tgoR0y37:assets%2Fdata%2Fpico%2Fpico-hard.jsonR2i7846R3R8R5R88R6tgoR0y34:assets%2Fdata%2Fdata-goes-here.txtR2zR3R8R5R89R6tgoR0y40:assets%2Fdata%2Fspookeez%2Fspookeez.jsonR2i8891R3R8R5R90R6tgoR0y45:assets%2Fdata%2Fspookeez%2Fspookeez-hard.jsonR2i9445R3R8R5R91R6tgoR0y35:assets%2Fdata%2Fspookeez%2F0.offsetR2i1R3R4R5R92R6tgoR0y45:assets%2Fdata%2Fspookeez%2Fspookeez-easy.jsonR2i7981R3R8R5R93R6tgoR0y44:assets%2Fdata%2Foffsettest%2Foffsettest.jsonR2i5741R3R8R5R94R6tgoR0y36:assets%2Fdata%2Fthorns%2Fthorns.jsonR2i12110R3R8R5R95R6tgoR0y41:assets%2Fdata%2Fthorns%2Fthorns-easy.jsonR2i10100R3R8R5R96R6tgoR0y41:assets%2Fdata%2Fthorns%2Fthorns-hard.jsonR2i14565R3R8R5R97R6tgoR0y33:assets%2Fdata%2Fthorns%2F0.offsetR2i1R3R4R5R98R6tgoR0y37:assets%2Fdata%2Fthorns%2Fdialogue.txtR2i305R3R8R5R99R6tgoR0y29:assets%2Fdata%2FweekNames.txtR2i97R3R8R5R100R6tgoR0y29:assets%2Fdata%2FintroText.txtR2i1260R3R8R5R101R6tgoR0y33:assets%2Fdata%2FgfVersionList.txtR2i31R3R8R5R102R6tgoR0y32:assets%2Fimages%2FtitleEnter.xmlR2i4875R3R8R5R103R6tgoR0y34:assets%2Fimages%2FgfDanceTitle.xmlR2i4259R3R8R5R104R6tgoR0y36:assets%2Fimages%2FKadeEngineLogo.pngR2i259663R3y5:IMAGER5R105R6tgoR0y26:assets%2Fimages%2Fnum9.pngR2i3687R3R106R5R107R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek2.pngR2i6517R3R106R5R108R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek4.pngR2i6262R3R106R5R109R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek0.pngR2i7056R3R106R5R110R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek5.pngR2i6440R3R106R5R111R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek3.pngR2i7148R3R106R5R112R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek6.pngR2i8345R3R106R5R113R6tgoR0y39:assets%2Fimages%2Fstorymenu%2Fweek1.pngR2i6261R3R106R5R114R6tgoR0y30:assets%2Fimages%2Falphabet.pngR2i133325R3R106R5R115R6tgoR0y37:assets%2Fimages%2Fnewgrounds_logo.pngR2i57747R3R106R5R116R6tgoR0y26:assets%2Fimages%2Fnum8.pngR2i3914R3R106R5R117R6tgoR0y26:assets%2Fimages%2Fnum3.pngR2i4022R3R106R5R118R6tgoR0y42:assets%2Fimages%2FKadeEngineLogoBumpin.pngR2i1131603R3R106R5R119R6tgoR0y34:assets%2Fimages%2FgfDanceTitle.pngR2i1221436R3R106R5R120R6tgoR0y39:assets%2Fimages%2FKadeEngineLogoOld.pngR2i118097R3R106R5R121R6tgoR0y30:assets%2Fimages%2Falphabet.xmlR2i42116R3R8R5R122R6tgoR0y32:assets%2Fimages%2FtitleEnter.pngR2i1449202R3R106R5R123R6tgoR0y42:assets%2Fimages%2FFNF_main_menu_assets.xmlR2i4755R3R8R5R124R6tgoR0y26:assets%2Fimages%2Fnum4.pngR2i3989R3R106R5R125R6tgoR0y32:assets%2Fimages%2FlogoBumpin.xmlR2i2177R3R8R5R126R6tgoR0y35:assets%2Fimages%2FmenuBGMagenta.pngR2i553468R3R106R5R127R6tgoR0y42:assets%2Fimages%2FFNF_main_menu_assets.pngR2i281298R3R106R5R128R6tgoR0y49:assets%2Fimages%2Fcampaign_menu_UI_characters.pngR2i2285826R3R106R5R129R6tgoR0y26:assets%2Fimages%2Fnum6.pngR2i4181R3R106R5R130R6tgoR0y26:assets%2Fimages%2Fnum1.pngR2i3390R3R106R5R131R6tgoR0y32:assets%2Fimages%2FlogoBumpin.pngR2i592724R3R106R5R132R6tgoR0y43:assets%2Fimages%2Ficons%2Ficon-bf-pixel.pngR2i1159R3R106R5R133R6tgoR0y37:assets%2Fimages%2Ficons%2Ficon-gf.pngR2i10552R3R106R5R134R6tgoR0y42:assets%2Fimages%2Ficons%2Ficon-parents.pngR2i33065R3R106R5R135R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-senpai.pngR2i1249R3R106R5R136R6tgoR0y37:assets%2Fimages%2Ficons%2Ficon-bf.pngR2i14707R3R106R5R137R6tgoR0y39:assets%2Fimages%2Ficons%2Ficon-pico.pngR2i14427R3R106R5R138R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-spooky.pngR2i7200R3R106R5R139R6tgoR0y39:assets%2Fimages%2Ficons%2Ficon-face.pngR2i3634R3R106R5R140R6tgoR0y38:assets%2Fimages%2Ficons%2Ficon-mom.pngR2i9476R3R106R5R141R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-bf-old.pngR2i5826R3R106R5R142R6tgoR0y38:assets%2Fimages%2Ficons%2Ficon-dad.pngR2i18169R3R106R5R143R6tgoR0y42:assets%2Fimages%2Ficons%2Ficon-monster.pngR2i17869R3R106R5R144R6tgoR0y41:assets%2Fimages%2Ficons%2Ficon-spirit.pngR2i1127R3R106R5R145R6tgoR0y37:assets%2Fimages%2Ficons%2Ficon-sm.pngR2i7534R3R106R5R146R6tgoR0y42:assets%2Fimages%2Ficons%2Ficon-tankman.pngR2i3024R3R106R5R147R6tgoR0y45:assets%2Fimages%2Fcampaign_menu_UI_assets.pngR2i27171R3R106R5R148R6tgoR0y26:assets%2Fimages%2Fnum2.pngR2i3990R3R106R5R149R6tgoR0y45:assets%2Fimages%2Fcampaign_menu_UI_assets.xmlR2i1893R3R8R5R150R6tgoR0y26:assets%2Fimages%2Fnum5.pngR2i4113R3R106R5R151R6tgoR0y26:assets%2Fimages%2Flogo.pngR2i86924R3R106R5R152R6tgoR0y32:assets%2Fimages%2FmenuBGBlue.pngR2i614586R3R106R5R153R6tgoR0y31:assets%2Fimages%2FmenuDesat.pngR2i357911R3R106R5R154R6tgoR0y49:assets%2Fimages%2Fcampaign_menu_UI_characters.xmlR2i22475R3R8R5R155R6tgoR0y28:assets%2Fimages%2FmenuBG.pngR2i620342R3R106R5R156R6tgoR0y26:assets%2Fimages%2Fnum7.pngR2i3692R3R106R5R157R6tgoR0y26:assets%2Fimages%2Fnum0.pngR2i3738R3R106R5R158R6tgoR0y42:assets%2Fimages%2FKadeEngineLogoBumpin.xmlR2i2187R3R8R5R159R6tgoR2i3685843R3y5:MUSICR5y31:assets%2Fmusic%2FfreakyMenu.mp3y9:pathGroupaR161hR6tgoR2i17762R3R160R5y32:assets%2Fsounds%2FscrollMenu.mp3R162aR163hR6tgoR2i91950R3R160R5y33:assets%2Fsounds%2FconfirmMenu.mp3R162aR164hR6tgoR2i17762R3R160R5y32:assets%2Fsounds%2FcancelMenu.mp3R162aR165hR6tgoR0y48:mods%2FintroMod%2F_append%2Fdata%2FintroText.txtR2i20R3R8R5R166goR0y17:mods%2Freadme.txtR2i90R3R8R5R167goR0y18:mods%2FmodList.txtR2i8R3R8R5R168goR0y21:do%20NOT%20readme.txtR2i4326R3R8R5R169R6tgoR0y11:LICENSE.txtR2i11407R3R8R5R170R6tgoR2i14656R3y4:FONTy9:classNamey31:__ASSET__assets_fonts_pixel_otfR5y26:assets%2Ffonts%2Fpixel.otfR6tgoR2i75864R3R171R172y29:__ASSET__assets_fonts_vcr_ttfR5y24:assets%2Ffonts%2Fvcr.ttfR6tgoR0y34:assets%2Ffonts%2Ffonts-go-here.txtR2zR3R8R5R177R6tgoR2i39706R3R160R5y28:flixel%2Fsounds%2Fflixel.mp3R162aR178y28:flixel%2Fsounds%2Fflixel.ogghR6tgoR2i2114R3R160R5y26:flixel%2Fsounds%2Fbeep.mp3R162aR180y26:flixel%2Fsounds%2Fbeep.ogghR6tgoR2i5794R3y5:SOUNDR5R181R162aR180R181hgoR2i33629R3R182R5R179R162aR178R179hgoR2i15744R3R171R172y35:__ASSET__flixel_fonts_nokiafc22_ttfR5y30:flixel%2Ffonts%2Fnokiafc22.ttfR6tgoR2i29724R3R171R172y36:__ASSET__flixel_fonts_monsterrat_ttfR5y31:flixel%2Ffonts%2Fmonsterrat.ttfR6tgoR0y33:flixel%2Fimages%2Fui%2Fbutton.pngR2i519R3R106R5R187R6tgoR0y36:flixel%2Fimages%2Flogo%2Fdefault.pngR2i3280R3R106R5R188R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fchrome.pngR2i253R3R106R5R189R6tgoR0y42:flixel%2Fflixel-ui%2Fimg%2Fbutton_thin.pngR2i247R3R106R5R190R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fbutton.pngR2i433R3R106R5R191R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fradio_dot.pngR2i153R3R106R5R192R6tgoR0y46:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_up.pngR2i493R3R106R5R193R6tgoR0y38:flixel%2Fflixel-ui%2Fimg%2Fhilight.pngR2i129R3R106R5R194R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Fcheck_mark.pngR2i946R3R106R5R195R6tgoR0y49:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_right.pngR2i511R3R106R5R196R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Ftooltip_arrow.pngR2i18509R3R106R5R197R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Fchrome_inset.pngR2i192R3R106R5R198R6tgoR0y42:flixel%2Fflixel-ui%2Fimg%2Fchrome_flat.pngR2i212R3R106R5R199R6tgoR0y34:flixel%2Fflixel-ui%2Fimg%2Fbox.pngR2i912R3R106R5R200R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Fbutton_toggle.pngR2i534R3R106R5R201R6tgoR0y36:flixel%2Fflixel-ui%2Fimg%2Finvis.pngR2i128R3R106R5R202R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Ffinger_small.pngR2i294R3R106R5R203R6tgoR0y48:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_left.pngR2i459R3R106R5R204R6tgoR0y34:flixel%2Fflixel-ui%2Fimg%2Ftab.pngR2i201R3R106R5R205R6tgoR0y37:flixel%2Fflixel-ui%2Fimg%2Fswatch.pngR2i185R3R106R5R206R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fplus_mark.pngR2i147R3R106R5R207R6tgoR0y40:flixel%2Fflixel-ui%2Fimg%2Fcheck_box.pngR2i922R3R106R5R208R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Fminus_mark.pngR2i136R3R106R5R209R6tgoR0y48:flixel%2Fflixel-ui%2Fimg%2Fbutton_arrow_down.pngR2i446R3R106R5R210R6tgoR0y43:flixel%2Fflixel-ui%2Fimg%2Fchrome_light.pngR2i214R3R106R5R211R6tgoR0y36:flixel%2Fflixel-ui%2Fimg%2Fradio.pngR2i191R3R106R5R212R6tgoR0y41:flixel%2Fflixel-ui%2Fimg%2Ffinger_big.pngR2i1724R3R106R5R213R6tgoR0y44:flixel%2Fflixel-ui%2Fimg%2Fdropdown_mark.pngR2i156R3R106R5R214R6tgoR0y39:flixel%2Fflixel-ui%2Fimg%2Ftab_back.pngR2i210R3R106R5R215R6tgoR0y53:flixel%2Fflixel-ui%2Fxml%2Fdefault_loading_screen.xmlR2i1953R3R8R5R216R6tgoR0y39:flixel%2Fflixel-ui%2Fxml%2Fdefaults.xmlR2i1263R3R8R5R217R6tgoR0y44:flixel%2Fflixel-ui%2Fxml%2Fdefault_popup.xmlR2i1848R3R8R5R218R6tgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	var manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = "lime.text.Font";
lime_text_Font.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_text_Font.fromBytes(bytes));
};
lime_text_Font.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$text_$Font();
	return request.load(path).then(function(font) {
		if(font != null) {
			return lime_app_Future.withValue(font);
		} else {
			return lime_app_Future.withError("");
		}
	});
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,__init: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
			this.__init = true;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__initializeSource: function() {
		this.__init = true;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = $global.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 513, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 548, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__setSize: function(size) {
	}
	,__class__: lime_text_Font
};
var _$_$ASSET_$_$assets_$fonts_$pixel_$otf = $hx_exports["__ASSET__assets_fonts_pixel_otf"] = function() {
	this.ascender = 1125;
	this.descender = -250;
	this.height = 1375;
	this.numGlyphs = 262;
	this.underlinePosition = -143;
	this.underlineThickness = 20;
	this.unitsPerEM = 1000;
	this.name = "Pixel Arial 11 Bold";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__assets_fonts_pixel_otf"] = _$_$ASSET_$_$assets_$fonts_$pixel_$otf;
_$_$ASSET_$_$assets_$fonts_$pixel_$otf.__name__ = "__ASSET__assets_fonts_pixel_otf";
_$_$ASSET_$_$assets_$fonts_$pixel_$otf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$fonts_$pixel_$otf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$fonts_$pixel_$otf
});
var _$_$ASSET_$_$assets_$fonts_$vcr_$ttf = $hx_exports["__ASSET__assets_fonts_vcr_ttf"] = function() {
	this.ascender = 1800;
	this.descender = 0;
	this.height = 2000;
	this.numGlyphs = 204;
	this.underlinePosition = -292;
	this.underlineThickness = 150;
	this.unitsPerEM = 2048;
	this.name = "VCR OSD Mono";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__assets_fonts_vcr_ttf"] = _$_$ASSET_$_$assets_$fonts_$vcr_$ttf;
_$_$ASSET_$_$assets_$fonts_$vcr_$ttf.__name__ = "__ASSET__assets_fonts_vcr_ttf";
_$_$ASSET_$_$assets_$fonts_$vcr_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$assets_$fonts_$vcr_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$assets_$fonts_$vcr_$ttf
});
var _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf = $hx_exports["__ASSET__flixel_fonts_nokiafc22_ttf"] = function() {
	this.ascender = 2048;
	this.descender = -512;
	this.height = 2816;
	this.numGlyphs = 172;
	this.underlinePosition = -640;
	this.underlineThickness = 256;
	this.unitsPerEM = 2048;
	this.name = "Nokia Cellphone FC Small";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__flixel_fonts_nokiafc22_ttf"] = _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf;
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.__name__ = "__ASSET__flixel_fonts_nokiafc22_ttf";
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf
});
var _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf = $hx_exports["__ASSET__flixel_fonts_monsterrat_ttf"] = function() {
	this.ascender = 968;
	this.descender = -251;
	this.height = 1219;
	this.numGlyphs = 263;
	this.underlinePosition = -150;
	this.underlineThickness = 50;
	this.unitsPerEM = 1000;
	this.name = "Monsterrat";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__flixel_fonts_monsterrat_ttf"] = _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf;
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.__name__ = "__ASSET__flixel_fonts_monsterrat_ttf";
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = "openfl.text.Font";
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils_ByteArray.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromBytes = function(bytes) {
	return lime_text_Font.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromFile = function(path) {
	return lime_text_Font.loadFromFile(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.registerFont = function(font) {
	var instance = null;
	if(js_Boot.getClass(font) == null) {
		instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	} else {
		instance = js_Boot.__cast(font , openfl_text_Font);
	}
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		openfl_text_Font.__fontByName.h[instance.name] = instance;
	}
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,__initialized: null
	,__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,__initialize: function() {
		return this.__initialized;
	}
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: {set_fontName:"set_fontName",get_fontName:"get_fontName"}
});
var _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf = $hx_exports["__ASSET__OPENFL__assets_fonts_pixel_otf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$assets_$fonts_$pixel_$otf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_fonts_pixel_otf"] = _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf.__name__ = "__ASSET__OPENFL__assets_fonts_pixel_otf";
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$pixel_$otf
});
var _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf = $hx_exports["__ASSET__OPENFL__assets_fonts_vcr_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$assets_$fonts_$vcr_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__assets_fonts_vcr_ttf"] = _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf.__name__ = "__ASSET__OPENFL__assets_fonts_vcr_ttf";
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$assets_$fonts_$vcr_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf = $hx_exports["__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf"] = _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.__name__ = "__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf";
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf = $hx_exports["__ASSET__OPENFL__flixel_fonts_monsterrat_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__flixel_fonts_monsterrat_ttf"] = _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.__name__ = "__ASSET__OPENFL__flixel_fonts_monsterrat_ttf";
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf
});
var CharacterSetting = function(x,y,scale,flipped) {
	if(flipped == null) {
		flipped = false;
	}
	if(scale == null) {
		scale = 1.0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.scale = scale;
	this.flipped = flipped;
};
$hxClasses["CharacterSetting"] = CharacterSetting;
CharacterSetting.__name__ = "CharacterSetting";
CharacterSetting.prototype = {
	x: null
	,y: null
	,scale: null
	,flipped: null
	,__class__: CharacterSetting
};
var MenuCharacter = function(x,y,scale,flipped) {
	this.character = "";
	this.danceLeft = false;
	this.goesLeftNRight = false;
	this.flipped = false;
	flixel_FlxSprite.call(this,x,y);
	this.flipped = flipped;
	this.set_antialiasing(flixel_FlxG.save.data.antialiasing);
	var library = null;
	var usecahce = flixel_FlxG.save.data.cacheImages;
	usecahce = false;
	this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "campaign_menu_UI_characters" + ".png","IMAGE",library),Paths.getPath("images/" + "campaign_menu_UI_characters" + ".xml","TEXT",library)));
	this.animation.addByPrefix("bf","BF idle dance white",24,false);
	this.animation.addByPrefix("bfConfirm","BF HEY!!",24,false);
	this.animation.addByIndices("gf-left","GF Dancing Beat WHITE",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
	this.animation.addByIndices("gf-right","GF Dancing Beat WHITE",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
	this.animation.addByPrefix("dad","Dad idle dance BLACK LINE",24,false);
	this.animation.addByIndices("spooky-left","spooky dance idle BLACK LINES",[0,2,6],"",12,false);
	this.animation.addByIndices("spooky-right","spooky dance idle BLACK LINES",[8,10,12,14],"",12,false);
	this.animation.addByPrefix("pico","Pico Idle Dance",24,false);
	this.animation.addByPrefix("mom","Mom Idle BLACK LINES",24,false);
	this.animation.addByPrefix("parents-christmas","Parent Christmas Idle",24,false);
	this.animation.addByPrefix("senpai","SENPAI idle Black Lines",24,false);
	this.setGraphicSize(this.get_width() * scale | 0);
	this.updateHitbox();
};
$hxClasses["MenuCharacter"] = MenuCharacter;
MenuCharacter.__name__ = "MenuCharacter";
MenuCharacter.__super__ = flixel_FlxSprite;
MenuCharacter.prototype = $extend(flixel_FlxSprite.prototype,{
	flipped: null
	,goesLeftNRight: null
	,danceLeft: null
	,character: null
	,setCharacter: function(character) {
		var sameCharacter = character == this.character;
		this.character = character;
		if(character == "") {
			this.set_visible(false);
			return;
		} else {
			this.set_visible(true);
		}
		if(!sameCharacter) {
			this.bopHead(true);
		}
		var setting = MenuCharacter.settings.h[character];
		this.offset.set(setting.x,setting.y);
		this.setGraphicSize(this.get_width() * setting.scale | 0);
		this.set_flipX(setting.flipped != this.flipped);
	}
	,bopHead: function(LastFrame) {
		if(LastFrame == null) {
			LastFrame = false;
		}
		if(this.character == "gf" || this.character == "spooky") {
			this.danceLeft = !this.danceLeft;
			if(this.danceLeft) {
				this.animation.play(this.character + "-left",true);
			} else {
				this.animation.play(this.character + "-right",true);
			}
		} else {
			if(this.animation.get_name() == "bfConfirm") {
				return;
			}
			this.animation.play(this.character,true);
		}
		if(LastFrame) {
			this.animation.finish();
		}
	}
	,__class__: MenuCharacter
});
var MenuItem = function(x,y,weekNum) {
	if(weekNum == null) {
		weekNum = 0;
	}
	this.fakeFramerate = Math.round(1 / flixel_FlxG.elapsed / 10);
	this.isFlashing = false;
	this.flashingInt = 0;
	this.targetY = 0;
	flixel_group_FlxTypedSpriteGroup.call(this,x,y);
	this.week = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + ("storymenu/week" + weekNum) + ".png","IMAGE",null));
	this.add(this.week);
};
$hxClasses["MenuItem"] = MenuItem;
MenuItem.__name__ = "MenuItem";
MenuItem.__super__ = flixel_group_FlxTypedSpriteGroup;
MenuItem.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	targetY: null
	,week: null
	,flashingInt: null
	,isFlashing: null
	,startFlashing: function() {
		this.isFlashing = true;
	}
	,fakeFramerate: null
	,update: function(elapsed) {
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
		var a = this.y;
		this.set_y(a + 0.17 * (60 / flixel_FlxG.save.data.fpsCap) * (this.targetY * 120 + 480 - a));
		if(this.isFlashing) {
			this.flashingInt += 1;
		}
		if(this.flashingInt % this.fakeFramerate >= Math.floor(this.fakeFramerate / 2)) {
			this.week.set_color(-13369345);
		} else if(flixel_FlxG.save.data.flashing) {
			this.week.set_color(-1);
		}
	}
	,__class__: MenuItem
});
var flixel_util_FlxTypedSignal = {};
flixel_util_FlxTypedSignal.__properties__ = {get_dispatch:"get_dispatch"};
flixel_util_FlxTypedSignal.add = function(this1,listener) {
	this1.add(listener);
};
flixel_util_FlxTypedSignal.addOnce = function(this1,listener) {
	this1.addOnce(listener);
};
flixel_util_FlxTypedSignal.remove = function(this1,listener) {
	this1.remove(listener);
};
flixel_util_FlxTypedSignal.has = function(this1,listener) {
	return this1.has(listener);
};
flixel_util_FlxTypedSignal.removeAll = function(this1) {
	this1.removeAll();
};
flixel_util_FlxTypedSignal.get_dispatch = function(this1) {
	return this1.dispatch;
};
flixel_util_FlxTypedSignal.toSignal0 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal0();
};
flixel_util_FlxTypedSignal.toSignal1 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal1();
};
flixel_util_FlxTypedSignal.toSignal2 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal2();
};
flixel_util_FlxTypedSignal.toSignal3 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal3();
};
flixel_util_FlxTypedSignal.toSignal4 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal4();
};
var NGio = function(api,encKey,sessionId) {
	haxe_Log.trace("connecting to newgrounds",{ fileName : "source/NGio.hx", lineNumber : 63, className : "NGio", methodName : "new"});
	io_newgrounds_NG.createAndCheckSession(api,null,sessionId);
	io_newgrounds_NG.core.verbose = true;
	io_newgrounds_NG.core.initEncryption(encKey);
	haxe_Log.trace(io_newgrounds_NG.core.attemptingLogin,{ fileName : "source/NGio.hx", lineNumber : 71, className : "NGio", methodName : "new"});
	if(io_newgrounds_NG.core.attemptingLogin) {
		haxe_Log.trace("attempting login",{ fileName : "source/NGio.hx", lineNumber : 78, className : "NGio", methodName : "new"});
		io_newgrounds_NG.core.onLogin.add($bind(this,this.onNGLogin));
	} else {
		io_newgrounds_NG.core.requestLogin($bind(this,this.onNGLogin));
	}
};
$hxClasses["NGio"] = NGio;
NGio.__name__ = "NGio";
NGio.noLogin = function(api) {
	haxe_Log.trace("INIT NOLOGIN",{ fileName : "source/NGio.hx", lineNumber : 38, className : "NGio", methodName : "noLogin"});
	NGio.GAME_VER = "v" + lime_app_Application.current.meta.h["version"];
	if(api.length != 0) {
		io_newgrounds_NG.create(api);
		new flixel_util_FlxTimer().start(2,function(tmr) {
			var call = io_newgrounds_NG.core.calls.app.getCurrentVersion(NGio.GAME_VER).addDataHandler(function(response) {
				NGio.GAME_VER = response.result.data.current_version;
				NGio.GAME_VER_NUMS = StringTools.trim(NGio.GAME_VER.split(" ")[0]);
				haxe_Log.trace("CURRENT NG VERSION: " + NGio.GAME_VER,{ fileName : "source/NGio.hx", lineNumber : 51, className : "NGio", methodName : "noLogin"});
				haxe_Log.trace("CURRENT NG VERSION: " + NGio.GAME_VER_NUMS,{ fileName : "source/NGio.hx", lineNumber : 52, className : "NGio", methodName : "noLogin"});
				NGio.gotOnlineVer = true;
			});
			call.send();
		});
	}
};
NGio.postScore = function(score,song) {
	if(score == null) {
		score = 0;
	}
	if(NGio.isLoggedIn) {
		var id = io_newgrounds_NG.core.scoreBoards.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			var board = io_newgrounds_NG.core.scoreBoards.h[id1];
			if(song == board._data.name) {
				board.postScore(score,"Uhh meow?");
			}
		}
	}
};
NGio.logEvent = function(event) {
	io_newgrounds_NG.core.calls.event.logEvent(event).send();
	haxe_Log.trace("should have logged: " + event,{ fileName : "source/NGio.hx", lineNumber : 188, className : "NGio", methodName : "logEvent"});
};
NGio.unlockMedal = function(id) {
	if(NGio.isLoggedIn) {
		var medal = io_newgrounds_NG.core.medals.h[id];
		if(!medal._data.unlocked) {
			medal.sendUnlock();
		}
	}
};
NGio.prototype = {
	onNGLogin: function() {
		haxe_Log.trace("logged in! user:" + io_newgrounds_NG.core.get_user().name,{ fileName : "source/NGio.hx", lineNumber : 92, className : "NGio", methodName : "onNGLogin"});
		NGio.isLoggedIn = true;
		flixel_FlxG.save.data.sessionId = io_newgrounds_NG.core.sessionId;
		io_newgrounds_NG.core.requestMedals($bind(this,this.onNGMedalFetch));
		io_newgrounds_NG.core.requestScoreBoards($bind(this,this.onNGBoardsFetch));
		NGio.ngDataLoaded.dispatch();
	}
	,onNGMedalFetch: function() {
	}
	,onNGBoardsFetch: function() {
		haxe_Log.trace("shoulda got score by NOW!",{ fileName : "source/NGio.hx", lineNumber : 143, className : "NGio", methodName : "onNGBoardsFetch"});
	}
	,onNGScoresFetch: function() {
		NGio.scoreboardsLoaded = true;
		NGio.ngScoresLoaded.dispatch();
	}
	,__class__: NGio
};
var Note = function(strumTime,noteData,prevNote,sustainNote,inCharter,isAlt) {
	if(isAlt == null) {
		isAlt = false;
	}
	if(inCharter == null) {
		inCharter = false;
	}
	if(sustainNote == null) {
		sustainNote = false;
	}
	this.children = [];
	this.sustainActive = true;
	this.spotInLine = 0;
	this.parent = null;
	this.isParent = false;
	this.arrowAngles = [180,90,270,0];
	this.quantityColor = [Note.RED_NOTE,2,Note.BLUE_NOTE,2,Note.PURP_NOTE,2,Note.BLUE_NOTE,2];
	this.dataColor = ["purple","blue","green","red"];
	this.localAngle = 0;
	this.modAngle = 0;
	this.rating = "shit";
	this.noteYOff = 0;
	this.noteScore = 1;
	this.isAlt = false;
	this.noteSection = 0;
	this.originColor = 0;
	this.isSustainNote = false;
	this.sustainLength = 0;
	this.modifiedByLua = false;
	this.wasGoodHit = false;
	this.tooLate = false;
	this.canBeHit = false;
	this.rawNoteData = 0;
	this.noteData = 0;
	this.mustPress = false;
	this.rStrumTime = 0;
	this.charterSelected = false;
	this.baseStrum = 0;
	this.strumTime = 0;
	flixel_FlxSprite.call(this);
	if(prevNote == null) {
		prevNote = this;
	}
	this.isAlt = isAlt;
	this.prevNote = prevNote;
	this.isSustainNote = sustainNote;
	var _g = this;
	_g.set_x(_g.x + 50);
	var _g = this;
	_g.set_y(_g.y - 2000);
	if(inCharter) {
		this.strumTime = strumTime;
		this.rStrumTime = strumTime;
	} else {
		this.strumTime = strumTime;
		this.rStrumTime = strumTime - flixel_FlxG.save.data.offset + PlayState.songOffset;
	}
	if(this.strumTime < 0) {
		this.strumTime = 0;
	}
	this.noteData = noteData;
	var daStage = PlayState.curStage;
	var noteTypeCheck = "normal";
	if(inCharter) {
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "NOTE_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "NOTE_assets" + ".xml","TEXT",library)));
		this.animation.addByPrefix(this.dataColor[0] + "Scroll",this.dataColor[0] + " alone");
		this.animation.addByPrefix(this.dataColor[0] + "hold",this.dataColor[0] + " hold");
		this.animation.addByPrefix(this.dataColor[0] + "holdend",this.dataColor[0] + " tail");
		this.animation.addByPrefix(this.dataColor[1] + "Scroll",this.dataColor[1] + " alone");
		this.animation.addByPrefix(this.dataColor[1] + "hold",this.dataColor[1] + " hold");
		this.animation.addByPrefix(this.dataColor[1] + "holdend",this.dataColor[1] + " tail");
		this.animation.addByPrefix(this.dataColor[2] + "Scroll",this.dataColor[2] + " alone");
		this.animation.addByPrefix(this.dataColor[2] + "hold",this.dataColor[2] + " hold");
		this.animation.addByPrefix(this.dataColor[2] + "holdend",this.dataColor[2] + " tail");
		this.animation.addByPrefix(this.dataColor[3] + "Scroll",this.dataColor[3] + " alone");
		this.animation.addByPrefix(this.dataColor[3] + "hold",this.dataColor[3] + " hold");
		this.animation.addByPrefix(this.dataColor[3] + "holdend",this.dataColor[3] + " tail");
		this.setGraphicSize(this.get_width() * 0.7 | 0);
		this.updateHitbox();
		this.set_antialiasing(flixel_FlxG.save.data.antialiasing);
	} else {
		if(PlayState.SONG.noteStyle == null) {
			if(PlayState.storyWeek == 6) {
				noteTypeCheck = "pixel";
			}
		} else {
			noteTypeCheck = PlayState.SONG.noteStyle;
		}
		if(noteTypeCheck == "pixel") {
			this.loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/arrows-pixels" + ".png","IMAGE","week6"),true,17,17);
			if(this.isSustainNote) {
				this.loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/arrowEnds" + ".png","IMAGE","week6"),true,7,6);
			}
			this.animation.add(this.dataColor[0] + "Scroll",[4]);
			this.animation.add(this.dataColor[0] + "hold",[0]);
			this.animation.add(this.dataColor[0] + "holdend",[4]);
			this.animation.add(this.dataColor[1] + "Scroll",[5]);
			this.animation.add(this.dataColor[1] + "hold",[1]);
			this.animation.add(this.dataColor[1] + "holdend",[5]);
			this.animation.add(this.dataColor[2] + "Scroll",[6]);
			this.animation.add(this.dataColor[2] + "hold",[2]);
			this.animation.add(this.dataColor[2] + "holdend",[6]);
			this.animation.add(this.dataColor[3] + "Scroll",[7]);
			this.animation.add(this.dataColor[3] + "hold",[3]);
			this.animation.add(this.dataColor[3] + "holdend",[7]);
			var widthSize = (StringTools.startsWith(PlayState.curStage,"school") ? this.get_width() * PlayState.daPixelZoom : this.isSustainNote ? this.get_width() * (PlayState.daPixelZoom - 1.5) : this.get_width() * PlayState.daPixelZoom) | 0;
			this.setGraphicSize(widthSize);
			this.updateHitbox();
		} else {
			var library = null;
			var usecahce = flixel_FlxG.save.data.cacheImages;
			usecahce = false;
			this.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "NOTE_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "NOTE_assets" + ".xml","TEXT",library)));
			this.animation.addByPrefix(this.dataColor[0] + "Scroll",this.dataColor[0] + " alone");
			this.animation.addByPrefix(this.dataColor[0] + "hold",this.dataColor[0] + " hold");
			this.animation.addByPrefix(this.dataColor[0] + "holdend",this.dataColor[0] + " tail");
			this.animation.addByPrefix(this.dataColor[1] + "Scroll",this.dataColor[1] + " alone");
			this.animation.addByPrefix(this.dataColor[1] + "hold",this.dataColor[1] + " hold");
			this.animation.addByPrefix(this.dataColor[1] + "holdend",this.dataColor[1] + " tail");
			this.animation.addByPrefix(this.dataColor[2] + "Scroll",this.dataColor[2] + " alone");
			this.animation.addByPrefix(this.dataColor[2] + "hold",this.dataColor[2] + " hold");
			this.animation.addByPrefix(this.dataColor[2] + "holdend",this.dataColor[2] + " tail");
			this.animation.addByPrefix(this.dataColor[3] + "Scroll",this.dataColor[3] + " alone");
			this.animation.addByPrefix(this.dataColor[3] + "hold",this.dataColor[3] + " hold");
			this.animation.addByPrefix(this.dataColor[3] + "holdend",this.dataColor[3] + " tail");
			this.setGraphicSize(this.get_width() * 0.7 | 0);
			this.updateHitbox();
			this.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		}
	}
	var _g = this;
	_g.set_x(_g.x + Note.swagWidth * noteData);
	this.animation.play(this.dataColor[noteData] + "Scroll");
	this.originColor = noteData;
	if(flixel_FlxG.save.data.stepMania && !this.isSustainNote) {
		var strumCheck = this.rStrumTime;
		var ind = Math.round(strumCheck / (Conductor.stepCrochet / 2)) | 0;
		var col = 0;
		col = this.quantityColor[ind % 8];
		this.animation.play(this.dataColor[col] + "Scroll");
		this.localAngle -= this.arrowAngles[col];
		this.localAngle += this.arrowAngles[noteData];
		this.originColor = col;
	}
	if(flixel_FlxG.save.data.downscroll && sustainNote) {
		this.set_flipY(true);
	}
	var stepHeight = 0.45 * Conductor.stepCrochet * flixel_math_FlxMath.roundDecimal(PlayStateChangeables.scrollSpeed == 1 ? PlayState.SONG.speed : PlayStateChangeables.scrollSpeed,2);
	if(this.isSustainNote && prevNote != null) {
		this.set_alpha(0.6);
		var _g = this;
		_g.set_x(_g.x + this.get_width() / 2);
		this.originColor = prevNote.originColor;
		this.animation.play(this.dataColor[this.originColor] + "holdend");
		this.updateHitbox();
		var _g = this;
		_g.set_x(_g.x - this.get_width() / 2);
		if(inCharter) {
			var _g = this;
			_g.set_x(_g.x + 30);
		}
		if(prevNote.isSustainNote) {
			prevNote.animation.play(this.dataColor[prevNote.originColor] + "hold");
			prevNote.updateHitbox();
			var _g = prevNote.scale;
			_g.set_y(_g.y * ((stepHeight + 1) / prevNote.get_height()));
			prevNote.updateHitbox();
			prevNote.noteYOff = Math.round(-prevNote.offset.y);
			this.noteYOff = Math.round(-this.offset.y);
		}
	}
};
$hxClasses["Note"] = Note;
Note.__name__ = "Note";
Note.__super__ = flixel_FlxSprite;
Note.prototype = $extend(flixel_FlxSprite.prototype,{
	strumTime: null
	,baseStrum: null
	,charterSelected: null
	,rStrumTime: null
	,mustPress: null
	,noteData: null
	,rawNoteData: null
	,canBeHit: null
	,tooLate: null
	,wasGoodHit: null
	,prevNote: null
	,modifiedByLua: null
	,sustainLength: null
	,isSustainNote: null
	,originColor: null
	,noteSection: null
	,isAlt: null
	,noteCharterObject: null
	,noteScore: null
	,noteYOff: null
	,rating: null
	,modAngle: null
	,localAngle: null
	,dataColor: null
	,quantityColor: null
	,arrowAngles: null
	,isParent: null
	,parent: null
	,spotInLine: null
	,sustainActive: null
	,children: null
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		this.set_angle(this.modAngle + this.localAngle);
		if(!this.modifiedByLua) {
			if(!this.sustainActive) {
				this.set_alpha(0.3);
			}
		}
		if(this.mustPress) {
			if(this.isSustainNote) {
				if(this.strumTime - Conductor.songPosition <= 166 * Conductor.timeScale * 0.5 && this.strumTime - Conductor.songPosition >= -166 * Conductor.timeScale) {
					this.canBeHit = true;
				} else {
					this.canBeHit = false;
				}
			} else if(this.strumTime - Conductor.songPosition <= 166 * Conductor.timeScale && this.strumTime - Conductor.songPosition >= -166 * Conductor.timeScale) {
				this.canBeHit = true;
			} else {
				this.canBeHit = false;
			}
			if(this.strumTime - Conductor.songPosition < -166 && !this.wasGoodHit) {
				this.tooLate = true;
			}
		} else {
			this.canBeHit = false;
			if(this.strumTime <= Conductor.songPosition) {
				this.wasGoodHit = true;
			}
		}
		if(this.tooLate && !this.wasGoodHit) {
			if(this.alpha > 0.3) {
				this.set_alpha(0.3);
			}
		}
	}
	,__class__: Note
});
var OFLSprite = function(x,y,width,height,Sprite) {
	this._frameCount = 0;
	flixel_FlxSprite.call(this,x,y);
	this.makeGraphic(width,height,0);
	this.flSprite = Sprite;
	this.get_pixels().draw(this.flSprite);
};
$hxClasses["OFLSprite"] = OFLSprite;
OFLSprite.__name__ = "OFLSprite";
OFLSprite.__super__ = flixel_FlxSprite;
OFLSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	flSprite: null
	,_frameCount: null
	,update: function(elapsed) {
		if(this._frameCount != 2) {
			this.get_pixels().draw(this.flSprite);
			this._frameCount++;
		}
	}
	,updateDisplay: function() {
		this.get_pixels().draw(this.flSprite);
	}
	,__class__: OFLSprite
});
var OptionCategory = function(catName,options) {
	this._name = "New Category";
	this._options = [];
	this._name = catName;
	this._options = options;
};
$hxClasses["OptionCategory"] = OptionCategory;
OptionCategory.__name__ = "OptionCategory";
OptionCategory.prototype = {
	_options: null
	,getOptions: function() {
		return this._options;
	}
	,addOption: function(opt) {
		this._options.push(opt);
	}
	,removeOption: function(opt) {
		HxOverrides.remove(this._options,opt);
	}
	,_name: null
	,getName: function() {
		return this._name;
	}
	,__class__: OptionCategory
};
var Option = function() {
	this.acceptValues = false;
	this.description = "";
	this.display = this.updateDisplay();
};
$hxClasses["Option"] = Option;
Option.__name__ = "Option";
Option.prototype = {
	description: null
	,display: null
	,acceptValues: null
	,getDisplay: function() {
		return this.display;
	}
	,getAccept: function() {
		return this.acceptValues;
	}
	,getDescription: function() {
		return this.description;
	}
	,getValue: function() {
		throw haxe_Exception.thrown("stub!");
	}
	,press: function() {
		throw haxe_Exception.thrown("stub!");
	}
	,updateDisplay: function() {
		throw haxe_Exception.thrown("stub!");
	}
	,left: function() {
		throw haxe_Exception.thrown("stub!");
	}
	,right: function() {
		throw haxe_Exception.thrown("stub!");
	}
	,__class__: Option
};
var DFJKOption = function(controls) {
	Option.call(this);
	this.controls = controls;
};
$hxClasses["DFJKOption"] = DFJKOption;
DFJKOption.__name__ = "DFJKOption";
DFJKOption.__super__ = Option;
DFJKOption.prototype = $extend(Option.prototype,{
	controls: null
	,press: function() {
		OptionsMenu.instance.openSubState(new KeyBindMenu());
		return false;
	}
	,updateDisplay: function() {
		return "Key Bindings";
	}
	,__class__: DFJKOption
});
var CpuStrums = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["CpuStrums"] = CpuStrums;
CpuStrums.__name__ = "CpuStrums";
CpuStrums.__super__ = Option;
CpuStrums.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.cpuStrums = !flixel_FlxG.save.data.cpuStrums;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		if(flixel_FlxG.save.data.cpuStrums) {
			return "Light CPU Strums";
		} else {
			return "CPU Strums stay static";
		}
	}
	,__class__: CpuStrums
});
var GraphicLoading = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["GraphicLoading"] = GraphicLoading;
GraphicLoading.__name__ = "GraphicLoading";
GraphicLoading.__super__ = Option;
GraphicLoading.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.cacheImages = !flixel_FlxG.save.data.cacheImages;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		if(flixel_FlxG.save.data.cacheImages) {
			return "Preload Characters";
		} else {
			return "Do not Preload Characters";
		}
	}
	,__class__: GraphicLoading
});
var EditorRes = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["EditorRes"] = EditorRes;
EditorRes.__name__ = "EditorRes";
EditorRes.__super__ = Option;
EditorRes.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.editorBG = !flixel_FlxG.save.data.editorBG;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		if(flixel_FlxG.save.data.editorBG) {
			return "Show Editor Grid";
		} else {
			return "Do not Show Editor Grid";
		}
	}
	,__class__: EditorRes
});
var DownscrollOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["DownscrollOption"] = DownscrollOption;
DownscrollOption.__name__ = "DownscrollOption";
DownscrollOption.__super__ = Option;
DownscrollOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.downscroll = !flixel_FlxG.save.data.downscroll;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		if(flixel_FlxG.save.data.downscroll) {
			return "Downscroll";
		} else {
			return "Upscroll";
		}
	}
	,__class__: DownscrollOption
});
var GhostTapOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["GhostTapOption"] = GhostTapOption;
GhostTapOption.__name__ = "GhostTapOption";
GhostTapOption.__super__ = Option;
GhostTapOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.ghost = !flixel_FlxG.save.data.ghost;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		if(flixel_FlxG.save.data.ghost) {
			return "Ghost Tapping";
		} else {
			return "No Ghost Tapping";
		}
	}
	,__class__: GhostTapOption
});
var AccuracyOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["AccuracyOption"] = AccuracyOption;
AccuracyOption.__name__ = "AccuracyOption";
AccuracyOption.__super__ = Option;
AccuracyOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.accuracyDisplay = !flixel_FlxG.save.data.accuracyDisplay;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Accuracy " + (!flixel_FlxG.save.data.accuracyDisplay ? "off" : "on");
	}
	,__class__: AccuracyOption
});
var SongPositionOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["SongPositionOption"] = SongPositionOption;
SongPositionOption.__name__ = "SongPositionOption";
SongPositionOption.__super__ = Option;
SongPositionOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.songPosition = !flixel_FlxG.save.data.songPosition;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Song Position " + (!flixel_FlxG.save.data.songPosition ? "off" : "on");
	}
	,__class__: SongPositionOption
});
var DistractionsAndEffectsOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["DistractionsAndEffectsOption"] = DistractionsAndEffectsOption;
DistractionsAndEffectsOption.__name__ = "DistractionsAndEffectsOption";
DistractionsAndEffectsOption.__super__ = Option;
DistractionsAndEffectsOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.distractions = !flixel_FlxG.save.data.distractions;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Distractions " + (!flixel_FlxG.save.data.distractions ? "off" : "on");
	}
	,__class__: DistractionsAndEffectsOption
});
var StepManiaOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["StepManiaOption"] = StepManiaOption;
StepManiaOption.__name__ = "StepManiaOption";
StepManiaOption.__super__ = Option;
StepManiaOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.stepMania = !flixel_FlxG.save.data.stepMania;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Colors by quantization " + (!flixel_FlxG.save.data.stepMania ? "off" : "on");
	}
	,__class__: StepManiaOption
});
var ResetButtonOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["ResetButtonOption"] = ResetButtonOption;
ResetButtonOption.__name__ = "ResetButtonOption";
ResetButtonOption.__super__ = Option;
ResetButtonOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.resetButton = !flixel_FlxG.save.data.resetButton;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Reset Button " + (!flixel_FlxG.save.data.resetButton ? "off" : "on");
	}
	,__class__: ResetButtonOption
});
var InstantRespawn = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["InstantRespawn"] = InstantRespawn;
InstantRespawn.__name__ = "InstantRespawn";
InstantRespawn.__super__ = Option;
InstantRespawn.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.InstantRespawn = !flixel_FlxG.save.data.InstantRespawn;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Instant Respawn " + (!flixel_FlxG.save.data.InstantRespawn ? "off" : "on");
	}
	,__class__: InstantRespawn
});
var FlashingLightsOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["FlashingLightsOption"] = FlashingLightsOption;
FlashingLightsOption.__name__ = "FlashingLightsOption";
FlashingLightsOption.__super__ = Option;
FlashingLightsOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.flashing = !flixel_FlxG.save.data.flashing;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Flashing Lights " + (!flixel_FlxG.save.data.flashing ? "off" : "on");
	}
	,__class__: FlashingLightsOption
});
var AntialiasingOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["AntialiasingOption"] = AntialiasingOption;
AntialiasingOption.__name__ = "AntialiasingOption";
AntialiasingOption.__super__ = Option;
AntialiasingOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.antialiasing = !flixel_FlxG.save.data.antialiasing;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Antialiasing " + (!flixel_FlxG.save.data.antialiasing ? "off" : "on");
	}
	,__class__: AntialiasingOption
});
var MissSoundsOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["MissSoundsOption"] = MissSoundsOption;
MissSoundsOption.__name__ = "MissSoundsOption";
MissSoundsOption.__super__ = Option;
MissSoundsOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.missSounds = !flixel_FlxG.save.data.missSounds;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Miss Sounds " + (!flixel_FlxG.save.data.missSounds ? "off" : "on");
	}
	,__class__: MissSoundsOption
});
var ShowInput = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["ShowInput"] = ShowInput;
ShowInput.__name__ = "ShowInput";
ShowInput.__super__ = Option;
ShowInput.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.inputShow = !flixel_FlxG.save.data.inputShow;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		if(flixel_FlxG.save.data.inputShow) {
			return "Extended Score Info";
		} else {
			return "Minimalized Info";
		}
	}
	,__class__: ShowInput
});
var Judgement = function(desc) {
	Option.call(this);
	this.description = desc;
	this.acceptValues = true;
};
$hxClasses["Judgement"] = Judgement;
Judgement.__name__ = "Judgement";
Judgement.__super__ = Option;
Judgement.prototype = $extend(Option.prototype,{
	press: function() {
		return true;
	}
	,updateDisplay: function() {
		return "Safe Frames";
	}
	,left: function() {
		if(Conductor.safeFrames == 1) {
			return false;
		}
		Conductor.safeFrames -= 1;
		flixel_FlxG.save.data.frames = Conductor.safeFrames;
		Conductor.recalculateTimings();
		return false;
	}
	,getValue: function() {
		return "Safe Frames: " + Conductor.safeFrames + " - SIK: " + HelperFunctions.truncateFloat(45 * Conductor.timeScale,0) + "ms GD: " + HelperFunctions.truncateFloat(90 * Conductor.timeScale,0) + "ms BD: " + HelperFunctions.truncateFloat(135 * Conductor.timeScale,0) + "ms SHT: " + HelperFunctions.truncateFloat(166 * Conductor.timeScale,0) + "ms TOTAL: " + HelperFunctions.truncateFloat(Conductor.safeZoneOffset,0) + "ms";
	}
	,right: function() {
		if(Conductor.safeFrames == 20) {
			return false;
		}
		Conductor.safeFrames += 1;
		flixel_FlxG.save.data.frames = Conductor.safeFrames;
		Conductor.recalculateTimings();
		return true;
	}
	,__class__: Judgement
});
var FPSOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["FPSOption"] = FPSOption;
FPSOption.__name__ = "FPSOption";
FPSOption.__super__ = Option;
FPSOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.fps = !flixel_FlxG.save.data.fps;
		(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).toggleFPS(flixel_FlxG.save.data.fps);
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "FPS Counter " + (!flixel_FlxG.save.data.fps ? "off" : "on");
	}
	,__class__: FPSOption
});
var ScoreScreen = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["ScoreScreen"] = ScoreScreen;
ScoreScreen.__name__ = "ScoreScreen";
ScoreScreen.__super__ = Option;
ScoreScreen.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.scoreScreen = !flixel_FlxG.save.data.scoreScreen;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		if(flixel_FlxG.save.data.scoreScreen) {
			return "Show Score Screen";
		} else {
			return "No Score Screen";
		}
	}
	,__class__: ScoreScreen
});
var FPSCapOption = function(desc) {
	Option.call(this);
	this.description = desc;
	this.acceptValues = true;
};
$hxClasses["FPSCapOption"] = FPSCapOption;
FPSCapOption.__name__ = "FPSCapOption";
FPSCapOption.__super__ = Option;
FPSCapOption.prototype = $extend(Option.prototype,{
	press: function() {
		return false;
	}
	,updateDisplay: function() {
		return "FPS Cap";
	}
	,right: function() {
		if(flixel_FlxG.save.data.fpsCap >= 290) {
			flixel_FlxG.save.data.fpsCap = 290;
			(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).setFPSCap(290);
		} else {
			flixel_FlxG.save.data.fpsCap += 10;
		}
		(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).setFPSCap(flixel_FlxG.save.data.fpsCap);
		return true;
	}
	,left: function() {
		if(flixel_FlxG.save.data.fpsCap > 290) {
			flixel_FlxG.save.data.fpsCap = 290;
		} else if(flixel_FlxG.save.data.fpsCap < 60) {
			flixel_FlxG.save.data.fpsCap = lime_app_Application.current.__window.get_displayMode().refreshRate;
		} else {
			flixel_FlxG.save.data.fpsCap -= 10;
		}
		(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).setFPSCap(flixel_FlxG.save.data.fpsCap);
		return true;
	}
	,getValue: function() {
		return "Current FPS Cap: " + Std.string(flixel_FlxG.save.data.fpsCap) + (flixel_FlxG.save.data.fpsCap == lime_app_Application.current.__window.get_displayMode().refreshRate ? "Hz (Refresh Rate)" : "");
	}
	,__class__: FPSCapOption
});
var ScrollSpeedOption = function(desc) {
	Option.call(this);
	this.description = desc;
	this.acceptValues = true;
};
$hxClasses["ScrollSpeedOption"] = ScrollSpeedOption;
ScrollSpeedOption.__name__ = "ScrollSpeedOption";
ScrollSpeedOption.__super__ = Option;
ScrollSpeedOption.prototype = $extend(Option.prototype,{
	press: function() {
		return false;
	}
	,updateDisplay: function() {
		return "Scroll Speed";
	}
	,right: function() {
		flixel_FlxG.save.data.scrollSpeed += 0.1;
		if(flixel_FlxG.save.data.scrollSpeed < 1) {
			flixel_FlxG.save.data.scrollSpeed = 1;
		}
		if(flixel_FlxG.save.data.scrollSpeed > 4) {
			flixel_FlxG.save.data.scrollSpeed = 4;
		}
		return true;
	}
	,getValue: function() {
		return "Current Scroll Speed: " + HelperFunctions.truncateFloat(flixel_FlxG.save.data.scrollSpeed,1);
	}
	,left: function() {
		flixel_FlxG.save.data.scrollSpeed -= 0.1;
		if(flixel_FlxG.save.data.scrollSpeed < 1) {
			flixel_FlxG.save.data.scrollSpeed = 1;
		}
		if(flixel_FlxG.save.data.scrollSpeed > 4) {
			flixel_FlxG.save.data.scrollSpeed = 4;
		}
		return true;
	}
	,__class__: ScrollSpeedOption
});
var RainbowFPSOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["RainbowFPSOption"] = RainbowFPSOption;
RainbowFPSOption.__name__ = "RainbowFPSOption";
RainbowFPSOption.__super__ = Option;
RainbowFPSOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.fpsRain = !flixel_FlxG.save.data.fpsRain;
		(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).changeFPSColor(-1);
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "FPS Rainbow " + (!flixel_FlxG.save.data.fpsRain ? "off" : "on");
	}
	,__class__: RainbowFPSOption
});
var Optimization = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["Optimization"] = Optimization;
Optimization.__name__ = "Optimization";
Optimization.__super__ = Option;
Optimization.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.optimize = !flixel_FlxG.save.data.optimize;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Optimization " + (flixel_FlxG.save.data.optimize ? "ON" : "OFF");
	}
	,__class__: Optimization
});
var NPSDisplayOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["NPSDisplayOption"] = NPSDisplayOption;
NPSDisplayOption.__name__ = "NPSDisplayOption";
NPSDisplayOption.__super__ = Option;
NPSDisplayOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.npsDisplay = !flixel_FlxG.save.data.npsDisplay;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "NPS Display " + (!flixel_FlxG.save.data.npsDisplay ? "off" : "on");
	}
	,__class__: NPSDisplayOption
});
var ReplayOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["ReplayOption"] = ReplayOption;
ReplayOption.__name__ = "ReplayOption";
ReplayOption.__super__ = Option;
ReplayOption.prototype = $extend(Option.prototype,{
	press: function() {
		haxe_Log.trace("switch",{ fileName : "source/Options.hx", lineNumber : 686, className : "ReplayOption", methodName : "press"});
		var nextState = new LoadReplayState();
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
		return false;
	}
	,updateDisplay: function() {
		return "Load replays";
	}
	,__class__: ReplayOption
});
var AccuracyDOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["AccuracyDOption"] = AccuracyDOption;
AccuracyDOption.__name__ = "AccuracyDOption";
AccuracyDOption.__super__ = Option;
AccuracyDOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.accuracyMod = flixel_FlxG.save.data.accuracyMod == 1 ? 0 : 1;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Accuracy Mode: " + (flixel_FlxG.save.data.accuracyMod == 0 ? "Accurate" : "Complex");
	}
	,__class__: AccuracyDOption
});
var CustomizeGameplay = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["CustomizeGameplay"] = CustomizeGameplay;
CustomizeGameplay.__name__ = "CustomizeGameplay";
CustomizeGameplay.__super__ = Option;
CustomizeGameplay.prototype = $extend(Option.prototype,{
	press: function() {
		haxe_Log.trace("switch",{ fileName : "source/Options.hx", lineNumber : 728, className : "CustomizeGameplay", methodName : "press"});
		var nextState = new GameplayCustomizeState();
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
		return false;
	}
	,updateDisplay: function() {
		return "Customize Gameplay";
	}
	,__class__: CustomizeGameplay
});
var WatermarkOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["WatermarkOption"] = WatermarkOption;
WatermarkOption.__name__ = "WatermarkOption";
WatermarkOption.__super__ = Option;
WatermarkOption.prototype = $extend(Option.prototype,{
	press: function() {
		Main.watermarks = !Main.watermarks;
		flixel_FlxG.save.data.watermark = Main.watermarks;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Watermarks " + (Main.watermarks ? "on" : "off");
	}
	,__class__: WatermarkOption
});
var OffsetMenu = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["OffsetMenu"] = OffsetMenu;
OffsetMenu.__name__ = "OffsetMenu";
OffsetMenu.__super__ = Option;
OffsetMenu.prototype = $extend(Option.prototype,{
	press: function() {
		haxe_Log.trace("switch",{ fileName : "source/Options.hx", lineNumber : 771, className : "OffsetMenu", methodName : "press"});
		var poop = Highscore.formatSong("Tutorial",1);
		PlayState.SONG = Song.loadFromJson(poop,"Tutorial");
		PlayState.isStoryMode = false;
		PlayState.storyDifficulty = 0;
		PlayState.storyWeek = 0;
		PlayState.offsetTesting = true;
		haxe_Log.trace("CUR WEEK" + PlayState.storyWeek,{ fileName : "source/Options.hx", lineNumber : 779, className : "OffsetMenu", methodName : "press"});
		var nextState = LoadingState.getNextState(new PlayState(),false);
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
		return false;
	}
	,updateDisplay: function() {
		return "Time your offset";
	}
	,__class__: OffsetMenu
});
var BotPlay = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["BotPlay"] = BotPlay;
BotPlay.__name__ = "BotPlay";
BotPlay.__super__ = Option;
BotPlay.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.botplay = !flixel_FlxG.save.data.botplay;
		haxe_Log.trace("BotPlay : " + Std.string(flixel_FlxG.save.data.botplay),{ fileName : "source/Options.hx", lineNumber : 800, className : "BotPlay", methodName : "press"});
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "BotPlay " + (flixel_FlxG.save.data.botplay ? "on" : "off");
	}
	,__class__: BotPlay
});
var CamZoomOption = function(desc) {
	Option.call(this);
	this.description = desc;
};
$hxClasses["CamZoomOption"] = CamZoomOption;
CamZoomOption.__name__ = "CamZoomOption";
CamZoomOption.__super__ = Option;
CamZoomOption.prototype = $extend(Option.prototype,{
	press: function() {
		flixel_FlxG.save.data.camzoom = !flixel_FlxG.save.data.camzoom;
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		return "Camera Zoom " + (!flixel_FlxG.save.data.camzoom ? "off" : "on");
	}
	,__class__: CamZoomOption
});
var LockWeeksOption = function(desc) {
	this.confirm = false;
	Option.call(this);
	this.description = desc;
};
$hxClasses["LockWeeksOption"] = LockWeeksOption;
LockWeeksOption.__name__ = "LockWeeksOption";
LockWeeksOption.__super__ = Option;
LockWeeksOption.prototype = $extend(Option.prototype,{
	confirm: null
	,press: function() {
		if(!this.confirm) {
			this.confirm = true;
			this.display = this.updateDisplay();
			return true;
		}
		flixel_FlxG.save.data.weekUnlocked = 1;
		StoryMenuState.weekUnlocked = [true,true];
		this.confirm = false;
		haxe_Log.trace("Weeks Locked",{ fileName : "source/Options.hx", lineNumber : 849, className : "LockWeeksOption", methodName : "press"});
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		if(this.confirm) {
			return "Confirm Story Reset";
		} else {
			return "Reset Story Progress";
		}
	}
	,__class__: LockWeeksOption
});
var ResetScoreOption = function(desc) {
	this.confirm = false;
	Option.call(this);
	this.description = desc;
};
$hxClasses["ResetScoreOption"] = ResetScoreOption;
ResetScoreOption.__name__ = "ResetScoreOption";
ResetScoreOption.__super__ = Option;
ResetScoreOption.prototype = $extend(Option.prototype,{
	confirm: null
	,press: function() {
		if(!this.confirm) {
			this.confirm = true;
			this.display = this.updateDisplay();
			return true;
		}
		flixel_FlxG.save.data.songScores = null;
		var key = haxe_ds_StringMap.keysIterator(Highscore.songScores.h);
		while(key.hasNext()) {
			var key1 = key.next();
			Highscore.songScores.h[key1] = 0;
		}
		flixel_FlxG.save.data.songCombos = null;
		var key = haxe_ds_StringMap.keysIterator(Highscore.songCombos.h);
		while(key.hasNext()) {
			var key1 = key.next();
			Highscore.songCombos.h[key1] = "";
		}
		this.confirm = false;
		haxe_Log.trace("Highscores Wiped",{ fileName : "source/Options.hx", lineNumber : 888, className : "ResetScoreOption", methodName : "press"});
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		if(this.confirm) {
			return "Confirm Score Reset";
		} else {
			return "Reset Score";
		}
	}
	,__class__: ResetScoreOption
});
var ResetSettings = function(desc) {
	this.confirm = false;
	Option.call(this);
	this.description = desc;
};
$hxClasses["ResetSettings"] = ResetSettings;
ResetSettings.__name__ = "ResetSettings";
ResetSettings.__super__ = Option;
ResetSettings.prototype = $extend(Option.prototype,{
	confirm: null
	,press: function() {
		if(!this.confirm) {
			this.confirm = true;
			this.display = this.updateDisplay();
			return true;
		}
		flixel_FlxG.save.data.weekUnlocked = null;
		flixel_FlxG.save.data.newInput = null;
		flixel_FlxG.save.data.downscroll = null;
		flixel_FlxG.save.data.antialiasing = null;
		flixel_FlxG.save.data.missSounds = null;
		flixel_FlxG.save.data.dfjk = null;
		flixel_FlxG.save.data.accuracyDisplay = null;
		flixel_FlxG.save.data.offset = null;
		flixel_FlxG.save.data.songPosition = null;
		flixel_FlxG.save.data.fps = null;
		flixel_FlxG.save.data.changedHit = null;
		flixel_FlxG.save.data.fpsRain = null;
		flixel_FlxG.save.data.fpsCap = null;
		flixel_FlxG.save.data.scrollSpeed = null;
		flixel_FlxG.save.data.npsDisplay = null;
		flixel_FlxG.save.data.frames = null;
		flixel_FlxG.save.data.accuracyMod = null;
		flixel_FlxG.save.data.watermark = null;
		flixel_FlxG.save.data.ghost = null;
		flixel_FlxG.save.data.distractions = null;
		flixel_FlxG.save.data.stepMania = null;
		flixel_FlxG.save.data.flashing = null;
		flixel_FlxG.save.data.resetButton = null;
		flixel_FlxG.save.data.botplay = null;
		flixel_FlxG.save.data.cpuStrums = null;
		flixel_FlxG.save.data.strumline = null;
		flixel_FlxG.save.data.customStrumLine = null;
		flixel_FlxG.save.data.camzoom = null;
		flixel_FlxG.save.data.scoreScreen = null;
		flixel_FlxG.save.data.inputShow = null;
		flixel_FlxG.save.data.optimize = null;
		flixel_FlxG.save.data.cacheImages = null;
		flixel_FlxG.save.data.editor = null;
		KadeEngineData.initSave();
		this.confirm = false;
		haxe_Log.trace("All settings have been reset",{ fileName : "source/Options.hx", lineNumber : 952, className : "ResetSettings", methodName : "press"});
		this.display = this.updateDisplay();
		return true;
	}
	,updateDisplay: function() {
		if(this.confirm) {
			return "Confirm Settings Reset";
		} else {
			return "Reset Settings";
		}
	}
	,__class__: ResetSettings
});
var OptionsMenu = function(TransIn,TransOut) {
	this.isSettingControl = false;
	this.isCat = false;
	this.currentDescription = "";
	this.acceptInput = true;
	this.options = [new OptionCategory("Gameplay",[new DFJKOption(PlayerSettings.player1.controls),new DownscrollOption("Toggle making the notes scroll down rather than up."),new GhostTapOption("Toggle counting pressing a directional input when no arrow is there as a miss."),new Judgement("Customize your Hit Timings. (LEFT or RIGHT)"),new ScrollSpeedOption("Change your scroll speed. (1 = Chart dependent)"),new AccuracyDOption("Change how accuracy is calculated. (Accurate = Simple, Complex = Milisecond Based)"),new ResetButtonOption("Toggle pressing R to gameover."),new InstantRespawn("Toggle if you instantly respawn after dying."),new CustomizeGameplay("Drag and drop gameplay modules to your prefered positions!")]),new OptionCategory("Appearance",[new EditorRes("Not showing the editor grid will greatly increase editor performance"),new DistractionsAndEffectsOption("Toggle stage distractions that can hinder your gameplay."),new CamZoomOption("Toggle the camera zoom in-game."),new StepManiaOption("Sets the colors of the arrows depending on quantization instead of direction."),new AccuracyOption("Display accuracy information on the info bar."),new SongPositionOption("Show the song's current position as a scrolling bar."),new NPSDisplayOption("Shows your current Notes Per Second on the info bar."),new RainbowFPSOption("Make the FPS Counter flicker through rainbow colors."),new CpuStrums("Toggle the CPU's strumline lighting up when it hits a note.")]),new OptionCategory("Misc",[new FPSOption("Toggle the FPS Counter"),new FlashingLightsOption("Toggle flashing lights that can cause epileptic seizures and strain."),new WatermarkOption("Enable and disable all watermarks from the engine."),new AntialiasingOption("Toggle antialiasing, improving graphics quality at a slight performance penalty."),new MissSoundsOption("Toggle miss sounds playing when you don't hit a note."),new ScoreScreen("Show the score screen after the end of a song"),new ShowInput("Display every single input on the score screen."),new Optimization("No characters or backgrounds. Just a usual rhythm game layout."),new GraphicLoading("On startup, cache every character. Significantly decrease load times. (HIGH MEMORY)"),new BotPlay("Showcase your charts and mods with autoplay.")]),new OptionCategory("Saves and Data",[new ResetScoreOption("Reset your score on all songs and weeks. This is irreversible!"),new LockWeeksOption("Reset your story mode progress. This is irreversible!"),new ResetSettings("Reset ALL your settings. This is irreversible!")])];
	this.curSelected = 0;
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["OptionsMenu"] = OptionsMenu;
OptionsMenu.__name__ = "OptionsMenu";
OptionsMenu.instance = null;
OptionsMenu.versionShit = null;
OptionsMenu.__super__ = MusicBeatState;
OptionsMenu.prototype = $extend(MusicBeatState.prototype,{
	selector: null
	,curSelected: null
	,options: null
	,acceptInput: null
	,currentDescription: null
	,grpControls: null
	,currentSelectedCat: null
	,blackBorder: null
	,create: function() {
		this.clean();
		OptionsMenu.instance = this;
		var menuBG = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "menuDesat" + ".png","IMAGE",null));
		menuBG.set_color(-1412611);
		menuBG.setGraphicSize(menuBG.get_width() * 1.1 | 0);
		menuBG.updateHitbox();
		menuBG.screenCenter();
		menuBG.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(menuBG);
		this.grpControls = new flixel_group_FlxTypedGroup();
		this.add(this.grpControls);
		var _g = 0;
		var _g1 = this.options.length;
		while(_g < _g1) {
			var i = _g++;
			var controlLabel = new Alphabet(0,70 * i + 30,this.options[i].getName(),true,false,true);
			controlLabel.isMenuItem = true;
			controlLabel.targetY = i;
			this.grpControls.add(controlLabel);
		}
		this.currentDescription = "none";
		OptionsMenu.versionShit = new flixel_text_FlxText(5,flixel_FlxG.height + 40,0,"Offset (Left, Right, Shift for slow): " + HelperFunctions.truncateFloat(flixel_FlxG.save.data.offset,2) + " - Description - " + this.currentDescription,12);
		OptionsMenu.versionShit.scrollFactor.set();
		OptionsMenu.versionShit.setFormat("VCR OSD Mono",16,-1,"left",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.blackBorder = new flixel_FlxSprite(-30,flixel_FlxG.height + 40).makeGraphic(OptionsMenu.versionShit.get_width() + 900 | 0,OptionsMenu.versionShit.get_height() + 600 | 0,-16777216);
		this.blackBorder.set_alpha(0.5);
		this.add(this.blackBorder);
		this.add(OptionsMenu.versionShit);
		flixel_tweens_FlxTween.tween(OptionsMenu.versionShit,{ y : flixel_FlxG.height - 18},2,{ ease : flixel_tweens_FlxEase.elasticInOut});
		flixel_tweens_FlxTween.tween(this.blackBorder,{ y : flixel_FlxG.height - 18},2,{ ease : flixel_tweens_FlxEase.elasticInOut});
		this.changeSelection();
		MusicBeatState.prototype.create.call(this);
	}
	,isCat: null
	,update: function(elapsed) {
		MusicBeatState.prototype.update.call(this,elapsed);
		if(this.acceptInput) {
			if(PlayerSettings.player1.controls._back.check() && !this.isCat) {
				var nextState = new MainMenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else if(PlayerSettings.player1.controls._back.check()) {
				this.isCat = false;
				this.grpControls.clear();
				var _g = 0;
				var _g1 = this.options.length;
				while(_g < _g1) {
					var i = _g++;
					var controlLabel = new Alphabet(0,70 * i + 30,this.options[i].getName(),true,false);
					controlLabel.isMenuItem = true;
					controlLabel.targetY = i;
					this.grpControls.add(controlLabel);
				}
				this.curSelected = 0;
				this.changeSelection(this.curSelected);
			}
			var gamepad = flixel_FlxG.gamepads.lastActive;
			if(gamepad != null) {
				var _this = gamepad.justPressed;
				var id = 11;
				var _this1 = _this.gamepad;
				var Status = _this.status;
				var tmp;
				switch(id) {
				case -2:
					tmp = _this1.anyButton(Status);
					break;
				case -1:
					tmp = !_this1.anyButton(Status);
					break;
				default:
					var RawID = _this1.mapping.getRawID(id);
					var button = _this1.buttons[RawID];
					tmp = button != null && button.hasState(Status);
				}
				if(tmp) {
					flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
					this.changeSelection(-1);
				}
				var _this = gamepad.justPressed;
				var id = 12;
				var _this1 = _this.gamepad;
				var Status = _this.status;
				var tmp;
				switch(id) {
				case -2:
					tmp = _this1.anyButton(Status);
					break;
				case -1:
					tmp = !_this1.anyButton(Status);
					break;
				default:
					var RawID = _this1.mapping.getRawID(id);
					var button = _this1.buttons[RawID];
					tmp = button != null && button.hasState(Status);
				}
				if(tmp) {
					flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
					this.changeSelection(1);
				}
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(38,_this.status)) {
				this.changeSelection(-1);
			}
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(40,_this.status)) {
				this.changeSelection(1);
			}
			if(this.isCat) {
				if(this.currentSelectedCat.getOptions()[this.curSelected].getAccept()) {
					var _this = flixel_FlxG.keys.pressed;
					if(_this.keyManager.checkStatus(16,_this.status)) {
						var _this = flixel_FlxG.keys.pressed;
						if(_this.keyManager.checkStatus(39,_this.status)) {
							this.currentSelectedCat.getOptions()[this.curSelected].right();
						}
						var _this = flixel_FlxG.keys.pressed;
						if(_this.keyManager.checkStatus(37,_this.status)) {
							this.currentSelectedCat.getOptions()[this.curSelected].left();
						}
					} else {
						var _this = flixel_FlxG.keys.justPressed;
						if(_this.keyManager.checkStatus(39,_this.status)) {
							this.currentSelectedCat.getOptions()[this.curSelected].right();
						}
						var _this = flixel_FlxG.keys.justPressed;
						if(_this.keyManager.checkStatus(37,_this.status)) {
							this.currentSelectedCat.getOptions()[this.curSelected].left();
						}
					}
				} else {
					var _this = flixel_FlxG.keys.pressed;
					if(_this.keyManager.checkStatus(16,_this.status)) {
						var _this = flixel_FlxG.keys.justPressed;
						if(_this.keyManager.checkStatus(39,_this.status)) {
							flixel_FlxG.save.data.offset += 0.1;
						} else {
							var _this = flixel_FlxG.keys.justPressed;
							if(_this.keyManager.checkStatus(37,_this.status)) {
								flixel_FlxG.save.data.offset -= 0.1;
							}
						}
					} else {
						var _this = flixel_FlxG.keys.pressed;
						if(_this.keyManager.checkStatus(39,_this.status)) {
							flixel_FlxG.save.data.offset += 0.1;
						} else {
							var _this = flixel_FlxG.keys.pressed;
							if(_this.keyManager.checkStatus(37,_this.status)) {
								flixel_FlxG.save.data.offset -= 0.1;
							}
						}
					}
					OptionsMenu.versionShit.set_text("Offset (Left, Right, Shift for slow): " + HelperFunctions.truncateFloat(flixel_FlxG.save.data.offset,2) + " - Description - " + this.currentDescription);
				}
				if(this.currentSelectedCat.getOptions()[this.curSelected].getAccept()) {
					OptionsMenu.versionShit.set_text(this.currentSelectedCat.getOptions()[this.curSelected].getValue() + " - Description - " + this.currentDescription);
				} else {
					OptionsMenu.versionShit.set_text("Offset (Left, Right, Shift for slow): " + HelperFunctions.truncateFloat(flixel_FlxG.save.data.offset,2) + " - Description - " + this.currentDescription);
				}
			} else {
				var _this = flixel_FlxG.keys.pressed;
				if(_this.keyManager.checkStatus(16,_this.status)) {
					var _this = flixel_FlxG.keys.justPressed;
					if(_this.keyManager.checkStatus(39,_this.status)) {
						flixel_FlxG.save.data.offset += 0.1;
					} else {
						var _this = flixel_FlxG.keys.justPressed;
						if(_this.keyManager.checkStatus(37,_this.status)) {
							flixel_FlxG.save.data.offset -= 0.1;
						}
					}
				} else {
					var _this = flixel_FlxG.keys.pressed;
					if(_this.keyManager.checkStatus(39,_this.status)) {
						flixel_FlxG.save.data.offset += 0.1;
					} else {
						var _this = flixel_FlxG.keys.pressed;
						if(_this.keyManager.checkStatus(37,_this.status)) {
							flixel_FlxG.save.data.offset -= 0.1;
						}
					}
				}
				OptionsMenu.versionShit.set_text("Offset (Left, Right, Shift for slow): " + HelperFunctions.truncateFloat(flixel_FlxG.save.data.offset,2) + " - Description - " + this.currentDescription);
			}
			if(PlayerSettings.player1.controls._reset.check()) {
				flixel_FlxG.save.data.offset = 0;
			}
			if(PlayerSettings.player1.controls._accept.check()) {
				if(this.isCat) {
					if(this.currentSelectedCat.getOptions()[this.curSelected].press()) {
						this.grpControls.members[this.curSelected].reType(this.currentSelectedCat.getOptions()[this.curSelected].getDisplay());
						haxe_Log.trace(this.currentSelectedCat.getOptions()[this.curSelected].getDisplay(),{ fileName : "source/OptionsMenu.hx", lineNumber : 252, className : "OptionsMenu", methodName : "update"});
					}
				} else {
					this.currentSelectedCat = this.options[this.curSelected];
					this.isCat = true;
					this.grpControls.clear();
					var _g = 0;
					var _g1 = this.currentSelectedCat.getOptions().length;
					while(_g < _g1) {
						var i = _g++;
						var controlLabel = new Alphabet(0,70 * i + 30,this.currentSelectedCat.getOptions()[i].getDisplay(),true,false);
						controlLabel.isMenuItem = true;
						controlLabel.targetY = i;
						this.grpControls.add(controlLabel);
					}
					this.curSelected = 0;
				}
				this.changeSelection();
			}
		}
		flixel_FlxG.save.flush();
	}
	,isSettingControl: null
	,changeSelection: function(change) {
		if(change == null) {
			change = 0;
		}
		flixel_FlxG.sound.play(Paths.sound("scrollMenu"),0.4);
		this.curSelected += change;
		if(this.curSelected < 0) {
			this.curSelected = this.grpControls.length - 1;
		}
		if(this.curSelected >= this.grpControls.length) {
			this.curSelected = 0;
		}
		if(this.isCat) {
			this.currentDescription = this.currentSelectedCat.getOptions()[this.curSelected].getDescription();
		} else {
			this.currentDescription = "Please select a category";
		}
		if(this.isCat) {
			if(this.currentSelectedCat.getOptions()[this.curSelected].getAccept()) {
				OptionsMenu.versionShit.set_text(this.currentSelectedCat.getOptions()[this.curSelected].getValue() + " - Description - " + this.currentDescription);
			} else {
				OptionsMenu.versionShit.set_text("Offset (Left, Right, Shift for slow): " + HelperFunctions.truncateFloat(flixel_FlxG.save.data.offset,2) + " - Description - " + this.currentDescription);
			}
		} else {
			OptionsMenu.versionShit.set_text("Offset (Left, Right, Shift for slow): " + HelperFunctions.truncateFloat(flixel_FlxG.save.data.offset,2) + " - Description - " + this.currentDescription);
		}
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.grpControls.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - this.curSelected;
			++bullShit;
			item.set_alpha(0.6);
			if(item.targetY == 0) {
				item.set_alpha(1);
			}
		}
	}
	,__class__: OptionsMenu
});
var OutdatedSubState = function(TransIn,TransOut) {
	this.colorRotation = 1;
	this.bgColors = ["#314d7f","#4e7093","#70526e","#594465"];
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["OutdatedSubState"] = OutdatedSubState;
OutdatedSubState.__name__ = "OutdatedSubState";
OutdatedSubState.__super__ = MusicBeatState;
OutdatedSubState.prototype = $extend(MusicBeatState.prototype,{
	bgColors: null
	,colorRotation: null
	,create: function() {
		var _gthis = this;
		MusicBeatState.prototype.create.call(this);
		var bg = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "week54prototype" + ".png","IMAGE","shared"));
		var _g = bg.scale;
		_g.set_x(_g.x * 1.55);
		var _g = bg.scale;
		_g.set_y(_g.y * 1.55);
		bg.screenCenter();
		bg.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(bg);
		var kadeLogo = new flixel_FlxSprite(flixel_FlxG.width,0).loadGraphic(Paths.getPath("images/" + "KadeEngineLogo" + ".png","IMAGE",null));
		kadeLogo.scale.set_y(0.3);
		kadeLogo.scale.set_x(0.3);
		var _g = kadeLogo;
		_g.set_x(_g.x - kadeLogo.frameHeight);
		var _g = kadeLogo;
		_g.set_y(_g.y - 180);
		kadeLogo.set_alpha(0.8);
		kadeLogo.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(kadeLogo);
		var txt = new flixel_text_FlxText(0,0,flixel_FlxG.width,"Your Kade Engine is outdated!\nYou are on " + MainMenuState.kadeEngineVer + "\nwhile the most recent version is " + OutdatedSubState.needVer + "." + "\n\nWhat's new:\n\n" + OutdatedSubState.currChanges + "\n& more changes and bugfixes in the full changelog" + "\n\nPress Space to view the full changelog and update\nor ESCAPE to ignore this",32);
		if(MainMenuState.nightly != "") {
			txt.set_text("You are on\n" + MainMenuState.kadeEngineVer + "\nWhich is a PRE-RELEASE BUILD!" + "\n\nReport all bugs to the author of the pre-release.\nSpace/Escape ignores this.");
		}
		var color = flixel_util_FlxColor._new();
		var Alpha = 255;
		if(Alpha == null) {
			Alpha = 255;
		}
		color &= -16711681;
		color |= 13107200;
		color &= -65281;
		color |= 51200;
		color &= -256;
		color |= 200;
		color &= 16777215;
		color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
		txt.setFormat("VCR OSD Mono",32,color,"center");
		txt.set_borderColor(-16777216);
		txt.set_borderSize(3);
		txt.set_borderStyle(flixel_text_FlxTextBorderStyle.OUTLINE);
		txt.screenCenter();
		this.add(txt);
		flixel_tweens_FlxTween.color(bg,2,bg.color,flixel_util_FlxColor.fromString(this.bgColors[this.colorRotation]));
		flixel_tweens_FlxTween.angle(kadeLogo,kadeLogo.angle,-10,2,{ ease : flixel_tweens_FlxEase.quartInOut});
		new flixel_util_FlxTimer().start(2,function(tmr) {
			flixel_tweens_FlxTween.color(bg,2,bg.color,flixel_util_FlxColor.fromString(_gthis.bgColors[_gthis.colorRotation]));
			if(_gthis.colorRotation < _gthis.bgColors.length - 1) {
				_gthis.colorRotation++;
			} else {
				_gthis.colorRotation = 0;
			}
		},0);
		new flixel_util_FlxTimer().start(2,function(tmr) {
			if(kadeLogo.angle == -10) {
				flixel_tweens_FlxTween.angle(kadeLogo,kadeLogo.angle,10,2,{ ease : flixel_tweens_FlxEase.quartInOut});
			} else {
				flixel_tweens_FlxTween.angle(kadeLogo,kadeLogo.angle,-10,2,{ ease : flixel_tweens_FlxEase.quartInOut});
			}
		},0);
		new flixel_util_FlxTimer().start(0.8,function(tmr) {
			if(kadeLogo.alpha == 0.8) {
				flixel_tweens_FlxTween.tween(kadeLogo,{ alpha : 1},0.8,{ ease : flixel_tweens_FlxEase.quartInOut});
			} else {
				flixel_tweens_FlxTween.tween(kadeLogo,{ alpha : 0.8},0.8,{ ease : flixel_tweens_FlxEase.quartInOut});
			}
		},0);
	}
	,update: function(elapsed) {
		if(PlayerSettings.player1.controls._accept.check() && MainMenuState.nightly == "") {
			this.fancyOpenURL("https://kadedev.github.io/Kade-Engine/changelogs/changelog-" + OutdatedSubState.needVer);
		} else if(PlayerSettings.player1.controls._accept.check()) {
			OutdatedSubState.leftState = true;
			var nextState = new MainMenuState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		if(PlayerSettings.player1.controls._back.check()) {
			OutdatedSubState.leftState = true;
			var nextState = new MainMenuState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,__class__: OutdatedSubState
});
var Paths = function() { };
$hxClasses["Paths"] = Paths;
Paths.__name__ = "Paths";
Paths.currentLevel = null;
Paths.setCurrentLevel = function(name) {
	Paths.currentLevel = name.toLowerCase();
};
Paths.getPath = function(file,type,library) {
	if(library != null) {
		return Paths.getLibraryPath(file,library);
	}
	if(Paths.currentLevel != null) {
		var library = Paths.currentLevel;
		var levelPath = "" + library + ":assets/" + library + "/" + file;
		if(openfl_utils_Assets.exists(levelPath,type)) {
			return levelPath;
		}
		levelPath = "shared" + ":assets/" + "shared" + "/" + file;
		if(openfl_utils_Assets.exists(levelPath,type)) {
			return levelPath;
		}
	}
	return "assets/" + file;
};
Paths.getLibraryPath = function(file,library) {
	if(library == null) {
		library = "preload";
	}
	if(library == "preload" || library == "default") {
		return "assets/" + file;
	} else {
		return "" + library + ":assets/" + library + "/" + file;
	}
};
Paths.getLibraryPathForce = function(file,library) {
	return "" + library + ":assets/" + library + "/" + file;
};
Paths.getPreloadPath = function(file) {
	return "assets/" + file;
};
Paths.file = function(file,library,type) {
	if(type == null) {
		type = "TEXT";
	}
	return Paths.getPath(file,type,library);
};
Paths.lua = function(key,library) {
	return Paths.getPath("data/" + key + ".lua","TEXT",library);
};
Paths.luaImage = function(key,library) {
	return Paths.getPath("data/" + key + ".png","IMAGE",library);
};
Paths.txt = function(key,library) {
	return Paths.getPath("" + key + ".txt","TEXT",library);
};
Paths.xml = function(key,library) {
	return Paths.getPath("data/" + key + ".xml","TEXT",library);
};
Paths.json = function(key,library) {
	return Paths.getPath("data/" + key + ".json","TEXT",library);
};
Paths.sound = function(key,library) {
	return Paths.getPath("sounds/" + key + "." + "mp3","SOUND",library);
};
Paths.soundRandom = function(key,min,max,library) {
	return Paths.sound(key + flixel_FlxG.random.int(min,max),library);
};
Paths.music = function(key,library) {
	return Paths.getPath("music/" + key + "." + "mp3","MUSIC",library);
};
Paths.voices = function(song) {
	var songLowercase = StringTools.replace(song," ","-").toLowerCase();
	switch(songLowercase) {
	case "dad-battle":
		songLowercase = "dadbattle";
		break;
	case "philly-nice":
		songLowercase = "philly";
		break;
	}
	return "songs:assets/songs/" + songLowercase + "/Voices." + "mp3";
};
Paths.inst = function(song) {
	var songLowercase = StringTools.replace(song," ","-").toLowerCase();
	switch(songLowercase) {
	case "dad-battle":
		songLowercase = "dadbattle";
		break;
	case "philly-nice":
		songLowercase = "philly";
		break;
	}
	return "songs:assets/songs/" + songLowercase + "/Inst." + "mp3";
};
Paths.image = function(key,library) {
	return Paths.getPath("images/" + key + ".png","IMAGE",library);
};
Paths.font = function(key) {
	return "assets/fonts/" + key;
};
Paths.getSparrowAtlas = function(key,library,isCharacter) {
	if(isCharacter == null) {
		isCharacter = false;
	}
	var usecahce = flixel_FlxG.save.data.cacheImages;
	usecahce = false;
	if(isCharacter) {
		if(usecahce) {
			return null;
		} else {
			return flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + ("characters/" + key) + ".png","IMAGE",library),Paths.getPath("images/characters/" + key + ".xml","TEXT",library));
		}
	}
	return flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + key + ".png","IMAGE",library),Paths.getPath("images/" + key + ".xml","TEXT",library));
};
Paths.getPackerAtlas = function(key,library,isCharacter) {
	if(isCharacter == null) {
		isCharacter = false;
	}
	var usecahce = flixel_FlxG.save.data.cacheImages;
	usecahce = false;
	if(isCharacter) {
		if(usecahce) {
			return null;
		} else {
			return flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(Paths.getPath("images/" + ("characters/" + key) + ".png","IMAGE",null),Paths.getPath("images/characters/" + key + ".txt","TEXT",library));
		}
	}
	return flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(Paths.getPath("images/" + key + ".png","IMAGE",library),Paths.getPath("images/" + key + ".txt","TEXT",library));
};
var PauseSubState = function(x,y) {
	this.offsetChanged = false;
	this.curSelected = 0;
	this.menuItems = ["Resume","Restart Song","Exit to menu"];
	MusicBeatSubstate.call(this);
	if(PlayState.instance.useVideo) {
		HxOverrides.remove(this.menuItems,"Resume");
		if(GlobalVideo.get().playing) {
			GlobalVideo.get().pause();
		}
	}
	this.pauseMusic = new flixel_system_FlxSound().loadEmbedded(Paths.getPath("music/" + "breakfast" + "." + "mp3","MUSIC",null),true,true);
	this.pauseMusic.set_volume(0);
	this.pauseMusic.play(false,flixel_FlxG.random.int(0,this.pauseMusic._length / 2 | 0));
	flixel_FlxG.sound.list.add(this.pauseMusic);
	var bg = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
	bg.set_alpha(0);
	bg.scrollFactor.set();
	this.add(bg);
	var levelInfo = new flixel_text_FlxText(20,15,0,"",32);
	var _g = levelInfo;
	_g.set_text(_g.text + PlayState.SONG.song);
	levelInfo.scrollFactor.set();
	levelInfo.setFormat("assets/fonts/" + "vcr.ttf",32);
	levelInfo.updateHitbox();
	this.add(levelInfo);
	var levelDifficulty = new flixel_text_FlxText(20,47,0,"",32);
	var _g = levelDifficulty;
	_g.set_text(_g.text + CoolUtil.difficultyFromInt(PlayState.storyDifficulty).toUpperCase());
	levelDifficulty.scrollFactor.set();
	levelDifficulty.setFormat("assets/fonts/" + "vcr.ttf",32);
	levelDifficulty.updateHitbox();
	this.add(levelDifficulty);
	levelDifficulty.set_alpha(0);
	levelInfo.set_alpha(0);
	levelInfo.set_x(flixel_FlxG.width - (levelInfo.get_width() + 20));
	levelDifficulty.set_x(flixel_FlxG.width - (levelDifficulty.get_width() + 20));
	flixel_tweens_FlxTween.tween(bg,{ alpha : 0.6},0.4,{ ease : flixel_tweens_FlxEase.quartInOut});
	flixel_tweens_FlxTween.tween(levelInfo,{ alpha : 1, y : 20},0.4,{ ease : flixel_tweens_FlxEase.quartInOut, startDelay : 0.3});
	flixel_tweens_FlxTween.tween(levelDifficulty,{ alpha : 1, y : levelDifficulty.y + 5},0.4,{ ease : flixel_tweens_FlxEase.quartInOut, startDelay : 0.5});
	this.grpMenuShit = new flixel_group_FlxTypedGroup();
	this.add(this.grpMenuShit);
	this.perSongOffset = new flixel_text_FlxText(5,flixel_FlxG.height - 18,0,"Additive Offset (Left, Right): " + PlayState.songOffset + " - Description - " + "Adds value to global offset, per song.",12);
	this.perSongOffset.scrollFactor.set();
	this.perSongOffset.setFormat("VCR OSD Mono",16,-1,"left",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
	var _g = 0;
	var _g1 = this.menuItems.length;
	while(_g < _g1) {
		var i = _g++;
		var songText = new Alphabet(0,70 * i + 30,this.menuItems[i],true,false);
		songText.isMenuItem = true;
		songText.targetY = i;
		this.grpMenuShit.add(songText);
	}
	this.changeSelection();
	this.set_cameras([flixel_FlxG.cameras.list[flixel_FlxG.cameras.list.length - 1]]);
};
$hxClasses["PauseSubState"] = PauseSubState;
PauseSubState.__name__ = "PauseSubState";
PauseSubState.__super__ = MusicBeatSubstate;
PauseSubState.prototype = $extend(MusicBeatSubstate.prototype,{
	grpMenuShit: null
	,menuItems: null
	,curSelected: null
	,pauseMusic: null
	,perSongOffset: null
	,offsetChanged: null
	,update: function(elapsed) {
		if(this.pauseMusic._volume < 0.5) {
			var _g = this.pauseMusic;
			_g.set_volume(_g._volume + 0.01 * elapsed);
		}
		MusicBeatSubstate.prototype.update.call(this,elapsed);
		if(PlayState.instance.useVideo) {
			HxOverrides.remove(this.menuItems,"Resume");
		}
		var gamepad = flixel_FlxG.gamepads.lastActive;
		var upPcontroller = false;
		var downPcontroller = false;
		var leftPcontroller = false;
		var rightPcontroller = false;
		var oldOffset = 0;
		if(gamepad != null && KeyBinds.gamepad) {
			var _this = gamepad.justPressed;
			var id = 11;
			var _this1 = _this.gamepad;
			var Status = _this.status;
			switch(id) {
			case -2:
				upPcontroller = _this1.anyButton(Status);
				break;
			case -1:
				upPcontroller = !_this1.anyButton(Status);
				break;
			default:
				var RawID = _this1.mapping.getRawID(id);
				var button = _this1.buttons[RawID];
				upPcontroller = button != null && button.hasState(Status);
			}
			var _this = gamepad.justPressed;
			var id = 12;
			var _this1 = _this.gamepad;
			var Status = _this.status;
			switch(id) {
			case -2:
				downPcontroller = _this1.anyButton(Status);
				break;
			case -1:
				downPcontroller = !_this1.anyButton(Status);
				break;
			default:
				var RawID = _this1.mapping.getRawID(id);
				var button = _this1.buttons[RawID];
				downPcontroller = button != null && button.hasState(Status);
			}
			var _this = gamepad.justPressed;
			var id = 13;
			var _this1 = _this.gamepad;
			var Status = _this.status;
			switch(id) {
			case -2:
				leftPcontroller = _this1.anyButton(Status);
				break;
			case -1:
				leftPcontroller = !_this1.anyButton(Status);
				break;
			default:
				var RawID = _this1.mapping.getRawID(id);
				var button = _this1.buttons[RawID];
				leftPcontroller = button != null && button.hasState(Status);
			}
			var _this = gamepad.justPressed;
			var id = 14;
			var _this1 = _this.gamepad;
			var Status = _this.status;
			switch(id) {
			case -2:
				rightPcontroller = _this1.anyButton(Status);
				break;
			case -1:
				rightPcontroller = !_this1.anyButton(Status);
				break;
			default:
				var RawID = _this1.mapping.getRawID(id);
				var button = _this1.buttons[RawID];
				rightPcontroller = button != null && button.hasState(Status);
			}
		}
		var songLowercase = StringTools.replace(PlayState.SONG.song," ","-").toLowerCase();
		switch(songLowercase) {
		case "dad-battle":
			songLowercase = "dadbattle";
			break;
		case "philly-nice":
			songLowercase = "philly";
			break;
		}
		var songPath = "assets/data/" + songLowercase + "/";
		if(PlayerSettings.player1.controls._upP.check() || upPcontroller) {
			this.changeSelection(-1);
		} else if(PlayerSettings.player1.controls._downP.check() || downPcontroller) {
			this.changeSelection(1);
		}
		var tmp;
		if(PlayerSettings.player1.controls._accept.check()) {
			var _this = flixel_FlxG.keys.pressed;
			tmp = !_this.keyManager.checkStatus(18,_this.status);
		} else {
			tmp = false;
		}
		if(tmp) {
			var daSelected = this.menuItems[this.curSelected];
			switch(daSelected) {
			case "Exit to menu":
				PlayState.startTime = 0;
				if(PlayState.instance.useVideo) {
					GlobalVideo.get().stop();
					PlayState.instance.remove(PlayState.instance.videoSprite);
					PlayState.instance.removedVideo = true;
				}
				if(PlayState.loadRep) {
					flixel_FlxG.save.data.botplay = false;
					flixel_FlxG.save.data.scrollSpeed = 1;
					flixel_FlxG.save.data.downscroll = false;
				}
				PlayState.loadRep = false;
				if(flixel_FlxG.save.data.fpsCap > 290) {
					(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).setFPSCap(290);
				}
				PlayState.instance.clean();
				if(PlayState.isStoryMode) {
					var nextState = new StoryMenuState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				} else {
					var nextState = new FreeplayState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				}
				break;
			case "Restart Song":
				PlayState.startTime = 0;
				if(PlayState.instance.useVideo) {
					GlobalVideo.get().stop();
					PlayState.instance.remove(PlayState.instance.videoSprite);
					PlayState.instance.removedVideo = true;
				}
				PlayState.instance.clean();
				var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
				break;
			case "Resume":
				this.close();
				break;
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		var tmp = _this.keyManager.checkStatus(74,_this.status);
	}
	,destroy: function() {
		this.pauseMusic.destroy();
		MusicBeatSubstate.prototype.destroy.call(this);
	}
	,changeSelection: function(change) {
		if(change == null) {
			change = 0;
		}
		this.curSelected += change;
		flixel_FlxG.sound.play(Paths.sound("scrollMenu"),0.4);
		if(this.curSelected < 0) {
			this.curSelected = this.menuItems.length - 1;
		}
		if(this.curSelected >= this.menuItems.length) {
			this.curSelected = 0;
		}
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.grpMenuShit.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - this.curSelected;
			++bullShit;
			item.set_alpha(0.6);
			if(item.targetY == 0) {
				item.set_alpha(1);
			}
		}
	}
	,__class__: PauseSubState
});
var PlayState = function(TransIn,TransOut) {
	this.curLight = 0;
	this.lightningOffset = 8;
	this.lightningStrikeBeat = 0;
	this.danced = false;
	this.startedMoving = false;
	this.trainCooldown = 0;
	this.trainFinishing = false;
	this.trainCars = 8;
	this.trainFrameTiming = 0;
	this.trainMoving = false;
	this.fastCarCanDrive = true;
	this.etternaModeScore = 0;
	this.mashViolations = 0;
	this.mashing = 0;
	this.playingDathing = false;
	this.useVideo = false;
	this.fuckingVolume = 1;
	this.leftHold = false;
	this.rightHold = false;
	this.downHold = false;
	this.upHold = false;
	this.currentTimingShown = null;
	this.timeShown = 0;
	this.offsetTest = 0;
	this.hits = [];
	this.endingSong = false;
	this.pastScrollChanges = [];
	this.updateFrame = 0;
	this.currentBPM = 0;
	this.removedVideo = false;
	this.stopUpdate = false;
	this.maxNPS = 0;
	this.nps = 0;
	this.canPause = true;
	this.startedCountdown = false;
	this.paused = false;
	this.debugNum = 0;
	this.songStarted = false;
	this.closestNotes = [];
	this.keys = [false,false,false,false];
	this.songTime = 0;
	this.lastReportedPlayheadPosition = 0;
	this.previousFrameTime = 0;
	this.luaWiggles = [];
	this.perfectMode = false;
	this.dataColor = ["purple","blue","green","red"];
	this.dataSuffix = ["LEFT","DOWN","UP","RIGHT"];
	this.executeModchart = false;
	this.replayAna = new Analysis();
	this.saveJudge = [];
	this.saveNotes = [];
	this.allowedToHeadbang = false;
	this.triggeredAlready = false;
	this.usedTimeTravel = false;
	this.inCutscene = false;
	this.defaultCamZoom = 1.05;
	this.songScoreDef = 0;
	this.songScore = 0;
	this.talking = true;
	this.wiggleShit = new WiggleEffect();
	this.fc = true;
	this.isHalloween = false;
	this.dialogue = ["dad:blah blah blah","bf:coolswag"];
	this.idleBeat = 2;
	this.idleToBeat = true;
	this.currentFrames = 0;
	this.notesHitArray = [];
	this.isSMFile = false;
	this.cannotDie = false;
	this.startingSong = false;
	this.generatedMusic = false;
	this.songPositionBar = 0;
	this.ss = false;
	this.totalPlayed = 0;
	this.totalNotesHitDefault = 0;
	this.totalNotesHit = 0;
	this.accuracyDefault = 0.00;
	this.accuracy = 0.00;
	this.combo = 0;
	this.health = 1;
	this.gfSpeed = 1;
	this.curSong = "";
	this.camZooming = false;
	this.curSection = 0;
	this.unspawnNotes = [];
	this.songLength = 0;
	this.halloweenLevel = false;
	this.visibleCombos = [];
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["PlayState"] = PlayState;
PlayState.__name__ = "PlayState";
PlayState.SONG = null;
PlayState.songPosBG = null;
PlayState.songPosBar = null;
PlayState.rep = null;
PlayState.dad = null;
PlayState.gf = null;
PlayState.boyfriend = null;
PlayState.prevCamFollow = null;
PlayState.webmHandler = null;
PlayState.__super__ = MusicBeatState;
PlayState.prototype = $extend(MusicBeatState.prototype,{
	visibleCombos: null
	,halloweenLevel: null
	,songLength: null
	,kadeEngineWatermark: null
	,vocals: null
	,originalX: null
	,notes: null
	,unspawnNotes: null
	,strumLine: null
	,curSection: null
	,camFollow: null
	,camZooming: null
	,curSong: null
	,gfSpeed: null
	,health: null
	,combo: null
	,accuracy: null
	,accuracyDefault: null
	,totalNotesHit: null
	,totalNotesHitDefault: null
	,totalPlayed: null
	,ss: null
	,healthBarBG: null
	,healthBar: null
	,songPositionBar: null
	,generatedMusic: null
	,startingSong: null
	,iconP1: null
	,iconP2: null
	,camHUD: null
	,camSustains: null
	,camNotes: null
	,camGame: null
	,cannotDie: null
	,isSMFile: null
	,notesHitArray: null
	,currentFrames: null
	,idleToBeat: null
	,idleBeat: null
	,dialogue: null
	,halloweenBG: null
	,isHalloween: null
	,phillyCityLights: null
	,phillyTrain: null
	,trainSound: null
	,limo: null
	,grpLimoDancers: null
	,fastCar: null
	,songName: null
	,upperBoppers: null
	,bottomBoppers: null
	,santa: null
	,fc: null
	,bgGirls: null
	,wiggleShit: null
	,talking: null
	,songScore: null
	,songScoreDef: null
	,scoreTxt: null
	,replayTxt: null
	,defaultCamZoom: null
	,funneEffect: null
	,inCutscene: null
	,usedTimeTravel: null
	,triggeredAlready: null
	,allowedToHeadbang: null
	,botPlayState: null
	,saveNotes: null
	,saveJudge: null
	,replayAna: null
	,executeModchart: null
	,dataSuffix: null
	,dataColor: null
	,addObject: function(object) {
		this.add(object);
	}
	,removeObject: function(object) {
		this.remove(object);
	}
	,create: function() {
		var _gthis = this;
		flixel_FlxG.mouse.set_visible(false);
		PlayState.instance = this;
		if(flixel_FlxG.save.data.fpsCap > 290) {
			(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).setFPSCap(800);
		}
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		PlayState.sicks = 0;
		PlayState.bads = 0;
		PlayState.shits = 0;
		PlayState.goods = 0;
		PlayState.misses = 0;
		PlayState.highestCombo = 0;
		PlayState.repPresses = 0;
		PlayState.repReleases = 0;
		PlayState.inResults = false;
		PlayStateChangeables.useDownscroll = flixel_FlxG.save.data.downscroll;
		PlayStateChangeables.safeFrames = flixel_FlxG.save.data.frames;
		PlayStateChangeables.scrollSpeed = flixel_FlxG.save.data.scrollSpeed;
		PlayStateChangeables.botPlay = flixel_FlxG.save.data.botplay;
		PlayStateChangeables.Optimize = flixel_FlxG.save.data.optimize;
		PlayStateChangeables.zoom = flixel_FlxG.save.data.zoom;
		var songLowercase = StringTools.replace(PlayState.SONG.song," ","-").toLowerCase();
		switch(songLowercase) {
		case "dad-battle":
			songLowercase = "dadbattle";
			break;
		case "philly-nice":
			songLowercase = "philly";
			break;
		}
		this.removedVideo = false;
		this.executeModchart = false;
		haxe_Log.trace("Mod chart: " + Std.string(this.executeModchart) + " - " + Paths.getPath("data/" + (songLowercase + "/modchart") + ".lua","TEXT",null),{ fileName : "source/PlayState.hx", lineNumber : 343, className : "PlayState", methodName : "create"});
		this.camGame = new flixel_FlxCamera();
		this.camHUD = new flixel_FlxCamera();
		this.camHUD.bgColor &= 16777215;
		this.camHUD.bgColor |= 0;
		this.camSustains = new flixel_FlxCamera();
		this.camSustains.bgColor &= 16777215;
		this.camSustains.bgColor |= 0;
		this.camNotes = new flixel_FlxCamera();
		this.camNotes.bgColor &= 16777215;
		this.camNotes.bgColor |= 0;
		flixel_FlxG.cameras.reset(this.camGame);
		flixel_FlxG.cameras.add(this.camHUD);
		flixel_FlxG.cameras.add(this.camSustains);
		flixel_FlxG.cameras.add(this.camNotes);
		this.camHUD.set_zoom(PlayStateChangeables.zoom);
		flixel_FlxCamera._defaultCameras = [this.camGame];
		this.persistentUpdate = true;
		this.persistentDraw = true;
		if(PlayState.SONG == null) {
			PlayState.SONG = Song.loadFromJson("tutorial","tutorial");
		}
		Conductor.mapBPMChanges(PlayState.SONG);
		Conductor.changeBPM(PlayState.SONG.bpm);
		if(PlayState.SONG.eventObjects == null) {
			PlayState.SONG.eventObjects = [new Event("Init BPM",0,PlayState.SONG.bpm,"BPM Change")];
		}
		TimingStruct.clearTimings();
		var currentIndex = 0;
		var _g = 0;
		var _g1 = PlayState.SONG.eventObjects;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.type == "BPM Change") {
				var beat = i.position;
				var endBeat = Infinity;
				TimingStruct.addTiming(beat,i.value,endBeat,0);
				if(currentIndex != 0) {
					var data = TimingStruct.AllTimings[currentIndex - 1];
					data.endBeat = beat;
					data.length = (data.endBeat - data.startBeat) / (data.bpm / 60);
					TimingStruct.AllTimings[currentIndex].startTime = data.startTime + data.length;
				}
				++currentIndex;
			}
		}
		haxe_Log.trace("INFORMATION ABOUT WHAT U PLAYIN WIT:\nFRAMES: " + PlayStateChangeables.safeFrames + "\nZONE: " + Conductor.safeZoneOffset + "\nTS: " + Conductor.timeScale + "\nBotPlay : " + Std.string(PlayStateChangeables.botPlay),{ fileName : "source/PlayState.hx", lineNumber : 453, className : "PlayState", methodName : "create"});
		switch(songLowercase) {
		case "roses":case "senpai":case "thorns":
			this.dialogue = CoolUtil.coolTextFile(Paths.getPath("" + ("data/" + songLowercase + "/dialogue") + ".txt","TEXT",null));
			break;
		}
		var stageCheck = "stage";
		if(PlayState.SONG.stage == null) {
			switch(PlayState.storyWeek) {
			case 2:
				stageCheck = "halloween";
				break;
			case 3:
				stageCheck = "philly";
				break;
			case 4:
				stageCheck = "limo";
				break;
			case 5:
				if(songLowercase == "winter-horrorland") {
					stageCheck = "mallEvil";
				} else {
					stageCheck = "mall";
				}
				break;
			case 6:
				if(songLowercase == "thorns") {
					stageCheck = "schoolEvil";
				} else {
					stageCheck = "school";
				}
				break;
			}
		} else {
			stageCheck = PlayState.SONG.stage;
		}
		if(!PlayStateChangeables.Optimize) {
			switch(stageCheck) {
			case "halloween":
				PlayState.curStage = "spooky";
				this.halloweenLevel = true;
				var usecahce = flixel_FlxG.save.data.cacheImages;
				usecahce = false;
				var hallowTex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "halloween_bg" + ".png","IMAGE","week2"),Paths.getPath("images/" + "halloween_bg" + ".xml","TEXT","week2"));
				this.halloweenBG = new flixel_FlxSprite(-200,-100);
				this.halloweenBG.set_frames(hallowTex);
				this.halloweenBG.animation.addByPrefix("idle","halloweem bg0");
				this.halloweenBG.animation.addByPrefix("lightning","halloweem bg lightning strike",24,false);
				this.halloweenBG.animation.play("idle");
				this.halloweenBG.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.add(this.halloweenBG);
				this.isHalloween = true;
				break;
			case "limo":
				PlayState.curStage = "limo";
				this.defaultCamZoom = 0.90;
				var skyBG = new flixel_FlxSprite(-120,-50).loadGraphic(Paths.getPath("images/" + "limo/limoSunset" + ".png","IMAGE","week4"));
				skyBG.scrollFactor.set(0.1,0.1);
				skyBG.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.add(skyBG);
				var bgLimo = new flixel_FlxSprite(-200,480);
				var usecahce = flixel_FlxG.save.data.cacheImages;
				usecahce = false;
				bgLimo.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "limo/bgLimo" + ".png","IMAGE","week4"),Paths.getPath("images/" + "limo/bgLimo" + ".xml","TEXT","week4")));
				bgLimo.animation.addByPrefix("drive","background limo pink",24);
				bgLimo.animation.play("drive");
				bgLimo.scrollFactor.set(0.4,0.4);
				bgLimo.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.add(bgLimo);
				if(flixel_FlxG.save.data.distractions) {
					this.grpLimoDancers = new flixel_group_FlxTypedGroup();
					this.add(this.grpLimoDancers);
					var dancer = new BackgroundDancer(130,bgLimo.y - 400);
					dancer.scrollFactor.set(0.4,0.4);
					this.grpLimoDancers.add(dancer);
					var dancer = new BackgroundDancer(500,bgLimo.y - 400);
					dancer.scrollFactor.set(0.4,0.4);
					this.grpLimoDancers.add(dancer);
					var dancer = new BackgroundDancer(870,bgLimo.y - 400);
					dancer.scrollFactor.set(0.4,0.4);
					this.grpLimoDancers.add(dancer);
					var dancer = new BackgroundDancer(1240,bgLimo.y - 400);
					dancer.scrollFactor.set(0.4,0.4);
					this.grpLimoDancers.add(dancer);
					var dancer = new BackgroundDancer(1610,bgLimo.y - 400);
					dancer.scrollFactor.set(0.4,0.4);
					this.grpLimoDancers.add(dancer);
				}
				var overlayShit = new flixel_FlxSprite(-500,-600).loadGraphic(Paths.getPath("images/" + "limo/limoOverlay" + ".png","IMAGE","week4"));
				overlayShit.set_alpha(0.5);
				var usecahce = flixel_FlxG.save.data.cacheImages;
				usecahce = false;
				var limoTex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "limo/limoDrive" + ".png","IMAGE","week4"),Paths.getPath("images/" + "limo/limoDrive" + ".xml","TEXT","week4"));
				this.limo = new flixel_FlxSprite(-120,550);
				this.limo.set_frames(limoTex);
				this.limo.animation.addByPrefix("drive","Limo stage",24);
				this.limo.animation.play("drive");
				this.limo.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.fastCar = new flixel_FlxSprite(-300,160).loadGraphic(Paths.getPath("images/" + "limo/fastCarLol" + ".png","IMAGE","week4"));
				this.fastCar.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				break;
			case "mall":
				PlayState.curStage = "mall";
				this.defaultCamZoom = 0.80;
				var bg = new flixel_FlxSprite(-1000,-500).loadGraphic(Paths.getPath("images/" + "christmas/bgWalls" + ".png","IMAGE","week5"));
				bg.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				bg.scrollFactor.set(0.2,0.2);
				bg.set_active(false);
				bg.setGraphicSize(bg.get_width() * 0.8 | 0);
				bg.updateHitbox();
				this.add(bg);
				this.upperBoppers = new flixel_FlxSprite(-240,-90);
				var usecahce = flixel_FlxG.save.data.cacheImages;
				usecahce = false;
				this.upperBoppers.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "christmas/upperBop" + ".png","IMAGE","week5"),Paths.getPath("images/" + "christmas/upperBop" + ".xml","TEXT","week5")));
				this.upperBoppers.animation.addByPrefix("bop","Upper Crowd Bob",24,false);
				this.upperBoppers.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.upperBoppers.scrollFactor.set(0.33,0.33);
				this.upperBoppers.setGraphicSize(this.upperBoppers.get_width() * 0.85 | 0);
				this.upperBoppers.updateHitbox();
				if(flixel_FlxG.save.data.distractions) {
					this.add(this.upperBoppers);
				}
				var bgEscalator = new flixel_FlxSprite(-1100,-600).loadGraphic(Paths.getPath("images/" + "christmas/bgEscalator" + ".png","IMAGE","week5"));
				bgEscalator.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				bgEscalator.scrollFactor.set(0.3,0.3);
				bgEscalator.set_active(false);
				bgEscalator.setGraphicSize(bgEscalator.get_width() * 0.9 | 0);
				bgEscalator.updateHitbox();
				this.add(bgEscalator);
				var tree = new flixel_FlxSprite(370,-250).loadGraphic(Paths.getPath("images/" + "christmas/christmasTree" + ".png","IMAGE","week5"));
				tree.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				tree.scrollFactor.set(0.40,0.40);
				this.add(tree);
				this.bottomBoppers = new flixel_FlxSprite(-300,140);
				var usecahce = flixel_FlxG.save.data.cacheImages;
				usecahce = false;
				this.bottomBoppers.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "christmas/bottomBop" + ".png","IMAGE","week5"),Paths.getPath("images/" + "christmas/bottomBop" + ".xml","TEXT","week5")));
				this.bottomBoppers.animation.addByPrefix("bop","Bottom Level Boppers",24,false);
				this.bottomBoppers.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.bottomBoppers.scrollFactor.set(0.9,0.9);
				this.bottomBoppers.setGraphicSize(this.bottomBoppers.get_width() | 0);
				this.bottomBoppers.updateHitbox();
				if(flixel_FlxG.save.data.distractions) {
					this.add(this.bottomBoppers);
				}
				var fgSnow = new flixel_FlxSprite(-600,700).loadGraphic(Paths.getPath("images/" + "christmas/fgSnow" + ".png","IMAGE","week5"));
				fgSnow.set_active(false);
				fgSnow.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.add(fgSnow);
				this.santa = new flixel_FlxSprite(-840,150);
				var usecahce = flixel_FlxG.save.data.cacheImages;
				usecahce = false;
				this.santa.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "christmas/santa" + ".png","IMAGE","week5"),Paths.getPath("images/" + "christmas/santa" + ".xml","TEXT","week5")));
				this.santa.animation.addByPrefix("idle","santa idle in fear",24,false);
				this.santa.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				if(flixel_FlxG.save.data.distractions) {
					this.add(this.santa);
				}
				break;
			case "mallEvil":
				PlayState.curStage = "mallEvil";
				var bg = new flixel_FlxSprite(-400,-500).loadGraphic(Paths.getPath("images/" + "christmas/evilBG" + ".png","IMAGE","week5"));
				bg.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				bg.scrollFactor.set(0.2,0.2);
				bg.set_active(false);
				bg.setGraphicSize(bg.get_width() * 0.8 | 0);
				bg.updateHitbox();
				this.add(bg);
				var evilTree = new flixel_FlxSprite(300,-300).loadGraphic(Paths.getPath("images/" + "christmas/evilTree" + ".png","IMAGE","week5"));
				evilTree.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				evilTree.scrollFactor.set(0.2,0.2);
				this.add(evilTree);
				var evilSnow = new flixel_FlxSprite(-200,700).loadGraphic(Paths.getPath("images/" + "christmas/evilSnow" + ".png","IMAGE","week5"));
				evilSnow.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.add(evilSnow);
				break;
			case "philly":
				PlayState.curStage = "philly";
				var bg = new flixel_FlxSprite(-100).loadGraphic(Paths.getPath("images/" + "philly/sky" + ".png","IMAGE","week3"));
				bg.scrollFactor.set(0.1,0.1);
				this.add(bg);
				var city = new flixel_FlxSprite(-10).loadGraphic(Paths.getPath("images/" + "philly/city" + ".png","IMAGE","week3"));
				city.scrollFactor.set(0.3,0.3);
				city.setGraphicSize(city.get_width() * 0.85 | 0);
				city.updateHitbox();
				this.add(city);
				this.phillyCityLights = new flixel_group_FlxTypedGroup();
				if(flixel_FlxG.save.data.distractions) {
					this.add(this.phillyCityLights);
				}
				var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 0) + ".png","IMAGE","week3"));
				light.scrollFactor.set(0.3,0.3);
				light.set_visible(false);
				light.setGraphicSize(light.get_width() * 0.85 | 0);
				light.updateHitbox();
				light.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.phillyCityLights.add(light);
				var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 1) + ".png","IMAGE","week3"));
				light.scrollFactor.set(0.3,0.3);
				light.set_visible(false);
				light.setGraphicSize(light.get_width() * 0.85 | 0);
				light.updateHitbox();
				light.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.phillyCityLights.add(light);
				var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 2) + ".png","IMAGE","week3"));
				light.scrollFactor.set(0.3,0.3);
				light.set_visible(false);
				light.setGraphicSize(light.get_width() * 0.85 | 0);
				light.updateHitbox();
				light.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.phillyCityLights.add(light);
				var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 3) + ".png","IMAGE","week3"));
				light.scrollFactor.set(0.3,0.3);
				light.set_visible(false);
				light.setGraphicSize(light.get_width() * 0.85 | 0);
				light.updateHitbox();
				light.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.phillyCityLights.add(light);
				var light = new flixel_FlxSprite(city.x).loadGraphic(Paths.getPath("images/" + ("philly/win" + 4) + ".png","IMAGE","week3"));
				light.scrollFactor.set(0.3,0.3);
				light.set_visible(false);
				light.setGraphicSize(light.get_width() * 0.85 | 0);
				light.updateHitbox();
				light.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.phillyCityLights.add(light);
				var streetBehind = new flixel_FlxSprite(-40,50).loadGraphic(Paths.getPath("images/" + "philly/behindTrain" + ".png","IMAGE","week3"));
				this.add(streetBehind);
				this.phillyTrain = new flixel_FlxSprite(2000,360).loadGraphic(Paths.getPath("images/" + "philly/train" + ".png","IMAGE","week3"));
				if(flixel_FlxG.save.data.distractions) {
					this.add(this.phillyTrain);
				}
				this.trainSound = new flixel_system_FlxSound().loadEmbedded(Paths.sound("train_passes","week3"));
				flixel_FlxG.sound.list.add(this.trainSound);
				var street = new flixel_FlxSprite(-40,streetBehind.y).loadGraphic(Paths.getPath("images/" + "philly/street" + ".png","IMAGE","week3"));
				this.add(street);
				break;
			case "school":
				PlayState.curStage = "school";
				var bgSky = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "weeb/weebSky" + ".png","IMAGE","week6"));
				bgSky.scrollFactor.set(0.1,0.1);
				this.add(bgSky);
				var repositionShit = -200;
				var bgSchool = new flixel_FlxSprite(repositionShit,0).loadGraphic(Paths.getPath("images/" + "weeb/weebSchool" + ".png","IMAGE","week6"));
				bgSchool.scrollFactor.set(0.6,0.90);
				this.add(bgSchool);
				var bgStreet = new flixel_FlxSprite(repositionShit).loadGraphic(Paths.getPath("images/" + "weeb/weebStreet" + ".png","IMAGE","week6"));
				bgStreet.scrollFactor.set(0.95,0.95);
				this.add(bgStreet);
				var fgTrees = new flixel_FlxSprite(repositionShit + 170,130).loadGraphic(Paths.getPath("images/" + "weeb/weebTreesBack" + ".png","IMAGE","week6"));
				fgTrees.scrollFactor.set(0.9,0.9);
				this.add(fgTrees);
				var bgTrees = new flixel_FlxSprite(repositionShit - 380,-800);
				var usecahce = flixel_FlxG.save.data.cacheImages;
				usecahce = false;
				var treetex = flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(Paths.getPath("images/" + "weeb/weebTrees" + ".png","IMAGE","week6"),Paths.getPath("images/" + "weeb/weebTrees" + ".txt","TEXT","week6"));
				bgTrees.set_frames(treetex);
				bgTrees.animation.add("treeLoop",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],12);
				bgTrees.animation.play("treeLoop");
				bgTrees.scrollFactor.set(0.85,0.85);
				this.add(bgTrees);
				var treeLeaves = new flixel_FlxSprite(repositionShit,-40);
				var usecahce = flixel_FlxG.save.data.cacheImages;
				usecahce = false;
				treeLeaves.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/petals" + ".png","IMAGE","week6"),Paths.getPath("images/" + "weeb/petals" + ".xml","TEXT","week6")));
				treeLeaves.animation.addByPrefix("leaves","PETALS ALL",24,true);
				treeLeaves.animation.play("leaves");
				treeLeaves.scrollFactor.set(0.85,0.85);
				this.add(treeLeaves);
				var widShit = bgSky.get_width() * 6 | 0;
				bgSky.setGraphicSize(widShit);
				bgSchool.setGraphicSize(widShit);
				bgStreet.setGraphicSize(widShit);
				bgTrees.setGraphicSize(widShit * 1.4 | 0);
				fgTrees.setGraphicSize(widShit * 0.8 | 0);
				treeLeaves.setGraphicSize(widShit);
				fgTrees.updateHitbox();
				bgSky.updateHitbox();
				bgSchool.updateHitbox();
				bgStreet.updateHitbox();
				bgTrees.updateHitbox();
				treeLeaves.updateHitbox();
				this.bgGirls = new BackgroundGirls(-100,190);
				this.bgGirls.scrollFactor.set(0.9,0.9);
				if(songLowercase == "roses") {
					if(flixel_FlxG.save.data.distractions) {
						this.bgGirls.getScared();
					}
				}
				this.bgGirls.setGraphicSize(this.bgGirls.get_width() * PlayState.daPixelZoom | 0);
				this.bgGirls.updateHitbox();
				if(flixel_FlxG.save.data.distractions) {
					this.add(this.bgGirls);
				}
				break;
			case "schoolEvil":
				PlayState.curStage = "schoolEvil";
				if(!PlayStateChangeables.Optimize) {
					var waveEffectBG = new flixel_addons_effects_chainable_FlxWaveEffect(flixel_addons_effects_chainable_FlxWaveMode.ALL,2,-1,3,2);
					var waveEffectFG = new flixel_addons_effects_chainable_FlxWaveEffect(flixel_addons_effects_chainable_FlxWaveMode.ALL,2,-1,5,2);
				}
				var posX = 400;
				var posY = 200;
				var bg = new flixel_FlxSprite(posX,posY);
				var usecahce = flixel_FlxG.save.data.cacheImages;
				usecahce = false;
				bg.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/animatedEvilSchool" + ".png","IMAGE","week6"),Paths.getPath("images/" + "weeb/animatedEvilSchool" + ".xml","TEXT","week6")));
				bg.animation.addByPrefix("idle","background 2",24);
				bg.animation.play("idle");
				bg.scrollFactor.set(0.8,0.9);
				bg.scale.set(6,6);
				this.add(bg);
				break;
			default:
				this.defaultCamZoom = 0.9;
				PlayState.curStage = "stage";
				var bg = new flixel_FlxSprite(-600,-200).loadGraphic(Paths.getPath("images/" + "stageback" + ".png","IMAGE",null));
				bg.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				bg.scrollFactor.set(0.9,0.9);
				bg.set_active(false);
				this.add(bg);
				var stageFront = new flixel_FlxSprite(-650,600).loadGraphic(Paths.getPath("images/" + "stagefront" + ".png","IMAGE",null));
				stageFront.setGraphicSize(stageFront.get_width() * 1.1 | 0);
				stageFront.updateHitbox();
				stageFront.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				stageFront.scrollFactor.set(0.9,0.9);
				stageFront.set_active(false);
				this.add(stageFront);
				var stageCurtains = new flixel_FlxSprite(-500,-300).loadGraphic(Paths.getPath("images/" + "stagecurtains" + ".png","IMAGE",null));
				stageCurtains.setGraphicSize(stageCurtains.get_width() * 0.9 | 0);
				stageCurtains.updateHitbox();
				stageCurtains.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				stageCurtains.scrollFactor.set(1.3,1.3);
				stageCurtains.set_active(false);
				this.add(stageCurtains);
			}
		}
		var gfCheck = "gf";
		if(PlayState.SONG.gfVersion == null) {
			switch(PlayState.storyWeek) {
			case 4:
				gfCheck = "gf-car";
				break;
			case 5:
				gfCheck = "gf-christmas";
				break;
			case 6:
				gfCheck = "gf-pixel";
				break;
			}
		} else {
			gfCheck = PlayState.SONG.gfVersion;
		}
		var curGf = "";
		switch(gfCheck) {
		case "gf-car":
			curGf = "gf-car";
			break;
		case "gf-christmas":
			curGf = "gf-christmas";
			break;
		case "gf-pixel":
			curGf = "gf-pixel";
			break;
		default:
			curGf = "gf";
		}
		PlayState.gf = new Character(400,130,curGf);
		PlayState.gf.scrollFactor.set(0.95,0.95);
		PlayState.dad = new Character(100,100,PlayState.SONG.player2);
		var camPos = new flixel_math_FlxPoint(PlayState.dad.getGraphicMidpoint().x,PlayState.dad.getGraphicMidpoint().y);
		switch(PlayState.SONG.player2) {
		case "dad":
			var _g = camPos;
			_g.set_x(_g.x + 400);
			break;
		case "gf":
			PlayState.dad.setPosition(PlayState.gf.x,PlayState.gf.y);
			PlayState.gf.set_visible(false);
			if(PlayState.isStoryMode) {
				var _g = camPos;
				_g.set_x(_g.x + 600);
				this.tweenCamIn();
			}
			break;
		case "monster":
			var _g = PlayState.dad;
			_g.set_y(_g.y + 100);
			break;
		case "monster-christmas":
			var _g = PlayState.dad;
			_g.set_y(_g.y + 130);
			break;
		case "parents-christmas":
			var _g = PlayState.dad;
			_g.set_x(_g.x - 500);
			break;
		case "pico":
			var _g = camPos;
			_g.set_x(_g.x + 600);
			var _g = PlayState.dad;
			_g.set_y(_g.y + 300);
			break;
		case "senpai":
			var _g = PlayState.dad;
			_g.set_x(_g.x + 150);
			var _g = PlayState.dad;
			_g.set_y(_g.y + 360);
			camPos.set(PlayState.dad.getGraphicMidpoint().x + 300,PlayState.dad.getGraphicMidpoint().y);
			break;
		case "senpai-angry":
			var _g = PlayState.dad;
			_g.set_x(_g.x + 150);
			var _g = PlayState.dad;
			_g.set_y(_g.y + 360);
			camPos.set(PlayState.dad.getGraphicMidpoint().x + 300,PlayState.dad.getGraphicMidpoint().y);
			break;
		case "spirit":
			if(flixel_FlxG.save.data.distractions) {
				if(!PlayStateChangeables.Optimize) {
					var evilTrail = new flixel_addons_effects_FlxTrail(PlayState.dad,null,4,24,0.3,0.069);
					this.add(evilTrail);
				}
			}
			var _g = PlayState.dad;
			_g.set_x(_g.x - 150);
			var _g = PlayState.dad;
			_g.set_y(_g.y + 100);
			camPos.set(PlayState.dad.getGraphicMidpoint().x + 300,PlayState.dad.getGraphicMidpoint().y);
			break;
		case "spooky":
			var _g = PlayState.dad;
			_g.set_y(_g.y + 200);
			break;
		}
		PlayState.boyfriend = new Boyfriend(770,450,PlayState.SONG.player1);
		switch(PlayState.curStage) {
		case "limo":
			var _g = PlayState.boyfriend;
			_g.set_y(_g.y - 220);
			var _g = PlayState.boyfriend;
			_g.set_x(_g.x + 260);
			if(flixel_FlxG.save.data.distractions) {
				this.resetFastCar();
				this.add(this.fastCar);
			}
			break;
		case "mall":
			var _g = PlayState.boyfriend;
			_g.set_x(_g.x + 200);
			break;
		case "mallEvil":
			var _g = PlayState.boyfriend;
			_g.set_x(_g.x + 320);
			var _g = PlayState.dad;
			_g.set_y(_g.y - 80);
			break;
		case "school":
			var _g = PlayState.boyfriend;
			_g.set_x(_g.x + 200);
			var _g = PlayState.boyfriend;
			_g.set_y(_g.y + 220);
			var _g = PlayState.gf;
			_g.set_x(_g.x + 180);
			var _g = PlayState.gf;
			_g.set_y(_g.y + 300);
			break;
		case "schoolEvil":
			var _g = PlayState.boyfriend;
			_g.set_x(_g.x + 200);
			var _g = PlayState.boyfriend;
			_g.set_y(_g.y + 220);
			var _g = PlayState.gf;
			_g.set_x(_g.x + 180);
			var _g = PlayState.gf;
			_g.set_y(_g.y + 300);
			break;
		}
		if(!PlayStateChangeables.Optimize) {
			this.add(PlayState.gf);
			if(PlayState.curStage == "limo") {
				this.add(this.limo);
			}
			this.add(PlayState.dad);
			this.add(PlayState.boyfriend);
		}
		if(PlayState.loadRep) {
			PlayStateChangeables.useDownscroll = PlayState.rep.replay.isDownscroll;
			PlayStateChangeables.safeFrames = PlayState.rep.replay.sf;
			PlayStateChangeables.botPlay = true;
		}
		haxe_Log.trace("uh " + PlayStateChangeables.safeFrames,{ fileName : "source/PlayState.hx", lineNumber : 1015, className : "PlayState", methodName : "create"});
		haxe_Log.trace("SF CALC: " + Math.floor(PlayStateChangeables.safeFrames / 60 * 1000),{ fileName : "source/PlayState.hx", lineNumber : 1017, className : "PlayState", methodName : "create"});
		var doof = new DialogueBox(false,this.dialogue);
		doof.scrollFactor.set();
		doof.finishThing = $bind(this,this.startCountdown);
		Conductor.songPosition = -5000;
		this.strumLine = new flixel_FlxSprite(0,50).makeGraphic(flixel_FlxG.width,10);
		this.strumLine.scrollFactor.set();
		if(PlayStateChangeables.useDownscroll) {
			this.strumLine.set_y(flixel_FlxG.height - 165);
		}
		PlayState.strumLineNotes = new flixel_group_FlxTypedGroup();
		this.add(PlayState.strumLineNotes);
		PlayState.playerStrums = new flixel_group_FlxTypedGroup();
		PlayState.cpuStrums = new flixel_group_FlxTypedGroup();
		this.generateStaticArrows(0);
		this.generateStaticArrows(1);
		if(PlayState.SONG.song == null) {
			haxe_Log.trace("song is null???",{ fileName : "source/PlayState.hx", lineNumber : 1045, className : "PlayState", methodName : "create"});
		} else {
			haxe_Log.trace("song looks gucci",{ fileName : "source/PlayState.hx", lineNumber : 1047, className : "PlayState", methodName : "create"});
		}
		this.generateSong(PlayState.SONG.song);
		var _g = 0;
		var _g1 = this.unspawnNotes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var dunceNote = i;
			this.notes.add(dunceNote);
			if(this.executeModchart) {
				if(!dunceNote.isSustainNote) {
					dunceNote.set_cameras([this.camNotes]);
				} else {
					dunceNote.set_cameras([this.camSustains]);
				}
			} else {
				dunceNote.set_cameras([this.camHUD]);
			}
		}
		if(PlayState.startTime != 0) {
			var toBeRemoved = [];
			var _g = 0;
			var _g1 = this.notes.members.length;
			while(_g < _g1) {
				var i = _g++;
				var dunceNote = this.notes.members[i];
				if(dunceNote.strumTime - PlayState.startTime <= 0) {
					toBeRemoved.push(dunceNote);
				} else if(PlayStateChangeables.useDownscroll) {
					if(dunceNote.mustPress) {
						dunceNote.set_y(PlayState.playerStrums.members[Math.floor(Math.abs(dunceNote.noteData))].y + 0.45 * (PlayState.startTime - dunceNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayStateChangeables.scrollSpeed == 1 ? PlayState.SONG.speed : PlayStateChangeables.scrollSpeed,2) - dunceNote.noteYOff);
					} else {
						dunceNote.set_y(PlayState.strumLineNotes.members[Math.floor(Math.abs(dunceNote.noteData))].y + 0.45 * (PlayState.startTime - dunceNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayStateChangeables.scrollSpeed == 1 ? PlayState.SONG.speed : PlayStateChangeables.scrollSpeed,2) - dunceNote.noteYOff);
					}
				} else if(dunceNote.mustPress) {
					dunceNote.set_y(PlayState.playerStrums.members[Math.floor(Math.abs(dunceNote.noteData))].y - 0.45 * (PlayState.startTime - dunceNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayStateChangeables.scrollSpeed == 1 ? PlayState.SONG.speed : PlayStateChangeables.scrollSpeed,2) + dunceNote.noteYOff);
				} else {
					dunceNote.set_y(PlayState.strumLineNotes.members[Math.floor(Math.abs(dunceNote.noteData))].y - 0.45 * (PlayState.startTime - dunceNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayStateChangeables.scrollSpeed == 1 ? PlayState.SONG.speed : PlayStateChangeables.scrollSpeed,2) + dunceNote.noteYOff);
				}
			}
			var _g = 0;
			while(_g < toBeRemoved.length) {
				var i = toBeRemoved[_g];
				++_g;
				HxOverrides.remove(this.notes.members,i);
			}
		}
		haxe_Log.trace("generated",{ fileName : "source/PlayState.hx", lineNumber : 1108, className : "PlayState", methodName : "create"});
		this.camFollow = new flixel_FlxObject(0,0,1,1);
		this.camFollow.setPosition(camPos.x,camPos.y);
		if(PlayState.prevCamFollow != null) {
			this.camFollow = PlayState.prevCamFollow;
			PlayState.prevCamFollow = null;
		}
		this.add(this.camFollow);
		flixel_FlxG.camera.follow(this.camFollow,flixel_FlxCameraFollowStyle.LOCKON,0.04 * (30 / (js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).getFPS()));
		flixel_FlxG.camera.set_zoom(this.defaultCamZoom);
		var _this = flixel_FlxG.camera;
		var point = this.camFollow.getPosition();
		_this.scroll.set(point.x - _this.width * 0.5,point.y - _this.height * 0.5);
		if(point._weak) {
			point.put();
		}
		var _this = flixel_FlxG.worldBounds;
		var X = 0;
		var Y = 0;
		var Width = flixel_FlxG.width;
		var Height = flixel_FlxG.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_FlxG.fixedTimestep = false;
		if(flixel_FlxG.save.data.songPosition) {
			PlayState.songPosBG = new flixel_FlxSprite(0,10).loadGraphic(Paths.getPath("images/" + "healthBar" + ".png","IMAGE",null));
			if(PlayStateChangeables.useDownscroll) {
				PlayState.songPosBG.set_y(flixel_FlxG.height * 0.9 + 45);
			}
			PlayState.songPosBG.screenCenter(flixel_util_FlxAxes.X);
			PlayState.songPosBG.scrollFactor.set();
			this.add(PlayState.songPosBG);
			PlayState.songPosBar = new flixel_ui_FlxBar(PlayState.songPosBG.x + 4,PlayState.songPosBG.y + 4,flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT,PlayState.songPosBG.get_width() - 8 | 0,PlayState.songPosBG.get_height() - 8 | 0,this,"songPositionBar",0,this.songLength);
			PlayState.songPosBar.scrollFactor.set();
			PlayState.songPosBar.createFilledBar(-8355712,-16711936);
			this.add(PlayState.songPosBar);
			var songName = new flixel_text_FlxText(PlayState.songPosBG.x + PlayState.songPosBG.get_width() / 2 - PlayState.SONG.song.length * 5,PlayState.songPosBG.y,0,PlayState.SONG.song,16);
			if(PlayStateChangeables.useDownscroll) {
				var _g = songName;
				_g.set_y(_g.y - 3);
			}
			songName.setFormat("assets/fonts/" + "vcr.ttf",16,-1,"right",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
			songName.scrollFactor.set();
			this.add(songName);
			songName.set_cameras([this.camHUD]);
		}
		this.healthBarBG = new flixel_FlxSprite(0,flixel_FlxG.height * 0.9).loadGraphic(Paths.getPath("images/" + "healthBar" + ".png","IMAGE",null));
		if(PlayStateChangeables.useDownscroll) {
			this.healthBarBG.set_y(50);
		}
		this.healthBarBG.screenCenter(flixel_util_FlxAxes.X);
		this.healthBarBG.scrollFactor.set();
		this.add(this.healthBarBG);
		this.healthBar = new flixel_ui_FlxBar(this.healthBarBG.x + 4,this.healthBarBG.y + 4,flixel_ui_FlxBarFillDirection.RIGHT_TO_LEFT,this.healthBarBG.get_width() - 8 | 0,this.healthBarBG.get_height() - 8 | 0,this,"health",0,2);
		this.healthBar.scrollFactor.set();
		this.healthBar.createFilledBar(-65536,-10027213);
		this.add(this.healthBar);
		this.kadeEngineWatermark = new flixel_text_FlxText(4,this.healthBarBG.y + 50,0,PlayState.SONG.song + " - " + CoolUtil.difficultyFromInt(PlayState.storyDifficulty) + (Main.watermarks ? " | KE " + MainMenuState.kadeEngineVer : ""),16);
		this.kadeEngineWatermark.setFormat("assets/fonts/" + "vcr.ttf",16,-1,"right",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.kadeEngineWatermark.scrollFactor.set();
		this.add(this.kadeEngineWatermark);
		if(PlayStateChangeables.useDownscroll) {
			this.kadeEngineWatermark.set_y(flixel_FlxG.height * 0.9 + 45);
		}
		this.scoreTxt = new flixel_text_FlxText(flixel_FlxG.width / 2 - 235,this.healthBarBG.y + 50,0,"",20);
		this.scoreTxt.screenCenter(flixel_util_FlxAxes.X);
		this.originalX = this.scoreTxt.x;
		this.scoreTxt.scrollFactor.set();
		this.scoreTxt.setFormat("assets/fonts/" + "vcr.ttf",16,-1,"center",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.add(this.scoreTxt);
		this.replayTxt = new flixel_text_FlxText(this.healthBarBG.x + this.healthBarBG.get_width() / 2 - 75,this.healthBarBG.y + (PlayStateChangeables.useDownscroll ? 100 : -100),0,"REPLAY",20);
		this.replayTxt.setFormat("assets/fonts/" + "vcr.ttf",42,-1,"right",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.replayTxt.set_borderSize(4);
		this.replayTxt.set_borderQuality(2);
		this.replayTxt.scrollFactor.set();
		if(PlayState.loadRep) {
			this.add(this.replayTxt);
		}
		this.botPlayState = new flixel_text_FlxText(this.healthBarBG.x + this.healthBarBG.get_width() / 2 - 75,this.healthBarBG.y + (PlayStateChangeables.useDownscroll ? 100 : -100),0,"BOTPLAY",20);
		this.botPlayState.setFormat("assets/fonts/" + "vcr.ttf",42,-1,"right",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
		this.botPlayState.scrollFactor.set();
		this.botPlayState.set_borderSize(4);
		this.botPlayState.set_borderQuality(2);
		if(PlayStateChangeables.botPlay && !PlayState.loadRep) {
			this.add(this.botPlayState);
		}
		this.iconP1 = new HealthIcon(PlayState.SONG.player1,true);
		this.iconP1.set_y(this.healthBar.y - this.iconP1.get_height() / 2);
		this.add(this.iconP1);
		this.iconP2 = new HealthIcon(PlayState.SONG.player2,false);
		this.iconP2.set_y(this.healthBar.y - this.iconP2.get_height() / 2);
		this.add(this.iconP2);
		PlayState.strumLineNotes.set_cameras([this.camHUD]);
		this.notes.set_cameras([this.camHUD]);
		this.healthBar.set_cameras([this.camHUD]);
		this.healthBarBG.set_cameras([this.camHUD]);
		this.iconP1.set_cameras([this.camHUD]);
		this.iconP2.set_cameras([this.camHUD]);
		this.scoreTxt.set_cameras([this.camHUD]);
		doof.set_cameras([this.camHUD]);
		if(flixel_FlxG.save.data.songPosition) {
			PlayState.songPosBG.set_cameras([this.camHUD]);
			PlayState.songPosBar.set_cameras([this.camHUD]);
		}
		this.kadeEngineWatermark.set_cameras([this.camHUD]);
		if(PlayState.loadRep) {
			this.replayTxt.set_cameras([this.camHUD]);
		}
		this.startingSong = true;
		haxe_Log.trace("starting",{ fileName : "source/PlayState.hx", lineNumber : 1249, className : "PlayState", methodName : "create"});
		if(PlayState.isStoryMode) {
			switch(StringTools.replace(this.curSong," ","-").toLowerCase()) {
			case "roses":
				flixel_FlxG.sound.play(Paths.sound("ANGRY"));
				this.schoolIntro(doof);
				break;
			case "senpai":
				this.schoolIntro(doof);
				break;
			case "thorns":
				this.schoolIntro(doof);
				break;
			case "winter-horrorland":
				var blackScreen = new flixel_FlxSprite(0,0).makeGraphic(flixel_FlxG.width * 2 | 0,flixel_FlxG.height * 2 | 0,-16777216);
				this.add(blackScreen);
				blackScreen.scrollFactor.set();
				this.camHUD.set_visible(false);
				new flixel_util_FlxTimer().start(0.1,function(tmr) {
					_gthis.remove(blackScreen);
					flixel_FlxG.sound.play(Paths.sound("Lights_Turn_On"));
					_gthis.camFollow.set_y(-2050);
					var _g = _gthis.camFollow;
					_g.set_x(_g.x + 200);
					var _this = flixel_FlxG.camera;
					var point = _gthis.camFollow.getPosition();
					_this.scroll.set(point.x - _this.width * 0.5,point.y - _this.height * 0.5);
					if(point._weak) {
						point.put();
					}
					flixel_FlxG.camera.set_zoom(1.5);
					new flixel_util_FlxTimer().start(0.8,function(tmr) {
						_gthis.camHUD.set_visible(true);
						_gthis.remove(blackScreen);
						flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : _gthis.defaultCamZoom},2.5,{ ease : flixel_tweens_FlxEase.quadInOut, onComplete : function(twn) {
							_gthis.startCountdown();
						}});
					});
				});
				break;
			default:
				this.startCountdown();
			}
		} else {
			this.startCountdown();
		}
		if(!PlayState.loadRep) {
			PlayState.rep = new Replay("na");
		}
		openfl_Lib.get_current().stage.addEventListener("keyDown",$bind(this,this.handleInput));
		openfl_Lib.get_current().stage.addEventListener("keyUp",$bind(this,this.releaseInput));
		MusicBeatState.prototype.create.call(this);
	}
	,schoolIntro: function(dialogueBox) {
		var _gthis = this;
		var black = new flixel_FlxSprite(-100,-100).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-16777216);
		black.scrollFactor.set();
		this.add(black);
		var red = new flixel_FlxSprite(-100,-100).makeGraphic(flixel_FlxG.width * 2,flixel_FlxG.height * 2,-58575);
		red.scrollFactor.set();
		var senpaiEvil = new flixel_FlxSprite();
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		senpaiEvil.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "weeb/senpaiCrazy" + ".png","IMAGE",library),Paths.getPath("images/" + "weeb/senpaiCrazy" + ".xml","TEXT",library)));
		senpaiEvil.animation.addByPrefix("idle","Senpai Pre Explosion",24,false);
		senpaiEvil.setGraphicSize(senpaiEvil.get_width() * 6 | 0);
		senpaiEvil.scrollFactor.set();
		senpaiEvil.updateHitbox();
		senpaiEvil.screenCenter();
		if(StringTools.replace(PlayState.SONG.song," ","-").toLowerCase() == "roses" || StringTools.replace(PlayState.SONG.song," ","-").toLowerCase() == "thorns") {
			this.remove(black);
			if(StringTools.replace(PlayState.SONG.song," ","-").toLowerCase() == "thorns") {
				this.add(red);
			}
		}
		new flixel_util_FlxTimer().start(0.3,function(tmr) {
			var _g = black;
			_g.set_alpha(_g.alpha - 0.15);
			if(black.alpha > 0) {
				tmr.reset(0.3);
			} else {
				if(dialogueBox != null) {
					_gthis.inCutscene = true;
					if(StringTools.replace(PlayState.SONG.song," ","-").toLowerCase() == "thorns") {
						_gthis.add(senpaiEvil);
						senpaiEvil.set_alpha(0);
						new flixel_util_FlxTimer().start(0.3,function(swagTimer) {
							var _g = senpaiEvil;
							_g.set_alpha(_g.alpha + 0.15);
							if(senpaiEvil.alpha < 1) {
								swagTimer.reset();
							} else {
								senpaiEvil.animation.play("idle");
								flixel_FlxG.sound.play(Paths.sound("Senpai_Dies"),1,false,null,true,function() {
									_gthis.remove(senpaiEvil);
									_gthis.remove(red);
									flixel_FlxG.camera.fade(-1,0.01,true,function() {
										_gthis.add(dialogueBox);
									},true);
								});
								new flixel_util_FlxTimer().start(3.2,function(deadTime) {
									flixel_FlxG.camera.fade(-1,1.6,false);
								});
							}
						});
					} else {
						_gthis.add(dialogueBox);
					}
				} else {
					_gthis.startCountdown();
				}
				_gthis.remove(black);
			}
		});
	}
	,startTimer: null
	,perfectMode: null
	,luaWiggles: null
	,startCountdown: function() {
		var _gthis = this;
		this.inCutscene = false;
		this.appearStaticArrows();
		this.talking = false;
		this.startedCountdown = true;
		Conductor.songPosition = 0;
		Conductor.songPosition -= Conductor.crochet * 5;
		var swagCounter = 0;
		this.startTimer = new flixel_util_FlxTimer().start(Conductor.crochet / 1000,function(tmr) {
			PlayState.dad.dance();
			PlayState.gf.dance();
			PlayState.boyfriend.playAnim("idle");
			var introAssets_h = Object.create(null);
			introAssets_h["default"] = ["ready","set","go"];
			introAssets_h["pixel"] = ["weeb/pixelUI/ready-pixel","weeb/pixelUI/set-pixel","weeb/pixelUI/date-pixel"];
			var introAlts = introAssets_h["default"];
			var altSuffix = "";
			var week6Bullshit = null;
			if(PlayState.SONG.noteStyle == "pixel") {
				introAlts = introAssets_h["pixel"];
				altSuffix = "-pixel";
				week6Bullshit = "week6";
			}
			switch(swagCounter) {
			case 0:
				flixel_FlxG.sound.play(Paths.sound("intro3" + altSuffix),0.6);
				break;
			case 1:
				var ready = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + introAlts[0] + ".png","IMAGE",week6Bullshit));
				ready.scrollFactor.set();
				ready.updateHitbox();
				if(PlayState.SONG.noteStyle == "pixel") {
					ready.setGraphicSize(ready.get_width() * PlayState.daPixelZoom | 0);
				}
				ready.screenCenter();
				_gthis.add(ready);
				var _g = ready;
				flixel_tweens_FlxTween.tween(ready,{ y : _g.set_y(_g.y + 100), alpha : 0},Conductor.crochet / 1000,{ ease : flixel_tweens_FlxEase.cubeInOut, onComplete : function(twn) {
					ready.destroy();
				}});
				flixel_FlxG.sound.play(Paths.sound("intro2" + altSuffix),0.6);
				break;
			case 2:
				var set = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + introAlts[1] + ".png","IMAGE",week6Bullshit));
				set.scrollFactor.set();
				if(PlayState.SONG.noteStyle == "pixel") {
					set.setGraphicSize(set.get_width() * PlayState.daPixelZoom | 0);
				}
				set.screenCenter();
				_gthis.add(set);
				var _g = set;
				flixel_tweens_FlxTween.tween(set,{ y : _g.set_y(_g.y + 100), alpha : 0},Conductor.crochet / 1000,{ ease : flixel_tweens_FlxEase.cubeInOut, onComplete : function(twn) {
					set.destroy();
				}});
				flixel_FlxG.sound.play(Paths.sound("intro1" + altSuffix),0.6);
				break;
			case 3:
				var go = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + introAlts[2] + ".png","IMAGE",week6Bullshit));
				go.scrollFactor.set();
				if(PlayState.SONG.noteStyle == "pixel") {
					go.setGraphicSize(go.get_width() * PlayState.daPixelZoom | 0);
				}
				go.updateHitbox();
				go.screenCenter();
				_gthis.add(go);
				var _g = go;
				flixel_tweens_FlxTween.tween(go,{ y : _g.set_y(_g.y + 100), alpha : 0},Conductor.crochet / 1000,{ ease : flixel_tweens_FlxEase.cubeInOut, onComplete : function(twn) {
					go.destroy();
				}});
				flixel_FlxG.sound.play(Paths.sound("introGo" + altSuffix),0.6);
				break;
			case 4:
				break;
			}
			swagCounter += 1;
		},5);
	}
	,previousFrameTime: null
	,lastReportedPlayheadPosition: null
	,songTime: null
	,getKey: function(charCode) {
		var _g = haxe_ds_StringMap.kvIterator(flixel_input_keyboard_FlxKey.fromStringMap.h);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key = _g1.key;
			var value = _g1.value;
			if(charCode == value) {
				return key;
			}
		}
		return null;
	}
	,keys: null
	,releaseInput: function(evt) {
		var this1 = flixel_input_keyboard_FlxKey.toStringMap;
		var key = evt.keyCode;
		var key1;
		switch(key) {
		case 8:
			key1 = 8;
			break;
		case 9:
			key1 = 9;
			break;
		case 13:
			key1 = 13;
			break;
		case 27:
			key1 = 27;
			break;
		case 32:
			key1 = 32;
			break;
		case 33:
			key1 = 49;
			break;
		case 34:
			key1 = 222;
			break;
		case 35:
			key1 = 51;
			break;
		case 36:
			key1 = 52;
			break;
		case 37:
			key1 = 53;
			break;
		case 38:
			key1 = 55;
			break;
		case 39:
			key1 = 222;
			break;
		case 40:
			key1 = 57;
			break;
		case 41:
			key1 = 48;
			break;
		case 42:
			key1 = 56;
			break;
		case 44:
			key1 = 188;
			break;
		case 45:
			key1 = 189;
			break;
		case 46:
			key1 = 190;
			break;
		case 47:
			key1 = 191;
			break;
		case 48:
			key1 = 48;
			break;
		case 49:
			key1 = 49;
			break;
		case 50:
			key1 = 50;
			break;
		case 51:
			key1 = 51;
			break;
		case 52:
			key1 = 52;
			break;
		case 53:
			key1 = 53;
			break;
		case 54:
			key1 = 54;
			break;
		case 55:
			key1 = 55;
			break;
		case 56:
			key1 = 56;
			break;
		case 57:
			key1 = 57;
			break;
		case 58:
			key1 = 186;
			break;
		case 59:
			key1 = 186;
			break;
		case 60:
			key1 = 60;
			break;
		case 61:
			key1 = 187;
			break;
		case 62:
			key1 = 190;
			break;
		case 63:
			key1 = 191;
			break;
		case 64:
			key1 = 50;
			break;
		case 91:
			key1 = 219;
			break;
		case 92:
			key1 = 220;
			break;
		case 93:
			key1 = 221;
			break;
		case 94:
			key1 = 54;
			break;
		case 95:
			key1 = 189;
			break;
		case 96:
			key1 = 192;
			break;
		case 97:
			key1 = 65;
			break;
		case 98:
			key1 = 66;
			break;
		case 99:
			key1 = 67;
			break;
		case 100:
			key1 = 68;
			break;
		case 101:
			key1 = 69;
			break;
		case 102:
			key1 = 70;
			break;
		case 103:
			key1 = 71;
			break;
		case 104:
			key1 = 72;
			break;
		case 105:
			key1 = 73;
			break;
		case 106:
			key1 = 74;
			break;
		case 107:
			key1 = 75;
			break;
		case 108:
			key1 = 76;
			break;
		case 109:
			key1 = 77;
			break;
		case 110:
			key1 = 78;
			break;
		case 111:
			key1 = 79;
			break;
		case 112:
			key1 = 80;
			break;
		case 113:
			key1 = 81;
			break;
		case 114:
			key1 = 82;
			break;
		case 115:
			key1 = 83;
			break;
		case 116:
			key1 = 84;
			break;
		case 117:
			key1 = 85;
			break;
		case 118:
			key1 = 86;
			break;
		case 119:
			key1 = 87;
			break;
		case 120:
			key1 = 88;
			break;
		case 121:
			key1 = 89;
			break;
		case 122:
			key1 = 90;
			break;
		case 127:
			key1 = 46;
			break;
		case 1073741881:
			key1 = 20;
			break;
		case 1073741882:
			key1 = 112;
			break;
		case 1073741883:
			key1 = 113;
			break;
		case 1073741884:
			key1 = 114;
			break;
		case 1073741885:
			key1 = 115;
			break;
		case 1073741886:
			key1 = 116;
			break;
		case 1073741887:
			key1 = 117;
			break;
		case 1073741888:
			key1 = 118;
			break;
		case 1073741889:
			key1 = 119;
			break;
		case 1073741890:
			key1 = 120;
			break;
		case 1073741891:
			key1 = 121;
			break;
		case 1073741892:
			key1 = 122;
			break;
		case 1073741893:
			key1 = 123;
			break;
		case 1073741894:
			key1 = 301;
			break;
		case 1073741895:
			key1 = 145;
			break;
		case 1073741896:
			key1 = 19;
			break;
		case 1073741897:
			key1 = 45;
			break;
		case 1073741898:
			key1 = 36;
			break;
		case 1073741899:
			key1 = 33;
			break;
		case 1073741901:
			key1 = 35;
			break;
		case 1073741902:
			key1 = 34;
			break;
		case 1073741903:
			key1 = 39;
			break;
		case 1073741904:
			key1 = 37;
			break;
		case 1073741905:
			key1 = 40;
			break;
		case 1073741906:
			key1 = 38;
			break;
		case 1073741907:
			key1 = 144;
			break;
		case 1073741908:
			key1 = 111;
			break;
		case 1073741909:
			key1 = 106;
			break;
		case 1073741910:
			key1 = 109;
			break;
		case 1073741911:
			key1 = 107;
			break;
		case 1073741912:
			key1 = 13;
			break;
		case 1073741913:
			key1 = 97;
			break;
		case 1073741914:
			key1 = 98;
			break;
		case 1073741915:
			key1 = 99;
			break;
		case 1073741916:
			key1 = 100;
			break;
		case 1073741917:
			key1 = 101;
			break;
		case 1073741918:
			key1 = 102;
			break;
		case 1073741919:
			key1 = 103;
			break;
		case 1073741920:
			key1 = 104;
			break;
		case 1073741921:
			key1 = 105;
			break;
		case 1073741922:
			key1 = 96;
			break;
		case 1073741923:
			key1 = 110;
			break;
		case 1073741925:
			key1 = 302;
			break;
		case 1073741928:
			key1 = 124;
			break;
		case 1073741929:
			key1 = 125;
			break;
		case 1073741930:
			key1 = 126;
			break;
		case 1073741982:
			key1 = 13;
			break;
		case 1073742044:
			key1 = 110;
			break;
		case 1073742048:
			key1 = 17;
			break;
		case 1073742049:
			key1 = 16;
			break;
		case 1073742050:
			key1 = 18;
			break;
		case 1073742051:
			key1 = 15;
			break;
		case 1073742052:
			key1 = 17;
			break;
		case 1073742053:
			key1 = 16;
			break;
		case 1073742054:
			key1 = 18;
			break;
		case 1073742055:
			key1 = 15;
			break;
		default:
			key1 = key;
		}
		var key = this1.h[key1];
		var binds = [flixel_FlxG.save.data.leftBind,flixel_FlxG.save.data.downBind,flixel_FlxG.save.data.upBind,flixel_FlxG.save.data.rightBind];
		var data = -1;
		switch(evt.keyCode) {
		case 37:
			data = 0;
			break;
		case 38:
			data = 2;
			break;
		case 39:
			data = 3;
			break;
		case 40:
			data = 1;
			break;
		}
		var _g = 0;
		var _g1 = binds.length;
		while(_g < _g1) {
			var i = _g++;
			if(binds[i].toLowerCase() == key.toLowerCase()) {
				data = i;
			}
		}
		if(data == -1) {
			return;
		}
		this.keys[data] = false;
	}
	,closestNotes: null
	,handleInput: function(evt) {
		if(PlayStateChangeables.botPlay || PlayState.loadRep || this.paused) {
			return;
		}
		var this1 = flixel_input_keyboard_FlxKey.toStringMap;
		var key = evt.keyCode;
		var key1;
		switch(key) {
		case 8:
			key1 = 8;
			break;
		case 9:
			key1 = 9;
			break;
		case 13:
			key1 = 13;
			break;
		case 27:
			key1 = 27;
			break;
		case 32:
			key1 = 32;
			break;
		case 33:
			key1 = 49;
			break;
		case 34:
			key1 = 222;
			break;
		case 35:
			key1 = 51;
			break;
		case 36:
			key1 = 52;
			break;
		case 37:
			key1 = 53;
			break;
		case 38:
			key1 = 55;
			break;
		case 39:
			key1 = 222;
			break;
		case 40:
			key1 = 57;
			break;
		case 41:
			key1 = 48;
			break;
		case 42:
			key1 = 56;
			break;
		case 44:
			key1 = 188;
			break;
		case 45:
			key1 = 189;
			break;
		case 46:
			key1 = 190;
			break;
		case 47:
			key1 = 191;
			break;
		case 48:
			key1 = 48;
			break;
		case 49:
			key1 = 49;
			break;
		case 50:
			key1 = 50;
			break;
		case 51:
			key1 = 51;
			break;
		case 52:
			key1 = 52;
			break;
		case 53:
			key1 = 53;
			break;
		case 54:
			key1 = 54;
			break;
		case 55:
			key1 = 55;
			break;
		case 56:
			key1 = 56;
			break;
		case 57:
			key1 = 57;
			break;
		case 58:
			key1 = 186;
			break;
		case 59:
			key1 = 186;
			break;
		case 60:
			key1 = 60;
			break;
		case 61:
			key1 = 187;
			break;
		case 62:
			key1 = 190;
			break;
		case 63:
			key1 = 191;
			break;
		case 64:
			key1 = 50;
			break;
		case 91:
			key1 = 219;
			break;
		case 92:
			key1 = 220;
			break;
		case 93:
			key1 = 221;
			break;
		case 94:
			key1 = 54;
			break;
		case 95:
			key1 = 189;
			break;
		case 96:
			key1 = 192;
			break;
		case 97:
			key1 = 65;
			break;
		case 98:
			key1 = 66;
			break;
		case 99:
			key1 = 67;
			break;
		case 100:
			key1 = 68;
			break;
		case 101:
			key1 = 69;
			break;
		case 102:
			key1 = 70;
			break;
		case 103:
			key1 = 71;
			break;
		case 104:
			key1 = 72;
			break;
		case 105:
			key1 = 73;
			break;
		case 106:
			key1 = 74;
			break;
		case 107:
			key1 = 75;
			break;
		case 108:
			key1 = 76;
			break;
		case 109:
			key1 = 77;
			break;
		case 110:
			key1 = 78;
			break;
		case 111:
			key1 = 79;
			break;
		case 112:
			key1 = 80;
			break;
		case 113:
			key1 = 81;
			break;
		case 114:
			key1 = 82;
			break;
		case 115:
			key1 = 83;
			break;
		case 116:
			key1 = 84;
			break;
		case 117:
			key1 = 85;
			break;
		case 118:
			key1 = 86;
			break;
		case 119:
			key1 = 87;
			break;
		case 120:
			key1 = 88;
			break;
		case 121:
			key1 = 89;
			break;
		case 122:
			key1 = 90;
			break;
		case 127:
			key1 = 46;
			break;
		case 1073741881:
			key1 = 20;
			break;
		case 1073741882:
			key1 = 112;
			break;
		case 1073741883:
			key1 = 113;
			break;
		case 1073741884:
			key1 = 114;
			break;
		case 1073741885:
			key1 = 115;
			break;
		case 1073741886:
			key1 = 116;
			break;
		case 1073741887:
			key1 = 117;
			break;
		case 1073741888:
			key1 = 118;
			break;
		case 1073741889:
			key1 = 119;
			break;
		case 1073741890:
			key1 = 120;
			break;
		case 1073741891:
			key1 = 121;
			break;
		case 1073741892:
			key1 = 122;
			break;
		case 1073741893:
			key1 = 123;
			break;
		case 1073741894:
			key1 = 301;
			break;
		case 1073741895:
			key1 = 145;
			break;
		case 1073741896:
			key1 = 19;
			break;
		case 1073741897:
			key1 = 45;
			break;
		case 1073741898:
			key1 = 36;
			break;
		case 1073741899:
			key1 = 33;
			break;
		case 1073741901:
			key1 = 35;
			break;
		case 1073741902:
			key1 = 34;
			break;
		case 1073741903:
			key1 = 39;
			break;
		case 1073741904:
			key1 = 37;
			break;
		case 1073741905:
			key1 = 40;
			break;
		case 1073741906:
			key1 = 38;
			break;
		case 1073741907:
			key1 = 144;
			break;
		case 1073741908:
			key1 = 111;
			break;
		case 1073741909:
			key1 = 106;
			break;
		case 1073741910:
			key1 = 109;
			break;
		case 1073741911:
			key1 = 107;
			break;
		case 1073741912:
			key1 = 13;
			break;
		case 1073741913:
			key1 = 97;
			break;
		case 1073741914:
			key1 = 98;
			break;
		case 1073741915:
			key1 = 99;
			break;
		case 1073741916:
			key1 = 100;
			break;
		case 1073741917:
			key1 = 101;
			break;
		case 1073741918:
			key1 = 102;
			break;
		case 1073741919:
			key1 = 103;
			break;
		case 1073741920:
			key1 = 104;
			break;
		case 1073741921:
			key1 = 105;
			break;
		case 1073741922:
			key1 = 96;
			break;
		case 1073741923:
			key1 = 110;
			break;
		case 1073741925:
			key1 = 302;
			break;
		case 1073741928:
			key1 = 124;
			break;
		case 1073741929:
			key1 = 125;
			break;
		case 1073741930:
			key1 = 126;
			break;
		case 1073741982:
			key1 = 13;
			break;
		case 1073742044:
			key1 = 110;
			break;
		case 1073742048:
			key1 = 17;
			break;
		case 1073742049:
			key1 = 16;
			break;
		case 1073742050:
			key1 = 18;
			break;
		case 1073742051:
			key1 = 15;
			break;
		case 1073742052:
			key1 = 17;
			break;
		case 1073742053:
			key1 = 16;
			break;
		case 1073742054:
			key1 = 18;
			break;
		case 1073742055:
			key1 = 15;
			break;
		default:
			key1 = key;
		}
		var key = this1.h[key1];
		var binds = [flixel_FlxG.save.data.leftBind,flixel_FlxG.save.data.downBind,flixel_FlxG.save.data.upBind,flixel_FlxG.save.data.rightBind];
		var data = -1;
		switch(evt.keyCode) {
		case 37:
			data = 0;
			break;
		case 38:
			data = 2;
			break;
		case 39:
			data = 3;
			break;
		case 40:
			data = 1;
			break;
		}
		var _g = 0;
		var _g1 = binds.length;
		while(_g < _g1) {
			var i = _g++;
			if(binds[i].toLowerCase() == key.toLowerCase()) {
				data = i;
			}
		}
		if(data == -1) {
			haxe_Log.trace("couldn't find a keybind with the code " + key,{ fileName : "source/PlayState.hx", lineNumber : 1621, className : "PlayState", methodName : "handleInput"});
			return;
		}
		if(this.keys[data]) {
			haxe_Log.trace("ur already holding " + key,{ fileName : "source/PlayState.hx", lineNumber : 1626, className : "PlayState", methodName : "handleInput"});
			return;
		}
		this.keys[data] = true;
		var ana = new Ana(Conductor.songPosition,null,false,"miss",data);
		var dataNotes = [];
		var _g = 0;
		var _g1 = this.closestNotes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.noteData == data) {
				dataNotes.push(i);
			}
		}
		if(dataNotes.length != 0) {
			var coolNote = null;
			var _g = 0;
			while(_g < dataNotes.length) {
				var i = dataNotes[_g];
				++_g;
				if(!i.isSustainNote) {
					coolNote = i;
					break;
				}
			}
			if(coolNote == null) {
				return;
			}
			if(dataNotes.length > 1) {
				var _g = 0;
				var _g1 = dataNotes.length;
				while(_g < _g1) {
					var i = _g++;
					if(i == 0) {
						continue;
					}
					var note = dataNotes[i];
					if(!note.isSustainNote && note.strumTime - coolNote.strumTime < 2) {
						haxe_Log.trace("found a stacked/really close note " + (note.strumTime - coolNote.strumTime),{ fileName : "source/PlayState.hx", lineNumber : 1666, className : "PlayState", methodName : "handleInput"});
						note.kill();
						this.notes.remove(note,true);
						note.destroy();
					}
				}
			}
			this.goodNoteHit(coolNote);
			var noteDiff = -(coolNote.strumTime - Conductor.songPosition);
			ana.hit = true;
			ana.hitJudge = Ratings.CalculateRating(noteDiff,Math.floor(PlayStateChangeables.safeFrames / 60 * 1000));
			ana.nearestNote = [coolNote.strumTime,coolNote.noteData,coolNote.sustainLength];
		} else if(!flixel_FlxG.save.data.ghost && this.songStarted) {
			this.noteMiss(data,null);
			ana.hit = false;
			ana.hitJudge = "shit";
			ana.nearestNote = [];
			this.health -= 0.20;
		}
	}
	,songStarted: null
	,startSong: function() {
		this.startingSong = false;
		this.songStarted = true;
		this.previousFrameTime = flixel_FlxG.game.ticks;
		this.lastReportedPlayheadPosition = 0;
		flixel_FlxG.sound.music.play();
		this.vocals.play();
		switch(this.curSong) {
		case "Blammed":case "Bopeebo":case "Cocoa":case "Eggnog":case "Philly Nice":
			this.allowedToHeadbang = true;
			break;
		default:
			this.allowedToHeadbang = false;
		}
		if(this.useVideo) {
			GlobalVideo.get().resume();
		}
		flixel_FlxG.sound.music.set_time(PlayState.startTime);
		this.vocals.set_time(PlayState.startTime);
		Conductor.songPosition = PlayState.startTime;
		PlayState.startTime = 0;
		var _g = 0;
		var _g1 = this.unspawnNotes.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.unspawnNotes[i].strumTime < PlayState.startTime) {
				HxOverrides.remove(this.unspawnNotes,this.unspawnNotes[i]);
			}
		}
	}
	,debugNum: null
	,generateSong: function(dataPath) {
		var songData = PlayState.SONG;
		Conductor.changeBPM(songData.bpm);
		this.curSong = songData.song;
		if(PlayState.SONG.needsVoices) {
			var tmp = new flixel_system_FlxSound();
			var songLowercase = StringTools.replace(PlayState.SONG.song," ","-").toLowerCase();
			switch(songLowercase) {
			case "dad-battle":
				songLowercase = "dadbattle";
				break;
			case "philly-nice":
				songLowercase = "philly";
				break;
			}
			this.vocals = tmp.loadEmbedded("songs:assets/songs/" + songLowercase + "/Voices." + "mp3");
		} else {
			this.vocals = new flixel_system_FlxSound();
		}
		haxe_Log.trace("loaded vocals",{ fileName : "source/PlayState.hx", lineNumber : 1765, className : "PlayState", methodName : "generateSong"});
		flixel_FlxG.sound.list.add(this.vocals);
		if(!this.paused) {
			var tmp = flixel_FlxG.sound;
			var songLowercase = StringTools.replace(PlayState.SONG.song," ","-").toLowerCase();
			switch(songLowercase) {
			case "dad-battle":
				songLowercase = "dadbattle";
				break;
			case "philly-nice":
				songLowercase = "philly";
				break;
			}
			tmp.playMusic("songs:assets/songs/" + songLowercase + "/Inst." + "mp3",1,false);
		}
		flixel_FlxG.sound.music.onComplete = $bind(this,this.endSong);
		flixel_FlxG.sound.music.pause();
		this.songLength = flixel_FlxG.sound.music._length;
		if(flixel_FlxG.save.data.songPosition) {
			this.remove(PlayState.songPosBG);
			this.remove(PlayState.songPosBar);
			this.remove(this.songName);
			PlayState.songPosBG = new flixel_FlxSprite(0,10).loadGraphic(Paths.getPath("images/" + "healthBar" + ".png","IMAGE",null));
			if(PlayStateChangeables.useDownscroll) {
				PlayState.songPosBG.set_y(flixel_FlxG.height * 0.9 + 45);
			}
			PlayState.songPosBG.screenCenter(flixel_util_FlxAxes.X);
			PlayState.songPosBG.scrollFactor.set();
			this.add(PlayState.songPosBG);
			PlayState.songPosBar = new flixel_ui_FlxBar(PlayState.songPosBG.x + 4,PlayState.songPosBG.y + 4,flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT,PlayState.songPosBG.get_width() - 8 | 0,PlayState.songPosBG.get_height() - 8 | 0,this,"songPositionBar",0,this.songLength - 1000);
			PlayState.songPosBar.set_numDivisions(1000);
			PlayState.songPosBar.scrollFactor.set();
			PlayState.songPosBar.createFilledBar(-8355712,-16711936);
			this.add(PlayState.songPosBar);
			var songName = new flixel_text_FlxText(PlayState.songPosBG.x + PlayState.songPosBG.get_width() / 2 - PlayState.SONG.song.length * 5,PlayState.songPosBG.y,0,PlayState.SONG.song,16);
			if(PlayStateChangeables.useDownscroll) {
				var _g = songName;
				_g.set_y(_g.y - 3);
			}
			songName.setFormat("assets/fonts/" + "vcr.ttf",16,-1,"right",flixel_text_FlxTextBorderStyle.OUTLINE,-16777216);
			songName.scrollFactor.set();
			this.add(songName);
			PlayState.songPosBG.set_cameras([this.camHUD]);
			PlayState.songPosBar.set_cameras([this.camHUD]);
			songName.set_cameras([this.camHUD]);
		}
		this.notes = new flixel_group_FlxTypedGroup();
		this.add(this.notes);
		var noteData = songData.notes;
		var playerCounter = 0;
		var daBeats = 0;
		var _g = 0;
		while(_g < noteData.length) {
			var section = noteData[_g];
			++_g;
			var coolSection = section.lengthInSteps / 4 | 0;
			var _g1 = 0;
			var _g2 = section.sectionNotes;
			while(_g1 < _g2.length) {
				var songNotes = _g2[_g1];
				++_g1;
				var daStrumTime = songNotes[0] + flixel_FlxG.save.data.offset + PlayState.songOffset;
				if(daStrumTime < 0) {
					daStrumTime = 0;
				}
				var daNoteData = songNotes[1] % 4 | 0;
				var gottaHitNote = section.mustHitSection;
				if(songNotes[1] > 3) {
					gottaHitNote = !section.mustHitSection;
				}
				var oldNote;
				if(this.unspawnNotes.length > 0) {
					oldNote = this.unspawnNotes[this.unspawnNotes.length - 1 | 0];
				} else {
					oldNote = null;
				}
				var swagNote = new Note(daStrumTime,daNoteData,oldNote);
				if(!gottaHitNote && PlayStateChangeables.Optimize) {
					continue;
				}
				swagNote.sustainLength = songNotes[2];
				swagNote.scrollFactor.set(0,0);
				var susLength = swagNote.sustainLength;
				susLength /= Conductor.stepCrochet;
				this.unspawnNotes.push(swagNote);
				swagNote.isAlt = songNotes[3];
				if(susLength > 0) {
					swagNote.isParent = true;
				}
				var type = 0;
				var _g3 = 0;
				var _g4 = Math.floor(susLength);
				while(_g3 < _g4) {
					var susNote = _g3++;
					oldNote = this.unspawnNotes[this.unspawnNotes.length - 1 | 0];
					var sustainNote = new Note(daStrumTime + Conductor.stepCrochet * susNote + Conductor.stepCrochet,daNoteData,oldNote,true);
					sustainNote.scrollFactor.set();
					this.unspawnNotes.push(sustainNote);
					sustainNote.isAlt = songNotes[3];
					sustainNote.mustPress = gottaHitNote;
					if(sustainNote.mustPress) {
						var _g5 = sustainNote;
						_g5.set_x(_g5.x + flixel_FlxG.width / 2);
					}
					sustainNote.parent = swagNote;
					swagNote.children.push(sustainNote);
					sustainNote.spotInLine = type;
					++type;
				}
				swagNote.mustPress = gottaHitNote;
				if(swagNote.mustPress) {
					var _g6 = swagNote;
					_g6.set_x(_g6.x + flixel_FlxG.width / 2);
				}
			}
			++daBeats;
		}
		this.unspawnNotes.sort($bind(this,this.sortByShit));
		this.generatedMusic = true;
	}
	,sortByShit: function(Obj1,Obj2) {
		var Value1 = Obj1.strumTime;
		var Value2 = Obj2.strumTime;
		var result = 0;
		if(Value1 < Value2) {
			result = -1;
		} else if(Value1 > Value2) {
			result = 1;
		}
		return result;
	}
	,generateStaticArrows: function(player) {
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var babyArrow = new flixel_FlxSprite(0,this.strumLine.y);
			var noteTypeCheck = "normal";
			if(PlayStateChangeables.Optimize && player == 0) {
				continue;
			}
			if(PlayState.SONG.noteStyle == null) {
				if(PlayState.storyWeek == 6) {
					noteTypeCheck = "pixel";
				}
			} else {
				noteTypeCheck = PlayState.SONG.noteStyle;
			}
			if(noteTypeCheck == "pixel") {
				babyArrow.loadGraphic(Paths.getPath("images/" + "weeb/pixelUI/arrows-pixels" + ".png","IMAGE","week6"),true,17,17);
				babyArrow.animation.add("green",[6]);
				babyArrow.animation.add("red",[7]);
				babyArrow.animation.add("blue",[5]);
				babyArrow.animation.add("purplel",[4]);
				babyArrow.setGraphicSize(babyArrow.get_width() * PlayState.daPixelZoom | 0);
				babyArrow.updateHitbox();
				babyArrow.set_antialiasing(false);
				switch(Math.abs(i)) {
				case 0:
					var _g1 = babyArrow;
					_g1.set_x(_g1.x + Note.swagWidth * 0);
					babyArrow.animation.add("static",[0]);
					babyArrow.animation.add("pressed",[4,8],12,false);
					babyArrow.animation.add("confirm",[12,16],24,false);
					break;
				case 1:
					var _g2 = babyArrow;
					_g2.set_x(_g2.x + Note.swagWidth);
					babyArrow.animation.add("static",[1]);
					babyArrow.animation.add("pressed",[5,9],12,false);
					babyArrow.animation.add("confirm",[13,17],24,false);
					break;
				case 2:
					var _g3 = babyArrow;
					_g3.set_x(_g3.x + Note.swagWidth * 2);
					babyArrow.animation.add("static",[2]);
					babyArrow.animation.add("pressed",[6,10],12,false);
					babyArrow.animation.add("confirm",[14,18],12,false);
					break;
				case 3:
					var _g4 = babyArrow;
					_g4.set_x(_g4.x + Note.swagWidth * 3);
					babyArrow.animation.add("static",[3]);
					babyArrow.animation.add("pressed",[7,11],12,false);
					babyArrow.animation.add("confirm",[15,19],24,false);
					break;
				}
			} else {
				var library = null;
				var usecahce = flixel_FlxG.save.data.cacheImages;
				usecahce = false;
				babyArrow.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "NOTE_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "NOTE_assets" + ".xml","TEXT",library)));
				babyArrow.animation.addByPrefix(this.dataColor[0],"arrow" + this.dataSuffix[0]);
				babyArrow.animation.addByPrefix(this.dataColor[1],"arrow" + this.dataSuffix[1]);
				babyArrow.animation.addByPrefix(this.dataColor[2],"arrow" + this.dataSuffix[2]);
				babyArrow.animation.addByPrefix(this.dataColor[3],"arrow" + this.dataSuffix[3]);
				var lowerDir = this.dataSuffix[i].toLowerCase();
				babyArrow.animation.addByPrefix("static","arrow" + this.dataSuffix[i]);
				babyArrow.animation.addByPrefix("pressed",lowerDir + " press",24,false);
				babyArrow.animation.addByPrefix("confirm",lowerDir + " confirm",24,false);
				var _g5 = babyArrow;
				_g5.set_x(_g5.x + Note.swagWidth * i);
				babyArrow.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				babyArrow.setGraphicSize(babyArrow.get_width() * 0.7 | 0);
			}
			babyArrow.updateHitbox();
			babyArrow.scrollFactor.set();
			babyArrow.set_alpha(0);
			if(!PlayState.isStoryMode) {
				var _g6 = babyArrow;
				_g6.set_y(_g6.y - 10);
				flixel_tweens_FlxTween.tween(babyArrow,{ y : babyArrow.y + 10, alpha : 1},1,{ ease : flixel_tweens_FlxEase.circOut, startDelay : 0.5 + 0.2 * i});
			}
			babyArrow.ID = i;
			switch(player) {
			case 0:
				PlayState.cpuStrums.add(babyArrow);
				break;
			case 1:
				PlayState.playerStrums.add(babyArrow);
				break;
			}
			babyArrow.animation.play("static");
			var _g7 = babyArrow;
			_g7.set_x(_g7.x + 50);
			var _g8 = babyArrow;
			_g8.set_x(_g8.x + flixel_FlxG.width / 2 * player);
			if(PlayStateChangeables.Optimize) {
				var _g9 = babyArrow;
				_g9.set_x(_g9.x - 275);
			}
			PlayState.cpuStrums.forEach(function(spr) {
				spr.centerOffsets();
			});
			PlayState.strumLineNotes.add(babyArrow);
		}
	}
	,appearStaticArrows: function() {
		PlayState.strumLineNotes.forEach(function(babyArrow) {
			if(PlayState.isStoryMode) {
				babyArrow.set_alpha(1);
			}
		});
	}
	,tweenCamIn: function() {
		flixel_tweens_FlxTween.tween(flixel_FlxG.camera,{ zoom : 1.3},Conductor.stepCrochet * 4 / 1000,{ ease : flixel_tweens_FlxEase.elasticInOut});
	}
	,openSubState: function(SubState) {
		if(this.paused) {
			if(flixel_FlxG.sound.music != null) {
				flixel_FlxG.sound.music.pause();
				this.vocals.pause();
			}
			if(!this.startTimer.finished) {
				this.startTimer.active = false;
			}
		}
		MusicBeatState.prototype.openSubState.call(this,SubState);
	}
	,closeSubState: function() {
		if(this.paused) {
			if(flixel_FlxG.sound.music != null && !this.startingSong) {
				this.resyncVocals();
			}
			if(!this.startTimer.finished) {
				this.startTimer.active = true;
			}
			this.paused = false;
		}
		MusicBeatState.prototype.closeSubState.call(this);
	}
	,resyncVocals: function() {
		this.vocals.pause();
		flixel_FlxG.sound.music.play();
		Conductor.songPosition = flixel_FlxG.sound.music._time;
		this.vocals.set_time(Conductor.songPosition);
		this.vocals.play();
	}
	,paused: null
	,startedCountdown: null
	,canPause: null
	,nps: null
	,maxNPS: null
	,stopUpdate: null
	,removedVideo: null
	,currentBPM: null
	,updateFrame: null
	,pastScrollChanges: null
	,update: function(elapsed) {
		var _gthis = this;
		this.perfectMode = false;
		if(this.generatedMusic) {
			var i = new flixel_group_FlxTypedGroupIterator(this.notes.members,null);
			while(i.hasNext()) {
				var i1 = i.next();
				var diff = i1.strumTime - Conductor.songPosition;
				if(diff < 2650 && diff >= -2650) {
					i1.set_active(true);
					i1.set_visible(true);
				} else {
					i1.set_active(false);
					i1.set_visible(false);
				}
			}
		}
		var timingSeg = TimingStruct.getTimingAtTimestamp(Conductor.songPosition);
		if(timingSeg != null) {
			var timingSegBpm = timingSeg.bpm;
			if(timingSegBpm != Conductor.bpm) {
				haxe_Log.trace("BPM CHANGE to " + timingSegBpm,{ fileName : "source/PlayState.hx", lineNumber : 2253, className : "PlayState", methodName : "update"});
				Conductor.changeBPM(timingSegBpm,false);
			}
		}
		var newScroll = PlayStateChangeables.scrollSpeed;
		var _g = 0;
		var _g1 = PlayState.SONG.eventObjects;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i.type == "Scroll Speed Change") {
				if(i.position <= this.curDecimalBeat && this.pastScrollChanges.indexOf(i) == -1) {
					this.pastScrollChanges.push(i);
					haxe_Log.trace("SCROLL SPEED CHANGE to " + i.value,{ fileName : "source/PlayState.hx", lineNumber : 2269, className : "PlayState", methodName : "update"});
					newScroll = i.value;
				}
			}
		}
		PlayStateChangeables.scrollSpeed = newScroll;
		var tmp;
		if(PlayStateChangeables.botPlay) {
			var _this = flixel_FlxG.keys.justPressed;
			tmp = _this.keyManager.checkStatus(49,_this.status);
		} else {
			tmp = false;
		}
		if(tmp) {
			this.camHUD.set_visible(!this.camHUD.visible);
		}
		if(this.useVideo && GlobalVideo.get() != null && !this.stopUpdate) {
			if(GlobalVideo.get().ended && !this.removedVideo) {
				this.remove(this.videoSprite);
				openfl_Lib.get_current().stage.window.onFocusOut.remove($bind(this,this.focusOut));
				openfl_Lib.get_current().stage.window.onFocusIn.remove($bind(this,this.focusIn));
				this.removedVideo = true;
			}
		}
		var balls = this.notesHitArray.length - 1;
		while(balls >= 0) {
			var cock = this.notesHitArray[balls];
			if(cock != null && cock.getTime() + 1000 < new Date().getTime()) {
				HxOverrides.remove(this.notesHitArray,cock);
			} else {
				balls = 0;
			}
			--balls;
		}
		this.nps = this.notesHitArray.length;
		if(this.nps > this.maxNPS) {
			this.maxNPS = this.nps;
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(57,_this.status)) {
			this.iconP1.swapOldIcon();
		}
		if(PlayState.curStage == "philly") {
			if(this.trainMoving && !PlayStateChangeables.Optimize) {
				this.trainFrameTiming += elapsed;
				if(this.trainFrameTiming >= 0.0416666666666666644) {
					this.updateTrainPos();
					this.trainFrameTiming = 0;
				}
			}
		}
		MusicBeatState.prototype.update.call(this,elapsed);
		this.scoreTxt.set_text(Ratings.CalculateRanking(this.songScore,this.songScoreDef,this.nps,this.maxNPS,this.accuracy));
		var lengthInPx = this.scoreTxt.textField.get_length() * this.scoreTxt.frameHeight;
		this.scoreTxt.set_x(this.originalX - lengthInPx / 2 + 335);
		if(PlayerSettings.player1.controls._pause.check() && this.startedCountdown && this.canPause && !this.cannotDie) {
			this.persistentUpdate = false;
			this.persistentDraw = true;
			this.paused = true;
			var Chance = 0.1;
			if(Chance == null) {
				Chance = 50;
			}
			if(flixel_FlxG.random.float(0,100) < Chance) {
				haxe_Log.trace("GITAROO MAN EASTER EGG",{ fileName : "source/PlayState.hx", lineNumber : 2411, className : "PlayState", methodName : "update"});
				var nextState = new GitarooPause();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
				this.clean();
			} else {
				this.openSubState(new PauseSubState(PlayState.boyfriend.getScreenPosition().x,PlayState.boyfriend.getScreenPosition().y));
			}
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(55,_this.status) && this.songStarted) {
			if(this.useVideo) {
				GlobalVideo.get().stop();
				this.remove(this.videoSprite);
				this.removedVideo = true;
			}
			this.cannotDie = true;
			var nextState = new ChartingState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
			this.clean();
			openfl_Lib.get_current().stage.removeEventListener("keyDown",$bind(this,this.handleInput));
			openfl_Lib.get_current().stage.removeEventListener("keyUp",$bind(this,this.releaseInput));
		}
		this.iconP1.setGraphicSize(150 + 0.50 * (this.iconP1.get_width() - 150) | 0);
		this.iconP2.setGraphicSize(150 + 0.50 * (this.iconP2.get_width() - 150) | 0);
		this.iconP1.updateHitbox();
		this.iconP2.updateHitbox();
		var iconOffset = 26;
		this.iconP1.set_x(this.healthBar.x + (this.healthBar.get_width() * (flixel_math_FlxMath.remapToRange(this.healthBar.get_percent(),0,100,100,0) * 0.01) - iconOffset));
		this.iconP2.set_x(this.healthBar.x + this.healthBar.get_width() * (flixel_math_FlxMath.remapToRange(this.healthBar.get_percent(),0,100,100,0) * 0.01) - (this.iconP2.get_width() - iconOffset));
		if(this.health > 2) {
			this.health = 2;
		}
		if(this.healthBar.get_percent() < 20) {
			this.iconP1.animation._curAnim.set_curFrame(1);
		} else {
			this.iconP1.animation._curAnim.set_curFrame(0);
		}
		if(this.healthBar.get_percent() > 80) {
			this.iconP2.animation._curAnim.set_curFrame(1);
		} else {
			this.iconP2.animation._curAnim.set_curFrame(0);
		}
		if(this.startingSong) {
			if(this.startedCountdown) {
				Conductor.songPosition += flixel_FlxG.elapsed * 1000;
				if(Conductor.songPosition >= 0) {
					this.startSong();
				}
			}
		} else {
			Conductor.songPosition += flixel_FlxG.elapsed * 1000;
			this.songPositionBar = Conductor.songPosition;
			if(!this.paused) {
				this.songTime += flixel_FlxG.game.ticks - this.previousFrameTime;
				this.previousFrameTime = flixel_FlxG.game.ticks;
				if(Conductor.lastSongPos != Conductor.songPosition) {
					this.songTime = (this.songTime + Conductor.songPosition) / 2;
					Conductor.lastSongPos = Conductor.songPosition;
				}
			}
		}
		if(this.generatedMusic && PlayState.SONG.notes[this.curStep / 16 | 0] != null) {
			this.closestNotes = [];
			this.notes.forEachAlive(function(daNote) {
				if(daNote.canBeHit && daNote.mustPress && !daNote.tooLate && !daNote.wasGoodHit) {
					_gthis.closestNotes.push(daNote);
				}
			});
			this.closestNotes.sort(function(a,b) {
				return a.strumTime - b.strumTime | 0;
			});
			var tmp = this.closestNotes.length != 0;
			if(this.allowedToHeadbang) {
				if(PlayState.gf.animation._curAnim.name == "danceLeft" || PlayState.gf.animation._curAnim.name == "danceRight" || PlayState.gf.animation._curAnim.name == "idle") {
					switch(this.curSong) {
					case "Blammed":
						if(this.curBeat > 30 && this.curBeat < 190) {
							if(this.curBeat < 90 || this.curBeat > 128) {
								if(this.curBeat % 4 == 2) {
									if(!this.triggeredAlready) {
										PlayState.gf.playAnim("cheer");
										this.triggeredAlready = true;
									}
								} else {
									this.triggeredAlready = false;
								}
							}
						}
						break;
					case "Bopeebo":
						if(this.curBeat > 5 && this.curBeat < 130) {
							if(this.curBeat % 8 == 7) {
								if(!this.triggeredAlready) {
									PlayState.gf.playAnim("cheer");
									this.triggeredAlready = true;
								}
							} else {
								this.triggeredAlready = false;
							}
						}
						break;
					case "Cocoa":
						if(this.curBeat < 170) {
							if(this.curBeat < 65 || this.curBeat > 130 && this.curBeat < 145) {
								if(this.curBeat % 16 == 15) {
									if(!this.triggeredAlready) {
										PlayState.gf.playAnim("cheer");
										this.triggeredAlready = true;
									}
								} else {
									this.triggeredAlready = false;
								}
							}
						}
						break;
					case "Eggnog":
						if(this.curBeat > 10 && this.curBeat != 111 && this.curBeat < 220) {
							if(this.curBeat % 8 == 7) {
								if(!this.triggeredAlready) {
									PlayState.gf.playAnim("cheer");
									this.triggeredAlready = true;
								}
							} else {
								this.triggeredAlready = false;
							}
						}
						break;
					case "Philly Nice":
						if(this.curBeat < 250) {
							if(this.curBeat != 184 && this.curBeat != 216) {
								if(this.curBeat % 16 == 8) {
									if(!this.triggeredAlready) {
										PlayState.gf.playAnim("cheer");
										this.triggeredAlready = true;
									}
								} else {
									this.triggeredAlready = false;
								}
							}
						}
						break;
					}
				}
			}
			if(this.camFollow.x != PlayState.dad.getMidpoint().x + 150 && !PlayState.SONG.notes[this.curStep / 16 | 0].mustHitSection) {
				var offsetX = 0;
				var offsetY = 0;
				this.camFollow.setPosition(PlayState.dad.getMidpoint().x + 150 + offsetX,PlayState.dad.getMidpoint().y - 100 + offsetY);
				switch(PlayState.dad.curCharacter) {
				case "mom":case "mom-car":
					this.camFollow.set_y(PlayState.dad.getMidpoint().y);
					break;
				case "senpai":case "senpai-angry":
					this.camFollow.set_y(PlayState.dad.getMidpoint().y - 430);
					this.camFollow.set_x(PlayState.dad.getMidpoint().x - 100);
					break;
				}
			}
			if(PlayState.SONG.notes[this.curStep / 16 | 0].mustHitSection && this.camFollow.x != PlayState.boyfriend.getMidpoint().x - 100) {
				var offsetX = 0;
				var offsetY = 0;
				this.camFollow.setPosition(PlayState.boyfriend.getMidpoint().x - 100 + offsetX,PlayState.boyfriend.getMidpoint().y - 100 + offsetY);
				switch(PlayState.curStage) {
				case "limo":
					this.camFollow.set_x(PlayState.boyfriend.getMidpoint().x - 300);
					break;
				case "mall":
					this.camFollow.set_y(PlayState.boyfriend.getMidpoint().y - 200);
					break;
				case "school":
					this.camFollow.set_x(PlayState.boyfriend.getMidpoint().x - 200);
					this.camFollow.set_y(PlayState.boyfriend.getMidpoint().y - 200);
					break;
				case "schoolEvil":
					this.camFollow.set_x(PlayState.boyfriend.getMidpoint().x - 200);
					this.camFollow.set_y(PlayState.boyfriend.getMidpoint().y - 200);
					break;
				}
			}
		}
		if(this.camZooming) {
			if(flixel_FlxG.save.data.zoom < 0.8) {
				flixel_FlxG.save.data.zoom = 0.8;
			}
			if(flixel_FlxG.save.data.zoom > 1.2) {
				flixel_FlxG.save.data.zoom = 1.2;
			}
			if(!this.executeModchart) {
				var a = this.defaultCamZoom;
				flixel_FlxG.camera.set_zoom(a + 0.95 * (flixel_FlxG.camera.zoom - a));
				var a = flixel_FlxG.save.data.zoom;
				this.camHUD.set_zoom(a + 0.95 * (this.camHUD.zoom - a));
				this.camNotes.set_zoom(this.camHUD.zoom);
				this.camSustains.set_zoom(this.camHUD.zoom);
			} else {
				var a = this.defaultCamZoom;
				flixel_FlxG.camera.set_zoom(a + 0.95 * (flixel_FlxG.camera.zoom - a));
				this.camHUD.set_zoom(1 + 0.95 * (this.camHUD.zoom - 1));
				this.camNotes.set_zoom(this.camHUD.zoom);
				this.camSustains.set_zoom(this.camHUD.zoom);
			}
		}
		if(this.curSong == "Fresh") {
			switch(this.curBeat) {
			case 16:
				this.camZooming = true;
				this.gfSpeed = 2;
				break;
			case 48:
				this.gfSpeed = 1;
				break;
			case 80:
				this.gfSpeed = 2;
				break;
			case 112:
				this.gfSpeed = 1;
				break;
			case 163:
				break;
			}
		}
		if(this.curSong == "Bopeebo") {
			switch(this.curBeat) {
			case 128:case 129:case 130:
				this.vocals.set_volume(0);
				break;
			}
		}
		if(this.health <= 0 && !this.cannotDie) {
			if(!this.usedTimeTravel) {
				PlayState.boyfriend.stunned = true;
				this.persistentUpdate = false;
				this.persistentDraw = false;
				this.paused = true;
				var _this = this.vocals;
				_this.cleanup(_this.autoDestroy,true);
				var _this = flixel_FlxG.sound.music;
				_this.cleanup(_this.autoDestroy,true);
				this.openSubState(new GameOverSubstate(PlayState.boyfriend.getScreenPosition().x,PlayState.boyfriend.getScreenPosition().y));
			} else {
				this.health = 1;
			}
		}
		if(!this.inCutscene && flixel_FlxG.save.data.resetButton) {
			var _this = flixel_FlxG.keys.justPressed;
			if(_this.keyManager.checkStatus(82,_this.status)) {
				PlayState.boyfriend.stunned = true;
				this.persistentUpdate = false;
				this.persistentDraw = false;
				this.paused = true;
				var _this = this.vocals;
				_this.cleanup(_this.autoDestroy,true);
				var _this = flixel_FlxG.sound.music;
				_this.cleanup(_this.autoDestroy,true);
				this.openSubState(new GameOverSubstate(PlayState.boyfriend.getScreenPosition().x,PlayState.boyfriend.getScreenPosition().y));
			}
		}
		if(this.generatedMusic) {
			var holdArray = [PlayerSettings.player1.controls._left.check(),PlayerSettings.player1.controls._down.check(),PlayerSettings.player1.controls._up.check(),PlayerSettings.player1.controls._right.check()];
			this.notes.forEachAlive(function(daNote) {
				if(daNote.tooLate) {
					daNote.set_active(false);
					daNote.set_visible(false);
				} else {
					daNote.set_visible(true);
					daNote.set_active(true);
				}
				if(!daNote.modifiedByLua) {
					if(PlayStateChangeables.useDownscroll) {
						if(daNote.mustPress) {
							daNote.set_y(PlayState.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].y + 0.45 * (Conductor.songPosition - daNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayStateChangeables.scrollSpeed == 1 ? PlayState.SONG.speed : PlayStateChangeables.scrollSpeed,2) - daNote.noteYOff);
						} else {
							daNote.set_y(PlayState.strumLineNotes.members[Math.floor(Math.abs(daNote.noteData))].y + 0.45 * (Conductor.songPosition - daNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayStateChangeables.scrollSpeed == 1 ? PlayState.SONG.speed : PlayStateChangeables.scrollSpeed,2) - daNote.noteYOff);
						}
						if(daNote.isSustainNote) {
							if(StringTools.endsWith(daNote.animation._curAnim.name,"end") && daNote.prevNote != null) {
								var _g = daNote;
								_g.set_y(_g.y + daNote.prevNote.get_height());
							} else {
								var _g = daNote;
								_g.set_y(_g.y + daNote.get_height() / 2);
							}
							if(!PlayStateChangeables.botPlay) {
								if((!daNote.mustPress || daNote.wasGoodHit || daNote.prevNote.wasGoodHit || holdArray[Math.floor(Math.abs(daNote.noteData))] && !daNote.tooLate) && daNote.y - daNote.offset.y * daNote.scale.y + daNote.get_height() >= _gthis.strumLine.y + Note.swagWidth / 2) {
									var swagRect = new flixel_math_FlxRect(0,0,daNote.frameWidth * 2,daNote.frameHeight * 2);
									swagRect.height = (PlayState.strumLineNotes.members[Math.floor(Math.abs(daNote.noteData))].y + Note.swagWidth / 2 - daNote.y) / daNote.scale.y;
									swagRect.y = daNote.frameHeight - swagRect.height;
									daNote.set_clipRect(swagRect);
								}
							} else {
								var swagRect = new flixel_math_FlxRect(0,0,daNote.frameWidth * 2,daNote.frameHeight * 2);
								swagRect.height = (PlayState.strumLineNotes.members[Math.floor(Math.abs(daNote.noteData))].y + Note.swagWidth / 2 - daNote.y) / daNote.scale.y;
								swagRect.y = daNote.frameHeight - swagRect.height;
								daNote.set_clipRect(swagRect);
							}
						}
					} else {
						if(daNote.mustPress) {
							daNote.set_y(PlayState.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].y - 0.45 * (Conductor.songPosition - daNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayStateChangeables.scrollSpeed == 1 ? PlayState.SONG.speed : PlayStateChangeables.scrollSpeed,2) + daNote.noteYOff);
						} else {
							daNote.set_y(PlayState.strumLineNotes.members[Math.floor(Math.abs(daNote.noteData))].y - 0.45 * (Conductor.songPosition - daNote.strumTime) * flixel_math_FlxMath.roundDecimal(PlayStateChangeables.scrollSpeed == 1 ? PlayState.SONG.speed : PlayStateChangeables.scrollSpeed,2) + daNote.noteYOff);
						}
						if(daNote.isSustainNote) {
							var _g = daNote;
							_g.set_y(_g.y - daNote.get_height() / 2);
							if(!PlayStateChangeables.botPlay) {
								if((!daNote.mustPress || daNote.wasGoodHit || daNote.prevNote.wasGoodHit || holdArray[Math.floor(Math.abs(daNote.noteData))] && !daNote.tooLate) && daNote.y + daNote.offset.y * daNote.scale.y <= _gthis.strumLine.y + Note.swagWidth / 2) {
									var swagRect = new flixel_math_FlxRect(0,0,daNote.get_width() / daNote.scale.x,daNote.get_height() / daNote.scale.y);
									swagRect.y = (PlayState.strumLineNotes.members[Math.floor(Math.abs(daNote.noteData))].y + Note.swagWidth / 2 - daNote.y) / daNote.scale.y;
									swagRect.height -= swagRect.y;
									daNote.set_clipRect(swagRect);
								}
							} else {
								var swagRect = new flixel_math_FlxRect(0,0,daNote.get_width() / daNote.scale.x,daNote.get_height() / daNote.scale.y);
								swagRect.y = (PlayState.strumLineNotes.members[Math.floor(Math.abs(daNote.noteData))].y + Note.swagWidth / 2 - daNote.y) / daNote.scale.y;
								swagRect.height -= swagRect.y;
								daNote.set_clipRect(swagRect);
							}
						}
					}
				}
				if(!daNote.mustPress && daNote.wasGoodHit) {
					if(PlayState.SONG.song != "Tutorial") {
						_gthis.camZooming = true;
					}
					var altAnim = "";
					if(PlayState.SONG.notes[Math.floor(_gthis.curStep / 16)] != null) {
						if(PlayState.SONG.notes[Math.floor(_gthis.curStep / 16)].p1AltAnim) {
							altAnim = "-alt";
						}
					}
					if(daNote.isAlt) {
						altAnim = "-alt";
						haxe_Log.trace("YOO WTF THIS IS AN ALT NOTE????",{ fileName : "source/PlayState.hx", lineNumber : 3039, className : "PlayState", methodName : "update"});
					}
					if(!daNote.isParent && daNote.parent != null) {
						if(daNote.spotInLine != daNote.parent.children.length - 1) {
							var singData = Math.abs(daNote.noteData) | 0;
							PlayState.dad.playAnim("sing" + _gthis.dataSuffix[singData] + altAnim,true);
							if(flixel_FlxG.save.data.cpuStrums) {
								PlayState.cpuStrums.forEach(function(spr) {
									if(Math.abs(daNote.noteData) == spr.ID) {
										spr.animation.play("confirm",true);
									}
									if(spr.animation._curAnim.name == "confirm" && PlayState.SONG.noteStyle != "pixel") {
										spr.centerOffsets();
										var _g = spr.offset;
										_g.set_x(_g.x - 13);
										var _g = spr.offset;
										_g.set_y(_g.y - 13);
									} else {
										spr.centerOffsets();
									}
								});
							}
							PlayState.dad.holdTimer = 0;
							if(PlayState.SONG.needsVoices) {
								_gthis.vocals.set_volume(1);
							}
						}
					} else {
						var singData = Math.abs(daNote.noteData) | 0;
						PlayState.dad.playAnim("sing" + _gthis.dataSuffix[singData] + altAnim,true);
						if(flixel_FlxG.save.data.cpuStrums) {
							PlayState.cpuStrums.forEach(function(spr) {
								if(Math.abs(daNote.noteData) == spr.ID) {
									spr.animation.play("confirm",true);
								}
								if(spr.animation._curAnim.name == "confirm" && PlayState.SONG.noteStyle != "pixel") {
									spr.centerOffsets();
									var _g = spr.offset;
									_g.set_x(_g.x - 13);
									var _g = spr.offset;
									_g.set_y(_g.y - 13);
								} else {
									spr.centerOffsets();
								}
							});
						}
						PlayState.dad.holdTimer = 0;
						if(PlayState.SONG.needsVoices) {
							_gthis.vocals.set_volume(1);
						}
					}
					daNote.set_active(false);
					daNote.kill();
					_gthis.notes.remove(daNote,true);
					daNote.destroy();
				}
				if(daNote.mustPress && !daNote.modifiedByLua) {
					daNote.set_visible(PlayState.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].visible);
					daNote.set_x(PlayState.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].x);
					if(!daNote.isSustainNote) {
						daNote.modAngle = PlayState.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].angle;
					}
					if(daNote.sustainActive) {
						if(_gthis.executeModchart) {
							daNote.set_alpha(PlayState.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].alpha);
						}
					}
					daNote.modAngle = PlayState.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].angle;
				} else if(!daNote.wasGoodHit && !daNote.modifiedByLua) {
					daNote.set_visible(PlayState.strumLineNotes.members[Math.floor(Math.abs(daNote.noteData))].visible);
					daNote.set_x(PlayState.strumLineNotes.members[Math.floor(Math.abs(daNote.noteData))].x);
					if(!daNote.isSustainNote) {
						daNote.modAngle = PlayState.strumLineNotes.members[Math.floor(Math.abs(daNote.noteData))].angle;
					}
					if(daNote.sustainActive) {
						if(_gthis.executeModchart) {
							daNote.set_alpha(PlayState.playerStrums.members[Math.floor(Math.abs(daNote.noteData))].alpha);
						}
					}
					daNote.modAngle = PlayState.strumLineNotes.members[Math.floor(Math.abs(daNote.noteData))].angle;
				}
				if(daNote.isSustainNote) {
					var _g = daNote;
					_g.set_x(_g.x + (daNote.get_width() / 2 + 20));
					if(PlayState.SONG.noteStyle == "pixel") {
						var _g = daNote;
						_g.set_x(_g.x - 11);
					}
				}
				if(daNote.isSustainNote && daNote.wasGoodHit && Conductor.songPosition >= daNote.strumTime) {
					daNote.kill();
					_gthis.notes.remove(daNote,true);
					daNote.destroy();
				} else if((daNote.mustPress && daNote.tooLate && !PlayStateChangeables.useDownscroll || daNote.mustPress && daNote.tooLate && PlayStateChangeables.useDownscroll) && daNote.mustPress) {
					if(daNote.isSustainNote && daNote.wasGoodHit) {
						daNote.kill();
						_gthis.notes.remove(daNote,true);
					} else if(PlayState.loadRep && daNote.isSustainNote) {
						if(_gthis.findByTime(daNote.strumTime) != null) {
							_gthis.totalNotesHit += 1;
						} else {
							_gthis.vocals.set_volume(0);
							if(PlayState.theFunne && !daNote.isSustainNote) {
								_gthis.noteMiss(daNote.noteData,daNote);
							}
							if(daNote.isParent) {
								_gthis.health -= 0.15;
								haxe_Log.trace("hold fell over at the start",{ fileName : "source/PlayState.hx", lineNumber : 3191, className : "PlayState", methodName : "update"});
								var _g = 0;
								var _g1 = daNote.children;
								while(_g < _g1.length) {
									var i = _g1[_g];
									++_g;
									i.set_alpha(0.3);
									i.sustainActive = false;
								}
							} else if(!daNote.wasGoodHit && daNote.isSustainNote && daNote.sustainActive && daNote.spotInLine != daNote.parent.children.length) {
								_gthis.health -= 0.2;
								haxe_Log.trace("hold fell over at " + daNote.spotInLine,{ fileName : "source/PlayState.hx", lineNumber : 3206, className : "PlayState", methodName : "update"});
								var _g = 0;
								var _g1 = daNote.parent.children;
								while(_g < _g1.length) {
									var i = _g1[_g];
									++_g;
									i.set_alpha(0.3);
									i.sustainActive = false;
								}
								if(daNote.parent.wasGoodHit) {
									PlayState.misses++;
								}
								_gthis.updateAccuracy();
							} else {
								_gthis.health -= 0.15;
							}
						}
					} else {
						_gthis.vocals.set_volume(0);
						if(PlayState.theFunne && !daNote.isSustainNote) {
							if(PlayStateChangeables.botPlay) {
								daNote.rating = "bad";
								_gthis.goodNoteHit(daNote);
							} else {
								_gthis.noteMiss(daNote.noteData,daNote);
							}
						}
						if(daNote.isParent) {
							_gthis.health -= 0.15;
							haxe_Log.trace("hold fell over at the start",{ fileName : "source/PlayState.hx", lineNumber : 3240, className : "PlayState", methodName : "update"});
							var _g = 0;
							var _g1 = daNote.children;
							while(_g < _g1.length) {
								var i = _g1[_g];
								++_g;
								i.set_alpha(0.3);
								i.sustainActive = false;
								haxe_Log.trace(i.alpha,{ fileName : "source/PlayState.hx", lineNumber : 3245, className : "PlayState", methodName : "update"});
							}
						} else if(!daNote.wasGoodHit && daNote.isSustainNote && daNote.sustainActive && daNote.spotInLine != daNote.parent.children.length) {
							_gthis.health -= 0.25;
							haxe_Log.trace("hold fell over at " + daNote.spotInLine,{ fileName : "source/PlayState.hx", lineNumber : 3256, className : "PlayState", methodName : "update"});
							var _g = 0;
							var _g1 = daNote.parent.children;
							while(_g < _g1.length) {
								var i = _g1[_g];
								++_g;
								i.set_alpha(0.3);
								i.sustainActive = false;
								haxe_Log.trace(i.alpha,{ fileName : "source/PlayState.hx", lineNumber : 3261, className : "PlayState", methodName : "update"});
							}
							if(daNote.parent.wasGoodHit) {
								PlayState.misses++;
							}
							_gthis.updateAccuracy();
						} else {
							_gthis.health -= 0.15;
						}
					}
					daNote.set_visible(false);
					daNote.kill();
					_gthis.notes.remove(daNote,true);
				}
			});
		}
		if(flixel_FlxG.save.data.cpuStrums) {
			PlayState.cpuStrums.forEach(function(spr) {
				if(spr.animation.get_finished()) {
					spr.animation.play("static");
					spr.centerOffsets();
				}
			});
			if(PlayStateChangeables.botPlay) {
				PlayState.playerStrums.forEach(function(spr) {
					if(spr.animation.get_finished()) {
						spr.animation.play("static");
						spr.centerOffsets();
					}
				});
			}
		}
		if(!this.inCutscene && this.songStarted) {
			this.keyShit();
		}
	}
	,endSong: function() {
		this.endingSong = true;
		openfl_Lib.get_current().stage.removeEventListener("keyDown",$bind(this,this.handleInput));
		openfl_Lib.get_current().stage.removeEventListener("keyUp",$bind(this,this.releaseInput));
		if(this.useVideo) {
			GlobalVideo.get().stop();
			openfl_Lib.get_current().stage.window.onFocusOut.remove($bind(this,this.focusOut));
			openfl_Lib.get_current().stage.window.onFocusIn.remove($bind(this,this.focusIn));
			PlayState.instance.remove(PlayState.instance.videoSprite);
		}
		if(!PlayState.loadRep) {
			PlayState.rep.SaveReplay(this.saveNotes,this.saveJudge,this.replayAna);
		} else {
			PlayStateChangeables.botPlay = false;
			PlayStateChangeables.scrollSpeed = 1;
			PlayStateChangeables.useDownscroll = false;
		}
		if(flixel_FlxG.save.data.fpsCap > 290) {
			(js_Boot.__cast(openfl_Lib.get_current().getChildAt(0) , Main)).setFPSCap(290);
		}
		this.canPause = false;
		flixel_FlxG.sound.music.set_volume(0);
		this.vocals.set_volume(0);
		flixel_FlxG.sound.music.pause();
		this.vocals.pause();
		if(PlayState.SONG.validScore) {
			var songHighscore = StringTools.replace(PlayState.SONG.song," ","-");
			switch(songHighscore) {
			case "Dad-Battle":
				songHighscore = "Dadbattle";
				break;
			case "Philly-Nice":
				songHighscore = "Philly";
				break;
			}
			Highscore.saveScore(songHighscore,Math.round(this.songScore),PlayState.storyDifficulty);
			Highscore.saveCombo(songHighscore,Ratings.GenerateLetterRank(this.accuracy),PlayState.storyDifficulty);
		}
		if(PlayState.offsetTesting) {
			flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
			PlayState.offsetTesting = false;
			var nextState = LoadingState.getNextState(new OptionsMenu(),false);
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
			this.clean();
			flixel_FlxG.save.data.offset = this.offsetTest;
		} else if(PlayState.isStoryMode) {
			PlayState.campaignScore += Math.round(this.songScore);
			PlayState.campaignMisses += PlayState.misses;
			PlayState.campaignSicks += PlayState.sicks;
			PlayState.campaignGoods += PlayState.goods;
			PlayState.campaignBads += PlayState.bads;
			PlayState.campaignShits += PlayState.shits;
			HxOverrides.remove(PlayState.storyPlaylist,PlayState.storyPlaylist[0]);
			if(PlayState.storyPlaylist.length <= 0) {
				this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
				this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
				this.paused = true;
				var _this = flixel_FlxG.sound.music;
				_this.cleanup(_this.autoDestroy,true);
				var _this = this.vocals;
				_this.cleanup(_this.autoDestroy,true);
				if(flixel_FlxG.save.data.scoreScreen) {
					this.openSubState(new ResultsScreen());
					new flixel_util_FlxTimer().start(1,function(tmr) {
						PlayState.inResults = true;
					});
				} else {
					flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
					Conductor.changeBPM(102);
					var nextState = new StoryMenuState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
					this.clean();
				}
				if(PlayState.SONG.validScore) {
					if(NGio.isLoggedIn) {
						var medal = io_newgrounds_NG.core.medals.h[60961];
						if(!medal._data.unlocked) {
							medal.sendUnlock();
						}
					}
					Highscore.saveWeekScore(PlayState.storyWeek,PlayState.campaignScore,PlayState.storyDifficulty);
				}
				StoryMenuState.unlockNextWeek(PlayState.storyWeek);
			} else {
				var songFormat = StringTools.replace(PlayState.storyPlaylist[0]," ","-");
				switch(songFormat) {
				case "Dad-Battle":
					songFormat = "Dadbattle";
					break;
				case "Philly-Nice":
					songFormat = "Philly";
					break;
				}
				var poop = Highscore.formatSong(songFormat,PlayState.storyDifficulty);
				haxe_Log.trace("LOADING NEXT SONG",{ fileName : "source/PlayState.hx", lineNumber : 3448, className : "PlayState", methodName : "endSong"});
				haxe_Log.trace(poop,{ fileName : "source/PlayState.hx", lineNumber : 3449, className : "PlayState", methodName : "endSong"});
				if(StringTools.replace(PlayState.storyPlaylist[0]," ","-").toLowerCase() == "eggnog") {
					var blackShit = new flixel_FlxSprite(-flixel_FlxG.width * flixel_FlxG.camera.zoom,-flixel_FlxG.height * flixel_FlxG.camera.zoom).makeGraphic(flixel_FlxG.width * 3,flixel_FlxG.height * 3,-16777216);
					blackShit.scrollFactor.set();
					this.add(blackShit);
					this.camHUD.set_visible(false);
					flixel_FlxG.sound.play(Paths.sound("Lights_Shut_off"));
				}
				flixel_addons_transition_FlxTransitionableState.skipNextTransIn = true;
				flixel_addons_transition_FlxTransitionableState.skipNextTransOut = true;
				PlayState.prevCamFollow = this.camFollow;
				PlayState.SONG = Song.loadFromJson(poop,PlayState.storyPlaylist[0]);
				var _this = flixel_FlxG.sound.music;
				_this.cleanup(_this.autoDestroy,true);
				var nextState = LoadingState.getNextState(new PlayState(),false);
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
				this.clean();
			}
		} else {
			haxe_Log.trace("WENT BACK TO FREEPLAY??",{ fileName : "source/PlayState.hx", lineNumber : 3475, className : "PlayState", methodName : "endSong"});
			this.paused = true;
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
			var _this = this.vocals;
			_this.cleanup(_this.autoDestroy,true);
			if(flixel_FlxG.save.data.scoreScreen) {
				this.openSubState(new ResultsScreen());
				new flixel_util_FlxTimer().start(1,function(tmr) {
					PlayState.inResults = true;
				});
			} else {
				var nextState = new FreeplayState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
				this.clean();
			}
		}
	}
	,endingSong: null
	,hits: null
	,offsetTest: null
	,timeShown: null
	,currentTimingShown: null
	,popUpScore: function(daNote) {
		var _gthis = this;
		var noteDiff = -(daNote.strumTime - Conductor.songPosition);
		var wife = EtternaFunctions.wife3(-noteDiff,Conductor.timeScale);
		this.vocals.set_volume(1);
		var placement = Std.string(this.combo);
		var coolText = new flixel_text_FlxText(0,0,0,placement,32);
		coolText.screenCenter();
		coolText.set_x(flixel_FlxG.width * 0.55);
		var _g = coolText;
		_g.set_y(_g.y - 350);
		coolText.set_cameras([this.camHUD]);
		var rating = new flixel_FlxSprite();
		var score = 350;
		if(flixel_FlxG.save.data.accuracyMod == 1) {
			this.totalNotesHit += wife;
		}
		var daRating = daNote.rating;
		switch(daRating) {
		case "bad":
			daRating = "bad";
			score = 0;
			this.health -= 0.06;
			this.ss = false;
			PlayState.bads++;
			if(flixel_FlxG.save.data.accuracyMod == 0) {
				this.totalNotesHit += 0.50;
			}
			break;
		case "good":
			daRating = "good";
			score = 200;
			this.ss = false;
			PlayState.goods++;
			if(flixel_FlxG.save.data.accuracyMod == 0) {
				this.totalNotesHit += 0.75;
			}
			break;
		case "shit":
			score = -300;
			this.combo = 0;
			PlayState.misses++;
			this.health -= 0.1;
			this.ss = false;
			PlayState.shits++;
			if(flixel_FlxG.save.data.accuracyMod == 0) {
				this.totalNotesHit -= 1;
			}
			break;
		case "sick":
			if(this.health < 2) {
				this.health += 0.04;
			}
			if(flixel_FlxG.save.data.accuracyMod == 0) {
				this.totalNotesHit += 1;
			}
			PlayState.sicks++;
			break;
		}
		if(daRating != "shit" || daRating != "bad") {
			this.songScore += Math.round(score);
			this.songScoreDef += Math.round(ConvertScore.convertScore(noteDiff));
			var pixelShitPart1 = "";
			var pixelShitPart2 = "";
			var pixelShitPart3 = null;
			if(PlayState.SONG.noteStyle == "pixel") {
				pixelShitPart1 = "weeb/pixelUI/";
				pixelShitPart2 = "-pixel";
				pixelShitPart3 = "week6";
			}
			rating.loadGraphic(Paths.getPath("images/" + (pixelShitPart1 + daRating + pixelShitPart2) + ".png","IMAGE",pixelShitPart3));
			rating.screenCenter();
			var _g = rating;
			_g.set_y(_g.y - 50);
			rating.set_x(coolText.x - 125);
			if(flixel_FlxG.save.data.changedHit) {
				rating.set_x(flixel_FlxG.save.data.changedHitX);
				rating.set_y(flixel_FlxG.save.data.changedHitY);
			}
			rating.acceleration.set_y(550);
			var _g = rating.velocity;
			_g.set_y(_g.y - flixel_FlxG.random.int(140,175));
			var _g = rating.velocity;
			_g.set_x(_g.x - flixel_FlxG.random.int(0,10));
			var msTiming = HelperFunctions.truncateFloat(noteDiff,3);
			if(PlayStateChangeables.botPlay && !PlayState.loadRep) {
				msTiming = 0;
			}
			if(PlayState.loadRep) {
				msTiming = HelperFunctions.truncateFloat(this.findByTime(daNote.strumTime)[3],3);
			}
			if(this.currentTimingShown != null) {
				this.remove(this.currentTimingShown);
			}
			this.currentTimingShown = new flixel_text_FlxText(0,0,0,"0ms");
			this.timeShown = 0;
			switch(daRating) {
			case "good":
				this.currentTimingShown.set_color(-16744448);
				break;
			case "bad":case "shit":
				this.currentTimingShown.set_color(-65536);
				break;
			case "sick":
				this.currentTimingShown.set_color(-16711681);
				break;
			}
			this.currentTimingShown.set_borderStyle(flixel_text_FlxTextBorderStyle.OUTLINE);
			this.currentTimingShown.set_borderSize(1);
			this.currentTimingShown.set_borderColor(-16777216);
			this.currentTimingShown.set_text(msTiming + "ms");
			this.currentTimingShown.set_size(20);
			if(msTiming >= 0.03 && PlayState.offsetTesting) {
				this.hits.shift();
				this.hits.shift();
				this.hits.shift();
				this.hits.pop();
				this.hits.pop();
				this.hits.pop();
				this.hits.push(msTiming);
				var total = 0.0;
				var _g = 0;
				var _g1 = this.hits;
				while(_g < _g1.length) {
					var i = _g1[_g];
					++_g;
					total += i;
				}
				this.offsetTest = HelperFunctions.truncateFloat(total / this.hits.length,2);
			}
			if(this.currentTimingShown.alpha != 1) {
				this.currentTimingShown.set_alpha(1);
			}
			if(!PlayStateChangeables.botPlay || PlayState.loadRep) {
				this.add(this.currentTimingShown);
			}
			var comboSpr = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + (pixelShitPart1 + "combo" + pixelShitPart2) + ".png","IMAGE",pixelShitPart3));
			comboSpr.screenCenter();
			comboSpr.set_x(rating.x);
			comboSpr.set_y(rating.y + 100);
			comboSpr.acceleration.set_y(600);
			var _g = comboSpr.velocity;
			_g.set_y(_g.y - 150);
			this.currentTimingShown.screenCenter();
			this.currentTimingShown.set_x(comboSpr.x + 100);
			this.currentTimingShown.set_y(rating.y + 100);
			this.currentTimingShown.acceleration.set_y(600);
			var _g = this.currentTimingShown.velocity;
			_g.set_y(_g.y - 150);
			var _g = comboSpr.velocity;
			_g.set_x(_g.x + flixel_FlxG.random.int(1,10));
			var _g = this.currentTimingShown.velocity;
			_g.set_x(_g.x + comboSpr.velocity.x);
			if(!PlayStateChangeables.botPlay || PlayState.loadRep) {
				this.add(rating);
			}
			if(PlayState.SONG.noteStyle != "pixel") {
				rating.setGraphicSize(rating.get_width() * 0.7 | 0);
				rating.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				comboSpr.setGraphicSize(comboSpr.get_width() * 0.7 | 0);
				comboSpr.set_antialiasing(flixel_FlxG.save.data.antialiasing);
			} else {
				rating.setGraphicSize(rating.get_width() * PlayState.daPixelZoom * 0.7 | 0);
				comboSpr.setGraphicSize(comboSpr.get_width() * PlayState.daPixelZoom * 0.7 | 0);
			}
			this.currentTimingShown.updateHitbox();
			comboSpr.updateHitbox();
			rating.updateHitbox();
			this.currentTimingShown.set_cameras([this.camHUD]);
			comboSpr.set_cameras([this.camHUD]);
			rating.set_cameras([this.camHUD]);
			var seperatedScore = [];
			var comboSplit = (this.combo + "").split("");
			if(this.combo > PlayState.highestCombo) {
				PlayState.highestCombo = this.combo;
			}
			if(comboSplit.length == 1) {
				seperatedScore.push(0);
				seperatedScore.push(0);
			} else if(comboSplit.length == 2) {
				seperatedScore.push(0);
			}
			var _g = 0;
			var _g1 = comboSplit.length;
			while(_g < _g1) {
				var i = _g++;
				var str = comboSplit[i];
				seperatedScore.push(Std.parseInt(str));
			}
			var daLoop = 0;
			var _g = 0;
			while(_g < seperatedScore.length) {
				var i = seperatedScore[_g];
				++_g;
				var numScore = [new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + (pixelShitPart1 + "num" + (i | 0) + pixelShitPart2) + ".png","IMAGE",pixelShitPart3))];
				numScore[0].screenCenter();
				numScore[0].set_x(rating.x + 43 * daLoop - 50);
				numScore[0].set_y(rating.y + 100);
				numScore[0].set_cameras([this.camHUD]);
				if(PlayState.SONG.noteStyle != "pixel") {
					numScore[0].set_antialiasing(flixel_FlxG.save.data.antialiasing);
					numScore[0].setGraphicSize(numScore[0].get_width() * 0.5 | 0);
				} else {
					numScore[0].setGraphicSize(numScore[0].get_width() * PlayState.daPixelZoom | 0);
				}
				numScore[0].updateHitbox();
				numScore[0].acceleration.set_y(flixel_FlxG.random.int(200,300));
				var _g1 = numScore[0].velocity;
				_g1.set_y(_g1.y - flixel_FlxG.random.int(140,160));
				numScore[0].velocity.set_x(flixel_FlxG.random.float(-5,5));
				this.add(numScore[0]);
				this.visibleCombos.push(numScore[0]);
				var numScore1 = numScore[0];
				var tmp = (function(numScore) {
					return function(tween) {
						HxOverrides.remove(_gthis.visibleCombos,numScore[0]);
						numScore[0].destroy();
					};
				})(numScore);
				flixel_tweens_FlxTween.tween(numScore1,{ alpha : 0},0.2,{ onComplete : tmp, onUpdate : (function(numScore) {
					return function(tween) {
						if(_gthis.visibleCombos.indexOf(numScore[0]) == -1) {
							tween.cancel();
							numScore[0].destroy();
						}
					};
				})(numScore), startDelay : Conductor.crochet * 0.002});
				if(this.visibleCombos.length > seperatedScore.length + 20) {
					var _g2 = 0;
					var _g3 = seperatedScore.length - 1;
					while(_g2 < _g3) {
						var i1 = _g2++;
						HxOverrides.remove(this.visibleCombos,this.visibleCombos[this.visibleCombos.length - 1]);
					}
				}
				++daLoop;
			}
			coolText.set_text(Std.string(seperatedScore));
			flixel_tweens_FlxTween.tween(rating,{ alpha : 0},0.2,{ startDelay : Conductor.crochet * 0.001, onUpdate : function(tween) {
				if(_gthis.currentTimingShown != null) {
					var _g = _gthis.currentTimingShown;
					_g.set_alpha(_g.alpha - 0.02);
				}
				_gthis.timeShown++;
			}});
			flixel_tweens_FlxTween.tween(comboSpr,{ alpha : 0},0.2,{ onComplete : function(tween) {
				coolText.destroy();
				comboSpr.destroy();
				if(_gthis.currentTimingShown != null && _gthis.timeShown >= 20) {
					_gthis.remove(_gthis.currentTimingShown);
					_gthis.currentTimingShown = null;
				}
				rating.destroy();
			}, startDelay : Conductor.crochet * 0.001});
			this.curSection += 1;
		}
	}
	,NearlyEquals: function(value1,value2,unimportantDifference) {
		if(unimportantDifference == null) {
			unimportantDifference = 10;
		}
		return Math.abs(flixel_math_FlxMath.roundDecimal(value1,1) - flixel_math_FlxMath.roundDecimal(value2,1)) < unimportantDifference;
	}
	,upHold: null
	,downHold: null
	,rightHold: null
	,leftHold: null
	,keyShit: function() {
		var _gthis = this;
		var holdArray = [PlayerSettings.player1.controls._left.check(),PlayerSettings.player1.controls._down.check(),PlayerSettings.player1.controls._up.check(),PlayerSettings.player1.controls._right.check()];
		var pressArray = [PlayerSettings.player1.controls._leftP.check(),PlayerSettings.player1.controls._downP.check(),PlayerSettings.player1.controls._upP.check(),PlayerSettings.player1.controls._rightP.check()];
		var releaseArray = [PlayerSettings.player1.controls._leftR.check(),PlayerSettings.player1.controls._downR.check(),PlayerSettings.player1.controls._upR.check(),PlayerSettings.player1.controls._rightR.check()];
		var keynameArray_0 = "left";
		var keynameArray_1 = "down";
		var keynameArray_2 = "up";
		var keynameArray_3 = "right";
		if(PlayStateChangeables.botPlay) {
			holdArray = [false,false,false,false];
			pressArray = [false,false,false,false];
			releaseArray = [false,false,false,false];
		}
		var anas = [null,null,null,null];
		var _g = 0;
		var _g1 = pressArray.length;
		while(_g < _g1) {
			var i = _g++;
			if(pressArray[i]) {
				anas[i] = new Ana(Conductor.songPosition,null,false,"miss",i);
			}
		}
		if(holdArray.indexOf(true) != -1 && this.generatedMusic) {
			this.notes.forEachAlive(function(daNote) {
				if(daNote.isSustainNote && daNote.canBeHit && daNote.mustPress && holdArray[daNote.noteData] && daNote.sustainActive) {
					haxe_Log.trace(daNote.sustainActive,{ fileName : "source/PlayState.hx", lineNumber : 3868, className : "PlayState", methodName : "keyShit"});
					_gthis.goodNoteHit(daNote);
				}
			});
		}
		if(KeyBinds.gamepad && !flixel_FlxG.keys.justPressed.get_ANY()) {
			if(pressArray.indexOf(true) != -1 && this.generatedMusic) {
				PlayState.boyfriend.holdTimer = 0;
				var possibleNotes = [];
				var directionList = [];
				var dumbNotes = [];
				var directionsAccounted = [false,false,false,false];
				this.notes.forEachAlive(function(daNote) {
					if(daNote.canBeHit && daNote.mustPress && !daNote.tooLate && !daNote.wasGoodHit && !directionsAccounted[daNote.noteData]) {
						if(directionList.indexOf(daNote.noteData) != -1) {
							directionsAccounted[daNote.noteData] = true;
							var _g = 0;
							while(_g < possibleNotes.length) {
								var coolNote = possibleNotes[_g];
								++_g;
								if(coolNote.noteData == daNote.noteData && Math.abs(daNote.strumTime - coolNote.strumTime) < 10) {
									dumbNotes.push(daNote);
									break;
								} else if(coolNote.noteData == daNote.noteData && daNote.strumTime < coolNote.strumTime) {
									HxOverrides.remove(possibleNotes,coolNote);
									possibleNotes.push(daNote);
									break;
								}
							}
						} else {
							directionsAccounted[daNote.noteData] = true;
							possibleNotes.push(daNote);
							directionList.push(daNote.noteData);
						}
					}
				});
				var _g = 0;
				while(_g < dumbNotes.length) {
					var note = dumbNotes[_g];
					++_g;
					note.kill();
					this.notes.remove(note,true);
					note.destroy();
				}
				possibleNotes.sort(function(a,b) {
					return a.strumTime - b.strumTime | 0;
				});
				var hit = [false,false,false,false];
				if(this.perfectMode) {
					this.goodNoteHit(possibleNotes[0]);
				} else if(possibleNotes.length > 0) {
					if(!flixel_FlxG.save.data.ghost) {
						var _g = 0;
						var _g1 = pressArray.length;
						while(_g < _g1) {
							var shit = _g++;
							if(pressArray[shit] && directionList.indexOf(shit) == -1) {
								this.noteMiss(shit,null);
							}
						}
					}
					var _g = 0;
					while(_g < possibleNotes.length) {
						var coolNote = possibleNotes[_g];
						++_g;
						if(pressArray[coolNote.noteData] && !hit[coolNote.noteData]) {
							if(this.mashViolations != 0) {
								this.mashViolations--;
							}
							hit[coolNote.noteData] = true;
							this.scoreTxt.set_color(-1);
							var noteDiff = -(coolNote.strumTime - Conductor.songPosition);
							anas[coolNote.noteData].hit = true;
							anas[coolNote.noteData].hitJudge = Ratings.CalculateRating(noteDiff,Math.floor(PlayStateChangeables.safeFrames / 60 * 1000));
							anas[coolNote.noteData].nearestNote = [coolNote.strumTime,coolNote.noteData,coolNote.sustainLength];
							this.goodNoteHit(coolNote);
						}
					}
				}
				if(PlayState.boyfriend.holdTimer > Conductor.stepCrochet * 4 * 0.001 && (holdArray.indexOf(true) == -1 || PlayStateChangeables.botPlay)) {
					if(StringTools.startsWith(PlayState.boyfriend.animation._curAnim.name,"sing") && !StringTools.endsWith(PlayState.boyfriend.animation._curAnim.name,"miss") && (PlayState.boyfriend.animation._curAnim.curFrame >= 10 || PlayState.boyfriend.animation._curAnim.finished)) {
						PlayState.boyfriend.playAnim("idle");
					}
				} else if(!flixel_FlxG.save.data.ghost) {
					var _g = 0;
					var _g1 = pressArray.length;
					while(_g < _g1) {
						var shit = _g++;
						if(pressArray[shit]) {
							this.noteMiss(shit,null);
						}
					}
				}
			}
			if(!PlayState.loadRep) {
				var _g = 0;
				while(_g < anas.length) {
					var i = anas[_g];
					++_g;
					if(i != null) {
						this.replayAna.anaArray.push(i);
					}
				}
			}
		}
		if(PlayStateChangeables.botPlay) {
			this.notes.forEachAlive(function(daNote) {
				var diff = -(daNote.strumTime - Conductor.songPosition);
				daNote.rating = Ratings.CalculateRating(diff,Math.floor(PlayStateChangeables.safeFrames / 60 * 1000));
				if(daNote.mustPress && daNote.rating == "sick" || diff > 0 && daNote.mustPress) {
					if(PlayState.loadRep) {
						var n = _gthis.findByTime(daNote.strumTime);
						haxe_Log.trace(n,{ fileName : "source/PlayState.hx", lineNumber : 3990, className : "PlayState", methodName : "keyShit"});
						if(n != null) {
							_gthis.goodNoteHit(daNote);
							PlayState.boyfriend.holdTimer = daNote.sustainLength;
						}
					} else {
						_gthis.goodNoteHit(daNote);
						PlayState.boyfriend.holdTimer = daNote.sustainLength;
						if(flixel_FlxG.save.data.cpuStrums) {
							PlayState.playerStrums.forEach(function(spr) {
								if(Math.abs(daNote.noteData) == spr.ID) {
									spr.animation.play("confirm",true);
								}
								if(spr.animation._curAnim.name == "confirm" && PlayState.SONG.noteStyle != "pixel") {
									spr.centerOffsets();
									var _g = spr.offset;
									_g.set_x(_g.x - 13);
									var _g = spr.offset;
									_g.set_y(_g.y - 13);
								} else {
									spr.centerOffsets();
								}
							});
						}
					}
				}
			});
		}
		if(PlayState.boyfriend.holdTimer > Conductor.stepCrochet * 4 * 0.001 && (holdArray.indexOf(true) == -1 || PlayStateChangeables.botPlay)) {
			if(StringTools.startsWith(PlayState.boyfriend.animation._curAnim.name,"sing") && !StringTools.endsWith(PlayState.boyfriend.animation._curAnim.name,"miss") && (PlayState.boyfriend.animation._curAnim.curFrame >= 10 || PlayState.boyfriend.animation._curAnim.finished)) {
				PlayState.boyfriend.playAnim("idle");
			}
		}
		if(!PlayStateChangeables.botPlay) {
			PlayState.playerStrums.forEach(function(spr) {
				if(_gthis.keys[spr.ID] && spr.animation._curAnim.name != "confirm" && spr.animation._curAnim.name != "pressed") {
					spr.animation.play("pressed",false);
				}
				if(!_gthis.keys[spr.ID]) {
					spr.animation.play("static",false);
				}
				if(spr.animation._curAnim.name == "confirm" && PlayState.SONG.noteStyle != "pixel") {
					spr.centerOffsets();
					var _g = spr.offset;
					_g.set_x(_g.x - 13);
					var _g = spr.offset;
					_g.set_y(_g.y - 13);
				} else {
					spr.centerOffsets();
				}
			});
		}
	}
	,findByTime: function(time) {
		var _g = 0;
		var _g1 = PlayState.rep.replay.songNotes;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i[0] == time) {
				return i;
			}
		}
		return null;
	}
	,findByTimeIndex: function(time) {
		var _g = 0;
		var _g1 = PlayState.rep.replay.songNotes.length;
		while(_g < _g1) {
			var i = _g++;
			if(PlayState.rep.replay.songNotes[i][0] == time) {
				return i;
			}
		}
		return -1;
	}
	,fuckingVolume: null
	,useVideo: null
	,playingDathing: null
	,videoSprite: null
	,focusOut: function() {
		if(this.paused) {
			return;
		}
		this.persistentUpdate = false;
		this.persistentDraw = true;
		this.paused = true;
		if(flixel_FlxG.sound.music != null) {
			flixel_FlxG.sound.music.pause();
			this.vocals.pause();
		}
		this.openSubState(new PauseSubState(PlayState.boyfriend.getScreenPosition().x,PlayState.boyfriend.getScreenPosition().y));
	}
	,focusIn: function() {
	}
	,backgroundVideo: function(source) {
	}
	,noteMiss: function(direction,daNote) {
		if(direction == null) {
			direction = 1;
		}
		if(!PlayState.boyfriend.stunned) {
			if(this.combo > 5 && Object.prototype.hasOwnProperty.call(PlayState.gf.animOffsets.h,"sad")) {
				PlayState.gf.playAnim("sad");
			}
			this.combo = 0;
			PlayState.misses++;
			if(daNote != null) {
				if(!PlayState.loadRep) {
					this.saveNotes.push([daNote.strumTime,0,direction,166 * Math.floor(PlayState.rep.replay.sf / 60 * 1000) / 166]);
					this.saveJudge.push("miss");
				}
			} else if(!PlayState.loadRep) {
				this.saveNotes.push([Conductor.songPosition,0,direction,166 * Math.floor(PlayState.rep.replay.sf / 60 * 1000) / 166]);
				this.saveJudge.push("miss");
			}
			if(flixel_FlxG.save.data.accuracyMod == 1) {
				this.totalNotesHit -= 1;
			}
			if(daNote != null) {
				if(!daNote.isSustainNote) {
					this.songScore -= 10;
				}
			} else {
				this.songScore -= 10;
			}
			if(flixel_FlxG.save.data.missSounds) {
				flixel_FlxG.sound.play(Paths.sound("missnote" + flixel_FlxG.random.int(1,3),null),flixel_FlxG.random.float(0.1,0.2));
			}
			PlayState.boyfriend.playAnim("sing" + this.dataSuffix[direction] + "miss",true);
			this.updateAccuracy();
		}
	}
	,updateAccuracy: function() {
		this.totalPlayed += 1;
		this.accuracy = Math.max(0,this.totalNotesHit / this.totalPlayed * 100);
		this.accuracyDefault = Math.max(0,this.totalNotesHitDefault / this.totalPlayed * 100);
	}
	,getKeyPresses: function(note) {
		var possibleNotes = [];
		this.notes.forEachAlive(function(daNote) {
			if(daNote.canBeHit && daNote.mustPress && !daNote.tooLate) {
				possibleNotes.push(daNote);
				possibleNotes.sort(function(a,b) {
					return a.strumTime - b.strumTime | 0;
				});
			}
		});
		if(possibleNotes.length == 1) {
			return possibleNotes.length + 1;
		}
		return possibleNotes.length;
	}
	,mashing: null
	,mashViolations: null
	,etternaModeScore: null
	,noteCheck: function(controlArray,note) {
		var noteDiff = -(note.strumTime - Conductor.songPosition);
		note.rating = Ratings.CalculateRating(noteDiff,Math.floor(PlayStateChangeables.safeFrames / 60 * 1000));
		if(controlArray[note.noteData]) {
			this.goodNoteHit(note,this.mashing > this.getKeyPresses(note));
		}
	}
	,goodNoteHit: function(note,resetMashViolation) {
		if(resetMashViolation == null) {
			resetMashViolation = true;
		}
		if(this.mashing != 0) {
			this.mashing = 0;
		}
		var noteDiff = -(note.strumTime - Conductor.songPosition);
		if(PlayState.loadRep) {
			noteDiff = this.findByTime(note.strumTime)[3];
			var tmp = PlayState.rep.replay.songJudgements;
			var tmp1 = this.findByTimeIndex(note.strumTime);
			note.rating = tmp[tmp1];
		} else {
			note.rating = Ratings.CalculateRating(noteDiff);
		}
		if(note.rating == "miss") {
			return;
		}
		if(!note.isSustainNote) {
			this.notesHitArray.unshift(new Date());
		}
		if(!resetMashViolation && this.mashViolations >= 1) {
			this.mashViolations--;
		}
		if(this.mashViolations < 0) {
			this.mashViolations = 0;
		}
		if(!note.wasGoodHit) {
			if(!note.isSustainNote) {
				this.popUpScore(note);
				this.combo += 1;
			} else {
				this.totalNotesHit += 1;
			}
			var altAnim = "";
			if(note.isAlt) {
				altAnim = "-alt";
				haxe_Log.trace("Alt note on BF",{ fileName : "source/PlayState.hx", lineNumber : 4368, className : "PlayState", methodName : "goodNoteHit"});
			}
			PlayState.boyfriend.playAnim("sing" + this.dataSuffix[note.noteData] + altAnim,true);
			if(!PlayState.loadRep && note.mustPress) {
				var array = [note.strumTime,note.sustainLength,note.noteData,noteDiff];
				if(note.isSustainNote) {
					array[1] = -1;
				}
				this.saveNotes.push(array);
				this.saveJudge.push(note.rating);
			}
			if(!PlayStateChangeables.botPlay) {
				PlayState.playerStrums.forEach(function(spr) {
					if(Math.abs(note.noteData) == spr.ID) {
						spr.animation.play("confirm",true);
					}
				});
			}
			if(!note.isSustainNote) {
				note.kill();
				this.notes.remove(note,true);
				note.destroy();
			} else {
				note.wasGoodHit = true;
			}
			this.updateAccuracy();
		}
	}
	,fastCarCanDrive: null
	,resetFastCar: function() {
		if(flixel_FlxG.save.data.distractions) {
			this.fastCar.set_x(-12600);
			this.fastCar.set_y(flixel_FlxG.random.int(140,250));
			this.fastCar.velocity.set_x(0);
			this.fastCarCanDrive = true;
		}
	}
	,fastCarDrive: function() {
		var _gthis = this;
		if(flixel_FlxG.save.data.distractions) {
			flixel_FlxG.sound.play(Paths.sound("carPass" + flixel_FlxG.random.int(0,1),null),0.7);
			this.fastCar.velocity.set_x(flixel_FlxG.random.int(170,220) / flixel_FlxG.elapsed * 3);
			this.fastCarCanDrive = false;
			new flixel_util_FlxTimer().start(2,function(tmr) {
				_gthis.resetFastCar();
			});
		}
	}
	,trainMoving: null
	,trainFrameTiming: null
	,trainCars: null
	,trainFinishing: null
	,trainCooldown: null
	,trainStart: function() {
		if(flixel_FlxG.save.data.distractions) {
			this.trainMoving = true;
			if(this.trainSound._channel == null) {
				this.trainSound.play(true);
			}
		}
	}
	,startedMoving: null
	,updateTrainPos: function() {
		if(flixel_FlxG.save.data.distractions) {
			if(this.trainSound._time >= 4700) {
				this.startedMoving = true;
				PlayState.gf.playAnim("hairBlow");
			}
			if(this.startedMoving) {
				var _g = this.phillyTrain;
				_g.set_x(_g.x - 400);
				if(this.phillyTrain.x < -2000 && !this.trainFinishing) {
					this.phillyTrain.set_x(-1150);
					this.trainCars -= 1;
					if(this.trainCars <= 0) {
						this.trainFinishing = true;
					}
				}
				if(this.phillyTrain.x < -4000 && this.trainFinishing) {
					this.trainReset();
				}
			}
		}
	}
	,trainReset: function() {
		if(flixel_FlxG.save.data.distractions) {
			PlayState.gf.playAnim("hairFall");
			this.phillyTrain.set_x(flixel_FlxG.width + 200);
			this.trainMoving = false;
			this.trainCars = 8;
			this.trainFinishing = false;
			this.startedMoving = false;
		}
	}
	,lightningStrikeShit: function() {
		flixel_FlxG.sound.play(Paths.sound("thunder_" + flixel_FlxG.random.int(1,2),null));
		this.halloweenBG.animation.play("lightning");
		this.lightningStrikeBeat = this.curBeat;
		this.lightningOffset = flixel_FlxG.random.int(8,24);
		PlayState.boyfriend.playAnim("scared",true);
		PlayState.gf.playAnim("scared",true);
	}
	,danced: null
	,stepHit: function() {
		MusicBeatState.prototype.stepHit.call(this);
		if(flixel_FlxG.sound.music._time > Conductor.songPosition + 20 || flixel_FlxG.sound.music._time < Conductor.songPosition - 20) {
			this.resyncVocals();
		}
	}
	,lightningStrikeBeat: null
	,lightningOffset: null
	,beatHit: function() {
		MusicBeatState.prototype.beatHit.call(this);
		if(this.generatedMusic) {
			var Order = PlayStateChangeables.useDownscroll ? -1 : 1;
			if(Order == null) {
				Order = -1;
			}
			var _g = flixel_util_FlxSort.byY;
			var a1 = Order;
			var tmp = function(a2,a3) {
				return _g(a1,a2,a3);
			};
			this.notes.members.sort(tmp);
		}
		if(this.curSong == "Tutorial" && PlayState.dad.curCharacter == "gf" && PlayState.SONG.notes[Math.floor(this.curStep / 16)] != null) {
			if(PlayState.SONG.notes[Math.floor(this.curStep / 16)].mustHitSection) {
				PlayState.dad.dance();
			} else if(this.curBeat == 73 || this.curBeat % 4 == 0 || this.curBeat % 4 == 1) {
				PlayState.dad.playAnim("danceLeft",true);
			} else {
				PlayState.dad.playAnim("danceRight",true);
			}
		}
		if(PlayState.SONG.notes[Math.floor(this.curStep / 16)] != null) {
			if(!StringTools.startsWith(PlayState.dad.animation._curAnim.name,"sing") && PlayState.dad.curCharacter != "gf") {
				if(this.curBeat % this.idleBeat == 0 || !this.idleToBeat || PlayState.dad.curCharacter == "spooky") {
					PlayState.dad.dance(this.idleToBeat,PlayState.SONG.notes[Math.floor(this.curStep / 16)].p1AltAnim);
				}
			}
		}
		this.wiggleShit.update(Conductor.crochet);
		if(flixel_FlxG.save.data.camzoom) {
			if(this.curSong.toLowerCase() == "milf" && this.curBeat >= 168 && this.curBeat < 200 && this.camZooming && flixel_FlxG.camera.zoom < 1.35) {
				var _g1 = flixel_FlxG.camera;
				_g1.set_zoom(_g1.zoom + 0.015);
				var _g1 = this.camHUD;
				_g1.set_zoom(_g1.zoom + 0.03);
			}
			if(this.camZooming && flixel_FlxG.camera.zoom < 1.35 && this.curBeat % 4 == 0) {
				var _g1 = flixel_FlxG.camera;
				_g1.set_zoom(_g1.zoom + 0.015);
				var _g1 = this.camHUD;
				_g1.set_zoom(_g1.zoom + 0.03);
			}
		}
		this.iconP1.setGraphicSize(this.iconP1.get_width() + 30 | 0);
		this.iconP2.setGraphicSize(this.iconP2.get_width() + 30 | 0);
		this.iconP1.updateHitbox();
		this.iconP2.updateHitbox();
		if(this.curBeat % this.gfSpeed == 0) {
			PlayState.gf.dance();
		}
		if(!StringTools.startsWith(PlayState.boyfriend.animation._curAnim.name,"sing") && (this.curBeat % this.idleBeat == 0 || !this.idleToBeat)) {
			PlayState.boyfriend.playAnim("idle" + (PlayState.SONG.notes[Math.floor(this.curStep / 16)].p2AltAnim && PlayState.boyfriend.animation._animations.h["idle-alt"] != null ? "-alt" : ""),this.idleToBeat);
		}
		if(this.curBeat % 8 == 7 && this.curSong == "Bopeebo") {
			PlayState.boyfriend.playAnim("hey",true);
		}
		if(this.curBeat % 16 == 15 && PlayState.SONG.song == "Tutorial" && PlayState.dad.curCharacter == "gf" && this.curBeat > 16 && this.curBeat < 48) {
			PlayState.boyfriend.playAnim("hey",true);
			PlayState.dad.playAnim("cheer",true);
		}
		switch(PlayState.curStage) {
		case "limo":
			if(flixel_FlxG.save.data.distractions) {
				this.grpLimoDancers.forEach(function(dancer) {
					dancer.dance();
				});
				var Chance = 10;
				if(Chance == null) {
					Chance = 50;
				}
				if(flixel_FlxG.random.float(0,100) < Chance && this.fastCarCanDrive) {
					this.fastCarDrive();
				}
			}
			break;
		case "mall":
			if(flixel_FlxG.save.data.distractions) {
				this.upperBoppers.animation.play("bop",true);
				this.bottomBoppers.animation.play("bop",true);
				this.santa.animation.play("idle",true);
			}
			break;
		case "philly":
			if(flixel_FlxG.save.data.distractions) {
				if(!this.trainMoving) {
					this.trainCooldown += 1;
				}
				if(this.curBeat % 4 == 0) {
					this.phillyCityLights.forEach(function(light) {
						light.set_visible(false);
					});
					this.curLight = flixel_FlxG.random.int(0,this.phillyCityLights.length - 1);
					this.phillyCityLights.members[this.curLight].set_visible(true);
				}
			}
			var tmp;
			if(this.curBeat % 8 == 4) {
				var Chance = 30;
				if(Chance == null) {
					Chance = 50;
				}
				tmp = flixel_FlxG.random.float(0,100) < Chance;
			} else {
				tmp = false;
			}
			if(tmp && !this.trainMoving && this.trainCooldown > 8) {
				if(flixel_FlxG.save.data.distractions) {
					this.trainCooldown = flixel_FlxG.random.int(-4,0);
					this.trainStart();
				}
			}
			break;
		case "school":
			if(flixel_FlxG.save.data.distractions) {
				this.bgGirls.dance();
			}
			break;
		}
		var tmp;
		if(this.isHalloween) {
			var Chance = 10;
			if(Chance == null) {
				Chance = 50;
			}
			tmp = flixel_FlxG.random.float(0,100) < Chance;
		} else {
			tmp = false;
		}
		if(tmp && this.curBeat > this.lightningStrikeBeat + this.lightningOffset) {
			if(flixel_FlxG.save.data.distractions) {
				this.lightningStrikeShit();
			}
		}
	}
	,curLight: null
	,__class__: PlayState
});
var PlayStateChangeables = function() { };
$hxClasses["PlayStateChangeables"] = PlayStateChangeables;
PlayStateChangeables.__name__ = "PlayStateChangeables";
PlayStateChangeables.useDownscroll = null;
PlayStateChangeables.safeFrames = null;
PlayStateChangeables.scrollSpeed = null;
PlayStateChangeables.botPlay = null;
PlayStateChangeables.Optimize = null;
PlayStateChangeables.zoom = null;
var PlayerSettings = function(id,scheme) {
	this.id = id;
	this.controls = new Controls("player" + id,scheme);
};
$hxClasses["PlayerSettings"] = PlayerSettings;
PlayerSettings.__name__ = "PlayerSettings";
PlayerSettings.player1 = null;
PlayerSettings.player2 = null;
PlayerSettings.init = function() {
	if(PlayerSettings.player1 == null) {
		PlayerSettings.player1 = new PlayerSettings(0,KeyboardScheme.Solo);
		++PlayerSettings.numPlayers;
	}
	var numGamepads = flixel_FlxG.gamepads.get_numActiveGamepads();
	if(numGamepads > 0) {
		var gamepad = flixel_FlxG.gamepads._activeGamepads[0];
		if(gamepad == null) {
			throw haxe_Exception.thrown("Unexpected null gamepad. id:0");
		}
		PlayerSettings.player1.controls.addDefaultGamepad(0);
	}
	if(numGamepads > 1) {
		if(PlayerSettings.player2 == null) {
			PlayerSettings.player2 = new PlayerSettings(1,KeyboardScheme.None);
			++PlayerSettings.numPlayers;
		}
		var gamepad = flixel_FlxG.gamepads._activeGamepads[1];
		if(gamepad == null) {
			throw haxe_Exception.thrown("Unexpected null gamepad. id:0");
		}
		PlayerSettings.player2.controls.addDefaultGamepad(1);
	}
};
PlayerSettings.reset = function() {
	PlayerSettings.player1 = null;
	PlayerSettings.player2 = null;
	PlayerSettings.numPlayers = 0;
};
PlayerSettings.prototype = {
	id: null
	,controls: null
	,setKeyboardScheme: function(scheme) {
		this.controls.setKeyboardScheme(scheme);
	}
	,__class__: PlayerSettings
};
var Ratings = function() { };
$hxClasses["Ratings"] = Ratings;
Ratings.__name__ = "Ratings";
Ratings.GenerateLetterRank = function(accuracy) {
	var ranking = "N/A";
	if(flixel_FlxG.save.data.botplay && !PlayState.loadRep) {
		ranking = "BotPlay";
	}
	if(PlayState.misses == 0 && PlayState.bads == 0 && PlayState.shits == 0 && PlayState.goods == 0) {
		ranking = "(MFC)";
	} else if(PlayState.misses == 0 && PlayState.bads == 0 && PlayState.shits == 0 && PlayState.goods >= 1) {
		ranking = "(GFC)";
	} else if(PlayState.misses == 0) {
		ranking = "(FC)";
	} else if(PlayState.misses < 10) {
		ranking = "(SDCB)";
	} else {
		ranking = "(Clear)";
	}
	var wifeConditions = [accuracy >= 99.9935,accuracy >= 99.980,accuracy >= 99.970,accuracy >= 99.955,accuracy >= 99.90,accuracy >= 99.80,accuracy >= 99.70,accuracy >= 99,accuracy >= 96.50,accuracy >= 93,accuracy >= 90,accuracy >= 85,accuracy >= 80,accuracy >= 70,accuracy >= 60,accuracy < 60];
	var _g = 0;
	var _g1 = wifeConditions.length;
	while(_g < _g1) {
		var i = _g++;
		var b = wifeConditions[i];
		if(b) {
			switch(i) {
			case 0:
				ranking += " AAAAA";
				break;
			case 1:
				ranking += " AAAA:";
				break;
			case 2:
				ranking += " AAAA.";
				break;
			case 3:
				ranking += " AAAA";
				break;
			case 4:
				ranking += " AAA:";
				break;
			case 5:
				ranking += " AAA.";
				break;
			case 6:
				ranking += " AAA";
				break;
			case 7:
				ranking += " AA:";
				break;
			case 8:
				ranking += " AA.";
				break;
			case 9:
				ranking += " AA";
				break;
			case 10:
				ranking += " A:";
				break;
			case 11:
				ranking += " A.";
				break;
			case 12:
				ranking += " A";
				break;
			case 13:
				ranking += " B";
				break;
			case 14:
				ranking += " C";
				break;
			case 15:
				ranking += " D";
				break;
			}
			break;
		}
	}
	if(accuracy == 0) {
		ranking = "N/A";
	} else if(flixel_FlxG.save.data.botplay && !PlayState.loadRep) {
		ranking = "BotPlay";
	}
	return ranking;
};
Ratings.CalculateRating = function(noteDiff,customSafeZone) {
	var customTimeScale = Conductor.timeScale;
	if(customSafeZone != null) {
		customTimeScale = customSafeZone / 166;
	}
	var rating = Ratings.checkRating(noteDiff,customTimeScale);
	return rating;
};
Ratings.checkRating = function(ms,ts) {
	var rating = "shit";
	if(ms <= 166 * ts && ms >= 135 * ts) {
		rating = "shit";
	}
	if(ms < 135 * ts && ms >= 90 * ts) {
		rating = "bad";
	}
	if(ms < 90 * ts && ms >= 45 * ts) {
		rating = "good";
	}
	if(ms < 45 * ts && ms >= -45 * ts) {
		rating = "sick";
	}
	if(ms > -90 * ts && ms <= -45 * ts) {
		rating = "good";
	}
	if(ms > -135 * ts && ms <= -90 * ts) {
		rating = "bad";
	}
	if(ms > -166 * ts && ms <= -135 * ts) {
		rating = "shit";
	}
	return rating;
};
Ratings.CalculateRanking = function(score,scoreDef,nps,maxNPS,accuracy) {
	return (flixel_FlxG.save.data.npsDisplay ? "NPS: " + nps + " (Max " + maxNPS + ")" + (!PlayStateChangeables.botPlay || PlayState.loadRep ? " | " : "") : "") + (!PlayStateChangeables.botPlay || PlayState.loadRep ? "Score:" + (Conductor.safeFrames != 10 ? score + " (" + scoreDef + ")" : "" + score) + (flixel_FlxG.save.data.accuracyDisplay ? " | Combo Breaks:" + PlayState.misses + " | Accuracy:" + (PlayStateChangeables.botPlay && !PlayState.loadRep ? "N/A" : HelperFunctions.truncateFloat(accuracy,2) + " %") + " | " + Ratings.GenerateLetterRank(accuracy) : "") : "");
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice;
		var a1 = arguments;
		var a2 = a.call(a1);
		return f(a2);
	};
};
var Ana = function(_hitTime,_nearestNote,_hit,_hitJudge,_key) {
	this.hitTime = _hitTime;
	this.nearestNote = _nearestNote;
	this.hit = _hit;
	this.hitJudge = _hitJudge;
	this.key = _key;
};
$hxClasses["Ana"] = Ana;
Ana.__name__ = "Ana";
Ana.prototype = {
	hitTime: null
	,nearestNote: null
	,hit: null
	,hitJudge: null
	,key: null
	,__class__: Ana
};
var Analysis = function() {
	this.anaArray = [];
};
$hxClasses["Analysis"] = Analysis;
Analysis.__name__ = "Analysis";
Analysis.prototype = {
	anaArray: null
	,__class__: Analysis
};
var Replay = function(path) {
	this.path = "";
	this.path = path;
	this.replay = { songName : "No Song Found", songDiff : 1, noteSpeed : 1.5, isDownscroll : false, songNotes : [], replayGameVer : Replay.version, chartPath : "", sm : false, timestamp : new Date(), sf : Conductor.safeFrames, ana : new Analysis(), songJudgements : []};
};
$hxClasses["Replay"] = Replay;
Replay.__name__ = "Replay";
Replay.LoadReplay = function(path) {
	var rep = new Replay(path);
	rep.LoadFromJSON();
	haxe_Log.trace("basic replay data:\nSong Name: " + rep.replay.songName + "\nSong Diff: " + rep.replay.songDiff,{ fileName : "source/Replay.hx", lineNumber : 86, className : "Replay", methodName : "LoadReplay"});
	return rep;
};
Replay.prototype = {
	path: null
	,replay: null
	,SaveReplay: function(notearray,judge,ana) {
		var chartPath = "";
		var json = flixel_FlxG.save.data.scrollSpeed > 1 ? flixel_FlxG.save.data.scrollSpeed : PlayState.SONG.speed;
		var json1 = { "songName" : PlayState.SONG.song, "songDiff" : PlayState.storyDifficulty, "chartPath" : chartPath, "sm" : PlayState.isSM, "timestamp" : new Date(), "replayGameVer" : Replay.version, "sf" : Conductor.safeFrames, "noteSpeed" : json, "isDownscroll" : flixel_FlxG.save.data.downscroll, "songNotes" : notearray, "songJudgements" : judge, "ana" : ana};
		var data = JSON.stringify(json1,null,"");
		var time = new Date().getTime();
	}
	,LoadFromJSON: function() {
	}
	,__class__: Replay
};
var ResultsScreen = function(BGColor) {
	this.frames = 0;
	flixel_FlxSubState.call(this,BGColor);
};
$hxClasses["ResultsScreen"] = ResultsScreen;
ResultsScreen.__name__ = "ResultsScreen";
ResultsScreen.__super__ = flixel_FlxSubState;
ResultsScreen.prototype = $extend(flixel_FlxSubState.prototype,{
	background: null
	,text: null
	,anotherBackground: null
	,graph: null
	,graphSprite: null
	,comboText: null
	,contText: null
	,settingsText: null
	,music: null
	,graphData: null
	,ranking: null
	,accuracy: null
	,create: function() {
		var _gthis = this;
		this.background = new flixel_FlxSprite(0,0).makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		this.background.scrollFactor.set();
		this.add(this.background);
		if(!PlayState.inResults) {
			this.music = new flixel_system_FlxSound().loadEmbedded(Paths.getPath("music/" + "breakfast" + "." + "mp3","MUSIC",null),true,true);
			this.music.set_volume(0);
			this.music.play(false,flixel_FlxG.random.int(0,this.music._length / 2 | 0));
			flixel_FlxG.sound.list.add(this.music);
		}
		this.background.set_alpha(0);
		this.text = new flixel_text_FlxText(20,-55,0,"Song Cleared!");
		this.text.set_size(34);
		var _this = this.text;
		var Color = -16777216;
		var Size = 4;
		var Quality = 1;
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		_this.set_borderStyle(flixel_text_FlxTextBorderStyle.OUTLINE);
		_this.set_borderColor(Color);
		_this.set_borderSize(Size);
		_this.set_borderQuality(Quality);
		this.text.set_color(-1);
		this.text.scrollFactor.set();
		this.add(this.text);
		var score = PlayState.instance.songScore;
		if(PlayState.isStoryMode) {
			score = PlayState.campaignScore;
			this.text.set_text("Week Cleared!");
		}
		var sicks = PlayState.isStoryMode ? PlayState.campaignSicks : PlayState.sicks;
		var goods = PlayState.isStoryMode ? PlayState.campaignGoods : PlayState.goods;
		var bads = PlayState.isStoryMode ? PlayState.campaignBads : PlayState.bads;
		var shits = PlayState.isStoryMode ? PlayState.campaignShits : PlayState.shits;
		this.comboText = new flixel_text_FlxText(20,-75,0,"Judgements:\nSicks - " + sicks + "\nGoods - " + goods + "\nBads - " + bads + "\n\nCombo Breaks: " + (PlayState.isStoryMode ? PlayState.campaignMisses : PlayState.misses) + "\nHighest Combo: " + (PlayState.highestCombo + 1) + "\nScore: " + PlayState.instance.songScore + "\nAccuracy: " + HelperFunctions.truncateFloat(PlayState.instance.accuracy,2) + "%\n\n" + Ratings.GenerateLetterRank(PlayState.instance.accuracy) + "\n\n" + (!PlayState.loadRep ? "F1 - View replay\nF2 - Replay song" : "") + "\n        ");
		this.comboText.set_size(28);
		var _this = this.comboText;
		var Color = -16777216;
		var Size = 4;
		var Quality = 1;
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		_this.set_borderStyle(flixel_text_FlxTextBorderStyle.OUTLINE);
		_this.set_borderColor(Color);
		_this.set_borderSize(Size);
		_this.set_borderQuality(Quality);
		this.comboText.set_color(-1);
		this.comboText.scrollFactor.set();
		this.add(this.comboText);
		this.contText = new flixel_text_FlxText(flixel_FlxG.width - 475,flixel_FlxG.height + 50,0,"Press " + (KeyBinds.gamepad ? "A" : "ENTER") + " to continue.");
		this.contText.set_size(28);
		var _this = this.contText;
		var Color = -16777216;
		var Size = 4;
		var Quality = 1;
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		_this.set_borderStyle(flixel_text_FlxTextBorderStyle.OUTLINE);
		_this.set_borderColor(Color);
		_this.set_borderSize(Size);
		_this.set_borderQuality(Quality);
		this.contText.set_color(-1);
		this.contText.scrollFactor.set();
		this.add(this.contText);
		this.anotherBackground = new flixel_FlxSprite(flixel_FlxG.width - 500,45).makeGraphic(450,240,-16777216);
		this.anotherBackground.scrollFactor.set();
		this.anotherBackground.set_alpha(0);
		this.add(this.anotherBackground);
		this.graph = new HitGraph(flixel_FlxG.width - 500,45,495,240);
		this.graph.set_alpha(0);
		this.graphSprite = new OFLSprite(flixel_FlxG.width - 510,45,460,240,this.graph);
		this.graphSprite.scrollFactor.set();
		this.graphSprite.set_alpha(0);
		this.add(this.graphSprite);
		var sicks = HelperFunctions.truncateFloat(PlayState.sicks / PlayState.goods,1);
		var goods = HelperFunctions.truncateFloat(PlayState.goods / PlayState.bads,1);
		if(sicks == Infinity) {
			sicks = 0;
		}
		if(goods == Infinity) {
			goods = 0;
		}
		var mean = 0;
		var _g = 0;
		var _g1 = PlayState.rep.replay.songNotes.length;
		while(_g < _g1) {
			var i = _g++;
			var obj = PlayState.rep.replay.songNotes[i];
			var obj2 = PlayState.rep.replay.songJudgements[i];
			var obj3 = obj[0];
			var diff = obj[3];
			var judge = obj2;
			if(diff != 166 * Math.floor(PlayState.rep.replay.sf / 60 * 1000) / 166) {
				mean += diff;
			}
			if(obj[1] != -1) {
				this.graph.addToHistory(diff,judge,obj3);
			}
		}
		if(sicks == Infinity || sicks == NaN) {
			sicks = 0;
		}
		if(goods == Infinity || goods == NaN) {
			goods = 0;
		}
		this.graph.update();
		mean = HelperFunctions.truncateFloat(mean / PlayState.rep.replay.songNotes.length,2);
		this.settingsText = new flixel_text_FlxText(20,flixel_FlxG.height + 50,0,"SF: " + PlayState.rep.replay.sf + " | Ratio (SA/GA): " + Math.round(sicks) + ":1 " + Math.round(goods) + ":1 | Mean: " + mean + "ms | Played on " + PlayState.SONG.song + " " + CoolUtil.difficultyFromInt(PlayState.storyDifficulty).toUpperCase());
		this.settingsText.set_size(16);
		var _this = this.settingsText;
		var Color = -16777216;
		var Size = 2;
		var Quality = 1;
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		_this.set_borderStyle(flixel_text_FlxTextBorderStyle.OUTLINE);
		_this.set_borderColor(Color);
		_this.set_borderSize(Size);
		_this.set_borderQuality(Quality);
		this.settingsText.set_color(-1);
		this.settingsText.scrollFactor.set();
		this.add(this.settingsText);
		flixel_tweens_FlxTween.tween(this.background,{ alpha : 0.5},0.5);
		flixel_tweens_FlxTween.tween(this.text,{ y : 20},0.5,{ ease : flixel_tweens_FlxEase.expoInOut});
		flixel_tweens_FlxTween.tween(this.comboText,{ y : 145},0.5,{ ease : flixel_tweens_FlxEase.expoInOut});
		flixel_tweens_FlxTween.tween(this.contText,{ y : flixel_FlxG.height - 45},0.5,{ ease : flixel_tweens_FlxEase.expoInOut});
		flixel_tweens_FlxTween.tween(this.settingsText,{ y : flixel_FlxG.height - 35},0.5,{ ease : flixel_tweens_FlxEase.expoInOut});
		flixel_tweens_FlxTween.tween(this.anotherBackground,{ alpha : 0.6},0.5,{ onUpdate : function(tween) {
			_gthis.graph.set_alpha(Math.max(tween._secondsSinceStart - tween._delayToUse,0) / tween.duration);
			_gthis.graphSprite.set_alpha(Math.max(tween._secondsSinceStart - tween._delayToUse,0) / tween.duration);
		}});
		this.set_cameras([flixel_FlxG.cameras.list[flixel_FlxG.cameras.list.length - 1]]);
		flixel_FlxSubState.prototype.create.call(this);
	}
	,frames: null
	,update: function(elapsed) {
		if(this.music != null && this.music._volume < 0.5) {
			var _g = this.music;
			_g.set_volume(_g._volume + 0.01 * elapsed);
		}
		if(PlayerSettings.player1.controls._accept.check()) {
			var _this = this.music;
			var Duration = 0.3;
			if(Duration == null) {
				Duration = 1;
			}
			if(_this.fadeTween != null) {
				_this.fadeTween.cancel();
			}
			_this.fadeTween = flixel_tweens_FlxTween.num(_this._volume,0,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
			PlayState.loadRep = false;
			PlayState.rep = null;
			var songHighscore = StringTools.replace(PlayState.SONG.song," ","-");
			switch(songHighscore) {
			case "Dad-Battle":
				songHighscore = "Dadbattle";
				break;
			case "Philly-Nice":
				songHighscore = "Philly";
				break;
			}
			Highscore.saveScore(songHighscore,Math.round(PlayState.instance.songScore),PlayState.storyDifficulty);
			Highscore.saveCombo(songHighscore,Ratings.GenerateLetterRank(PlayState.instance.accuracy),PlayState.storyDifficulty);
			if(PlayState.isStoryMode) {
				flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
				Conductor.changeBPM(102);
				var nextState = new MainMenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else {
				var nextState = new FreeplayState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
			PlayState.instance.clean();
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(112,_this.status) && !PlayState.loadRep) {
			haxe_Log.trace(PlayState.rep.path,{ fileName : "source/ResultsScreen.hx", lineNumber : 226, className : "ResultsScreen", methodName : "update"});
			PlayState.rep = Replay.LoadReplay(PlayState.rep.path);
			PlayState.loadRep = true;
			PlayState.isSM = PlayState.rep.replay.sm;
			var songFormat = StringTools.replace(PlayState.rep.replay.songName," ","-");
			switch(songFormat) {
			case "Dad-Battle":
				songFormat = "Dadbattle";
				break;
			case "Philly-Nice":
				songFormat = "Philly";
				break;
			case "dad-battle":
				songFormat = "Dadbattle";
				break;
			case "philly-nice":
				songFormat = "Philly";
				break;
			}
			var songHighscore = StringTools.replace(PlayState.SONG.song," ","-");
			switch(songHighscore) {
			case "Dad-Battle":
				songHighscore = "Dadbattle";
				break;
			case "Philly-Nice":
				songHighscore = "Philly";
				break;
			}
			Highscore.saveScore(songHighscore,Math.round(PlayState.instance.songScore),PlayState.storyDifficulty);
			Highscore.saveCombo(songHighscore,Ratings.GenerateLetterRank(PlayState.instance.accuracy),PlayState.storyDifficulty);
			var poop = "";
			poop = Highscore.formatSong(PlayState.rep.replay.songName,PlayState.rep.replay.songDiff);
			var _this = this.music;
			var Duration = 0.3;
			if(Duration == null) {
				Duration = 1;
			}
			if(_this.fadeTween != null) {
				_this.fadeTween.cancel();
			}
			_this.fadeTween = flixel_tweens_FlxTween.num(_this._volume,0,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
			if(PlayState.isSM) {
				PlayState.SONG = Song.conversionChecks(Song.loadFromJsonRAW(poop));
			} else {
				PlayState.SONG = Song.conversionChecks(Song.loadFromJson(poop,PlayState.rep.replay.songName));
			}
			PlayState.isStoryMode = false;
			PlayState.storyDifficulty = PlayState.rep.replay.songDiff;
			var nextState = LoadingState.getNextState(new PlayState(),false);
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
			PlayState.instance.clean();
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(113,_this.status) && !PlayState.loadRep) {
			PlayState.rep = null;
			PlayState.loadRep = false;
			var songHighscore = StringTools.replace(PlayState.SONG.song," ","-");
			switch(songHighscore) {
			case "Dad-Battle":
				songHighscore = "Dadbattle";
				break;
			case "Philly-Nice":
				songHighscore = "Philly";
				break;
			}
			Highscore.saveScore(songHighscore,Math.round(PlayState.instance.songScore),PlayState.storyDifficulty);
			Highscore.saveCombo(songHighscore,Ratings.GenerateLetterRank(PlayState.instance.accuracy),PlayState.storyDifficulty);
			var songFormat = StringTools.replace(PlayState.SONG.song," ","-");
			switch(songFormat) {
			case "Dad-Battle":
				songFormat = "Dadbattle";
				break;
			case "Philly-Nice":
				songFormat = "Philly";
				break;
			case "dad-battle":
				songFormat = "Dadbattle";
				break;
			case "philly-nice":
				songFormat = "Philly";
				break;
			}
			var poop = Highscore.formatSong(songFormat,PlayState.storyDifficulty);
			if(this.music != null) {
				var _this = this.music;
				var Duration = 0.3;
				if(Duration == null) {
					Duration = 1;
				}
				if(_this.fadeTween != null) {
					_this.fadeTween.cancel();
				}
				_this.fadeTween = flixel_tweens_FlxTween.num(_this._volume,0,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
			}
			PlayState.SONG = Song.loadFromJson(poop,PlayState.SONG.song);
			PlayState.isStoryMode = false;
			PlayState.storyDifficulty = PlayState.storyDifficulty;
			var nextState = LoadingState.getNextState(new PlayState(),false);
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
			PlayState.instance.clean();
		}
		flixel_FlxSubState.prototype.update.call(this,elapsed);
	}
	,__class__: ResultsScreen
});
var Section = function(lengthInSteps) {
	if(lengthInSteps == null) {
		lengthInSteps = 16;
	}
	this.mustHitSection = true;
	this.typeOfSection = 0;
	this.lengthInSteps = 16;
	this.bpm = 0;
	this.changeBPM = false;
	this.sectionNotes = [];
	this.endTime = 0;
	this.startTime = 0;
	this.lengthInSteps = lengthInSteps;
};
$hxClasses["Section"] = Section;
Section.__name__ = "Section";
Section.prototype = {
	startTime: null
	,endTime: null
	,sectionNotes: null
	,changeBPM: null
	,bpm: null
	,lengthInSteps: null
	,typeOfSection: null
	,mustHitSection: null
	,__class__: Section
};
var SectionRender = function(x,y,GRID_SIZE,Height) {
	if(Height == null) {
		Height = 16;
	}
	flixel_FlxSprite.call(this,x,y);
	this.makeGraphic(GRID_SIZE * 8,GRID_SIZE * Height,-1579290);
	var h = GRID_SIZE;
	if(Math.floor(h) != h) {
		h = GRID_SIZE;
	}
	if(flixel_FlxG.save.data.editorBG) {
		flixel_addons_display_FlxGridOverlay.overlay(this,GRID_SIZE,h | 0,GRID_SIZE * 8,GRID_SIZE * Height);
	}
};
$hxClasses["SectionRender"] = SectionRender;
SectionRender.__name__ = "SectionRender";
SectionRender.__super__ = flixel_FlxSprite;
SectionRender.prototype = $extend(flixel_FlxSprite.prototype,{
	section: null
	,icon: null
	,lastUpdated: null
	,update: function(elapsed) {
	}
	,__class__: SectionRender
});
var Event = function(name,pos,value,type) {
	this.name = name;
	this.position = pos;
	this.value = value;
	this.type = type;
};
$hxClasses["Event"] = Event;
Event.__name__ = "Event";
Event.prototype = {
	name: null
	,position: null
	,value: null
	,type: null
	,__class__: Event
};
var Song = function(song,notes,bpm) {
	this.stage = "";
	this.noteStyle = "";
	this.gfVersion = "";
	this.player2 = "dad";
	this.player1 = "bf";
	this.speed = 1;
	this.needsVoices = true;
	this.song = song;
	this.notes = notes;
	this.bpm = bpm;
};
$hxClasses["Song"] = Song;
Song.__name__ = "Song";
Song.loadFromJsonRAW = function(rawJson) {
	while(!StringTools.endsWith(rawJson,"}")) rawJson = HxOverrides.substr(rawJson,0,rawJson.length - 1);
	return Song.parseJSONshit(rawJson);
};
Song.loadFromJson = function(jsonInput,folder) {
	var folderLowercase = StringTools.replace(folder," ","-").toLowerCase();
	switch(folderLowercase) {
	case "dad-battle":
		folderLowercase = "dadbattle";
		break;
	case "philly-nice":
		folderLowercase = "philly";
		break;
	}
	haxe_Log.trace("loading " + folderLowercase + "/" + jsonInput.toLowerCase(),{ fileName : "source/Song.hx", lineNumber : 87, className : "Song", methodName : "loadFromJson"});
	var rawJson = StringTools.trim(lime_utils_Assets.getText(Paths.getPath("data/" + (folderLowercase + "/" + jsonInput.toLowerCase()) + ".json","TEXT",null)));
	while(!StringTools.endsWith(rawJson,"}")) rawJson = HxOverrides.substr(rawJson,0,rawJson.length - 1);
	return Song.parseJSONshit(rawJson);
};
Song.conversionChecks = function(song) {
	var ba = song.bpm;
	var index = 0;
	haxe_Log.trace("conversion stuff " + song.song + " " + song.notes.length,{ fileName : "source/Song.hx", lineNumber : 121, className : "Song", methodName : "conversionChecks"});
	var convertedStuff = [];
	if(song.eventObjects == null) {
		song.eventObjects = [new Event("Init BPM",0,song.bpm,"BPM Change")];
	}
	var _g = 0;
	var _g1 = song.eventObjects;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		var name = Reflect.field(i,"name");
		var type = Reflect.field(i,"type");
		var pos = Reflect.field(i,"position");
		var value = Reflect.field(i,"value");
		convertedStuff.push(new Event(name,pos,value,type));
	}
	song.eventObjects = convertedStuff;
	var _g = 0;
	var _g1 = song.notes;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		var currentBeat = 4 * index;
		var currentSeg = TimingStruct.getTimingAtBeat(currentBeat);
		if(currentSeg == null) {
			continue;
		}
		var beat = currentSeg.startBeat + (currentBeat - currentSeg.startBeat);
		if(i.changeBPM && i.bpm != ba) {
			haxe_Log.trace("converting changebpm for section " + index,{ fileName : "source/Song.hx", lineNumber : 153, className : "Song", methodName : "conversionChecks"});
			ba = i.bpm;
			song.eventObjects.push(new Event("FNF BPM Change " + index,beat,i.bpm,"BPM Change"));
		}
		var _g2 = 0;
		var _g3 = i.sectionNotes;
		while(_g2 < _g3.length) {
			var ii = _g3[_g2];
			++_g2;
			if(ii[3] == null) {
				ii[3] = false;
			}
		}
		++index;
	}
	return song;
};
Song.parseJSONshit = function(rawJson) {
	var swagShit = JSON.parse(rawJson).song;
	swagShit.validScore = true;
	var _g = 0;
	var _g1 = swagShit.notes;
	while(_g < _g1.length) {
		var section = _g1[_g];
		++_g;
		if(section.altAnim) {
			section.p1AltAnim = section.altAnim;
		}
	}
	return swagShit;
};
Song.prototype = {
	chartVersion: null
	,song: null
	,notes: null
	,bpm: null
	,needsVoices: null
	,eventObjects: null
	,speed: null
	,player1: null
	,player2: null
	,gfVersion: null
	,noteStyle: null
	,stage: null
	,__class__: Song
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StoryMenuState = function(TransIn,TransOut) {
	this.intendedScore = 0;
	this.lerpScore = 0;
	this.stopspamming = false;
	this.selectedWeek = false;
	this.movedBack = false;
	this.curWeek = 0;
	this.weekNames = CoolUtil.coolTextFile(Paths.getPath("data/weekNames" + ".txt","TEXT",null));
	this.weekCharacters = [["","bf","gf"],["dad","bf","gf"],["spooky","bf","gf"],["pico","bf","gf"],["mom","bf","gf"],["parents-christmas","bf","gf"],["senpai","bf","gf"]];
	this.curDifficulty = 1;
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["StoryMenuState"] = StoryMenuState;
StoryMenuState.__name__ = "StoryMenuState";
StoryMenuState.weekData = function() {
	return [["Tutorial"],["Bopeebo","Fresh","Dad Battle"],["Spookeez","South","Monster"],["Pico","Philly Nice","Blammed"],["Satin Panties","High","Milf"],["Cocoa","Eggnog","Winter Horrorland"],["Senpai","Roses","Thorns"]];
};
StoryMenuState.unlockNextWeek = function(week) {
	if(week <= StoryMenuState.weekData().length - 1 && flixel_FlxG.save.data.weekUnlocked == week) {
		StoryMenuState.weekUnlocked.push(true);
		haxe_Log.trace("Week " + week + " beat (Week " + (week + 1) + " unlocked)",{ fileName : "source/StoryMenuState.hx", lineNumber : 477, className : "StoryMenuState", methodName : "unlockNextWeek"});
	}
	flixel_FlxG.save.data.weekUnlocked = StoryMenuState.weekUnlocked.length - 1;
	flixel_FlxG.save.flush();
};
StoryMenuState.__super__ = MusicBeatState;
StoryMenuState.prototype = $extend(MusicBeatState.prototype,{
	scoreText: null
	,curDifficulty: null
	,weekCharacters: null
	,weekNames: null
	,txtWeekTitle: null
	,curWeek: null
	,txtTracklist: null
	,grpWeekText: null
	,grpWeekCharacters: null
	,grpLocks: null
	,difficultySelectors: null
	,sprDifficulty: null
	,leftArrow: null
	,rightArrow: null
	,unlockWeeks: function() {
		var weeks = [];
		weeks.push(true);
		var _g = 0;
		var _g1 = flixel_FlxG.save.data.weekUnlocked;
		while(_g < _g1) {
			var i = _g++;
			weeks.push(true);
		}
		return weeks;
	}
	,create: function() {
		StoryMenuState.weekUnlocked = this.unlockWeeks();
		this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
		this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
		if(flixel_FlxG.sound.music != null) {
			if(flixel_FlxG.sound.music._channel == null) {
				flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null));
				Conductor.changeBPM(102);
			}
		}
		this.persistentUpdate = this.persistentDraw = true;
		this.scoreText = new flixel_text_FlxText(10,10,0,"SCORE: 49324858",36);
		this.scoreText.setFormat("VCR OSD Mono",32);
		this.txtWeekTitle = new flixel_text_FlxText(flixel_FlxG.width * 0.7,10,0,"",32);
		this.txtWeekTitle.setFormat("VCR OSD Mono",32,-1,"right");
		this.txtWeekTitle.set_alpha(0.7);
		var rankText = new flixel_text_FlxText(0,10);
		rankText.set_text("RANK: GREAT");
		rankText.setFormat("assets/fonts/" + "vcr.ttf",32);
		rankText.set_size(this.scoreText._defaultFormat.size | 0);
		rankText.screenCenter(flixel_util_FlxAxes.X);
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		var ui_tex = flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "campaign_menu_UI_assets" + ".png","IMAGE",library),Paths.getPath("images/" + "campaign_menu_UI_assets" + ".xml","TEXT",library));
		var yellowBG = new flixel_FlxSprite(0,56).makeGraphic(flixel_FlxG.width,400,-405679);
		this.grpWeekText = new flixel_group_FlxTypedGroup();
		this.add(this.grpWeekText);
		this.grpLocks = new flixel_group_FlxTypedGroup();
		this.add(this.grpLocks);
		var blackBarThingie = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,56,-16777216);
		this.add(blackBarThingie);
		this.grpWeekCharacters = new flixel_group_FlxTypedGroup();
		haxe_Log.trace("Line 70",{ fileName : "source/StoryMenuState.hx", lineNumber : 139, className : "StoryMenuState", methodName : "create"});
		var _g = 0;
		var _g1 = StoryMenuState.weekData().length;
		while(_g < _g1) {
			var i = _g++;
			var weekThing = new MenuItem(0,yellowBG.y + yellowBG.get_height() + 10,i);
			var _g2 = weekThing;
			_g2.set_y(_g2.y + (weekThing.get_height() + 20) * i);
			weekThing.targetY = i;
			this.grpWeekText.add(weekThing);
			weekThing.screenCenter(flixel_util_FlxAxes.X);
			weekThing.set_antialiasing(flixel_FlxG.save.data.antialiasing);
			if(!StoryMenuState.weekUnlocked[i]) {
				haxe_Log.trace("locking week " + i,{ fileName : "source/StoryMenuState.hx", lineNumber : 155, className : "StoryMenuState", methodName : "create"});
				var lock = new flixel_FlxSprite(weekThing.get_width() + 10 + weekThing.x);
				lock.set_frames(ui_tex);
				lock.animation.addByPrefix("lock","lock");
				lock.animation.play("lock");
				lock.ID = i;
				lock.set_antialiasing(flixel_FlxG.save.data.antialiasing);
				this.grpLocks.add(lock);
			}
		}
		haxe_Log.trace("Line 96",{ fileName : "source/StoryMenuState.hx", lineNumber : 166, className : "StoryMenuState", methodName : "create"});
		this.grpWeekCharacters.add(new MenuCharacter(0,100,0.5,false));
		this.grpWeekCharacters.add(new MenuCharacter(450,25,0.9,true));
		this.grpWeekCharacters.add(new MenuCharacter(850,100,0.5,true));
		this.difficultySelectors = new flixel_group_FlxTypedGroup();
		this.add(this.difficultySelectors);
		haxe_Log.trace("Line 124",{ fileName : "source/StoryMenuState.hx", lineNumber : 175, className : "StoryMenuState", methodName : "create"});
		this.leftArrow = new flixel_FlxSprite(this.grpWeekText.members[0].x + this.grpWeekText.members[0].get_width() + 10,this.grpWeekText.members[0].y + 10);
		this.leftArrow.set_frames(ui_tex);
		this.leftArrow.animation.addByPrefix("idle","arrow left");
		this.leftArrow.animation.addByPrefix("press","arrow push left");
		this.leftArrow.animation.play("idle");
		this.difficultySelectors.add(this.leftArrow);
		this.sprDifficulty = new flixel_FlxSprite(this.leftArrow.x + 130,this.leftArrow.y);
		this.sprDifficulty.set_frames(ui_tex);
		this.sprDifficulty.animation.addByPrefix("easy","EASY");
		this.sprDifficulty.animation.addByPrefix("normal","NORMAL");
		this.sprDifficulty.animation.addByPrefix("hard","HARD");
		this.sprDifficulty.animation.play("easy");
		this.changeDifficulty();
		this.difficultySelectors.add(this.sprDifficulty);
		this.rightArrow = new flixel_FlxSprite(this.sprDifficulty.x + this.sprDifficulty.get_width() + 50,this.leftArrow.y);
		this.rightArrow.set_frames(ui_tex);
		this.rightArrow.animation.addByPrefix("idle","arrow right");
		this.rightArrow.animation.addByPrefix("press","arrow push right",24,false);
		this.rightArrow.animation.play("idle");
		this.difficultySelectors.add(this.rightArrow);
		haxe_Log.trace("Line 150",{ fileName : "source/StoryMenuState.hx", lineNumber : 201, className : "StoryMenuState", methodName : "create"});
		this.add(yellowBG);
		this.add(this.grpWeekCharacters);
		this.txtTracklist = new flixel_text_FlxText(flixel_FlxG.width * 0.05,yellowBG.x + yellowBG.get_height() + 100,0,"Tracks",32);
		this.txtTracklist.set_alignment("center");
		this.txtTracklist.set_font(rankText._font);
		this.txtTracklist.set_color(-1747081);
		this.add(this.txtTracklist);
		this.add(this.scoreText);
		this.add(this.txtWeekTitle);
		this.updateText();
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.grpWeekText.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - this.curWeek;
			if(item.targetY == 0 && StoryMenuState.weekUnlocked[this.curWeek]) {
				item.set_alpha(1);
			} else {
				item.set_alpha(0.6);
			}
			++bullShit;
		}
		haxe_Log.trace("Line 165",{ fileName : "source/StoryMenuState.hx", lineNumber : 230, className : "StoryMenuState", methodName : "create"});
		MusicBeatState.prototype.create.call(this);
	}
	,update: function(elapsed) {
		var _gthis = this;
		var a = this.lerpScore;
		this.lerpScore = Math.floor(a + 0.5 * (this.intendedScore - a));
		this.scoreText.set_text("WEEK SCORE:" + this.lerpScore);
		this.txtWeekTitle.set_text(this.weekNames[this.curWeek].toUpperCase());
		this.txtWeekTitle.set_x(flixel_FlxG.width - (this.txtWeekTitle.get_width() + 10));
		this.difficultySelectors.set_visible(StoryMenuState.weekUnlocked[this.curWeek]);
		this.grpLocks.forEach(function(lock) {
			lock.set_y(_gthis.grpWeekText.members[lock.ID].y);
		});
		if(!this.movedBack) {
			if(!this.selectedWeek) {
				var gamepad = flixel_FlxG.gamepads.lastActive;
				if(gamepad != null) {
					var _this = gamepad.justPressed;
					var id = 11;
					var _this1 = _this.gamepad;
					var Status = _this.status;
					var tmp;
					switch(id) {
					case -2:
						tmp = _this1.anyButton(Status);
						break;
					case -1:
						tmp = !_this1.anyButton(Status);
						break;
					default:
						var RawID = _this1.mapping.getRawID(id);
						var button = _this1.buttons[RawID];
						tmp = button != null && button.hasState(Status);
					}
					if(tmp) {
						this.changeWeek(-1);
					}
					var _this = gamepad.justPressed;
					var id = 12;
					var _this1 = _this.gamepad;
					var Status = _this.status;
					var tmp;
					switch(id) {
					case -2:
						tmp = _this1.anyButton(Status);
						break;
					case -1:
						tmp = !_this1.anyButton(Status);
						break;
					default:
						var RawID = _this1.mapping.getRawID(id);
						var button = _this1.buttons[RawID];
						tmp = button != null && button.hasState(Status);
					}
					if(tmp) {
						this.changeWeek(1);
					}
					var _this = gamepad.pressed;
					var id = 14;
					var _this1 = _this.gamepad;
					var Status = _this.status;
					var tmp;
					switch(id) {
					case -2:
						tmp = _this1.anyButton(Status);
						break;
					case -1:
						tmp = !_this1.anyButton(Status);
						break;
					default:
						var RawID = _this1.mapping.getRawID(id);
						var button = _this1.buttons[RawID];
						tmp = button != null && button.hasState(Status);
					}
					if(tmp) {
						this.rightArrow.animation.play("press");
					} else {
						this.rightArrow.animation.play("idle");
					}
					var _this = gamepad.pressed;
					var id = 13;
					var _this1 = _this.gamepad;
					var Status = _this.status;
					var tmp;
					switch(id) {
					case -2:
						tmp = _this1.anyButton(Status);
						break;
					case -1:
						tmp = !_this1.anyButton(Status);
						break;
					default:
						var RawID = _this1.mapping.getRawID(id);
						var button = _this1.buttons[RawID];
						tmp = button != null && button.hasState(Status);
					}
					if(tmp) {
						this.leftArrow.animation.play("press");
					} else {
						this.leftArrow.animation.play("idle");
					}
					var _this = gamepad.justPressed;
					var id = 14;
					var _this1 = _this.gamepad;
					var Status = _this.status;
					var tmp;
					switch(id) {
					case -2:
						tmp = _this1.anyButton(Status);
						break;
					case -1:
						tmp = !_this1.anyButton(Status);
						break;
					default:
						var RawID = _this1.mapping.getRawID(id);
						var button = _this1.buttons[RawID];
						tmp = button != null && button.hasState(Status);
					}
					if(tmp) {
						this.changeDifficulty(1);
					}
					var _this = gamepad.justPressed;
					var id = 13;
					var _this1 = _this.gamepad;
					var Status = _this.status;
					var tmp;
					switch(id) {
					case -2:
						tmp = _this1.anyButton(Status);
						break;
					case -1:
						tmp = !_this1.anyButton(Status);
						break;
					default:
						var RawID = _this1.mapping.getRawID(id);
						var button = _this1.buttons[RawID];
						tmp = button != null && button.hasState(Status);
					}
					if(tmp) {
						this.changeDifficulty(-1);
					}
				}
				var _this = flixel_FlxG.keys.justPressed;
				if(_this.keyManager.checkStatus(38,_this.status)) {
					this.changeWeek(-1);
				}
				var _this = flixel_FlxG.keys.justPressed;
				if(_this.keyManager.checkStatus(40,_this.status)) {
					this.changeWeek(1);
				}
				if(PlayerSettings.player1.controls._right.check()) {
					this.rightArrow.animation.play("press");
				} else {
					this.rightArrow.animation.play("idle");
				}
				if(PlayerSettings.player1.controls._left.check()) {
					this.leftArrow.animation.play("press");
				} else {
					this.leftArrow.animation.play("idle");
				}
				if(PlayerSettings.player1.controls._rightP.check()) {
					this.changeDifficulty(1);
				}
				if(PlayerSettings.player1.controls._leftP.check()) {
					this.changeDifficulty(-1);
				}
			}
			if(PlayerSettings.player1.controls._accept.check()) {
				this.selectWeek();
			}
		}
		if(PlayerSettings.player1.controls._back.check() && !this.movedBack && !this.selectedWeek) {
			flixel_FlxG.sound.play(Paths.sound("cancelMenu"));
			this.movedBack = true;
			var nextState = new MainMenuState();
			if(flixel_FlxG.game._state.switchTo(nextState)) {
				flixel_FlxG.game._requestedState = nextState;
			}
		}
		if(flixel_FlxG.sound.music != null) {
			Conductor.songPosition = flixel_FlxG.sound.music._time;
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,movedBack: null
	,selectedWeek: null
	,stopspamming: null
	,selectWeek: function() {
		if(StoryMenuState.weekUnlocked[this.curWeek]) {
			if(this.stopspamming == false) {
				flixel_FlxG.sound.play(Paths.sound("confirmMenu"));
				this.grpWeekText.members[this.curWeek].startFlashing();
				this.grpWeekCharacters.members[1].animation.play("bfConfirm");
				this.stopspamming = true;
			}
			PlayState.storyPlaylist = StoryMenuState.weekData()[this.curWeek];
			PlayState.isStoryMode = true;
			this.selectedWeek = true;
			PlayState.storyDifficulty = this.curDifficulty;
			var songFormat = StringTools.replace(PlayState.storyPlaylist[0]," ","-");
			switch(songFormat) {
			case "Dad-Battle":
				songFormat = "Dadbattle";
				break;
			case "Philly-Nice":
				songFormat = "Philly";
				break;
			}
			var poop = Highscore.formatSong(songFormat,this.curDifficulty);
			PlayState.sicks = 0;
			PlayState.bads = 0;
			PlayState.shits = 0;
			PlayState.goods = 0;
			PlayState.campaignMisses = 0;
			PlayState.SONG = Song.conversionChecks(Song.loadFromJson(poop,PlayState.storyPlaylist[0]));
			PlayState.storyWeek = this.curWeek;
			PlayState.campaignScore = 0;
			new flixel_util_FlxTimer().start(1,function(tmr) {
				var target = new PlayState();
				var stopMusic = true;
				if(stopMusic == null) {
					stopMusic = false;
				}
				var nextState = LoadingState.getNextState(target,stopMusic);
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			});
		}
	}
	,changeDifficulty: function(change) {
		if(change == null) {
			change = 0;
		}
		this.curDifficulty += change;
		if(this.curDifficulty < 0) {
			this.curDifficulty = 2;
		}
		if(this.curDifficulty > 2) {
			this.curDifficulty = 0;
		}
		this.sprDifficulty.offset.set_x(0);
		switch(this.curDifficulty) {
		case 0:
			this.sprDifficulty.animation.play("easy");
			this.sprDifficulty.offset.set_x(20);
			break;
		case 1:
			this.sprDifficulty.animation.play("normal");
			this.sprDifficulty.offset.set_x(70);
			break;
		case 2:
			this.sprDifficulty.animation.play("hard");
			this.sprDifficulty.offset.set_x(20);
			break;
		}
		this.sprDifficulty.set_alpha(0);
		this.sprDifficulty.set_y(this.leftArrow.y - 15);
		this.intendedScore = Highscore.getWeekScore(this.curWeek,this.curDifficulty);
		this.intendedScore = Highscore.getWeekScore(this.curWeek,this.curDifficulty);
		flixel_tweens_FlxTween.tween(this.sprDifficulty,{ y : this.leftArrow.y + 15, alpha : 1},0.07);
	}
	,lerpScore: null
	,intendedScore: null
	,changeWeek: function(change) {
		if(change == null) {
			change = 0;
		}
		this.curWeek += change;
		if(this.curWeek >= StoryMenuState.weekData().length) {
			this.curWeek = 0;
		}
		if(this.curWeek < 0) {
			this.curWeek = StoryMenuState.weekData().length - 1;
		}
		var bullShit = 0;
		var _g = 0;
		var _g1 = this.grpWeekText.members;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			item.targetY = bullShit - this.curWeek;
			if(item.targetY == 0 && StoryMenuState.weekUnlocked[this.curWeek]) {
				item.set_alpha(1);
			} else {
				item.set_alpha(0.6);
			}
			++bullShit;
		}
		flixel_FlxG.sound.play(Paths.sound("scrollMenu"));
		this.updateText();
	}
	,updateText: function() {
		this.grpWeekCharacters.members[0].setCharacter(this.weekCharacters[this.curWeek][0]);
		this.grpWeekCharacters.members[1].setCharacter(this.weekCharacters[this.curWeek][1]);
		this.grpWeekCharacters.members[2].setCharacter(this.weekCharacters[this.curWeek][2]);
		this.txtTracklist.set_text("Tracks\n");
		var stringThing = StoryMenuState.weekData()[this.curWeek];
		var _g = 0;
		while(_g < stringThing.length) {
			var i = stringThing[_g];
			++_g;
			var _g1 = this.txtTracklist;
			_g1.set_text(_g1.text + ("\n" + i));
		}
		this.txtTracklist.set_text(this.txtTracklist.text.toUpperCase());
		this.txtTracklist.screenCenter(flixel_util_FlxAxes.X);
		var _g = this.txtTracklist;
		_g.set_x(_g.x - flixel_FlxG.width * 0.35);
		var _g = this.txtTracklist;
		_g.set_text(_g.text + "\n");
		this.intendedScore = Highscore.getWeekScore(this.curWeek,this.curDifficulty);
	}
	,beatHit: function() {
		MusicBeatState.prototype.beatHit.call(this);
		this.grpWeekCharacters.members[0].bopHead();
		this.grpWeekCharacters.members[1].bopHead();
		this.grpWeekCharacters.members[2].bopHead();
	}
	,__class__: StoryMenuState
});
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var TimingStruct = function(startBeat,bpm,endBeat,offset) {
	this.length = Infinity;
	this.startTime = 0;
	this.endBeat = Infinity;
	this.startStep = 0;
	this.startBeat = 0;
	this.bpm = 0;
	this.bpm = bpm;
	this.startBeat = startBeat;
	if(endBeat != -1) {
		this.endBeat = endBeat;
	}
	this.startTime = offset;
};
$hxClasses["TimingStruct"] = TimingStruct;
TimingStruct.__name__ = "TimingStruct";
TimingStruct.clearTimings = function() {
	TimingStruct.AllTimings = [];
};
TimingStruct.addTiming = function(startBeat,bpm,endBeat,offset) {
	var pog = new TimingStruct(startBeat,bpm,endBeat,offset);
	TimingStruct.AllTimings.push(pog);
};
TimingStruct.getTimingAtTimestamp = function(msTime) {
	var _g = 0;
	var _g1 = TimingStruct.AllTimings;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		if(msTime >= i.startTime * 1000 && msTime < (i.startTime + i.length) * 1000) {
			return i;
		}
	}
	haxe_Log.trace("Apparently " + msTime + " is out of any segs",{ fileName : "source/TimingStruct.hx", lineNumber : 43, className : "TimingStruct", methodName : "getTimingAtTimestamp"});
	return null;
};
TimingStruct.getTimingAtBeat = function(beat) {
	var _g = 0;
	var _g1 = TimingStruct.AllTimings;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		if(i.startBeat <= beat && i.endBeat >= beat) {
			return i;
		}
	}
	return null;
};
TimingStruct.prototype = {
	bpm: null
	,startBeat: null
	,startStep: null
	,endBeat: null
	,startTime: null
	,length: null
	,__class__: TimingStruct
};
var TitleState = function(TransIn,TransOut) {
	this.skippedIntro = false;
	this.transitioning = false;
	this.danceLeft = false;
	this.curWacky = [];
	MusicBeatState.call(this,TransIn,TransOut);
};
$hxClasses["TitleState"] = TitleState;
TitleState.__name__ = "TitleState";
TitleState.__super__ = MusicBeatState;
TitleState.prototype = $extend(MusicBeatState.prototype,{
	blackScreen: null
	,credGroup: null
	,credTextShit: null
	,textGroup: null
	,ngSpr: null
	,curWacky: null
	,wackyImage: null
	,create: function() {
		var _gthis = this;
		polymod_Polymod.init({ modRoot : "mods", dirs : ["introMod"]});
		haxe_Log.trace("Loaded " + openfl_utils_Assets.getLibrary("default").assetsLoaded + " assets (DEFAULT)",{ fileName : "source/TitleState.hx", lineNumber : 67, className : "TitleState", methodName : "create"});
		flixel_FlxG.save.bind("funkin","ninjamuffin99");
		PlayerSettings.init();
		KadeEngineData.initSave();
		Highscore.load();
		this.curWacky = flixel_FlxG.random.getObject_Array_String(this.getIntroTextShit());
		haxe_Log.trace("hello",{ fileName : "source/TitleState.hx", lineNumber : 87, className : "TitleState", methodName : "create"});
		MusicBeatState.prototype.create.call(this);
		new flixel_util_FlxTimer().start(1,function(tmr) {
			_gthis.startIntro();
		});
	}
	,logoBl: null
	,gfDance: null
	,danceLeft: null
	,titleText: null
	,startIntro: function() {
		this.persistentUpdate = true;
		var bg = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		this.add(bg);
		if(Main.watermarks) {
			this.logoBl = new flixel_FlxSprite(-150,1500);
			var library = null;
			var usecahce = flixel_FlxG.save.data.cacheImages;
			usecahce = false;
			this.logoBl.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "KadeEngineLogoBumpin" + ".png","IMAGE",library),Paths.getPath("images/" + "KadeEngineLogoBumpin" + ".xml","TEXT",library)));
		} else {
			this.logoBl = new flixel_FlxSprite(-150,-100);
			var library = null;
			var usecahce = flixel_FlxG.save.data.cacheImages;
			usecahce = false;
			this.logoBl.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "logoBumpin" + ".png","IMAGE",library),Paths.getPath("images/" + "logoBumpin" + ".xml","TEXT",library)));
		}
		this.logoBl.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.logoBl.animation.addByPrefix("bump","logo bumpin",24,false);
		this.logoBl.updateHitbox();
		this.gfDance = new flixel_FlxSprite(flixel_FlxG.width * 0.4,flixel_FlxG.height * 0.07);
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.gfDance.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "gfDanceTitle" + ".png","IMAGE",library),Paths.getPath("images/" + "gfDanceTitle" + ".xml","TEXT",library)));
		this.gfDance.animation.addByIndices("danceLeft","gfDance",[30,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"",24,false);
		this.gfDance.animation.addByIndices("danceRight","gfDance",[15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"",24,false);
		this.gfDance.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.add(this.gfDance);
		this.add(this.logoBl);
		this.titleText = new flixel_FlxSprite(100,flixel_FlxG.height * 0.8);
		var library = null;
		var usecahce = flixel_FlxG.save.data.cacheImages;
		usecahce = false;
		this.titleText.set_frames(flixel_graphics_frames_FlxAtlasFrames.fromSparrow(Paths.getPath("images/" + "titleEnter" + ".png","IMAGE",library),Paths.getPath("images/" + "titleEnter" + ".xml","TEXT",library)));
		this.titleText.animation.addByPrefix("idle","Press Enter to Begin",24);
		this.titleText.animation.addByPrefix("press","ENTER PRESSED",24);
		this.titleText.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.titleText.animation.play("idle");
		this.titleText.updateHitbox();
		this.add(this.titleText);
		var logo = new flixel_FlxSprite().loadGraphic(Paths.getPath("images/" + "logo" + ".png","IMAGE",null));
		logo.screenCenter();
		logo.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		this.credGroup = new flixel_group_FlxTypedGroup();
		this.add(this.credGroup);
		this.textGroup = new flixel_group_FlxTypedGroup();
		this.blackScreen = new flixel_FlxSprite().makeGraphic(flixel_FlxG.width,flixel_FlxG.height,-16777216);
		this.credGroup.add(this.blackScreen);
		this.credTextShit = new Alphabet(0,0,"ninjamuffin99\nPhantomArcade\nkawaisprite\nevilsk8er",true);
		this.credTextShit.screenCenter();
		this.credTextShit.set_visible(false);
		this.ngSpr = new flixel_FlxSprite(0,flixel_FlxG.height * 0.52).loadGraphic(Paths.getPath("images/" + "newgrounds_logo" + ".png","IMAGE",null));
		this.add(this.ngSpr);
		this.ngSpr.set_visible(false);
		this.ngSpr.setGraphicSize(this.ngSpr.get_width() * 0.8 | 0);
		this.ngSpr.updateHitbox();
		this.ngSpr.screenCenter(flixel_util_FlxAxes.X);
		this.ngSpr.set_antialiasing(flixel_FlxG.save.data.antialiasing);
		flixel_tweens_FlxTween.tween(this.credTextShit,{ y : this.credTextShit.y + 20},2.9,{ ease : flixel_tweens_FlxEase.quadInOut, type : 4});
		flixel_FlxG.mouse.set_visible(false);
		if(TitleState.initialized) {
			this.skipIntro();
		} else {
			var diamond = flixel_graphics_FlxGraphic.fromClass(flixel_addons_transition_GraphicTransTileDiamond);
			diamond.persist = true;
			diamond.set_destroyOnNoUse(false);
			flixel_addons_transition_FlxTransitionableState.defaultTransIn = new flixel_addons_transition_TransitionData("fade",-16777216,1,new flixel_math_FlxPoint(0,-1),{ asset : diamond, width : 32, height : 32},new flixel_math_FlxRect(-200,-200,flixel_FlxG.width * 1.4,flixel_FlxG.height * 1.4));
			flixel_addons_transition_FlxTransitionableState.defaultTransOut = new flixel_addons_transition_TransitionData("fade",-16777216,0.7,new flixel_math_FlxPoint(0,1),{ asset : diamond, width : 32, height : 32},new flixel_math_FlxRect(-200,-200,flixel_FlxG.width * 1.4,flixel_FlxG.height * 1.4));
			this.transIn = flixel_addons_transition_FlxTransitionableState.defaultTransIn;
			this.transOut = flixel_addons_transition_FlxTransitionableState.defaultTransOut;
			flixel_FlxG.sound.playMusic(Paths.getPath("music/" + "freakyMenu" + "." + "mp3","MUSIC",null),0);
			var _this = flixel_FlxG.sound.music;
			var Duration = 4;
			var From = 0;
			var To = 0.7;
			if(To == null) {
				To = 1;
			}
			if(From == null) {
				From = 0;
			}
			if(Duration == null) {
				Duration = 1;
			}
			if(_this._channel == null) {
				_this.play();
			}
			if(_this.fadeTween != null) {
				_this.fadeTween.cancel();
			}
			_this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : null},$bind(_this,_this.volumeTween));
			Conductor.changeBPM(102);
			TitleState.initialized = true;
		}
	}
	,getIntroTextShit: function() {
		var fullText = openfl_utils_Assets.getText(Paths.getPath("data/introText" + ".txt","TEXT",null));
		var firstArray = fullText.split("\n");
		var swagGoodArray = [];
		var _g = 0;
		while(_g < firstArray.length) {
			var i = firstArray[_g];
			++_g;
			swagGoodArray.push(i.split("--"));
		}
		return swagGoodArray;
	}
	,transitioning: null
	,update: function(elapsed) {
		var _gthis = this;
		if(flixel_FlxG.sound.music != null) {
			Conductor.songPosition = flixel_FlxG.sound.music._time;
		}
		var _this = flixel_FlxG.keys.justPressed;
		if(_this.keyManager.checkStatus(70,_this.status)) {
			flixel_FlxG.set_fullscreen(!flixel_FlxG.get_fullscreen());
		}
		var pressedEnter = PlayerSettings.player1.controls._accept.check();
		if(pressedEnter && !this.transitioning && this.skippedIntro) {
			if(NGio.isLoggedIn) {
				var medal = io_newgrounds_NG.core.medals.h[60960];
				if(!medal._data.unlocked) {
					medal.sendUnlock();
				}
			}
			if(new Date().getDay() == 5) {
				if(NGio.isLoggedIn) {
					var medal = io_newgrounds_NG.core.medals.h[61034];
					if(!medal._data.unlocked) {
						medal.sendUnlock();
					}
				}
			}
			if(flixel_FlxG.save.data.flashing) {
				this.titleText.animation.play("press");
			}
			flixel_FlxG.camera.flash(-1,1);
			flixel_FlxG.sound.play(Paths.sound("confirmMenu"),0.7);
			this.transitioning = true;
			MainMenuState.firstStart = true;
			MainMenuState.finishedFunnyMove = false;
			new flixel_util_FlxTimer().start(2,function(tmr) {
				var http = new haxe_http_HttpJs("https://raw.githubusercontent.com/KadeDev/Kade-Engine/master/version.downloadMe");
				var returnedData = [];
				http.onData = function(data) {
					returnedData[0] = data.substring(0,data.indexOf(";"));
					returnedData[1] = data.substring(data.indexOf("-"),data.length);
					if(MainMenuState.kadeEngineVer.indexOf(StringTools.trim(returnedData[0])) == -1 && !OutdatedSubState.leftState) {
						haxe_Log.trace("outdated lmao! " + returnedData[0] + " != " + MainMenuState.kadeEngineVer,{ fileName : "source/TitleState.hx", lineNumber : 306, className : "TitleState", methodName : "update"});
						OutdatedSubState.needVer = returnedData[0];
						OutdatedSubState.currChanges = returnedData[1];
						var nextState = new OutdatedSubState();
						if(flixel_FlxG.game._state.switchTo(nextState)) {
							flixel_FlxG.game._requestedState = nextState;
						}
						_gthis.clean();
					} else {
						var nextState = new MainMenuState();
						if(flixel_FlxG.game._state.switchTo(nextState)) {
							flixel_FlxG.game._requestedState = nextState;
						}
						_gthis.clean();
					}
				};
				http.onError = function(error) {
					haxe_Log.trace("error: " + error,{ fileName : "source/TitleState.hx", lineNumber : 320, className : "TitleState", methodName : "update"});
					var nextState = new MainMenuState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
					_gthis.clean();
				};
				http.request();
			});
		}
		if(pressedEnter && !this.skippedIntro && TitleState.initialized) {
			this.skipIntro();
		}
		MusicBeatState.prototype.update.call(this,elapsed);
	}
	,createCoolText: function(textArray) {
		var _g = 0;
		var _g1 = textArray.length;
		while(_g < _g1) {
			var i = _g++;
			var money = new Alphabet(0,0,textArray[i],true,false);
			money.screenCenter(flixel_util_FlxAxes.X);
			var _g2 = money;
			_g2.set_y(_g2.y + (i * 60 + 200));
			this.credGroup.add(money);
			this.textGroup.add(money);
		}
	}
	,addMoreText: function(text) {
		var coolText = new Alphabet(0,0,text,true,false);
		coolText.screenCenter(flixel_util_FlxAxes.X);
		var _g = coolText;
		_g.set_y(_g.y + (this.textGroup.length * 60 + 200));
		this.credGroup.add(coolText);
		this.textGroup.add(coolText);
	}
	,deleteCoolText: function() {
		while(this.textGroup.members.length > 0) {
			this.credGroup.remove(this.textGroup.members[0],true);
			this.textGroup.remove(this.textGroup.members[0],true);
		}
	}
	,beatHit: function() {
		MusicBeatState.prototype.beatHit.call(this);
		this.logoBl.animation.play("bump",true);
		this.danceLeft = !this.danceLeft;
		if(this.danceLeft) {
			this.gfDance.animation.play("danceRight");
		} else {
			this.gfDance.animation.play("danceLeft");
		}
		switch(this.curBeat) {
		case 0:
			this.deleteCoolText();
			break;
		case 1:
			this.createCoolText(["ninjamuffin99","phantomArcade","kawaisprite","evilsk8er"]);
			break;
		case 3:
			this.addMoreText("present");
			break;
		case 4:
			this.deleteCoolText();
			break;
		case 5:
			if(Main.watermarks) {
				this.createCoolText(["Kade Engine","by"]);
			} else {
				this.createCoolText(["In Partnership","with"]);
			}
			break;
		case 7:
			if(Main.watermarks) {
				this.addMoreText("KadeDeveloper");
			} else {
				this.addMoreText("Newgrounds");
				this.ngSpr.set_visible(true);
			}
			break;
		case 8:
			this.deleteCoolText();
			this.ngSpr.set_visible(false);
			break;
		case 9:
			this.createCoolText([this.curWacky[0]]);
			break;
		case 11:
			this.addMoreText(this.curWacky[1]);
			break;
		case 12:
			this.deleteCoolText();
			break;
		case 13:
			this.addMoreText("Friday");
			break;
		case 14:
			this.addMoreText("Night");
			break;
		case 15:
			this.addMoreText("Funkin");
			break;
		case 16:
			this.skipIntro();
			break;
		}
	}
	,skippedIntro: null
	,skipIntro: function() {
		var _gthis = this;
		if(!this.skippedIntro) {
			this.remove(this.ngSpr);
			flixel_FlxG.camera.flash(-1,4);
			this.remove(this.credGroup);
			flixel_tweens_FlxTween.tween(this.logoBl,{ y : -100},1.4,{ ease : flixel_tweens_FlxEase.expoInOut});
			this.logoBl.set_angle(-4);
			new flixel_util_FlxTimer().start(0.01,function(tmr) {
				if(_gthis.logoBl.angle == -4) {
					flixel_tweens_FlxTween.angle(_gthis.logoBl,_gthis.logoBl.angle,4,4,{ ease : flixel_tweens_FlxEase.quartInOut});
				}
				if(_gthis.logoBl.angle == 4) {
					flixel_tweens_FlxTween.angle(_gthis.logoBl,_gthis.logoBl.angle,-4,4,{ ease : flixel_tweens_FlxEase.quartInOut});
				}
			},0);
			this.skippedIntro = true;
		}
	}
	,__class__: TitleState
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return $hxEnums[o.__enum__];
};
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var UnicodeString = {};
UnicodeString.__properties__ = {get_length:"get_length"};
UnicodeString.charCodeAt = function(this1,index) {
	if(index < 0) {
		return null;
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	while(nativeOffset < this1.length) {
		var index1 = nativeOffset++;
		var c = this1.charCodeAt(index1);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(index1 + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset == index) {
			return c1;
		}
		if(c1 >= 65536) {
			++nativeOffset;
		}
		++unicodeOffset;
	}
	return null;
};
UnicodeString.substr = function(this1,pos,len) {
	if(pos < 0) {
		pos = UnicodeString.get_length(this1) + pos;
		if(pos < 0) {
			pos = 0;
		}
	}
	if(len != null) {
		if(len < 0) {
			len = UnicodeString.get_length(this1) + len;
		}
		if(len <= 0) {
			return "";
		}
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	var fromOffset = -1;
	var subLength = 0;
	while(nativeOffset < this1.length) {
		var c = this1.charCodeAt(nativeOffset);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(nativeOffset + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset >= pos) {
			if(fromOffset < 0) {
				if(len == null) {
					return HxOverrides.substr(this1,nativeOffset,null);
				}
				fromOffset = nativeOffset;
			}
			++subLength;
			if(subLength >= len) {
				var lastOffset = c1 < 65536 ? nativeOffset : nativeOffset + 1;
				return HxOverrides.substr(this1,fromOffset,lastOffset - fromOffset + 1);
			}
		}
		nativeOffset += c1 >= 65536 ? 2 : 1;
		++unicodeOffset;
	}
	if(fromOffset < 0) {
		return "";
	} else {
		return HxOverrides.substr(this1,fromOffset,null);
	}
};
UnicodeString.get_length = function(this1) {
	var l = 0;
	var _g_offset = 0;
	var _g_s = this1;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		++l;
	}
	return l;
};
var VideoHandler = function() {
	this.paused = false;
	this.ended = false;
	this.played = false;
	this.restarted = false;
	this.stopped = false;
	this.ignoreShit = false;
	this.vidPath = "";
	this.addOverlay = false;
	this.isReady = false;
	this.isReady = false;
};
$hxClasses["VideoHandler"] = VideoHandler;
VideoHandler.__name__ = "VideoHandler";
VideoHandler.prototype = {
	netStream: null
	,video: null
	,isReady: null
	,addOverlay: null
	,vidPath: null
	,ignoreShit: null
	,source: function(vPath) {
		if(vPath != null && vPath.length > 0) {
			this.vidPath = vPath;
		}
	}
	,init1: function() {
		this.isReady = false;
		this.video = new openfl_media_Video();
		this.video.set_visible(false);
	}
	,init2: function() {
		var netConnection = new openfl_net_NetConnection();
		netConnection.connect(null);
		this.netStream = new openfl_net_NetStream(netConnection);
		this.netStream.client = { onMetaData : $bind(this,this.client_onMetaData)};
		this.netStream.addEventListener("asyncError",$bind(this,this.netStream_onAsyncError));
		netConnection.addEventListener("netStatus",$bind(this,this.netConnection_onNetStatus));
		netConnection.addEventListener("netStatus",$bind(this,this.onPlay));
		netConnection.addEventListener("netStatus",$bind(this,this.onEnd));
	}
	,client_onMetaData: function(metaData) {
		this.video.attachNetStream(this.netStream);
		this.video.set_width(flixel_FlxG.width);
		this.video.set_height(flixel_FlxG.height);
	}
	,netStream_onAsyncError: function(event) {
		haxe_Log.trace("Error loading video",{ fileName : "source/VideoHandler.hx", lineNumber : 73, className : "VideoHandler", methodName : "netStream_onAsyncError"});
	}
	,netConnection_onNetStatus: function(event) {
		haxe_Log.trace(event.info.code,{ fileName : "source/VideoHandler.hx", lineNumber : 79, className : "VideoHandler", methodName : "netConnection_onNetStatus"});
	}
	,play: function() {
		this.ignoreShit = true;
		this.netStream.close();
		this.init2();
		this.netStream.play(this.vidPath);
		this.ignoreShit = false;
		haxe_Log.trace(this.vidPath,{ fileName : "source/VideoHandler.hx", lineNumber : 91, className : "VideoHandler", methodName : "play"});
	}
	,stop: function() {
		this.netStream.close();
		this.onStop();
	}
	,restart: function() {
		this.play();
		this.onRestart();
	}
	,update: function(elapsed) {
		this.video.set_x(GlobalVideo.calc(0));
		this.video.set_y(GlobalVideo.calc(1));
		this.video.set_width(GlobalVideo.calc(2));
		this.video.set_height(GlobalVideo.calc(3));
	}
	,stopped: null
	,restarted: null
	,played: null
	,ended: null
	,paused: null
	,pause: function() {
		this.netStream.pause();
		this.paused = true;
	}
	,resume: function() {
		this.netStream.resume();
		this.paused = false;
	}
	,togglePause: function() {
		if(this.paused) {
			this.resume();
		} else {
			this.pause();
		}
	}
	,clearPause: function() {
		this.paused = false;
	}
	,onStop: function() {
		if(!this.ignoreShit) {
			this.stopped = true;
		}
	}
	,onRestart: function() {
		this.restarted = true;
	}
	,onPlay: function(event) {
		if(event.info.code == "NetStream.Play.Start") {
			this.played = true;
		}
	}
	,onEnd: function(event) {
		if(event.info.code == "NetStream.Play.Complete") {
			this.ended = true;
		}
	}
	,alpha: function() {
		this.video.set_alpha(GlobalVideo.daAlpha1);
	}
	,unalpha: function() {
		this.video.set_alpha(GlobalVideo.daAlpha2);
	}
	,hide: function() {
		this.video.set_visible(false);
	}
	,show: function() {
		this.video.set_visible(true);
	}
	,__class__: VideoHandler
};
var WebmHandler = function() {
	haxe_Log.trace("THIS IS ANDROID! or some shit...",{ fileName : "source/WebmHandler.hx", lineNumber : 166, className : "WebmHandler", methodName : "new"});
};
$hxClasses["WebmHandler"] = WebmHandler;
WebmHandler.__name__ = "WebmHandler";
WebmHandler.prototype = {
	webm: null
	,__class__: WebmHandler
};
var WiggleEffectType = $hxEnums["WiggleEffectType"] = { __ename__ : "WiggleEffectType", __constructs__ : ["DREAMY","WAVY","HEAT_WAVE_HORIZONTAL","HEAT_WAVE_VERTICAL","FLAG"]
	,DREAMY: {_hx_index:0,__enum__:"WiggleEffectType",toString:$estr}
	,WAVY: {_hx_index:1,__enum__:"WiggleEffectType",toString:$estr}
	,HEAT_WAVE_HORIZONTAL: {_hx_index:2,__enum__:"WiggleEffectType",toString:$estr}
	,HEAT_WAVE_VERTICAL: {_hx_index:3,__enum__:"WiggleEffectType",toString:$estr}
	,FLAG: {_hx_index:4,__enum__:"WiggleEffectType",toString:$estr}
};
var WiggleEffect = function() {
	this.waveAmplitude = 0;
	this.waveFrequency = 0;
	this.waveSpeed = 0;
	this.effectType = WiggleEffectType.DREAMY;
	this.shader = new WiggleShader();
	this.shader.uTime.value = [0];
};
$hxClasses["WiggleEffect"] = WiggleEffect;
WiggleEffect.__name__ = "WiggleEffect";
WiggleEffect.prototype = {
	shader: null
	,effectType: null
	,waveSpeed: null
	,waveFrequency: null
	,waveAmplitude: null
	,update: function(elapsed) {
		this.shader.uTime.value[0] += elapsed;
	}
	,set_effectType: function(v) {
		this.effectType = v;
		var tmp = WiggleEffectType.__constructs__.slice();
		this.shader.effectType.value = [tmp.indexOf(Std.string(v))];
		return v;
	}
	,set_waveSpeed: function(v) {
		this.waveSpeed = v;
		this.shader.uSpeed.value = [this.waveSpeed];
		return v;
	}
	,set_waveFrequency: function(v) {
		this.waveFrequency = v;
		this.shader.uFrequency.value = [this.waveFrequency];
		return v;
	}
	,set_waveAmplitude: function(v) {
		this.waveAmplitude = v;
		this.shader.uWaveAmplitude.value = [this.waveAmplitude];
		return v;
	}
	,__class__: WiggleEffect
	,__properties__: {set_waveAmplitude:"set_waveAmplitude",set_waveFrequency:"set_waveFrequency",set_waveSpeed:"set_waveSpeed",set_effectType:"set_effectType"}
};
var openfl_display_Shader = function(code) {
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
	this.__data = openfl_display_ShaderData._new(code);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = "openfl.display.Shader";
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,program: null
	,__alpha: null
	,__bitmap: null
	,__colorMultiplier: null
	,__colorOffset: null
	,__context: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__hasColorTransform: null
	,__inputBitmapData: null
	,__isGenerated: null
	,__matrix: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__position: null
	,__textureCoord: null
	,__texture: null
	,__textureSize: null
	,__clearUseArray: function() {
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
	}
	,__createGLShader: function(source,type) {
		var gl = this.__context.gl;
		var shader = gl.createShader(type);
		gl.shaderSource(shader,source);
		gl.compileShader(shader);
		if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
			var message = type == gl.VERTEX_SHADER ? "Error compiling vertex shader" : "Error compiling fragment shader";
			message += "\n" + gl.getShaderInfoLog(shader);
			message += "\n" + source;
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 331, className : "openfl.display.Shader", methodName : "__createGLShader"});
		}
		return shader;
	}
	,__createGLProgram: function(vertexSource,fragmentSource) {
		var gl = this.__context.gl;
		var vertexShader = this.__createGLShader(vertexSource,gl.VERTEX_SHADER);
		var fragmentShader = this.__createGLShader(fragmentSource,gl.FRAGMENT_SHADER);
		var program = gl.createProgram();
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(param.name.indexOf("Position") > -1 && StringTools.startsWith(param.name,"openfl_")) {
				gl.bindAttribLocation(program,0,param.name);
				break;
			}
		}
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(program);
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 364, className : "openfl.display.Shader", methodName : "__createGLProgram"});
		}
		return program;
	}
	,__disable: function() {
		if(this.program != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		var gl = this.__context.gl;
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__disableGL(this.__context,textureCount);
			++textureCount;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		this.__context.__bindGLArrayBuffer(null);
		if(this.__context.__context.type == "opengl") {
			gl.disable(gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.program != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var gl = this.__context.gl;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.__context.__context.type == "opengl" && textureCount > 0) {
			gl.enable(gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = openfl_display_ShaderData._new(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.program == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__paramBool == null) {
			this.__glSourceDirty = false;
			this.program = null;
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.__context != null && this.program == null) {
			var gl = this.__context.gl;
			var prefix = "#ifdef GL_ES\n\t\t\t\t" + (this.precisionHint == 1 ? "#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\t\t\tprecision highp float;\n\t\t\t\t#else\n\t\t\t\tprecision mediump float;\n\t\t\t\t#endif" : "precision lowp float;") + "\n\t\t\t\t#endif\n\t\t\t\t";
			var vertex = prefix + this.get_glVertexSource();
			var fragment = prefix + this.get_glFragmentSource();
			var id = vertex + fragment;
			if(Object.prototype.hasOwnProperty.call(this.__context.__programs.h,id)) {
				this.program = this.__context.__programs.h[id];
			} else {
				this.program = this.__context.createProgram(1);
				this.program.__glProgram = this.__createGLProgram(vertex,fragment);
				this.__context.__programs.h[id] = this.program;
			}
			if(this.program != null) {
				this.glProgram = this.program.__glProgram;
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(input.__isUniform) {
						input.index = gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramBool;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramFloat;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramInt;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			var isUniform = storageType == "uniform";
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				input.__isUniform = isUniform;
				this.__inputBitmapData.push(input);
				switch(name) {
				case "bitmap":
					this.__bitmap = input;
					break;
				case "openfl_Texture":
					this.__texture = input;
					break;
				default:
				}
				this.__data[name] = input;
				if(this.__isGenerated) {
					this[name] = input;
				}
			} else if(!Object.prototype.hasOwnProperty.call(this.__data,name) || Reflect.field(this.__data,name) == null) {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				var length;
				switch(parameterType) {
				case 1:case 5:case 9:
					length = 2;
					break;
				case 3:case 7:case 11:case 12:
					length = 4;
					break;
				case 2:case 6:case 10:
					length = 3;
					break;
				case 16:
					length = 9;
					break;
				case 20:
					length = 16;
					break;
				default:
					length = 1;
				}
				var arrayLength;
				switch(parameterType) {
				case 12:
					arrayLength = 2;
					break;
				case 16:
					arrayLength = 3;
					break;
				case 20:
					arrayLength = 4;
					break;
				default:
					arrayLength = 1;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.set_name(name);
					parameter.type = parameterType;
					parameter.__arrayLength = arrayLength;
					parameter.__isBool = true;
					parameter.__isUniform = isUniform;
					parameter.__length = length;
					this.__paramBool.push(parameter);
					if(name == "openfl_HasColorTransform") {
						this.__hasColorTransform = parameter;
					}
					this.__data[name] = parameter;
					if(this.__isGenerated) {
						this[name] = parameter;
					}
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.set_name(name);
					parameter1.type = parameterType;
					parameter1.__arrayLength = arrayLength;
					parameter1.__isInt = true;
					parameter1.__isUniform = isUniform;
					parameter1.__length = length;
					this.__paramInt.push(parameter1);
					this.__data[name] = parameter1;
					if(this.__isGenerated) {
						this[name] = parameter1;
					}
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.set_name(name);
					parameter2.type = parameterType;
					parameter2.__arrayLength = arrayLength;
					if(arrayLength > 0) {
						var elements = arrayLength * arrayLength;
						var array = null;
						var vector = null;
						var view = null;
						var buffer = null;
						var len = null;
						var this1;
						if(elements != null) {
							this1 = new Float32Array(elements);
						} else if(array != null) {
							this1 = new Float32Array(array);
						} else if(vector != null) {
							this1 = new Float32Array(vector.__array);
						} else if(view != null) {
							this1 = new Float32Array(view);
						} else if(buffer != null) {
							if(len == null) {
								this1 = new Float32Array(buffer,0);
							} else {
								this1 = new Float32Array(buffer,0,len);
							}
						} else {
							this1 = null;
						}
						parameter2.__uniformMatrix = this1;
					}
					parameter2.__isFloat = true;
					parameter2.__isUniform = isUniform;
					parameter2.__length = length;
					this.__paramFloat.push(parameter2);
					if(StringTools.startsWith(name,"openfl_")) {
						switch(name) {
						case "openfl_Alpha":
							this.__alpha = parameter2;
							break;
						case "openfl_ColorMultiplier":
							this.__colorMultiplier = parameter2;
							break;
						case "openfl_ColorOffset":
							this.__colorOffset = parameter2;
							break;
						case "openfl_Matrix":
							this.__matrix = parameter2;
							break;
						case "openfl_Position":
							this.__position = parameter2;
							break;
						case "openfl_TextureCoord":
							this.__textureCoord = parameter2;
							break;
						case "openfl_TextureSize":
							this.__textureSize = parameter2;
							break;
						default:
						}
					}
					this.__data[name] = parameter2;
					if(this.__isGenerated) {
						this[name] = parameter2;
					}
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.program != null) {
			this.__updateGL();
		}
	}
	,__updateFromBuffer: function(shaderBuffer,bufferOffset) {
		if(this.program != null) {
			this.__updateGLFromBuffer(shaderBuffer,bufferOffset);
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__updateGL(this.__context,textureCount);
			++textureCount;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
	}
	,__updateGLFromBuffer: function(shaderBuffer,bufferOffset) {
		var textureCount = 0;
		var input;
		var inputData;
		var inputFilter;
		var inputMipFilter;
		var inputWrap;
		var _g = 0;
		var _g1 = shaderBuffer.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shaderBuffer.inputRefs[i];
			inputData = shaderBuffer.inputs[i];
			inputFilter = shaderBuffer.inputFilter[i];
			inputMipFilter = shaderBuffer.inputMipFilter[i];
			inputWrap = shaderBuffer.inputWrap[i];
			if(inputData != null) {
				input.__updateGL(this.__context,textureCount,inputData,inputFilter,inputMipFilter,inputWrap);
				++textureCount;
			}
		}
		var gl = this.__context.gl;
		if(shaderBuffer.paramDataLength > 0) {
			if(shaderBuffer.paramDataBuffer == null) {
				shaderBuffer.paramDataBuffer = gl.createBuffer();
			}
			this.__context.__bindGLArrayBuffer(shaderBuffer.paramDataBuffer);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,shaderBuffer.paramData,gl.DYNAMIC_DRAW);
		} else {
			this.__context.__bindGLArrayBuffer(null);
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var boolCount = shaderBuffer.paramBoolCount;
		var floatCount = shaderBuffer.paramFloatCount;
		var paramData = shaderBuffer.paramData;
		var boolRef;
		var floatRef;
		var intRef;
		var hasOverride;
		var overrideBoolValue = null;
		var overrideFloatValue = null;
		var overrideIntValue = null;
		var _g = 0;
		var _g1 = shaderBuffer.paramCount;
		while(_g < _g1) {
			var i = _g++;
			hasOverride = false;
			if(i < boolCount) {
				boolRef = shaderBuffer.paramRefs_Bool[boolIndex];
				var _g2 = 0;
				var _g3 = shaderBuffer.overrideBoolCount;
				while(_g2 < _g3) {
					var j = _g2++;
					if(boolRef.name == shaderBuffer.overrideBoolNames[j]) {
						overrideBoolValue = shaderBuffer.overrideBoolValues[j];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					boolRef.__updateGL(this.__context,overrideBoolValue);
				} else {
					boolRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++boolIndex;
			} else if(i < boolCount + floatCount) {
				floatRef = shaderBuffer.paramRefs_Float[floatIndex];
				var _g4 = 0;
				var _g5 = shaderBuffer.overrideFloatCount;
				while(_g4 < _g5) {
					var j1 = _g4++;
					if(floatRef.name == shaderBuffer.overrideFloatNames[j1]) {
						overrideFloatValue = shaderBuffer.overrideFloatValues[j1];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					floatRef.__updateGL(this.__context,overrideFloatValue);
				} else {
					floatRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++floatIndex;
			} else {
				intRef = shaderBuffer.paramRefs_Int[intIndex];
				var _g6 = 0;
				var _g7 = shaderBuffer.overrideIntCount;
				while(_g6 < _g7) {
					var j2 = _g6++;
					if(intRef.name == shaderBuffer.overrideIntNames[j2]) {
						overrideIntValue = shaderBuffer.overrideIntValues[j2];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					intRef.__updateGL(this.__context,overrideIntValue);
				} else {
					intRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++intIndex;
			}
		}
	}
	,get_data: function() {
		if(this.__glSourceDirty || this.__data == null) {
			this.__init();
		}
		return this.__data;
	}
	,set_data: function(value) {
		return this.__data = value;
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,set_glFragmentSource: function(value) {
		if(value != this.__glFragmentSource) {
			this.__glSourceDirty = true;
		}
		return this.__glFragmentSource = value;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,set_glVertexSource: function(value) {
		if(value != this.__glVertexSource) {
			this.__glSourceDirty = true;
		}
		return this.__glVertexSource = value;
	}
	,__class__: openfl_display_Shader
	,__properties__: {set_glVertexSource:"set_glVertexSource",get_glVertexSource:"get_glVertexSource",set_glFragmentSource:"set_glFragmentSource",get_glFragmentSource:"get_glFragmentSource",set_data:"set_data",get_data:"get_data"}
};
var openfl_display_GraphicsShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.GraphicsShader"] = openfl_display_GraphicsShader;
openfl_display_GraphicsShader.__name__ = "openfl.display.GraphicsShader";
openfl_display_GraphicsShader.__super__ = openfl_display_Shader;
openfl_display_GraphicsShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_ColorMultiplier: null
	,openfl_ColorOffset: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_HasColorTransform: null
	,openfl_TextureSize: null
	,bitmap: null
	,__class__: openfl_display_GraphicsShader
});
var flixel_graphics_tile_FlxGraphicsShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\tgl_FragColor = flixel_texture2D(bitmap, openfl_TextureCoordv);\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}";
	}
	openfl_display_GraphicsShader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["flixel.graphics.tile.FlxGraphicsShader"] = flixel_graphics_tile_FlxGraphicsShader;
flixel_graphics_tile_FlxGraphicsShader.__name__ = "flixel.graphics.tile.FlxGraphicsShader";
flixel_graphics_tile_FlxGraphicsShader.__super__ = openfl_display_GraphicsShader;
flixel_graphics_tile_FlxGraphicsShader.prototype = $extend(openfl_display_GraphicsShader.prototype,{
	alpha: null
	,colorMultiplier: null
	,colorOffset: null
	,hasColorTransform: null
	,hasTransform: null
	,__class__: flixel_graphics_tile_FlxGraphicsShader
});
var WiggleShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tuniform bool hasTransform;\n\t\tuniform bool hasColorTransform;\n\n\t\tvec4 flixel_texture2D(sampler2D bitmap, vec2 coord)\n\t\t{\n\t\t\tvec4 color = texture2D(bitmap, coord);\n\t\t\tif (!hasTransform)\n\t\t\t{\n\t\t\t\treturn color;\n\t\t\t}\n\n\t\t\tif (color.a == 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t\t}\n\n\t\t\tif (!hasColorTransform)\n\t\t\t{\n\t\t\t\treturn color * openfl_Alphav;\n\t\t\t}\n\n\t\t\tcolor = vec4(color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4(0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp(openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0)\n\t\t\t{\n\t\t\t\treturn vec4(color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t}\n\t\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n\t\t}\n\t\n\n\t\t//uniform float tx, ty; // x,y waves phase\n\t\tuniform float uTime;\n\t\t\n\t\tconst int EFFECT_TYPE_DREAMY = 0;\n\t\tconst int EFFECT_TYPE_WAVY = 1;\n\t\tconst int EFFECT_TYPE_HEAT_WAVE_HORIZONTAL = 2;\n\t\tconst int EFFECT_TYPE_HEAT_WAVE_VERTICAL = 3;\n\t\tconst int EFFECT_TYPE_FLAG = 4;\n\t\t\n\t\tuniform int effectType;\n\t\t\n\t\t/**\n\t\t * How fast the waves move over time\n\t\t */\n\t\tuniform float uSpeed;\n\t\t\n\t\t/**\n\t\t * Number of waves over time\n\t\t */\n\t\tuniform float uFrequency;\n\t\t\n\t\t/**\n\t\t * How much the pixels are going to stretch over the waves\n\t\t */\n\t\tuniform float uWaveAmplitude;\n\n\t\tvec2 sineWave(vec2 pt)\n\t\t{\n\t\t\tfloat x = 0.0;\n\t\t\tfloat y = 0.0;\n\t\t\t\n\t\t\tif (effectType == EFFECT_TYPE_DREAMY) \n\t\t\t{\n\t\t\t\tfloat offsetX = sin(pt.y * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n                pt.x += offsetX; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_WAVY) \n\t\t\t{\n\t\t\t\tfloat offsetY = sin(pt.x * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t\tpt.y += offsetY; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_HEAT_WAVE_HORIZONTAL)\n\t\t\t{\n\t\t\t\tx = sin(pt.x * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_HEAT_WAVE_VERTICAL)\n\t\t\t{\n\t\t\t\ty = sin(pt.y * uFrequency + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\telse if (effectType == EFFECT_TYPE_FLAG)\n\t\t\t{\n\t\t\t\ty = sin(pt.y * uFrequency + 10.0 * pt.x + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t\tx = sin(pt.x * uFrequency + 5.0 * pt.y + uTime * uSpeed) * uWaveAmplitude;\n\t\t\t}\n\t\t\t\n\t\t\treturn vec2(pt.x + x, pt.y + y);\n\t\t}\n\n\t\tvoid main()\n\t\t{\n\t\t\tvec2 uv = sineWave(openfl_TextureCoordv);\n\t\t\tgl_FragColor = texture2D(bitmap, uv);\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "\n\t\tattribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tattribute float alpha;\n\t\tattribute vec4 colorMultiplier;\n\t\tattribute vec4 colorOffset;\n\t\tuniform bool hasColorTransform;\n\t\t\n\t\tvoid main(void)\n\t\t{\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha * alpha;\n\t\t\t\n\t\t\tif (hasColorTransform)\n\t\t\t{\n\t\t\t\topenfl_ColorOffsetv = colorOffset / 255.0;\n\t\t\t\topenfl_ColorMultiplierv = colorMultiplier;\n\t\t\t}\n\t\t}";
	}
	flixel_graphics_tile_FlxGraphicsShader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["WiggleShader"] = WiggleShader;
WiggleShader.__name__ = "WiggleShader";
WiggleShader.__super__ = flixel_graphics_tile_FlxGraphicsShader;
WiggleShader.prototype = $extend(flixel_graphics_tile_FlxGraphicsShader.prototype,{
	tx: null
	,uTime: null
	,effectType: null
	,uSpeed: null
	,uFrequency: null
	,uWaveAmplitude: null
	,__class__: WiggleShader
});
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,insertChild: function(x,pos) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			HxOverrides.remove(x.parent.children,x);
		}
		this.children.splice(pos,0,x);
		x.parent = this;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var flixel_IFlxBasic = function() { };
$hxClasses["flixel.IFlxBasic"] = flixel_IFlxBasic;
flixel_IFlxBasic.__name__ = "flixel.IFlxBasic";
flixel_IFlxBasic.__isInterface__ = true;
flixel_IFlxBasic.prototype = {
	set_active: null
	,set_visible: null
	,set_alive: null
	,set_exists: null
	,ID: null
	,active: null
	,visible: null
	,alive: null
	,exists: null
	,draw: null
	,update: null
	,destroy: null
	,kill: null
	,revive: null
	,toString: null
	,__class__: flixel_IFlxBasic
	,__properties__: {set_exists:"set_exists",set_alive:"set_alive",set_visible:"set_visible",set_active:"set_active"}
};
var flixel_util_FlxPool_$flixel_$math_$FlxPoint = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_math_FlxPoint"] = flixel_util_FlxPool_$flixel_$math_$FlxPoint;
flixel_util_FlxPool_$flixel_$math_$FlxPoint.__name__ = "flixel.util.FlxPool_flixel_math_FlxPoint";
flixel_util_FlxPool_$flixel_$math_$FlxPoint.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$math_$FlxPoint.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$math_$FlxPoint
	,__properties__: {get_length:"get_length"}
};
var flixel_math_FlxPoint = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._inPool = false;
	this._weak = false;
	this.y = 0;
	this.x = 0;
	this.set(X,Y);
};
$hxClasses["flixel.math.FlxPoint"] = flixel_math_FlxPoint;
flixel_math_FlxPoint.__name__ = "flixel.math.FlxPoint";
flixel_math_FlxPoint.__interfaces__ = [flixel_util_IFlxPooled];
flixel_math_FlxPoint.__properties__ = {get_pool:"get_pool"};
flixel_math_FlxPoint.get = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	return point;
};
flixel_math_FlxPoint.weak = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var X1 = X;
	var Y1 = Y;
	if(Y1 == null) {
		Y1 = 0;
	}
	if(X1 == null) {
		X1 = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
	point._inPool = false;
	var point1 = point;
	point1._weak = true;
	return point1;
};
flixel_math_FlxPoint.get_pool = function() {
	return flixel_math_FlxPoint._pool;
};
flixel_math_FlxPoint.prototype = {
	x: null
	,y: null
	,_weak: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			this._weak = false;
			flixel_math_FlxPoint._pool.putUnsafe(this);
		}
	}
	,putWeak: function() {
		if(this._weak) {
			this.put();
		}
	}
	,set: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
		return this;
	}
	,add: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = this;
		_g.set_x(_g.x + X);
		var _g = this;
		_g.set_y(_g.y + Y);
		return this;
	}
	,addPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x + point.x);
		var _g = this;
		_g.set_y(_g.y + point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,addPointWeak: function(point) {
		var _g = this;
		_g.set_x(_g.x + point.x);
		var _g = this;
		_g.set_y(_g.y + point.y);
		return this;
	}
	,subtract: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = this;
		_g.set_x(_g.x - X);
		var _g = this;
		_g.set_y(_g.y - Y);
		return this;
	}
	,subtractPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x - point.x);
		var _g = this;
		_g.set_y(_g.y - point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,subtractPointWeak: function(point) {
		var _g = this;
		_g.set_x(_g.x - point.x);
		var _g = this;
		_g.set_y(_g.y - point.y);
		return this;
	}
	,scale: function(k) {
		var _g = this;
		_g.set_x(_g.x * k);
		var _g = this;
		_g.set_y(_g.y * k);
		return this;
	}
	,copyFrom: function(point) {
		this.set_x(point.x);
		this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,copyTo: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		point.set_x(this.x);
		point.set_y(this.y);
		return point;
	}
	,copyFromFlash: function(FlashPoint) {
		this.set_x(FlashPoint.x);
		this.set_y(FlashPoint.y);
		return this;
	}
	,copyToFlash: function(FlashPoint) {
		if(FlashPoint == null) {
			FlashPoint = new openfl_geom_Point();
		}
		FlashPoint.x = this.x;
		FlashPoint.y = this.y;
		return FlashPoint;
	}
	,addToFlash: function(FlashPoint) {
		FlashPoint.x += this.x;
		FlashPoint.y += this.y;
		return FlashPoint;
	}
	,subtractFromFlash: function(FlashPoint) {
		FlashPoint.x -= this.x;
		FlashPoint.y -= this.y;
		return FlashPoint;
	}
	,inCoords: function(RectX,RectY,RectWidth,RectHeight) {
		return flixel_math_FlxMath.pointInCoordinates(this.x,this.y,RectX,RectY,RectWidth,RectHeight);
	}
	,inRect: function(Rect) {
		return flixel_math_FlxMath.pointInFlxRect(this.x,this.y,Rect);
	}
	,distanceTo: function(point) {
		var dx = this.x - point.x;
		var dy = this.y - point.y;
		if(point._weak) {
			point.put();
		}
		return Math.sqrt(dx * dx + dy * dy);
	}
	,floor: function() {
		this.set_x(Math.floor(this.x));
		this.set_y(Math.floor(this.y));
		return this;
	}
	,ceil: function() {
		this.set_x(Math.ceil(this.x));
		this.set_y(Math.ceil(this.y));
		return this;
	}
	,round: function() {
		this.set_x(Math.round(this.x));
		this.set_y(Math.round(this.y));
		return this;
	}
	,rotate: function(Pivot,Angle) {
		var radians = Angle * (Math.PI / 180);
		var n = radians;
		n *= 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		var sin = n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		var n = radians + 1.570796327;
		n *= 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		var cos = n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		var dx = this.x - Pivot.x;
		var dy = this.y - Pivot.y;
		this.set_x(cos * dx - sin * dy + Pivot.x);
		this.set_y(sin * dx + cos * dy + Pivot.y);
		if(Pivot._weak) {
			Pivot.put();
		}
		return this;
	}
	,angleBetween: function(point) {
		var x = point.x - this.x;
		var y = point.y - this.y;
		var angle = 0;
		if(x != 0 || y != 0) {
			var c1 = Math.PI * 0.25;
			var c2 = 3 * c1;
			var ay = y < 0 ? -y : y;
			if(x >= 0) {
				angle = c1 - c1 * ((x - ay) / (x + ay));
			} else {
				angle = c2 - c1 * ((x + ay) / (ay - x));
			}
			angle = (y < 0 ? -angle : angle) * (180 / Math.PI);
			if(angle > 90) {
				angle -= 270;
			} else {
				angle += 90;
			}
		}
		if(point._weak) {
			point.put();
		}
		return angle;
	}
	,toVector: function() {
		var x = this.x;
		var y = this.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var X = x;
		var Y = y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		return point;
	}
	,equals: function(point) {
		var result = Math.abs(this.x - point.x) <= 0.0000001 && Math.abs(this.y - point.y) <= 0.0000001;
		if(point._weak) {
			point.put();
		}
		return result;
	}
	,destroy: function() {
	}
	,transform: function(matrix) {
		var x1 = this.x * matrix.a + this.y * matrix.c + matrix.tx;
		var y1 = this.x * matrix.b + this.y * matrix.d + matrix.ty;
		return this.set(x1,y1);
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,set_x: function(Value) {
		return this.x = Value;
	}
	,set_y: function(Value) {
		return this.y = Value;
	}
	,__class__: flixel_math_FlxPoint
	,__properties__: {set_y:"set_y",set_x:"set_x"}
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = "lime.math.Matrix3";
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.b = vector4.y;
		} else if(column == 1) {
			this.c = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
			this.tx = vector4.z;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
			this.ty = vector4.z;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix3) {
		if(matrix3 != null && this.tx == matrix3.tx && this.ty == matrix3.ty && this.a == matrix3.a && this.b == matrix3.b && this.c == matrix3.c) {
			return this.d == matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector: function(Vector2,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = Vector2.x * this.a + Vector2.y * this.c;
		result.y = Vector2.x * this.b + Vector2.y * this.d;
		return result;
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformRect: function(rect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var tx0 = this.a * rect.x + this.c * rect.y;
		var tx1 = tx0;
		var ty0 = this.b * rect.x + this.d * rect.y;
		var ty1 = ty0;
		var tx = this.a * (rect.x + rect.width) + this.c * rect.y;
		var ty = this.b * (rect.x + rect.width) + this.d * rect.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * (rect.x + rect.width) + this.c * (rect.y + rect.height);
		ty = this.b * (rect.x + rect.width) + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = this.a * rect.x + this.c * (rect.y + rect.height);
		ty = this.b * rect.x + this.d * (rect.y + rect.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		result.setTo(tx0 + tx,ty0 + ty,tx1 - tx0,ty1 - ty0);
		return result;
	}
	,transformVector: function(pos,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = pos.x * this.a + pos.y * this.c + this.tx;
		result.y = pos.x * this.b + pos.y * this.d + this.ty;
		return result;
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: lime_math_Matrix3
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = "openfl.geom.Matrix";
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.b = vector3D.y;
		} else if(column == 1) {
			this.c = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw haxe_Exception.thrown("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
			this.tx = vector3D.z;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
			this.ty = vector3D.z;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw haxe_Exception.thrown("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(9);
			this.__array = this1;
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		openfl_geom_Matrix.__matrix3.setTo(this.a,this.b,this.c,this.d,this.tx,this.ty);
		return openfl_geom_Matrix.__matrix3;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = "openfl.geom.ColorTransform";
openfl_geom_ColorTransform.__limeColorMatrix = null;
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redOffset = second.redOffset * this.redMultiplier + this.redOffset;
		this.greenOffset = second.greenOffset * this.greenMultiplier + this.greenOffset;
		this.blueOffset = second.blueOffset * this.blueMultiplier + this.blueOffset;
		this.alphaOffset = second.alphaOffset * this.alphaMultiplier + this.alphaOffset;
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__invert: function() {
		this.redMultiplier = this.redMultiplier != 0 ? 1 / this.redMultiplier : 1;
		this.greenMultiplier = this.greenMultiplier != 0 ? 1 / this.greenMultiplier : 1;
		this.blueMultiplier = this.blueMultiplier != 0 ? 1 / this.blueMultiplier : 1;
		this.alphaMultiplier = this.alphaMultiplier != 0 ? 1 / this.alphaMultiplier : 1;
		this.redOffset = -this.redOffset;
		this.greenOffset = -this.greenOffset;
		this.blueOffset = -this.blueOffset;
		this.alphaOffset = -this.alphaOffset;
	}
	,__equals: function(ct,ignoreAlphaMultiplier) {
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (ignoreAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function(ignoreAlphaMultiplier) {
		if(ignoreAlphaMultiplier) {
			if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
				return this.alphaOffset == 0;
			} else {
				return false;
			}
		} else if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__setArrays: function(colorMultipliers,colorOffsets) {
		colorMultipliers[0] = this.redMultiplier;
		colorMultipliers[1] = this.greenMultiplier;
		colorMultipliers[2] = this.blueMultiplier;
		colorMultipliers[3] = this.alphaMultiplier;
		colorOffsets[0] = this.redOffset;
		colorOffsets[1] = this.greenOffset;
		colorOffsets[2] = this.blueOffset;
		colorOffsets[3] = this.alphaOffset;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var flixel_FlxCamera = function(X,Y,Width,Height,Zoom) {
	if(Zoom == null) {
		Zoom = 0;
	}
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._helperPoint = new openfl_geom_Point();
	this._helperMatrix = new flixel_math_FlxMatrix();
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	this._bounds = _this;
	this._scrollRect = new openfl_display_Sprite();
	this.initialZoom = 1;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._point = point;
	this._fxShakeAxes = flixel_util_FlxAxes.XY;
	this._fxShakeDuration = 0;
	this._fxShakeIntensity = 0;
	this._fxFadeAlpha = 0;
	this._fxFadeCompleted = true;
	this._fxFadeComplete = null;
	this._fxFadeIn = false;
	this._fxFadeDuration = 0;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._scrollTarget = point;
	this._fxFadeColor = 0;
	this._fxFlashAlpha = 0;
	this._fxFlashComplete = null;
	this._fxFlashDuration = 0;
	this._fxFlashColor = 0;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._flashOffset = point;
	this._flashPoint = new openfl_geom_Point();
	this.filtersEnabled = true;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.followLead = point;
	this.antialiasing = false;
	this.color = -1;
	this.angle = 0;
	this.alpha = 1;
	this._useBlitMatrix = false;
	this._blitMatrix = new flixel_math_FlxMatrix();
	this.viewHeight = 0;
	this.viewWidth = 0;
	this.viewOffsetHeight = 0;
	this.viewOffsetWidth = 0;
	this.viewOffsetY = 0;
	this.viewOffsetX = 0;
	this.height = 0;
	this.width = 0;
	this.flashSprite = new openfl_display_Sprite();
	this.useBgAlphaBlending = false;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.scroll = point;
	this.followLerp = 60 / flixel_FlxG.updateFramerate;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.targetOffset = point;
	this.scaleY = 0;
	this.scaleX = 0;
	this.y = 0;
	this.x = 0;
	flixel_FlxBasic.call(this);
	this.set_x(X);
	this.set_y(Y);
	this.set_width(Width <= 0 ? flixel_FlxG.width : Width);
	this.set_height(Height <= 0 ? flixel_FlxG.height : Height);
	this._flashRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
	this.flashSprite.addChild(this._scrollRect);
	this._scrollRect.set_scrollRect(new openfl_geom_Rectangle());
	this.pixelPerfectRender = flixel_FlxG.renderBlit;
	if(flixel_FlxG.renderBlit) {
		this.screen = new flixel_FlxSprite();
		this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
		this.screen.set_pixels(this.buffer);
		this.screen.origin.set();
		this._flashBitmap = new openfl_display_Bitmap(this.buffer);
		this._scrollRect.addChild(this._flashBitmap);
		this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
	} else {
		this.canvas = new openfl_display_Sprite();
		this._scrollRect.addChild(this.canvas);
	}
	this.set_color(-1);
	this.initialZoom = Zoom == 0 ? flixel_FlxCamera.defaultZoom : Zoom;
	this.set_zoom(Zoom);
	this.updateScrollRect();
	this.updateFlashOffset();
	this.updateFlashSpritePosition();
	this.updateInternalSpritePositions();
	this.bgColor = flixel_FlxG.cameras.get_bgColor();
};
$hxClasses["flixel.FlxCamera"] = flixel_FlxCamera;
flixel_FlxCamera.__name__ = "flixel.FlxCamera";
flixel_FlxCamera.__properties__ = {set_defaultCameras:"set_defaultCameras",get_defaultCameras:"get_defaultCameras"};
flixel_FlxCamera.defaultZoom = null;
flixel_FlxCamera._defaultCameras = null;
flixel_FlxCamera._storageTilesHead = null;
flixel_FlxCamera._storageTrianglesHead = null;
flixel_FlxCamera.get_defaultCameras = function() {
	return flixel_FlxCamera._defaultCameras;
};
flixel_FlxCamera.set_defaultCameras = function(value) {
	return flixel_FlxCamera._defaultCameras = value;
};
flixel_FlxCamera.__super__ = flixel_FlxBasic;
flixel_FlxCamera.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,totalScaleX: null
	,totalScaleY: null
	,style: null
	,target: null
	,targetOffset: null
	,followLerp: null
	,deadzone: null
	,minScrollX: null
	,maxScrollX: null
	,minScrollY: null
	,maxScrollY: null
	,scroll: null
	,buffer: null
	,bgColor: null
	,screen: null
	,useBgAlphaBlending: null
	,flashSprite: null
	,pixelPerfectRender: null
	,width: null
	,height: null
	,zoom: null
	,viewOffsetX: null
	,viewOffsetY: null
	,viewOffsetWidth: null
	,viewOffsetHeight: null
	,viewWidth: null
	,viewHeight: null
	,_blitMatrix: null
	,_useBlitMatrix: null
	,alpha: null
	,angle: null
	,color: null
	,antialiasing: null
	,followLead: null
	,filtersEnabled: null
	,_flashRect: null
	,_flashPoint: null
	,_flashOffset: null
	,_fxFlashColor: null
	,_fxFlashDuration: null
	,_fxFlashComplete: null
	,_fxFlashAlpha: null
	,_fxFadeColor: null
	,_lastTargetPosition: null
	,_scrollTarget: null
	,_fxFadeDuration: null
	,_fxFadeIn: null
	,_fxFadeComplete: null
	,_fxFadeCompleted: null
	,_fxFadeAlpha: null
	,_fxShakeIntensity: null
	,_fxShakeDuration: null
	,_fxShakeComplete: null
	,_fxShakeAxes: null
	,_point: null
	,_filters: null
	,initialZoom: null
	,_fill: null
	,_flashBitmap: null
	,_scrollRect: null
	,_bounds: null
	,canvas: null
	,_helperMatrix: null
	,_helperPoint: null
	,_currentDrawItem: null
	,_headOfDrawStack: null
	,_headTiles: null
	,_headTriangles: null
	,startQuadBatch: function(graphic,colored,hasColorOffsets,blend,smooth,shader) {
		if(smooth == null) {
			smooth = false;
		}
		if(hasColorOffsets == null) {
			hasColorOffsets = false;
		}
		var itemToReturn = null;
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(this._currentDrawItem != null && this._currentDrawItem.type == flixel_graphics_tile_FlxDrawItemType.TILES && this._headTiles.graphics == graphic && this._headTiles.colored == colored && this._headTiles.hasColorOffsets == hasColorOffsets && this._headTiles.blending == blendInt && this._headTiles.blend == blend && this._headTiles.antialiasing == smooth && this._headTiles.shader == shader) {
			return this._headTiles;
		}
		if(flixel_FlxCamera._storageTilesHead != null) {
			itemToReturn = flixel_FlxCamera._storageTilesHead;
			var newHead = flixel_FlxCamera._storageTilesHead.nextTyped;
			itemToReturn.reset();
			flixel_FlxCamera._storageTilesHead = newHead;
		} else {
			itemToReturn = new flixel_graphics_tile_FlxDrawQuadsItem();
		}
		itemToReturn.graphics = graphic;
		itemToReturn.antialiasing = smooth;
		itemToReturn.colored = colored;
		itemToReturn.hasColorOffsets = hasColorOffsets;
		itemToReturn.blending = blendInt;
		itemToReturn.blend = blend;
		itemToReturn.shader = shader;
		itemToReturn.nextTyped = this._headTiles;
		this._headTiles = itemToReturn;
		if(this._headOfDrawStack == null) {
			this._headOfDrawStack = itemToReturn;
		}
		if(this._currentDrawItem != null) {
			this._currentDrawItem.next = itemToReturn;
		}
		this._currentDrawItem = itemToReturn;
		return itemToReturn;
	}
	,startTrianglesBatch: function(graphic,smoothing,isColored,blend) {
		if(isColored == null) {
			isColored = false;
		}
		if(smoothing == null) {
			smoothing = false;
		}
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(this._currentDrawItem != null && this._currentDrawItem.type == flixel_graphics_tile_FlxDrawItemType.TRIANGLES && this._headTriangles.graphics == graphic && this._headTriangles.antialiasing == smoothing && this._headTriangles.colored == isColored && this._headTriangles.blending == blendInt) {
			return this._headTriangles;
		}
		return this.getNewDrawTrianglesItem(graphic,smoothing,isColored,blend);
	}
	,getNewDrawTrianglesItem: function(graphic,smoothing,isColored,blend) {
		if(isColored == null) {
			isColored = false;
		}
		if(smoothing == null) {
			smoothing = false;
		}
		var itemToReturn = null;
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(flixel_FlxCamera._storageTrianglesHead != null) {
			itemToReturn = flixel_FlxCamera._storageTrianglesHead;
			var newHead = flixel_FlxCamera._storageTrianglesHead.nextTyped;
			itemToReturn.reset();
			flixel_FlxCamera._storageTrianglesHead = newHead;
		} else {
			itemToReturn = new flixel_graphics_tile_FlxDrawTrianglesItem();
		}
		itemToReturn.graphics = graphic;
		itemToReturn.antialiasing = smoothing;
		itemToReturn.colored = isColored;
		itemToReturn.blending = blendInt;
		itemToReturn.nextTyped = this._headTriangles;
		this._headTriangles = itemToReturn;
		if(this._headOfDrawStack == null) {
			this._headOfDrawStack = itemToReturn;
		}
		if(this._currentDrawItem != null) {
			this._currentDrawItem.next = itemToReturn;
		}
		this._currentDrawItem = itemToReturn;
		return itemToReturn;
	}
	,clearDrawStack: function() {
		var currTiles = this._headTiles;
		var newTilesHead;
		while(currTiles != null) {
			newTilesHead = currTiles.nextTyped;
			currTiles.reset();
			currTiles.nextTyped = flixel_FlxCamera._storageTilesHead;
			flixel_FlxCamera._storageTilesHead = currTiles;
			currTiles = newTilesHead;
		}
		var currTriangles = this._headTriangles;
		var newTrianglesHead;
		while(currTriangles != null) {
			newTrianglesHead = currTriangles.nextTyped;
			currTriangles.reset();
			currTriangles.nextTyped = flixel_FlxCamera._storageTrianglesHead;
			flixel_FlxCamera._storageTrianglesHead = currTriangles;
			currTriangles = newTrianglesHead;
		}
		this._currentDrawItem = null;
		this._headOfDrawStack = null;
		this._headTiles = null;
		this._headTriangles = null;
	}
	,render: function() {
		var currItem = this._headOfDrawStack;
		while(currItem != null) {
			currItem.render(this);
			currItem = currItem.next;
		}
	}
	,drawPixels: function(frame,pixels,matrix,transform,blend,smoothing,shader) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(flixel_FlxG.renderBlit) {
			this._helperMatrix.copyFrom(matrix);
			if(this._useBlitMatrix) {
				this._helperMatrix.concat(this._blitMatrix);
				this.buffer.draw(pixels,this._helperMatrix,null,null,null,smoothing || this.antialiasing);
			} else {
				this._helperMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
				this.buffer.draw(pixels,this._helperMatrix,null,blend,null,smoothing || this.antialiasing);
			}
		} else {
			var isColored = transform != null && flixel_util_FlxColorTransformUtil.hasRGBMultipliers(transform);
			var hasColorOffsets = transform != null && flixel_util_FlxColorTransformUtil.hasRGBAOffsets(transform);
			var drawItem = this.startQuadBatch(frame.parent,isColored,hasColorOffsets,blend,smoothing,shader);
			drawItem.addQuad(frame,matrix,transform);
		}
	}
	,copyPixels: function(frame,pixels,sourceRect,destPoint,transform,blend,smoothing,shader) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(pixels != null) {
				if(this._useBlitMatrix) {
					this._helperMatrix.identity();
					this._helperMatrix.translate(destPoint.x,destPoint.y);
					this._helperMatrix.concat(this._blitMatrix);
					this.buffer.draw(pixels,this._helperMatrix,null,null,null,smoothing || this.antialiasing);
				} else {
					this._helperPoint.x = destPoint.x - (this.viewOffsetX | 0);
					this._helperPoint.y = destPoint.y - (this.viewOffsetY | 0);
					this.buffer.copyPixels(pixels,sourceRect,this._helperPoint,null,null,true);
				}
			} else if(frame != null) {
				frame.paint(this.buffer,destPoint,true);
			}
		} else {
			this._helperMatrix.identity();
			this._helperMatrix.translate(destPoint.x + frame.offset.x,destPoint.y + frame.offset.y);
			var isColored = transform != null && flixel_util_FlxColorTransformUtil.hasRGBMultipliers(transform);
			var hasColorOffsets = transform != null && flixel_util_FlxColorTransformUtil.hasRGBAOffsets(transform);
			var drawItem = this.startQuadBatch(frame.parent,isColored,hasColorOffsets,blend,smoothing,shader);
			drawItem.addQuad(frame,this._helperMatrix,transform);
		}
	}
	,drawTriangles: function(graphic,vertices,indices,uvtData,colors,position,blend,repeat,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(repeat == null) {
			repeat = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(position == null) {
				position = flixel_FlxCamera.renderPoint.set();
			}
			var _this = this._bounds;
			var X = 0;
			var Y = 0;
			var Width = this.width;
			var Height = this.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var verticesLength = vertices.get_length();
			var currentVertexPosition = 0;
			var tempX;
			var tempY;
			var i = 0;
			var _this = flixel_FlxCamera.renderRect;
			_this.x = 0;
			_this.y = 0;
			_this.width = 0;
			_this.height = 0;
			var bounds = _this;
			flixel_FlxCamera.drawVertices.splice(0,flixel_FlxCamera.drawVertices.get_length());
			while(i < verticesLength) {
				tempX = position.x + vertices.get(i);
				tempY = position.y + vertices.get(i + 1);
				flixel_FlxCamera.drawVertices.set(currentVertexPosition++,tempX);
				flixel_FlxCamera.drawVertices.set(currentVertexPosition++,tempY);
				if(i == 0) {
					var X = tempX;
					var Y = tempY;
					var Width = 0;
					var Height = 0;
					if(Height == null) {
						Height = 0;
					}
					if(Width == null) {
						Width = 0;
					}
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					bounds.x = X;
					bounds.y = Y;
					bounds.width = Width;
					bounds.height = Height;
				} else {
					if(tempX < bounds.x) {
						bounds.width += bounds.x - tempX;
						bounds.x = tempX;
					}
					if(tempY < bounds.y) {
						bounds.height += bounds.y - tempY;
						bounds.y = tempY;
					}
					if(tempX > bounds.x + bounds.width) {
						bounds.width = tempX - bounds.x;
					}
					if(tempY > bounds.y + bounds.height) {
						bounds.height = tempY - bounds.y;
					}
				}
				i += 2;
			}
			if(position._weak) {
				position.put();
			}
			var _this = this._bounds;
			var result = bounds.x + bounds.width > _this.x && bounds.x < _this.x + _this.width && bounds.y + bounds.height > _this.y && bounds.y < _this.y + _this.height;
			if(bounds._weak) {
				if(!bounds._inPool) {
					bounds._inPool = true;
					bounds._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(bounds);
				}
			}
			if(!result) {
				flixel_FlxCamera.drawVertices.splice(flixel_FlxCamera.drawVertices.get_length() - verticesLength,verticesLength);
			} else {
				flixel_FlxCamera.trianglesSprite.get_graphics().clear();
				flixel_FlxCamera.trianglesSprite.get_graphics().beginBitmapFill(graphic.bitmap,null,repeat,smoothing);
				flixel_FlxCamera.trianglesSprite.get_graphics().drawTriangles(flixel_FlxCamera.drawVertices,indices,uvtData);
				flixel_FlxCamera.trianglesSprite.get_graphics().endFill();
				if(this._useBlitMatrix) {
					this._helperMatrix.copyFrom(this._blitMatrix);
				} else {
					this._helperMatrix.identity();
					this._helperMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
				}
				this.buffer.draw(flixel_FlxCamera.trianglesSprite,this._helperMatrix);
			}
			if(!bounds._inPool) {
				bounds._inPool = true;
				bounds._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(bounds);
			}
		} else {
			var _this = this._bounds;
			var X = 0;
			var Y = 0;
			var Width = this.width;
			var Height = this.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var isColored = colors != null && colors.get_length() != 0;
			var drawItem = this.startTrianglesBatch(graphic,smoothing,isColored,blend);
			drawItem.addTriangles(vertices,indices,uvtData,colors,position,this._bounds);
		}
	}
	,transformRect: function(rect) {
		if(flixel_FlxG.renderBlit) {
			rect.x += -this.viewOffsetX;
			rect.y += -this.viewOffsetY;
			if(this._useBlitMatrix) {
				rect.x *= this.zoom;
				rect.y *= this.zoom;
				rect.width *= this.zoom;
				rect.height *= this.zoom;
			}
		}
		return rect;
	}
	,transformPoint: function(point) {
		if(flixel_FlxG.renderBlit) {
			var X = this.viewOffsetX;
			var Y = this.viewOffsetY;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _g = point;
			_g.set_x(_g.x - X);
			var _g = point;
			_g.set_y(_g.y - Y);
			if(this._useBlitMatrix) {
				point.scale(this.zoom);
			}
		}
		return point;
	}
	,transformVector: function(vector) {
		if(flixel_FlxG.renderBlit && this._useBlitMatrix) {
			vector.scale(this.zoom);
		}
		return vector;
	}
	,transformObject: function(object) {
		var _g = object;
		_g.set_scaleX(_g.get_scaleX() * this.totalScaleX);
		var _g = object;
		_g.set_scaleY(_g.get_scaleY() * this.totalScaleY);
		var _g = object;
		_g.set_x(_g.get_x() - this.scroll.x * this.totalScaleX);
		var _g = object;
		_g.set_y(_g.get_y() - this.scroll.y * this.totalScaleY);
		var _g = object;
		_g.set_x(_g.get_x() - 0.5 * this.width * (this.scaleX - this.initialZoom) * flixel_FlxG.scaleMode.scale.x);
		var _g = object;
		_g.set_y(_g.get_y() - 0.5 * this.height * (this.scaleY - this.initialZoom) * flixel_FlxG.scaleMode.scale.y);
		return object;
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.removeChild(this.flashSprite,this._scrollRect);
		if(flixel_FlxG.renderBlit) {
			flixel_util_FlxDestroyUtil.removeChild(this._scrollRect,this._flashBitmap);
			this.screen = flixel_util_FlxDestroyUtil.destroy(this.screen);
			this.buffer = null;
			this._flashBitmap = null;
			this._fill = flixel_util_FlxDestroyUtil.dispose(this._fill);
		} else {
			flixel_util_FlxDestroyUtil.removeChild(this._scrollRect,this.canvas);
			if(this.canvas != null) {
				var _g = 0;
				var _g1 = this.canvas.get_numChildren();
				while(_g < _g1) {
					var i = _g++;
					this.canvas.removeChildAt(0);
				}
				this.canvas = null;
			}
			if(this._headOfDrawStack != null) {
				this.clearDrawStack();
			}
			this._blitMatrix = null;
			this._helperMatrix = null;
			this._helperPoint = null;
		}
		this._bounds = null;
		this.scroll = flixel_util_FlxDestroyUtil.put(this.scroll);
		this.targetOffset = flixel_util_FlxDestroyUtil.put(this.targetOffset);
		this.deadzone = flixel_util_FlxDestroyUtil.put(this.deadzone);
		this.target = null;
		this.flashSprite = null;
		this._scrollRect = null;
		this._flashRect = null;
		this._flashPoint = null;
		this._fxFlashComplete = null;
		this._fxFadeComplete = null;
		this._fxShakeComplete = null;
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		if(this.target != null) {
			this.updateFollow();
		}
		this.updateScroll();
		this.updateFlash(elapsed);
		this.updateFade(elapsed);
		this.flashSprite.set_filters(this.filtersEnabled ? this._filters : null);
		this.updateFlashSpritePosition();
		this.updateShake(elapsed);
	}
	,updateScroll: function() {
		var zoom = this.zoom / flixel_FlxG.initialZoom;
		var minX = this.minScrollX == null ? null : this.minScrollX - (zoom - 1) * this.width / (2 * zoom);
		var maxX = this.maxScrollX == null ? null : this.maxScrollX + (zoom - 1) * this.width / (2 * zoom);
		var minY = this.minScrollY == null ? null : this.minScrollY - (zoom - 1) * this.height / (2 * zoom);
		var maxY = this.maxScrollY == null ? null : this.maxScrollY + (zoom - 1) * this.height / (2 * zoom);
		var Value = this.scroll.x;
		var Max = maxX != null ? maxX - this.width : null;
		var lowerBound = minX != null && Value < minX ? minX : Value;
		this.scroll.set_x(Max != null && lowerBound > Max ? Max : lowerBound);
		var Value = this.scroll.y;
		var Max = maxY != null ? maxY - this.height : null;
		var lowerBound = minY != null && Value < minY ? minY : Value;
		this.scroll.set_y(Max != null && lowerBound > Max ? Max : lowerBound);
	}
	,updateFollow: function() {
		if(this.deadzone == null) {
			this.target.getMidpoint(this._point);
			this._point.addPoint(this.targetOffset);
			var point = this._point;
			this.scroll.set(point.x - this.width * 0.5,point.y - this.height * 0.5);
			if(point._weak) {
				point.put();
			}
		} else {
			var edge;
			var targetX = this.target.x + this.targetOffset.x;
			var targetY = this.target.y + this.targetOffset.y;
			if(this.style == flixel_FlxCameraFollowStyle.SCREEN_BY_SCREEN) {
				if(targetX >= this.scroll.x + this.width) {
					var _g = this._scrollTarget;
					_g.set_x(_g.x + this.width);
				} else if(targetX < this.scroll.x) {
					var _g = this._scrollTarget;
					_g.set_x(_g.x - this.width);
				}
				if(targetY >= this.scroll.y + this.height) {
					var _g = this._scrollTarget;
					_g.set_y(_g.y + this.height);
				} else if(targetY < this.scroll.y) {
					var _g = this._scrollTarget;
					_g.set_y(_g.y - this.height);
				}
			} else {
				edge = targetX - this.deadzone.x;
				if(this._scrollTarget.x > edge) {
					this._scrollTarget.set_x(edge);
				}
				edge = targetX + this.target.get_width() - this.deadzone.x - this.deadzone.width;
				if(this._scrollTarget.x < edge) {
					this._scrollTarget.set_x(edge);
				}
				edge = targetY - this.deadzone.y;
				if(this._scrollTarget.y > edge) {
					this._scrollTarget.set_y(edge);
				}
				edge = targetY + this.target.get_height() - this.deadzone.y - this.deadzone.height;
				if(this._scrollTarget.y < edge) {
					this._scrollTarget.set_y(edge);
				}
			}
			if(((this.target) instanceof flixel_FlxSprite)) {
				if(this._lastTargetPosition == null) {
					var X = this.target.x;
					var Y = this.target.y;
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					var point = flixel_math_FlxPoint._pool.get().set(X,Y);
					point._inPool = false;
					this._lastTargetPosition = point;
				}
				var _g = this._scrollTarget;
				_g.set_x(_g.x + (this.target.x - this._lastTargetPosition.x) * this.followLead.x);
				var _g = this._scrollTarget;
				_g.set_y(_g.y + (this.target.y - this._lastTargetPosition.y) * this.followLead.y);
				this._lastTargetPosition.set_x(this.target.x);
				this._lastTargetPosition.set_y(this.target.y);
			}
			if(this.followLerp >= 60 / flixel_FlxG.updateFramerate) {
				var _this = this.scroll;
				var point = this._scrollTarget;
				_this.set_x(point.x);
				_this.set_y(point.y);
				if(point._weak) {
					point.put();
				}
			} else {
				var _g = this.scroll;
				_g.set_x(_g.x + (this._scrollTarget.x - this.scroll.x) * this.followLerp * flixel_FlxG.updateFramerate / 60);
				var _g = this.scroll;
				_g.set_y(_g.y + (this._scrollTarget.y - this.scroll.y) * this.followLerp * flixel_FlxG.updateFramerate / 60);
			}
		}
	}
	,updateFlash: function(elapsed) {
		if(this._fxFlashAlpha > 0.0) {
			this._fxFlashAlpha -= elapsed / this._fxFlashDuration;
			if(this._fxFlashAlpha <= 0 && this._fxFlashComplete != null) {
				this._fxFlashComplete();
			}
		}
	}
	,updateFade: function(elapsed) {
		if(this._fxFadeCompleted) {
			return;
		}
		if(this._fxFadeIn) {
			this._fxFadeAlpha -= elapsed / this._fxFadeDuration;
			if(this._fxFadeAlpha <= 0.0) {
				this._fxFadeAlpha = 0.0;
				this.completeFade();
			}
		} else {
			this._fxFadeAlpha += elapsed / this._fxFadeDuration;
			if(this._fxFadeAlpha >= 1.0) {
				this._fxFadeAlpha = 1.0;
				this.completeFade();
			}
		}
	}
	,completeFade: function() {
		this._fxFadeCompleted = true;
		if(this._fxFadeComplete != null) {
			this._fxFadeComplete();
		}
	}
	,updateShake: function(elapsed) {
		if(this._fxShakeDuration > 0) {
			this._fxShakeDuration -= elapsed;
			if(this._fxShakeDuration <= 0) {
				if(this._fxShakeComplete != null) {
					this._fxShakeComplete();
				}
			} else {
				if(this._fxShakeAxes != flixel_util_FlxAxes.Y) {
					var _g = this.flashSprite;
					_g.set_x(_g.get_x() + flixel_FlxG.random.float(-this._fxShakeIntensity * this.width,this._fxShakeIntensity * this.width) * this.zoom * flixel_FlxG.scaleMode.scale.x);
				}
				if(this._fxShakeAxes != flixel_util_FlxAxes.X) {
					var _g = this.flashSprite;
					_g.set_y(_g.get_y() + flixel_FlxG.random.float(-this._fxShakeIntensity * this.height,this._fxShakeIntensity * this.height) * this.zoom * flixel_FlxG.scaleMode.scale.y);
				}
			}
		}
	}
	,updateFlashSpritePosition: function() {
		if(this.flashSprite != null) {
			this.flashSprite.set_x(this.x * flixel_FlxG.scaleMode.scale.x + this._flashOffset.x);
			this.flashSprite.set_y(this.y * flixel_FlxG.scaleMode.scale.y + this._flashOffset.y);
		}
	}
	,updateFlashOffset: function() {
		this._flashOffset.set_x(this.width * 0.5 * flixel_FlxG.scaleMode.scale.x * this.initialZoom);
		this._flashOffset.set_y(this.height * 0.5 * flixel_FlxG.scaleMode.scale.y * this.initialZoom);
	}
	,updateScrollRect: function() {
		var rect = this._scrollRect != null ? this._scrollRect.get_scrollRect() : null;
		if(rect != null) {
			rect.x = rect.y = 0;
			rect.width = this.width * this.initialZoom * flixel_FlxG.scaleMode.scale.x;
			rect.height = this.height * this.initialZoom * flixel_FlxG.scaleMode.scale.y;
			this._scrollRect.set_scrollRect(rect);
			this._scrollRect.set_x(-0.5 * rect.width);
			this._scrollRect.set_y(-0.5 * rect.height);
		}
	}
	,updateInternalSpritePositions: function() {
		if(flixel_FlxG.renderBlit) {
			if(this._flashBitmap != null) {
				this._flashBitmap.set_x(0);
				this._flashBitmap.set_y(0);
			}
		} else if(this.canvas != null) {
			this.canvas.set_x(-0.5 * this.width * (this.scaleX - this.initialZoom) * flixel_FlxG.scaleMode.scale.x);
			this.canvas.set_y(-0.5 * this.height * (this.scaleY - this.initialZoom) * flixel_FlxG.scaleMode.scale.y);
			this.canvas.set_scaleX(this.totalScaleX);
			this.canvas.set_scaleY(this.totalScaleY);
		}
	}
	,follow: function(Target,Style,Lerp) {
		if(Style == null) {
			Style = flixel_FlxCameraFollowStyle.LOCKON;
		}
		if(Lerp == null) {
			Lerp = 60 / flixel_FlxG.updateFramerate;
		}
		this.style = Style;
		this.target = Target;
		this.set_followLerp(Lerp);
		var helper;
		var w = 0;
		var h = 0;
		this._lastTargetPosition = null;
		switch(Style._hx_index) {
		case 0:
			if(this.target != null) {
				w = this.target.get_width();
				h = this.target.get_height();
			}
			var X = (this.width - w) / 2;
			var Y = (this.height - h) / 2 - h * 0.25;
			var Width = w;
			var Height = h;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 1:
			var w = this.width / 8;
			var h = this.height / 3;
			var X = (this.width - w) / 2;
			var Y = (this.height - h) / 2 - h * 0.25;
			var Width = w;
			var Height = h;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 2:
			helper = Math.max(this.width,this.height) / 4;
			var X = (this.width - helper) / 2;
			var Y = (this.height - helper) / 2;
			var Width = helper;
			var Height = helper;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 3:
			helper = Math.max(this.width,this.height) / 8;
			var X = (this.width - helper) / 2;
			var Y = (this.height - helper) / 2;
			var Width = helper;
			var Height = helper;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 4:
			var X = 0;
			var Y = 0;
			var Width = this.width;
			var Height = this.height;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _this = flixel_math_FlxRect._pool.get();
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
			var rect = _this;
			rect._inPool = false;
			this.deadzone = rect;
			break;
		case 5:
			this.deadzone = null;
			break;
		}
	}
	,snapToTarget: function() {
		this.updateFollow();
		var _this = this.scroll;
		var point = this._scrollTarget;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
	}
	,focusOn: function(point) {
		this.scroll.set(point.x - this.width * 0.5,point.y - this.height * 0.5);
		if(point._weak) {
			point.put();
		}
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -1;
		}
		if(!Force && this._fxFlashAlpha > 0.0) {
			return;
		}
		this._fxFlashColor = Color;
		if(Duration <= 0) {
			Duration = 0.000001;
		}
		this._fxFlashDuration = Duration;
		this._fxFlashComplete = OnComplete;
		this._fxFlashAlpha = 1.0;
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(FadeIn == null) {
			FadeIn = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -16777216;
		}
		if(!this._fxFadeCompleted && !Force) {
			return;
		}
		this._fxFadeColor = Color;
		if(Duration <= 0) {
			Duration = 0.000001;
		}
		this._fxFadeIn = FadeIn;
		this._fxFadeDuration = Duration;
		this._fxFadeComplete = OnComplete;
		this._fxFadeAlpha = this._fxFadeIn ? 0.999999 : 0.000001;
		this._fxFadeCompleted = false;
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Axes) {
		if(Force == null) {
			Force = true;
		}
		if(Duration == null) {
			Duration = 0.5;
		}
		if(Intensity == null) {
			Intensity = 0.05;
		}
		if(Axes == null) {
			Axes = flixel_util_FlxAxes.XY;
		}
		if(!Force && this._fxShakeDuration > 0) {
			return;
		}
		this._fxShakeIntensity = Intensity;
		this._fxShakeDuration = Duration;
		this._fxShakeComplete = OnComplete;
		this._fxShakeAxes = Axes;
	}
	,stopFX: function() {
		this._fxFlashAlpha = 0.0;
		this._fxFadeAlpha = 0.0;
		this._fxShakeDuration = 0;
		this.updateFlashSpritePosition();
	}
	,setFilters: function(filters) {
		this._filters = filters;
	}
	,copyFrom: function(Camera) {
		this.setScrollBounds(Camera.minScrollX,Camera.maxScrollX,Camera.minScrollY,Camera.maxScrollY);
		this.target = Camera.target;
		if(this.target != null) {
			if(Camera.deadzone == null) {
				this.deadzone = null;
			} else {
				if(this.deadzone == null) {
					var _this = flixel_math_FlxRect._pool.get();
					var X = 0;
					var Y = 0;
					var Width = 0;
					var Height = 0;
					if(Height == null) {
						Height = 0;
					}
					if(Width == null) {
						Width = 0;
					}
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					_this.x = X;
					_this.y = Y;
					_this.width = Width;
					_this.height = Height;
					var rect = _this;
					rect._inPool = false;
					this.deadzone = rect;
				}
				var _this = this.deadzone;
				var Rect = Camera.deadzone;
				_this.x = Rect.x;
				_this.y = Rect.y;
				_this.width = Rect.width;
				_this.height = Rect.height;
				if(Rect._weak) {
					if(!Rect._inPool) {
						Rect._inPool = true;
						Rect._weak = false;
						flixel_math_FlxRect._pool.putUnsafe(Rect);
					}
				}
			}
		}
		return this;
	}
	,fill: function(Color,BlendAlpha,FxAlpha,graphics) {
		if(FxAlpha == null) {
			FxAlpha = 1.0;
		}
		if(BlendAlpha == null) {
			BlendAlpha = true;
		}
		if(flixel_FlxG.renderBlit) {
			if(BlendAlpha) {
				this._fill.fillRect(this._flashRect,Color);
				this.buffer.copyPixels(this._fill,this._flashRect,this._flashPoint,null,null,BlendAlpha);
			} else {
				this.buffer.fillRect(this._flashRect,Color);
			}
		} else {
			if(FxAlpha == 0) {
				return;
			}
			var targetGraphics = graphics == null ? this.canvas.get_graphics() : graphics;
			targetGraphics.beginFill(Color,FxAlpha);
			targetGraphics.drawRect(this.viewOffsetX - 1,this.viewOffsetY - 1,this.viewWidth + 2,this.viewHeight + 2);
			targetGraphics.endFill();
		}
	}
	,drawFX: function() {
		var alphaComponent;
		if(this._fxFlashAlpha > 0.0) {
			alphaComponent = this._fxFlashColor >> 24 & 255;
			if(flixel_FlxG.renderBlit) {
				this.fill((((alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFlashAlpha | 0) << 24) + (this._fxFlashColor & 16777215));
			} else {
				this.fill(this._fxFlashColor & 16777215,true,(alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFlashAlpha / 255,this.canvas.get_graphics());
			}
		}
		if(this._fxFadeAlpha > 0.0) {
			alphaComponent = this._fxFadeColor >> 24 & 255;
			if(flixel_FlxG.renderBlit) {
				this.fill((((alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFadeAlpha | 0) << 24) + (this._fxFadeColor & 16777215));
			} else {
				this.fill(this._fxFadeColor & 16777215,true,(alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFadeAlpha / 255,this.canvas.get_graphics());
			}
		}
	}
	,checkResize: function() {
		if(flixel_FlxG.renderBlit) {
			if(this.width != this.buffer.width || this.height != this.buffer.height) {
				var oldBuffer = this.screen.graphic;
				this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
				this.screen.set_pixels(this.buffer);
				this.screen.origin.set();
				this._flashBitmap.set_bitmapData(this.buffer);
				this._flashRect.width = this.width;
				this._flashRect.height = this.height;
				this._fill = flixel_util_FlxDestroyUtil.dispose(this._fill);
				this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
				flixel_FlxG.bitmap.removeIfNoUse(oldBuffer);
			}
			this._blitMatrix.identity();
			this._blitMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
			this._blitMatrix.scale(this.scaleX,this.scaleY);
			this._useBlitMatrix = this.scaleX < this.initialZoom || this.scaleY < this.initialZoom;
		}
	}
	,updateBlitMatrix: function() {
		this._blitMatrix.identity();
		this._blitMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
		this._blitMatrix.scale(this.scaleX,this.scaleY);
		this._useBlitMatrix = this.scaleX < this.initialZoom || this.scaleY < this.initialZoom;
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
	}
	,setScrollBoundsRect: function(X,Y,Width,Height,UpdateWorld) {
		if(UpdateWorld == null) {
			UpdateWorld = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		if(UpdateWorld) {
			var _this = flixel_FlxG.worldBounds;
			var X1 = X;
			var Y1 = Y;
			var Width1 = Width;
			var Height1 = Height;
			if(Height1 == null) {
				Height1 = 0;
			}
			if(Width1 == null) {
				Width1 = 0;
			}
			if(Y1 == null) {
				Y1 = 0;
			}
			if(X1 == null) {
				X1 = 0;
			}
			_this.x = X1;
			_this.y = Y1;
			_this.width = Width1;
			_this.height = Height1;
		}
		this.setScrollBounds(X,X + Width,Y,Y + Height);
	}
	,setScrollBounds: function(MinX,MaxX,MinY,MaxY) {
		this.minScrollX = MinX;
		this.maxScrollX = MaxX;
		this.minScrollY = MinY;
		this.maxScrollY = MaxY;
		this.updateScroll();
	}
	,setScale: function(X,Y) {
		this.scaleX = X;
		this.scaleY = Y;
		this.totalScaleX = this.scaleX * flixel_FlxG.scaleMode.scale.x;
		this.totalScaleY = this.scaleY * flixel_FlxG.scaleMode.scale.y;
		if(flixel_FlxG.renderBlit) {
			this._blitMatrix.identity();
			this._blitMatrix.translate(-this.viewOffsetX,-this.viewOffsetY);
			this._blitMatrix.scale(this.scaleX,this.scaleY);
			this._useBlitMatrix = this.scaleX < this.initialZoom || this.scaleY < this.initialZoom;
			if(this._useBlitMatrix) {
				this._flashBitmap.set_scaleX(this.initialZoom * flixel_FlxG.scaleMode.scale.x);
				this._flashBitmap.set_scaleY(this.initialZoom * flixel_FlxG.scaleMode.scale.y);
			} else {
				this._flashBitmap.set_scaleX(this.totalScaleX);
				this._flashBitmap.set_scaleY(this.totalScaleY);
			}
		}
		this.viewOffsetX = 0.5 * this.width * (this.scaleX - this.initialZoom) / this.scaleX;
		this.viewOffsetWidth = this.width - this.viewOffsetX;
		this.viewWidth = this.width - 2 * this.viewOffsetX;
		this.viewOffsetY = 0.5 * this.height * (this.scaleY - this.initialZoom) / this.scaleY;
		this.viewOffsetHeight = this.height - this.viewOffsetY;
		this.viewHeight = this.height - 2 * this.viewOffsetY;
		this.updateScrollRect();
		this.updateInternalSpritePositions();
		flixel_FlxG.cameras.cameraResized.dispatch(this);
	}
	,onResize: function() {
		this.updateFlashOffset();
		this.setScale(this.scaleX,this.scaleY);
	}
	,containsPoint: function(point,width,height) {
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(point.x + width > this.viewOffsetX && point.x < this.viewOffsetWidth && point.y + height > this.viewOffsetY) {
			return point.y < this.viewOffsetHeight;
		} else {
			return false;
		}
	}
	,set_followLerp: function(Value) {
		var Max = 60 / flixel_FlxG.updateFramerate;
		var lowerBound = Value < 0 ? 0 : Value;
		return this.followLerp = Max != null && lowerBound > Max ? Max : lowerBound;
	}
	,set_width: function(Value) {
		if(this.width != Value && Value > 0) {
			this.width = Value;
			this.viewOffsetX = 0.5 * this.width * (this.scaleX - this.initialZoom) / this.scaleX;
			this.viewOffsetWidth = this.width - this.viewOffsetX;
			this.viewWidth = this.width - 2 * this.viewOffsetX;
			this.updateFlashOffset();
			this.updateScrollRect();
			this.updateInternalSpritePositions();
			flixel_FlxG.cameras.cameraResized.dispatch(this);
		}
		return Value;
	}
	,set_height: function(Value) {
		if(this.height != Value && Value > 0) {
			this.height = Value;
			this.viewOffsetY = 0.5 * this.height * (this.scaleY - this.initialZoom) / this.scaleY;
			this.viewOffsetHeight = this.height - this.viewOffsetY;
			this.viewHeight = this.height - 2 * this.viewOffsetY;
			this.updateFlashOffset();
			this.updateScrollRect();
			this.updateInternalSpritePositions();
			flixel_FlxG.cameras.cameraResized.dispatch(this);
		}
		return Value;
	}
	,set_zoom: function(Zoom) {
		this.zoom = Zoom == 0 ? flixel_FlxCamera.defaultZoom : Zoom;
		this.setScale(this.zoom,this.zoom);
		return this.zoom;
	}
	,set_alpha: function(Alpha) {
		var lowerBound = Alpha < 0 ? 0 : Alpha;
		this.alpha = lowerBound > 1 ? 1 : lowerBound;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.set_alpha(Alpha);
		} else {
			this.canvas.set_alpha(Alpha);
		}
		return Alpha;
	}
	,set_angle: function(Angle) {
		this.angle = Angle;
		this.flashSprite.set_rotation(Angle);
		return Angle;
	}
	,set_color: function(Color) {
		this.color = Color;
		var colorTransform;
		if(flixel_FlxG.renderBlit) {
			if(this._flashBitmap == null) {
				return Color;
			}
			colorTransform = this._flashBitmap.get_transform().get_colorTransform();
		} else {
			colorTransform = this.canvas.get_transform().get_colorTransform();
		}
		colorTransform.redMultiplier = (this.color >> 16 & 255) / 255;
		colorTransform.greenMultiplier = (this.color >> 8 & 255) / 255;
		colorTransform.blueMultiplier = (this.color & 255) / 255;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.get_transform().set_colorTransform(colorTransform);
		} else {
			this.canvas.get_transform().set_colorTransform(colorTransform);
		}
		return Color;
	}
	,set_antialiasing: function(Antialiasing) {
		this.antialiasing = Antialiasing;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.smoothing = Antialiasing;
		}
		return Antialiasing;
	}
	,set_x: function(x) {
		this.x = x;
		this.updateFlashSpritePosition();
		return x;
	}
	,set_y: function(y) {
		this.y = y;
		this.updateFlashSpritePosition();
		return y;
	}
	,set_visible: function(visible) {
		if(this.flashSprite != null) {
			this.flashSprite.set_visible(visible);
		}
		return this.visible = visible;
	}
	,calcOffsetX: function() {
		this.viewOffsetX = 0.5 * this.width * (this.scaleX - this.initialZoom) / this.scaleX;
		this.viewOffsetWidth = this.width - this.viewOffsetX;
		this.viewWidth = this.width - 2 * this.viewOffsetX;
	}
	,calcOffsetY: function() {
		this.viewOffsetY = 0.5 * this.height * (this.scaleY - this.initialZoom) / this.scaleY;
		this.viewOffsetHeight = this.height - this.viewOffsetY;
		this.viewHeight = this.height - 2 * this.viewOffsetY;
	}
	,__class__: flixel_FlxCamera
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_antialiasing:"set_antialiasing",set_color:"set_color",set_angle:"set_angle",set_alpha:"set_alpha",set_zoom:"set_zoom",set_height:"set_height",set_width:"set_width",set_followLerp:"set_followLerp",set_y:"set_y",set_x:"set_x"})
});
var flixel_FlxCameraFollowStyle = $hxEnums["flixel.FlxCameraFollowStyle"] = { __ename__ : "flixel.FlxCameraFollowStyle", __constructs__ : ["LOCKON","PLATFORMER","TOPDOWN","TOPDOWN_TIGHT","SCREEN_BY_SCREEN","NO_DEAD_ZONE"]
	,LOCKON: {_hx_index:0,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,PLATFORMER: {_hx_index:1,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,TOPDOWN: {_hx_index:2,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,TOPDOWN_TIGHT: {_hx_index:3,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,SCREEN_BY_SCREEN: {_hx_index:4,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
	,NO_DEAD_ZONE: {_hx_index:5,__enum__:"flixel.FlxCameraFollowStyle",toString:$estr}
};
var flixel_system_FlxVersion = function(Major,Minor,Patch) {
	this.major = Major;
	this.minor = Minor;
	this.patch = Patch;
};
$hxClasses["flixel.system.FlxVersion"] = flixel_system_FlxVersion;
flixel_system_FlxVersion.__name__ = "flixel.system.FlxVersion";
flixel_system_FlxVersion.prototype = {
	major: null
	,minor: null
	,patch: null
	,toString: function() {
		var sha = flixel_system_FlxVersion.sha;
		if(sha != "") {
			sha = "@" + sha.substring(0,7);
		}
		return "HaxeFlixel " + this.major + "." + this.minor + "." + this.patch + sha;
	}
	,__class__: flixel_system_FlxVersion
};
var flixel_system_frontEnds_BitmapFrontEnd = function() {
	this._lastUniqueKeyIndex = 0;
	this.reset();
};
$hxClasses["flixel.system.frontEnds.BitmapFrontEnd"] = flixel_system_frontEnds_BitmapFrontEnd;
flixel_system_frontEnds_BitmapFrontEnd.__name__ = "flixel.system.frontEnds.BitmapFrontEnd";
flixel_system_frontEnds_BitmapFrontEnd.prototype = {
	_cache: null
	,_whitePixel: null
	,_lastUniqueKeyIndex: null
	,onAssetsReload: function(_) {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && (obj.assetsClass != null || obj.assetsKey != null)) {
				obj.onAssetsReload();
			}
		}
	}
	,onContext: function() {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && obj.isDumped) {
				obj.onContext();
			}
		}
	}
	,dumpCache: function() {
	}
	,undumpCache: function() {
	}
	,checkCache: function(Key) {
		return this._cache.h[Key] != null;
	}
	,create: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		return flixel_graphics_FlxGraphic.fromRectangle(Width,Height,Color,Unique,Key);
	}
	,add: function(Graphic,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(((Graphic) instanceof flixel_graphics_FlxGraphic)) {
			return flixel_graphics_FlxGraphic.fromGraphic(Graphic,Unique,Key);
		} else if(((Graphic) instanceof openfl_display_BitmapData)) {
			return flixel_graphics_FlxGraphic.fromBitmapData(Graphic,Unique,Key);
		}
		return flixel_graphics_FlxGraphic.fromAssetKey(Std.string(Graphic),Unique,Key);
	}
	,addGraphic: function(graphic) {
		this._cache.h[graphic.key] = graphic;
		return graphic;
	}
	,get: function(key) {
		return this._cache.h[key];
	}
	,findKeyForBitmap: function(bmd) {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && obj.bitmap == bmd) {
				return key1;
			}
		}
		return null;
	}
	,getKeyForClass: function(source) {
		return source.__name__;
	}
	,generateKey: function(systemKey,userKey,unique) {
		if(unique == null) {
			unique = false;
		}
		var key = userKey;
		if(key == null) {
			key = systemKey;
		}
		if(unique || key == null) {
			key = this.getUniqueKey(key);
		}
		return key;
	}
	,getUniqueKey: function(baseKey) {
		if(baseKey == null) {
			baseKey = "pixels";
		}
		if(this._cache.h[baseKey] == null) {
			return baseKey;
		}
		var i = this._lastUniqueKeyIndex;
		var uniqueKey;
		while(true) {
			++i;
			uniqueKey = baseKey + i;
			if(!(this._cache.h[uniqueKey] != null)) {
				break;
			}
		}
		this._lastUniqueKeyIndex = i;
		return uniqueKey;
	}
	,getKeyWithSpacesAndBorders: function(baseKey,frameSize,frameSpacing,frameBorder,region) {
		var result = baseKey;
		if(region != null) {
			result += "_Region:" + region.x + "_" + region.y + "_" + region.width + "_" + region.height;
		}
		if(frameSize != null) {
			result += "_FrameSize:" + frameSize.x + "_" + frameSize.y;
		}
		if(frameSpacing != null) {
			result += "_Spaces:" + frameSpacing.x + "_" + frameSpacing.y;
		}
		if(frameBorder != null) {
			result += "_Border:" + frameBorder.x + "_" + frameBorder.y;
		}
		return result;
	}
	,remove: function(graphic) {
		if(graphic != null) {
			var key = graphic.key;
			if(key != null) {
				openfl_utils_Assets.cache.removeBitmapData(key);
				var _this = this._cache;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
			}
			graphic.destroy();
		}
	}
	,removeByKey: function(key) {
		if(key != null) {
			var obj = this._cache.h[key];
			if(key != null) {
				openfl_utils_Assets.cache.removeBitmapData(key);
				var _this = this._cache;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
			}
			if(obj != null) {
				obj.destroy();
			}
		}
	}
	,removeIfNoUse: function(graphic) {
		if(graphic != null && graphic.get_useCount() == 0 && !graphic.persist) {
			this.remove(graphic);
		}
	}
	,clearCache: function() {
		if(this._cache == null) {
			this._cache = new haxe_ds_StringMap();
			return;
		}
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && !obj.persist && obj.get_useCount() <= 0) {
				if(key1 != null) {
					openfl_utils_Assets.cache.removeBitmapData(key1);
					var _this = this._cache;
					if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
						delete(_this.h[key1]);
					}
				}
				obj.destroy();
			}
		}
	}
	,removeKey: function(key) {
		if(key != null) {
			openfl_utils_Assets.cache.removeBitmapData(key);
			var _this = this._cache;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
	}
	,reset: function() {
		if(this._cache == null) {
			this._cache = new haxe_ds_StringMap();
			return;
		}
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(key1 != null) {
				openfl_utils_Assets.cache.removeBitmapData(key1);
				var _this = this._cache;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			if(obj != null) {
				obj.destroy();
			}
		}
	}
	,clearUnused: function() {
		var key = haxe_ds_StringMap.keysIterator(this._cache.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var obj = this._cache.h[key1];
			if(obj != null && obj.get_useCount() <= 0 && !obj.persist && obj.get_destroyOnNoUse()) {
				this.removeByKey(key1);
			}
		}
	}
	,get_maxTextureSize: function() {
		return lime_graphics_opengl_GL.context.getParameter(3379);
	}
	,get_whitePixel: function() {
		if(this._whitePixel == null) {
			var bd = new openfl_display_BitmapData(10,10,true,-1);
			var graphic = flixel_FlxG.bitmap.add(bd,true,"whitePixels");
			graphic.persist = true;
			this._whitePixel = graphic.get_imageFrame().get_frame();
		}
		return this._whitePixel;
	}
	,__class__: flixel_system_frontEnds_BitmapFrontEnd
	,__properties__: {get_whitePixel:"get_whitePixel",get_maxTextureSize:"get_maxTextureSize"}
};
var flixel_system_frontEnds_BitmapLogFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.BitmapLogFrontEnd"] = flixel_system_frontEnds_BitmapLogFrontEnd;
flixel_system_frontEnds_BitmapLogFrontEnd.__name__ = "flixel.system.frontEnds.BitmapLogFrontEnd";
flixel_system_frontEnds_BitmapLogFrontEnd.prototype = {
	add: function(Data,Name) {
		if(Name == null) {
			Name = "";
		}
	}
	,clear: function() {
	}
	,clearAt: function(Index) {
		if(Index == null) {
			Index = -1;
		}
	}
	,viewCache: function() {
	}
	,__class__: flixel_system_frontEnds_BitmapLogFrontEnd
};
var flixel_system_frontEnds_CameraFrontEnd = function() {
	this._cameraRect = new openfl_geom_Rectangle();
	this.useBufferLocking = false;
	this.cameraResized = new flixel_util__$FlxSignal_FlxSignal1();
	this.cameraRemoved = new flixel_util__$FlxSignal_FlxSignal1();
	this.cameraAdded = new flixel_util__$FlxSignal_FlxSignal1();
	this.defaults = [];
	this.list = [];
	flixel_FlxCamera._defaultCameras = this.defaults;
};
$hxClasses["flixel.system.frontEnds.CameraFrontEnd"] = flixel_system_frontEnds_CameraFrontEnd;
flixel_system_frontEnds_CameraFrontEnd.__name__ = "flixel.system.frontEnds.CameraFrontEnd";
flixel_system_frontEnds_CameraFrontEnd.prototype = {
	list: null
	,defaults: null
	,cameraAdded: null
	,cameraRemoved: null
	,cameraResized: null
	,useBufferLocking: null
	,_cameraRect: null
	,add: function(NewCamera,DefaultDrawTarget) {
		if(DefaultDrawTarget == null) {
			DefaultDrawTarget = true;
		}
		flixel_FlxG.game.addChildAt(NewCamera.flashSprite,flixel_FlxG.game.getChildIndex(flixel_FlxG.game._inputContainer));
		this.list.push(NewCamera);
		if(DefaultDrawTarget) {
			this.defaults.push(NewCamera);
		}
		NewCamera.ID = this.list.length - 1;
		this.cameraAdded.dispatch(NewCamera);
		return NewCamera;
	}
	,remove: function(Camera,Destroy) {
		if(Destroy == null) {
			Destroy = true;
		}
		var index = this.list.indexOf(Camera);
		if(Camera != null && index != -1) {
			flixel_FlxG.game.removeChild(Camera.flashSprite);
			this.list.splice(index,1);
			HxOverrides.remove(this.defaults,Camera);
		} else {
			return;
		}
		if(flixel_FlxG.renderTile) {
			var _g = 0;
			var _g1 = this.list.length;
			while(_g < _g1) {
				var i = _g++;
				this.list[i].ID = i;
			}
		}
		if(Destroy) {
			Camera.destroy();
		}
		this.cameraRemoved.dispatch(Camera);
	}
	,setDefaultDrawTarget: function(camera,value) {
		if(this.list.indexOf(camera) == -1) {
			return;
		}
		var index = this.defaults.indexOf(camera);
		if(value && index == -1) {
			this.defaults.push(camera);
		} else if(!value) {
			this.defaults.splice(index,1);
		}
	}
	,reset: function(NewCamera) {
		while(this.list.length > 0) this.remove(this.list[0]);
		if(NewCamera == null) {
			NewCamera = new flixel_FlxCamera(0,0,flixel_FlxG.width,flixel_FlxG.height);
		}
		flixel_FlxG.camera = this.add(NewCamera);
		NewCamera.ID = 0;
		flixel_FlxCamera._defaultCameras = this.defaults;
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -1;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.flash(Color,Duration,OnComplete,Force);
		}
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(FadeIn == null) {
			FadeIn = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -16777216;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.fade(Color,Duration,FadeIn,OnComplete,Force);
		}
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Axes) {
		if(Force == null) {
			Force = true;
		}
		if(Duration == null) {
			Duration = 0.5;
		}
		if(Intensity == null) {
			Intensity = 0.05;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.shake(Intensity,Duration,OnComplete,Force,Axes);
		}
	}
	,lock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			if(flixel_FlxG.renderBlit) {
				camera.checkResize();
				if(this.useBufferLocking) {
					camera.buffer.lock();
				}
			}
			if(flixel_FlxG.renderTile) {
				camera.clearDrawStack();
				camera.canvas.get_graphics().clear();
			}
			if(flixel_FlxG.renderBlit) {
				camera.fill(camera.bgColor,camera.useBgAlphaBlending);
				camera.screen.dirty = true;
			} else {
				camera.fill(camera.bgColor & 16777215,camera.useBgAlphaBlending,(camera.bgColor >> 24 & 255) / 255);
			}
		}
	}
	,render: function() {
		if(flixel_FlxG.renderTile) {
			var _g = 0;
			var _g1 = this.list;
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				if(camera != null && camera.exists && camera.visible) {
					camera.render();
				}
			}
		}
	}
	,unlock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			camera.drawFX();
			if(flixel_FlxG.renderBlit) {
				if(this.useBufferLocking) {
					camera.buffer.unlock();
				}
				camera.screen.dirty = true;
			}
		}
	}
	,update: function(elapsed) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera != null && camera.exists && camera.active) {
				camera.update(elapsed);
			}
		}
	}
	,resize: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.onResize();
		}
	}
	,get_bgColor: function() {
		if(flixel_FlxG.camera == null) {
			return -16777216;
		} else {
			return flixel_FlxG.camera.bgColor;
		}
	}
	,set_bgColor: function(Color) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.bgColor = Color;
		}
		return Color;
	}
	,__class__: flixel_system_frontEnds_CameraFrontEnd
	,__properties__: {set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"}
};
var flixel_system_frontEnds_ConsoleFrontEnd = function() {
	this.stepAfterCommand = true;
	this.autoPause = true;
};
$hxClasses["flixel.system.frontEnds.ConsoleFrontEnd"] = flixel_system_frontEnds_ConsoleFrontEnd;
flixel_system_frontEnds_ConsoleFrontEnd.__name__ = "flixel.system.frontEnds.ConsoleFrontEnd";
flixel_system_frontEnds_ConsoleFrontEnd.prototype = {
	autoPause: null
	,stepAfterCommand: null
	,registerFunction: function(FunctionAlias,Function1) {
	}
	,registerObject: function(ObjectAlias,AnyObject) {
	}
	,registerClass: function(cl) {
	}
	,registerEnum: function(e) {
	}
	,__class__: flixel_system_frontEnds_ConsoleFrontEnd
};
var flixel_system_frontEnds_DebuggerFrontEnd = function() {
	this.visible = false;
	this.visibilityChanged = new flixel_util__$FlxSignal_FlxSignal0();
	this.drawDebugChanged = new flixel_util__$FlxSignal_FlxSignal0();
	this.drawDebug = false;
	this.toggleKeys = [113,192,220];
	this.precision = 3;
};
$hxClasses["flixel.system.frontEnds.DebuggerFrontEnd"] = flixel_system_frontEnds_DebuggerFrontEnd;
flixel_system_frontEnds_DebuggerFrontEnd.__name__ = "flixel.system.frontEnds.DebuggerFrontEnd";
flixel_system_frontEnds_DebuggerFrontEnd.prototype = {
	precision: null
	,toggleKeys: null
	,drawDebug: null
	,drawDebugChanged: null
	,visibilityChanged: null
	,visible: null
	,setLayout: function(Layout) {
	}
	,resetLayout: function() {
	}
	,addButton: function(Alignment,Icon,UpHandler,ToggleMode,UpdateLayout) {
		if(UpdateLayout == null) {
			UpdateLayout = true;
		}
		if(ToggleMode == null) {
			ToggleMode = false;
		}
		return null;
	}
	,track: function(ObjectOrClass,WindowTitle) {
		return null;
	}
	,addTrackerProfile: function(Profile) {
	}
	,removeButton: function(Button,UpdateLayout) {
		if(UpdateLayout == null) {
			UpdateLayout = true;
		}
	}
	,set_drawDebug: function(Value) {
		if(this.drawDebug == Value) {
			return this.drawDebug;
		}
		this.drawDebug = Value;
		return this.drawDebug;
	}
	,set_visible: function(Value) {
		if(this.visible == Value) {
			return this.visible;
		}
		this.visible = Value;
		return this.visible;
	}
	,__class__: flixel_system_frontEnds_DebuggerFrontEnd
	,__properties__: {set_visible:"set_visible",set_drawDebug:"set_drawDebug"}
};
var flixel_system_frontEnds_HTML5FrontEnd = function() {
	this.browser = this.getBrowser();
	this.platform = this.getPlatform();
	this.onMobile = this.getOnMobile();
};
$hxClasses["flixel.system.frontEnds.HTML5FrontEnd"] = flixel_system_frontEnds_HTML5FrontEnd;
flixel_system_frontEnds_HTML5FrontEnd.__name__ = "flixel.system.frontEnds.HTML5FrontEnd";
flixel_system_frontEnds_HTML5FrontEnd.prototype = {
	browser: null
	,platform: null
	,onMobile: null
	,browserPosition: null
	,getBrowser: function() {
		if(this.userAgentContains(" OPR/")) {
			return flixel_system_frontEnds_FlxBrowser.OPERA;
		} else if(this.userAgentContains("chrome",true)) {
			return flixel_system_frontEnds_FlxBrowser.CHROME;
		} else if($global.navigator.appName == "Netscape") {
			return flixel_system_frontEnds_FlxBrowser.FIREFOX;
		} else if(document.documentMode) {
			return flixel_system_frontEnds_FlxBrowser.INTERNET_EXPLORER;
		} else if(Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor") > 0) {
			return flixel_system_frontEnds_FlxBrowser.SAFARI;
		}
		return flixel_system_frontEnds_FlxBrowser.UNKNOWN;
	}
	,getPlatform: function() {
		if(this.userAgentContains("Win")) {
			return flixel_system_frontEnds_FlxPlatform.WINDOWS;
		} else if(this.userAgentContains("IEMobile")) {
			return flixel_system_frontEnds_FlxPlatform.WINDOWS_PHONE;
		} else if(this.userAgentContains("Android")) {
			return flixel_system_frontEnds_FlxPlatform.ANDROID;
		} else if(this.userAgentContains("Linux")) {
			return flixel_system_frontEnds_FlxPlatform.LINUX;
		} else if(this.userAgentContains("BlackBerry")) {
			return flixel_system_frontEnds_FlxPlatform.BLACKBERRY;
		} else if(this.userAgentContains("iPhone")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPHONE);
		} else if(this.userAgentContains("iPad")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPAD);
		} else if(this.userAgentContains("iPod")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPOD);
		} else if(this.userAgentContains("Mac")) {
			return flixel_system_frontEnds_FlxPlatform.MAC;
		} else {
			return flixel_system_frontEnds_FlxPlatform.UNKNOWN;
		}
	}
	,getOnMobile: function() {
		var _g = this.platform;
		switch(_g._hx_index) {
		case 3:case 4:case 5:
			return true;
		case 6:
			var _g1 = _g.device;
			return true;
		default:
			return false;
		}
	}
	,userAgentContains: function(substring,toLowerCase) {
		if(toLowerCase == null) {
			toLowerCase = false;
		}
		var userAgent = $global.navigator.userAgent;
		if(toLowerCase) {
			userAgent = userAgent.toLowerCase();
		}
		return userAgent.indexOf(substring) != -1;
	}
	,get_browserPosition: function() {
		if(this.browserPosition == null) {
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			this.browserPosition = point;
		}
		this.browserPosition.set(window.screenX,window.screenY);
		return this.browserPosition;
	}
	,get_browserWidth: function() {
		return window.innerWidth;
	}
	,get_browserHeight: function() {
		return window.innerHeight;
	}
	,__class__: flixel_system_frontEnds_HTML5FrontEnd
	,__properties__: {get_browserPosition:"get_browserPosition",get_browserHeight:"get_browserHeight",get_browserWidth:"get_browserWidth"}
};
var flixel_system_frontEnds_InputFrontEnd = function() {
	this.resetOnStateSwitch = true;
	this.list = [];
};
$hxClasses["flixel.system.frontEnds.InputFrontEnd"] = flixel_system_frontEnds_InputFrontEnd;
flixel_system_frontEnds_InputFrontEnd.__name__ = "flixel.system.frontEnds.InputFrontEnd";
flixel_system_frontEnds_InputFrontEnd.prototype = {
	add_flixel_input_actions_FlxActionManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_gamepad_FlxGamepadManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_touch_FlxTouchManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_keyboard_FlxKeyboard: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,replace_flixel_input_mouse_FlxMouse: function(Old,New) {
		var i = 0;
		var success = false;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input == Old) {
				this.list[i] = New;
				success = true;
				break;
			}
			++i;
		}
		if(success) {
			return New;
		}
		return null;
	}
	,add_flixel_input_mouse_FlxMouse: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,list: null
	,resetOnStateSwitch: null
	,reset: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.reset();
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.update();
		}
	}
	,onFocus: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocus();
		}
	}
	,onFocusLost: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocusLost();
		}
	}
	,onStateSwitch: function() {
		if(this.resetOnStateSwitch) {
			this.reset();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input = flixel_util_FlxDestroyUtil.destroy(input);
		}
	}
	,__class__: flixel_system_frontEnds_InputFrontEnd
};
var flixel_system_frontEnds_LogFrontEnd = function() {
	this.redirectTraces = false;
	this._standardTraceFunction = haxe_Log.trace;
};
$hxClasses["flixel.system.frontEnds.LogFrontEnd"] = flixel_system_frontEnds_LogFrontEnd;
flixel_system_frontEnds_LogFrontEnd.__name__ = "flixel.system.frontEnds.LogFrontEnd";
flixel_system_frontEnds_LogFrontEnd.prototype = {
	redirectTraces: null
	,_standardTraceFunction: null
	,add: function(Data) {
	}
	,warn: function(Data) {
	}
	,error: function(Data) {
	}
	,notice: function(Data) {
	}
	,advanced: function(Data,Style,FireOnce) {
		if(FireOnce == null) {
			FireOnce = false;
		}
	}
	,clear: function() {
	}
	,set_redirectTraces: function(Redirect) {
		haxe_Log.trace = Redirect ? $bind(this,this.processTraceData) : this._standardTraceFunction;
		return this.redirectTraces = Redirect;
	}
	,processTraceData: function(Data,Info) {
		var paramArray = [Data];
		if(Info.customParams != null) {
			var _g = 0;
			var _g1 = Info.customParams;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				paramArray.push(i);
			}
		}
		this.advanced(paramArray,flixel_system_debug_log_LogStyle.NORMAL);
	}
	,__class__: flixel_system_frontEnds_LogFrontEnd
	,__properties__: {set_redirectTraces:"set_redirectTraces"}
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__toStr = null;
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var flixel_math_FlxRandom = function(InitialSeed) {
	this.internalSeed = 1;
	this._floatNormalRho = 0;
	this._twoPI = Math.PI * 2;
	this._floatNormalRand2 = 0;
	this._floatNormalRand1 = 0;
	this._hasFloatNormalSpare = false;
	this.initialSeed = 1;
	if(InitialSeed != null) {
		var lowerBound = InitialSeed < 1 ? 1 : InitialSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	} else {
		var Value = Math.random() * 2147483647 | 0;
		var lowerBound = Value < 1 ? 1 : Value;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
};
$hxClasses["flixel.math.FlxRandom"] = flixel_math_FlxRandom;
flixel_math_FlxRandom.__name__ = "flixel.math.FlxRandom";
flixel_math_FlxRandom.rangeBound = function(Value) {
	var lowerBound = Value < 1 ? 1 : Value;
	return (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
};
flixel_math_FlxRandom.prototype = {
	getObject_flixel_group_FlxTypedGroup_T: function(Objects,WeightsArray,StartIndex,EndIndex) {
		if(StartIndex == null) {
			StartIndex = 0;
		}
		var selected = null;
		if(Objects.length != 0) {
			if(WeightsArray == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = Objects.length;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(1);
				}
				WeightsArray = _g;
			}
			if(EndIndex == null) {
				EndIndex = Objects.length - 1;
			}
			var Max = Objects.length - 1;
			var lowerBound = StartIndex < 0 ? 0 : StartIndex;
			StartIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			var Max = Objects.length - 1;
			var lowerBound = EndIndex < 0 ? 0 : EndIndex;
			EndIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			if(EndIndex < StartIndex) {
				StartIndex += EndIndex;
				EndIndex = StartIndex - EndIndex;
				StartIndex -= EndIndex;
			}
			if(EndIndex > WeightsArray.length - 1) {
				EndIndex = WeightsArray.length - 1;
			}
			var _g = [];
			var _g1 = StartIndex;
			var _g2 = EndIndex + 1;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(WeightsArray[i]);
			}
			flixel_math_FlxRandom._arrayFloatHelper = _g;
			selected = Objects[StartIndex + this.weightedPick(flixel_math_FlxRandom._arrayFloatHelper)];
		}
		return selected;
	}
	,getObject_flixel_system_FlxSound: function(Objects,WeightsArray,StartIndex,EndIndex) {
		if(StartIndex == null) {
			StartIndex = 0;
		}
		var selected = null;
		if(Objects.length != 0) {
			if(WeightsArray == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = Objects.length;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(1);
				}
				WeightsArray = _g;
			}
			if(EndIndex == null) {
				EndIndex = Objects.length - 1;
			}
			var Max = Objects.length - 1;
			var lowerBound = StartIndex < 0 ? 0 : StartIndex;
			StartIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			var Max = Objects.length - 1;
			var lowerBound = EndIndex < 0 ? 0 : EndIndex;
			EndIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			if(EndIndex < StartIndex) {
				StartIndex += EndIndex;
				EndIndex = StartIndex - EndIndex;
				StartIndex -= EndIndex;
			}
			if(EndIndex > WeightsArray.length - 1) {
				EndIndex = WeightsArray.length - 1;
			}
			var _g = [];
			var _g1 = StartIndex;
			var _g2 = EndIndex + 1;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(WeightsArray[i]);
			}
			flixel_math_FlxRandom._arrayFloatHelper = _g;
			selected = Objects[StartIndex + this.weightedPick(flixel_math_FlxRandom._arrayFloatHelper)];
		}
		return selected;
	}
	,getObject_Array_String: function(Objects,WeightsArray,StartIndex,EndIndex) {
		if(StartIndex == null) {
			StartIndex = 0;
		}
		var selected = null;
		if(Objects.length != 0) {
			if(WeightsArray == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = Objects.length;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(1);
				}
				WeightsArray = _g;
			}
			if(EndIndex == null) {
				EndIndex = Objects.length - 1;
			}
			var Max = Objects.length - 1;
			var lowerBound = StartIndex < 0 ? 0 : StartIndex;
			StartIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			var Max = Objects.length - 1;
			var lowerBound = EndIndex < 0 ? 0 : EndIndex;
			EndIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			if(EndIndex < StartIndex) {
				StartIndex += EndIndex;
				EndIndex = StartIndex - EndIndex;
				StartIndex -= EndIndex;
			}
			if(EndIndex > WeightsArray.length - 1) {
				EndIndex = WeightsArray.length - 1;
			}
			var _g = [];
			var _g1 = StartIndex;
			var _g2 = EndIndex + 1;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(WeightsArray[i]);
			}
			flixel_math_FlxRandom._arrayFloatHelper = _g;
			selected = Objects[StartIndex + this.weightedPick(flixel_math_FlxRandom._arrayFloatHelper)];
		}
		return selected;
	}
	,initialSeed: null
	,resetInitialSeed: function() {
		var Value = Math.random() * 2147483647 | 0;
		var lowerBound = Value < 1 ? 1 : Value;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		return this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
	,int: function(Min,Max,Excludes) {
		if(Max == null) {
			Max = 2147483647;
		}
		if(Min == null) {
			Min = 0;
		}
		if(Min == 0 && Max == 2147483647 && Excludes == null) {
			return (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) | 0;
		} else if(Min == Max) {
			return Min;
		} else {
			if(Min > Max) {
				Min += Max;
				Max = Min - Max;
				Min -= Max;
			}
			if(Excludes == null) {
				return Math.floor(Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min + 1));
			} else {
				var result = 0;
				while(true) {
					result = Math.floor(Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min + 1));
					if(!(Excludes.indexOf(result) >= 0)) {
						break;
					}
				}
				return result;
			}
		}
	}
	,float: function(Min,Max,Excludes) {
		if(Max == null) {
			Max = 1;
		}
		if(Min == null) {
			Min = 0;
		}
		var result = 0;
		if(Min == 0 && Max == 1 && Excludes == null) {
			return (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647;
		} else if(Min == Max) {
			result = Min;
		} else {
			if(Min > Max) {
				Min += Max;
				Max = Min - Max;
				Min -= Max;
			}
			if(Excludes == null) {
				result = Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min);
			} else {
				while(true) {
					result = Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min);
					if(!(Excludes.indexOf(result) >= 0)) {
						break;
					}
				}
			}
		}
		return result;
	}
	,_hasFloatNormalSpare: null
	,_floatNormalRand1: null
	,_floatNormalRand2: null
	,_twoPI: null
	,_floatNormalRho: null
	,floatNormal: function(Mean,StdDev) {
		if(StdDev == null) {
			StdDev = 1;
		}
		if(Mean == null) {
			Mean = 0;
		}
		if(this._hasFloatNormalSpare) {
			this._hasFloatNormalSpare = false;
			var scale = StdDev * this._floatNormalRho;
			return Mean + scale * this._floatNormalRand2;
		}
		this._hasFloatNormalSpare = true;
		var theta = this._twoPI * ((this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647);
		this._floatNormalRho = Math.sqrt(-2 * Math.log(1 - (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647));
		var scale = StdDev * this._floatNormalRho;
		this._floatNormalRand1 = Math.cos(theta);
		this._floatNormalRand2 = Math.sin(theta);
		return Mean + scale * this._floatNormalRand1;
	}
	,bool: function(Chance) {
		if(Chance == null) {
			Chance = 50;
		}
		return this.float(0,100) < Chance;
	}
	,sign: function(Chance) {
		if(Chance == null) {
			Chance = 50;
		}
		var Chance1 = Chance;
		if(Chance1 == null) {
			Chance1 = 50;
		}
		if(this.float(0,100) < Chance1) {
			return 1;
		} else {
			return -1;
		}
	}
	,weightedPick: function(WeightsArray) {
		var totalWeight = 0;
		var pick = 0;
		var _g = 0;
		while(_g < WeightsArray.length) {
			var i = WeightsArray[_g];
			++_g;
			totalWeight += i;
		}
		totalWeight = this.float(0,totalWeight);
		var _g = 0;
		var _g1 = WeightsArray.length;
		while(_g < _g1) {
			var i = _g++;
			if(totalWeight < WeightsArray[i]) {
				pick = i;
				break;
			}
			totalWeight -= WeightsArray[i];
		}
		return pick;
	}
	,color: function(Min,Max,Alpha,GreyScale) {
		if(GreyScale == null) {
			GreyScale = false;
		}
		var red;
		var green;
		var blue;
		var alpha;
		if(Min == null && Max == null) {
			red = this.int(0,255);
			green = this.int(0,255);
			blue = this.int(0,255);
			alpha = Alpha == null ? this.int(0,255) : Alpha;
		} else if(Max == null) {
			red = this.int(Min >> 16 & 255,255);
			green = GreyScale ? red : this.int(Min >> 8 & 255,255);
			blue = GreyScale ? red : this.int(Min & 255,255);
			alpha = Alpha == null ? this.int(Min >> 24 & 255,255) : Alpha;
		} else if(Min == null) {
			red = this.int(0,Max >> 16 & 255);
			green = GreyScale ? red : this.int(0,Max >> 8 & 255);
			blue = GreyScale ? red : this.int(0,Max & 255);
			alpha = Alpha == null ? this.int(0,Max >> 24 & 255) : Alpha;
		} else {
			red = this.int(Min >> 16 & 255,Max >> 16 & 255);
			green = GreyScale ? red : this.int(Min >> 8 & 255,Max >> 8 & 255);
			blue = GreyScale ? red : this.int(Min & 255,Max & 255);
			alpha = Alpha == null ? this.int(Min >> 24 & 255,Max >> 24 & 255) : Alpha;
		}
		var Alpha = alpha;
		if(Alpha == null) {
			Alpha = 255;
		}
		var color = flixel_util_FlxColor._new();
		var Alpha1 = Alpha;
		if(Alpha1 == null) {
			Alpha1 = 255;
		}
		color &= -16711681;
		color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
		color &= -65281;
		color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
		color &= -256;
		color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
		color &= 16777215;
		color |= (Alpha1 > 255 ? 255 : Alpha1 < 0 ? 0 : Alpha1) << 24;
		return color;
	}
	,generate: function() {
		return this.internalSeed = this.internalSeed * 48271.0 % 2147483647;
	}
	,internalSeed: null
	,set_initialSeed: function(NewSeed) {
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		return this.initialSeed = (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
	,get_currentSeed: function() {
		return this.internalSeed | 0;
	}
	,set_currentSeed: function(NewSeed) {
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		return (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
	,__class__: flixel_math_FlxRandom
	,__properties__: {set_currentSeed:"set_currentSeed",get_currentSeed:"get_currentSeed",set_initialSeed:"set_initialSeed"}
};
var flixel_util_FlxSave = function() {
	this._closeRequested = false;
};
$hxClasses["flixel.util.FlxSave"] = flixel_util_FlxSave;
flixel_util_FlxSave.__name__ = "flixel.util.FlxSave";
flixel_util_FlxSave.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_FlxSave.prototype = {
	data: null
	,name: null
	,path: null
	,_sharedObject: null
	,_onComplete: null
	,_closeRequested: null
	,destroy: function() {
		this._sharedObject = null;
		this.name = null;
		this.path = null;
		this.data = null;
		this._onComplete = null;
		this._closeRequested = false;
	}
	,bind: function(Name,Path) {
		this.destroy();
		this.name = Name;
		this.path = Path;
		try {
			this._sharedObject = openfl_net_SharedObject.getLocal(this.name,this.path);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(((haxe_Exception.caught(_g).unwrap()) instanceof openfl_errors_Error)) {
				this.destroy();
				return false;
			} else {
				throw _g;
			}
		}
		this.data = this._sharedObject.data;
		return true;
	}
	,close: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) {
			MinFileSize = 0;
		}
		this._closeRequested = true;
		return this.flush(MinFileSize,OnComplete);
	}
	,flush: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) {
			MinFileSize = 0;
		}
		if(!this.checkBinding()) {
			return false;
		}
		this._onComplete = OnComplete;
		var result = null;
		try {
			result = this._sharedObject.flush();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(((haxe_Exception.caught(_g).unwrap()) instanceof openfl_errors_Error)) {
				return this.onDone(flixel_util_FlxSaveStatus.ERROR);
			} else {
				throw _g;
			}
		}
		return this.onDone(result == 0 ? flixel_util_FlxSaveStatus.SUCCESS : flixel_util_FlxSaveStatus.PENDING);
	}
	,erase: function() {
		if(!this.checkBinding()) {
			return false;
		}
		this._sharedObject.clear();
		this.data = { };
		return true;
	}
	,onDone: function(Result) {
		switch(Result._hx_index) {
		case 1:
			break;
		case 2:
			break;
		default:
		}
		if(this._onComplete != null) {
			this._onComplete(Result == flixel_util_FlxSaveStatus.SUCCESS);
		}
		if(this._closeRequested) {
			this.destroy();
		}
		return Result == flixel_util_FlxSaveStatus.SUCCESS;
	}
	,checkBinding: function() {
		if(this._sharedObject == null) {
			return false;
		}
		return true;
	}
	,__class__: flixel_util_FlxSave
};
var flixel_system_scaleModes_BaseScaleMode = function() {
	this.verticalAlign = flixel_util_FlxVerticalAlign.CENTER;
	this.horizontalAlign = flixel_util_FlxHorizontalAlign.CENTER;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.deviceSize = point;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.gameSize = point;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.scale = point;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.offset = point;
};
$hxClasses["flixel.system.scaleModes.BaseScaleMode"] = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_BaseScaleMode.__name__ = "flixel.system.scaleModes.BaseScaleMode";
flixel_system_scaleModes_BaseScaleMode.prototype = {
	deviceSize: null
	,gameSize: null
	,scale: null
	,offset: null
	,horizontalAlign: null
	,verticalAlign: null
	,onMeasure: function(Width,Height) {
		flixel_FlxG.width = flixel_FlxG.initialWidth;
		flixel_FlxG.height = flixel_FlxG.initialHeight;
		this.updateGameSize(Width,Height);
		this.updateDeviceSize(Width,Height);
		this.updateScaleOffset();
		this.updateGamePosition();
	}
	,updateGameSize: function(Width,Height) {
		this.gameSize.set(Width,Height);
	}
	,updateDeviceSize: function(Width,Height) {
		this.deviceSize.set(Width,Height);
	}
	,updateScaleOffset: function() {
		this.scale.set_x(this.gameSize.x / (flixel_FlxG.width * flixel_FlxG.initialZoom));
		this.scale.set_y(this.gameSize.y / (flixel_FlxG.height * flixel_FlxG.initialZoom));
		this.updateOffsetX();
		this.updateOffsetY();
	}
	,updateOffsetX: function() {
		var tmp;
		switch(this.horizontalAlign._hx_index) {
		case 0:
			tmp = 0;
			break;
		case 1:
			tmp = Math.ceil((this.deviceSize.x - this.gameSize.x) * 0.5);
			break;
		case 2:
			tmp = this.deviceSize.x - this.gameSize.x;
			break;
		}
		this.offset.set_x(tmp);
	}
	,updateOffsetY: function() {
		var tmp;
		switch(this.verticalAlign._hx_index) {
		case 0:
			tmp = 0;
			break;
		case 1:
			tmp = Math.ceil((this.deviceSize.y - this.gameSize.y) * 0.5);
			break;
		case 2:
			tmp = this.deviceSize.y - this.gameSize.y;
			break;
		}
		this.offset.set_y(tmp);
	}
	,updateGamePosition: function() {
		if(flixel_FlxG.game == null) {
			return;
		}
		flixel_FlxG.game.set_x(this.offset.x);
		flixel_FlxG.game.set_y(this.offset.y);
	}
	,set_horizontalAlign: function(value) {
		this.horizontalAlign = value;
		if(this.offset != null) {
			this.updateOffsetX();
			this.updateGamePosition();
		}
		return value;
	}
	,set_verticalAlign: function(value) {
		this.verticalAlign = value;
		if(this.offset != null) {
			this.updateOffsetY();
			this.updateGamePosition();
		}
		return value;
	}
	,__class__: flixel_system_scaleModes_BaseScaleMode
	,__properties__: {set_verticalAlign:"set_verticalAlign",set_horizontalAlign:"set_horizontalAlign"}
};
var flixel_system_scaleModes_RatioScaleMode = function(fillScreen) {
	if(fillScreen == null) {
		fillScreen = false;
	}
	flixel_system_scaleModes_BaseScaleMode.call(this);
	this.fillScreen = fillScreen;
};
$hxClasses["flixel.system.scaleModes.RatioScaleMode"] = flixel_system_scaleModes_RatioScaleMode;
flixel_system_scaleModes_RatioScaleMode.__name__ = "flixel.system.scaleModes.RatioScaleMode";
flixel_system_scaleModes_RatioScaleMode.__super__ = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_RatioScaleMode.prototype = $extend(flixel_system_scaleModes_BaseScaleMode.prototype,{
	fillScreen: null
	,updateGameSize: function(Width,Height) {
		var ratio = flixel_FlxG.width / flixel_FlxG.height;
		var realRatio = Width / Height;
		var scaleY = realRatio < ratio;
		if(this.fillScreen) {
			scaleY = !scaleY;
		}
		if(scaleY) {
			this.gameSize.set_x(Width);
			this.gameSize.set_y(Math.floor(this.gameSize.x / ratio));
		} else {
			this.gameSize.set_y(Height);
			this.gameSize.set_x(Math.floor(this.gameSize.y * ratio));
		}
	}
	,__class__: flixel_system_scaleModes_RatioScaleMode
});
var flixel_system_frontEnds_SignalFrontEnd = function() {
	this.focusLost = new flixel_util__$FlxSignal_FlxSignal0();
	this.focusGained = new flixel_util__$FlxSignal_FlxSignal0();
	this.postDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.preDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.postUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.preUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.postGameStart = new flixel_util__$FlxSignal_FlxSignal0();
	this.preGameStart = new flixel_util__$FlxSignal_FlxSignal0();
	this.postGameReset = new flixel_util__$FlxSignal_FlxSignal0();
	this.preGameReset = new flixel_util__$FlxSignal_FlxSignal0();
	this.gameResized = new flixel_util__$FlxSignal_FlxSignal2();
	this.preStateCreate = new flixel_util__$FlxSignal_FlxSignal1();
	this.postStateSwitch = new flixel_util__$FlxSignal_FlxSignal0();
	this.preStateSwitch = new flixel_util__$FlxSignal_FlxSignal0();
};
$hxClasses["flixel.system.frontEnds.SignalFrontEnd"] = flixel_system_frontEnds_SignalFrontEnd;
flixel_system_frontEnds_SignalFrontEnd.__name__ = "flixel.system.frontEnds.SignalFrontEnd";
flixel_system_frontEnds_SignalFrontEnd.prototype = {
	preStateSwitch: null
	,postStateSwitch: null
	,preStateCreate: null
	,gameResized: null
	,preGameReset: null
	,postGameReset: null
	,preGameStart: null
	,postGameStart: null
	,preUpdate: null
	,postUpdate: null
	,preDraw: null
	,postDraw: null
	,focusGained: null
	,focusLost: null
	,get_stateSwitched: function() {
		return this.preStateSwitch;
	}
	,get_gameStarted: function() {
		return this.postGameStart;
	}
	,__class__: flixel_system_frontEnds_SignalFrontEnd
	,__properties__: {get_gameStarted:"get_gameStarted",get_stateSwitched:"get_stateSwitched"}
};
var flixel_system_frontEnds_WatchFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.WatchFrontEnd"] = flixel_system_frontEnds_WatchFrontEnd;
flixel_system_frontEnds_WatchFrontEnd.__name__ = "flixel.system.frontEnds.WatchFrontEnd";
flixel_system_frontEnds_WatchFrontEnd.prototype = {
	add: function(object,field,displayName) {
	}
	,remove: function(object,field) {
	}
	,addQuick: function(displayName,value) {
	}
	,removeQuick: function(displayName) {
	}
	,addExpression: function(expression,displayName) {
	}
	,removeExpression: function(displayName) {
	}
	,addMouse: function() {
	}
	,removeMouse: function() {
	}
	,__class__: flixel_system_frontEnds_WatchFrontEnd
};
var flixel_FlxG = function() { };
$hxClasses["flixel.FlxG"] = flixel_FlxG;
flixel_FlxG.__name__ = "flixel.FlxG";
flixel_FlxG.__properties__ = {set_mouse:"set_mouse",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_scaleMode:"set_scaleMode",get_onMobile:"get_onMobile",set_drawFramerate:"set_drawFramerate",set_updateFramerate:"set_updateFramerate",get_state:"get_state",get_stage:"get_stage"};
flixel_FlxG.camera = null;
flixel_FlxG.game = null;
flixel_FlxG.updateFramerate = null;
flixel_FlxG.drawFramerate = null;
flixel_FlxG.renderMethod = null;
flixel_FlxG.renderBlit = null;
flixel_FlxG.renderTile = null;
flixel_FlxG.width = null;
flixel_FlxG.height = null;
flixel_FlxG.mouse = null;
flixel_FlxG.touches = null;
flixel_FlxG.keys = null;
flixel_FlxG.gamepads = null;
flixel_FlxG.accelerometer = null;
flixel_FlxG.vcr = null;
flixel_FlxG.plugins = null;
flixel_FlxG.sound = null;
flixel_FlxG.resizeGame = function(Width,Height) {
	flixel_FlxG.scaleMode.onMeasure(Width,Height);
};
flixel_FlxG.resizeWindow = function(Width,Height) {
};
flixel_FlxG.resetGame = function() {
	flixel_FlxG.game._resetGame = true;
};
flixel_FlxG.switchState = function(nextState) {
	if(flixel_FlxG.game._state.switchTo(nextState)) {
		flixel_FlxG.game._requestedState = nextState;
	}
};
flixel_FlxG.resetState = function() {
	var nextState = Type.createInstance(js_Boot.getClass(flixel_FlxG.game._state),[]);
	if(flixel_FlxG.game._state.switchTo(nextState)) {
		flixel_FlxG.game._requestedState = nextState;
	}
};
flixel_FlxG.overlap = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
	if(ObjectOrGroup1 == null) {
		ObjectOrGroup1 = flixel_FlxG.game._state;
	}
	if(ObjectOrGroup2 == ObjectOrGroup1) {
		ObjectOrGroup2 = null;
	}
	flixel_system_FlxQuadTree.divisions = flixel_FlxG.worldDivisions;
	var quadTree = flixel_system_FlxQuadTree.recycle(flixel_FlxG.worldBounds.x,flixel_FlxG.worldBounds.y,flixel_FlxG.worldBounds.width,flixel_FlxG.worldBounds.height);
	quadTree.load(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback);
	var result = quadTree.execute();
	quadTree.destroy();
	return result;
};
flixel_FlxG.pixelPerfectOverlap = function(Sprite1,Sprite2,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) {
		AlphaTolerance = 255;
	}
	return flixel_util_FlxCollision.pixelPerfectCheck(Sprite1,Sprite2,AlphaTolerance,Camera);
};
flixel_FlxG.collide = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback) {
	return flixel_FlxG.overlap(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,flixel_FlxObject.separate);
};
flixel_FlxG.addChildBelowMouse = function(Child,IndexModifier) {
	if(IndexModifier == null) {
		IndexModifier = 0;
	}
	var index = flixel_FlxG.game.getChildIndex(flixel_FlxG.game._inputContainer);
	var max = flixel_FlxG.game.get_numChildren();
	index = flixel_math_FlxMath.maxAdd(index,IndexModifier,max);
	flixel_FlxG.game.addChildAt(Child,index);
	return Child;
};
flixel_FlxG.removeChild = function(Child) {
	if(flixel_FlxG.game.contains(Child)) {
		flixel_FlxG.game.removeChild(Child);
	}
	return Child;
};
flixel_FlxG.addPostProcess = function(postProcess) {
	return postProcess;
};
flixel_FlxG.removePostProcess = function(postProcess) {
};
flixel_FlxG.openURL = function(URL1,Target) {
	if(Target == null) {
		Target = "_blank";
	}
	var prefix = "";
	if(!new EReg("^https?://","").match(URL1)) {
		prefix = "http://";
	}
	openfl_Lib.getURL(new openfl_net_URLRequest(prefix + URL1),Target);
};
flixel_FlxG.init = function(Game,Width,Height,Zoom) {
	flixel_FlxG.game = Game;
	flixel_FlxG.width = Math.abs(Width) | 0;
	flixel_FlxG.height = Math.abs(Height) | 0;
	flixel_FlxG.initRenderMethod();
	flixel_FlxG.initialWidth = flixel_FlxG.width;
	flixel_FlxG.initialHeight = flixel_FlxG.height;
	flixel_FlxG.initialZoom = flixel_FlxCamera.defaultZoom = Zoom;
	var Width = openfl_Lib.get_current().stage.stageWidth;
	var Height = openfl_Lib.get_current().stage.stageHeight;
	flixel_FlxG.scaleMode.onMeasure(Width,Height);
	flixel_FlxG.keys = flixel_FlxG.inputs.add_flixel_input_keyboard_FlxKeyboard(new flixel_input_keyboard_FlxKeyboard());
	flixel_FlxG.set_mouse(flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(new flixel_input_mouse_FlxMouse(flixel_FlxG.game._inputContainer)));
	flixel_FlxG.touches = flixel_FlxG.inputs.add_flixel_input_touch_FlxTouchManager(new flixel_input_touch_FlxTouchManager());
	flixel_FlxG.gamepads = flixel_FlxG.inputs.add_flixel_input_gamepad_FlxGamepadManager(new flixel_input_gamepad_FlxGamepadManager());
	flixel_FlxG.accelerometer = new flixel_input_FlxAccelerometer();
	flixel_FlxG.save.bind("flixel");
	flixel_FlxG.plugins = new flixel_system_frontEnds_PluginFrontEnd();
	flixel_FlxG.vcr = new flixel_system_frontEnds_VCRFrontEnd();
	flixel_FlxG.sound = new flixel_system_frontEnds_SoundFrontEnd();
};
flixel_FlxG.initRenderMethod = function() {
	flixel_FlxG.renderMethod = flixel_FlxRenderMethod.BLITTING;
	var tmp;
	switch(openfl_Lib.get_current().stage.window.context.type) {
	case "opengl":case "opengles":case "webgl":
		tmp = flixel_FlxRenderMethod.DRAW_TILES;
		break;
	default:
		tmp = flixel_FlxRenderMethod.BLITTING;
	}
	flixel_FlxG.renderMethod = tmp;
	flixel_FlxG.renderBlit = flixel_FlxG.renderMethod == flixel_FlxRenderMethod.BLITTING;
	flixel_FlxG.renderTile = flixel_FlxG.renderMethod == flixel_FlxRenderMethod.DRAW_TILES;
	flixel_FlxObject.defaultPixelPerfectPosition = flixel_FlxG.renderBlit;
};
flixel_FlxG.reset = function() {
	var _this = flixel_FlxG.random;
	var Value = Math.random() * 2147483647 | 0;
	var lowerBound = Value < 1 ? 1 : Value;
	var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
	var lowerBound = NewSeed < 1 ? 1 : NewSeed;
	var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
	var lowerBound = NewSeed < 1 ? 1 : NewSeed;
	_this.initialSeed = (_this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	flixel_FlxG.bitmap.reset();
	flixel_FlxG.inputs.reset();
	flixel_FlxG.sound.destroy(true);
	flixel_FlxG.autoPause = true;
	flixel_FlxG.fixedTimestep = true;
	flixel_FlxG.timeScale = 1.0;
	flixel_FlxG.elapsed = 0;
	flixel_FlxG.maxElapsed = 0.1;
	var _this = flixel_FlxG.worldBounds;
	var X = -10;
	var Y = -10;
	var Width = flixel_FlxG.width + 20;
	var Height = flixel_FlxG.height + 20;
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	_this.x = X;
	_this.y = Y;
	_this.width = Width;
	_this.height = Height;
	flixel_FlxG.worldDivisions = 6;
};
flixel_FlxG.set_scaleMode = function(ScaleMode) {
	flixel_FlxG.scaleMode = ScaleMode;
	flixel_FlxG.game.onResize(null);
	return ScaleMode;
};
flixel_FlxG.set_mouse = function(NewMouse) {
	if(flixel_FlxG.mouse == null) {
		flixel_FlxG.mouse = flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(NewMouse);
		return flixel_FlxG.mouse;
	}
	var oldMouse = flixel_FlxG.mouse;
	var result = flixel_FlxG.inputs.replace_flixel_input_mouse_FlxMouse(oldMouse,NewMouse);
	if(result != null) {
		flixel_FlxG.mouse = result;
		oldMouse.destroy();
		return NewMouse;
	}
	return oldMouse;
};
flixel_FlxG.set_updateFramerate = function(Framerate) {
	var tmp = Framerate < flixel_FlxG.drawFramerate;
	flixel_FlxG.updateFramerate = Framerate;
	flixel_FlxG.game._stepMS = Math.abs(1000 / Framerate);
	flixel_FlxG.game._stepSeconds = flixel_FlxG.game._stepMS / 1000;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) {
		flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	}
	return Framerate;
};
flixel_FlxG.set_drawFramerate = function(Framerate) {
	var tmp = Framerate > flixel_FlxG.updateFramerate;
	flixel_FlxG.drawFramerate = Math.abs(Framerate) | 0;
	if(flixel_FlxG.game.stage != null) {
		flixel_FlxG.game.stage.set_frameRate(flixel_FlxG.drawFramerate);
	}
	flixel_FlxG.game._maxAccumulation = 2000 / flixel_FlxG.drawFramerate - 1;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) {
		flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	}
	return Framerate;
};
flixel_FlxG.get_fullscreen = function() {
	if(openfl_Lib.get_current().stage.get_displayState() != 0) {
		return openfl_Lib.get_current().stage.get_displayState() == 1;
	} else {
		return true;
	}
};
flixel_FlxG.set_fullscreen = function(Value) {
	openfl_Lib.get_current().stage.set_displayState(Value ? 0 : 2);
	return Value;
};
flixel_FlxG.get_stage = function() {
	return openfl_Lib.get_current().stage;
};
flixel_FlxG.get_state = function() {
	return flixel_FlxG.game._state;
};
flixel_FlxG.get_onMobile = function() {
	return flixel_FlxG.html5.onMobile;
};
var flixel_FlxRenderMethod = $hxEnums["flixel.FlxRenderMethod"] = { __ename__ : "flixel.FlxRenderMethod", __constructs__ : ["DRAW_TILES","BLITTING"]
	,DRAW_TILES: {_hx_index:0,__enum__:"flixel.FlxRenderMethod",toString:$estr}
	,BLITTING: {_hx_index:1,__enum__:"flixel.FlxRenderMethod",toString:$estr}
};
var flixel_FlxGame = function(GameWidth,GameHeight,InitialState,Zoom,UpdateFramerate,DrawFramerate,SkipSplash,StartFullscreen) {
	if(StartFullscreen == null) {
		StartFullscreen = false;
	}
	if(SkipSplash == null) {
		SkipSplash = false;
	}
	if(DrawFramerate == null) {
		DrawFramerate = 60;
	}
	if(UpdateFramerate == null) {
		UpdateFramerate = 60;
	}
	if(Zoom == null) {
		Zoom = 1;
	}
	if(GameHeight == null) {
		GameHeight = 0;
	}
	if(GameWidth == null) {
		GameWidth = 0;
	}
	this._resetGame = false;
	this._skipSplash = false;
	this._customSoundTray = flixel_system_ui_FlxSoundTray;
	this._lostFocus = false;
	this._startTime = 0;
	this._total = 0;
	this._gameJustStarted = false;
	this.filtersEnabled = true;
	this.ticks = 0;
	this.focusLostFramerate = 10;
	openfl_display_Sprite.call(this);
	this._inputContainer = new openfl_display_Sprite();
	if(GameWidth == 0) {
		GameWidth = openfl_Lib.get_current().stage.stageWidth;
	}
	if(GameHeight == 0) {
		GameHeight = openfl_Lib.get_current().stage.stageHeight;
	}
	flixel_FlxG.init(this,GameWidth,GameHeight,Zoom);
	flixel_FlxG.set_updateFramerate(UpdateFramerate);
	flixel_FlxG.set_drawFramerate(DrawFramerate);
	this._accumulator = this._stepMS;
	this._skipSplash = SkipSplash;
	this._initialState = InitialState == null ? flixel_FlxState : InitialState;
	this.addEventListener("addedToStage",$bind(this,this.create));
};
$hxClasses["flixel.FlxGame"] = flixel_FlxGame;
flixel_FlxGame.__name__ = "flixel.FlxGame";
flixel_FlxGame.__super__ = openfl_display_Sprite;
flixel_FlxGame.prototype = $extend(openfl_display_Sprite.prototype,{
	focusLostFramerate: null
	,soundTray: null
	,ticks: null
	,filtersEnabled: null
	,_gameJustStarted: null
	,_initialState: null
	,_state: null
	,_total: null
	,_startTime: null
	,_accumulator: null
	,_elapsedMS: null
	,_stepMS: null
	,_stepSeconds: null
	,_maxAccumulation: null
	,_lostFocus: null
	,_filters: null
	,_inputContainer: null
	,_customSoundTray: null
	,_skipSplash: null
	,_requestedState: null
	,_resetGame: null
	,setFilters: function(filters) {
		this._filters = filters;
	}
	,create: function(_) {
		if(this.stage == null) {
			return;
		}
		this.removeEventListener("addedToStage",$bind(this,this.create));
		this._startTime = this.getTimer();
		this._total = this.getTimer() - this._startTime;
		this.stage.set_scaleMode(2);
		this.stage.align = 6;
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		this.addChild(this._inputContainer);
		this.soundTray = Type.createInstance(this._customSoundTray,[]);
		this.addChild(this.soundTray);
		this.stage.addEventListener("deactivate",$bind(this,this.onFocusLost));
		this.stage.addEventListener("activate",$bind(this,this.onFocus));
		flixel_FlxG.signals.preGameReset.dispatch();
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) {
				this._gameJustStarted = true;
			}
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		flixel_FlxG.reset();
		flixel_FlxG.signals.postGameReset.dispatch();
		this.switchState();
		var tmp = flixel_FlxG.updateFramerate < flixel_FlxG.drawFramerate;
		this.stage.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.stage.addEventListener("resize",$bind(this,this.onResize));
		this.resizeGame(openfl_Lib.get_current().stage.stageWidth,openfl_Lib.get_current().stage.stageHeight);
		openfl_utils_Assets.addEventListener("change",($_=flixel_FlxG.bitmap,$bind($_,$_.onAssetsReload)));
	}
	,onFocus: function(_) {
		this._lostFocus = false;
		flixel_FlxG.signals.focusGained.dispatch();
		this._state.onFocus();
		if(!flixel_FlxG.autoPause) {
			return;
		}
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		flixel_FlxG.sound.onFocus();
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocus();
		}
	}
	,onFocusLost: function(event) {
		this._lostFocus = true;
		flixel_FlxG.signals.focusLost.dispatch();
		this._state.onFocusLost();
		if(!flixel_FlxG.autoPause) {
			return;
		}
		this.stage.set_frameRate(this.focusLostFramerate);
		flixel_FlxG.sound.onFocusLost();
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocusLost();
		}
	}
	,onResize: function(_) {
		var width = openfl_Lib.get_current().stage.stageWidth;
		var height = openfl_Lib.get_current().stage.stageHeight;
		if(flixel_FlxG.renderTile) {
			flixel_FlxG.bitmap.onContext();
		}
		this.resizeGame(width,height);
	}
	,resizeGame: function(width,height) {
		flixel_FlxG.scaleMode.onMeasure(width,height);
		this._state.onResize(width,height);
		flixel_FlxG.cameras.resize();
		flixel_FlxG.signals.gameResized.dispatch(width,height);
		if(this.soundTray != null) {
			this.soundTray.screenCenter();
		}
	}
	,onEnterFrame: function(_) {
		this.ticks = this.getTimer() - this._startTime;
		this._elapsedMS = this.ticks - this._total;
		this._total = this.ticks;
		if(this.soundTray != null && this.soundTray.active) {
			this.soundTray.update(this._elapsedMS);
		}
		if(!this._lostFocus || !flixel_FlxG.autoPause) {
			if(flixel_FlxG.vcr.paused) {
				if(flixel_FlxG.vcr.stepRequested) {
					flixel_FlxG.vcr.stepRequested = false;
				} else if(this._state == this._requestedState) {
					return;
				}
			}
			if(flixel_FlxG.fixedTimestep) {
				this._accumulator += this._elapsedMS;
				this._accumulator = this._accumulator > this._maxAccumulation ? this._maxAccumulation : this._accumulator;
				while(this._accumulator >= this._stepMS) {
					this.step();
					this._accumulator -= this._stepMS;
				}
			} else {
				this.step();
			}
			this.draw();
		}
	}
	,resetGame: function() {
		flixel_FlxG.signals.preGameReset.dispatch();
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) {
				this._gameJustStarted = true;
			}
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		flixel_FlxG.reset();
		flixel_FlxG.signals.postGameReset.dispatch();
	}
	,switchState: function() {
		flixel_FlxG.cameras.reset();
		flixel_FlxG.inputs.onStateSwitch();
		flixel_FlxG.sound.destroy();
		flixel_FlxG.signals.preStateSwitch.dispatch();
		if(this._state != null) {
			this._state.destroy();
		}
		flixel_FlxG.bitmap.clearCache();
		this._state = this._requestedState;
		if(this._gameJustStarted) {
			flixel_FlxG.signals.preGameStart.dispatch();
		}
		flixel_FlxG.signals.preStateCreate.dispatch(this._state);
		this._state.create();
		if(this._gameJustStarted) {
			this.gameStart();
		}
		flixel_FlxG.signals.postStateSwitch.dispatch();
	}
	,gameStart: function() {
		flixel_FlxG.signals.postGameStart.dispatch();
		this._gameJustStarted = false;
	}
	,step: function() {
		if(this._resetGame) {
			flixel_FlxG.signals.preGameReset.dispatch();
			if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
				this._requestedState = Type.createInstance(this._initialState,[]);
				if(flixel_system_FlxSplash.nextState == null) {
					this._gameJustStarted = true;
				}
			} else {
				flixel_system_FlxSplash.nextState = this._initialState;
				this._requestedState = new flixel_system_FlxSplash();
				this._skipSplash = true;
			}
			flixel_FlxG.reset();
			flixel_FlxG.signals.postGameReset.dispatch();
			this._resetGame = false;
		}
		this.handleReplayRequests();
		this.update();
	}
	,handleReplayRequests: function() {
	}
	,update: function() {
		if(!this._state.active || !this._state.exists) {
			return;
		}
		if(this._state != this._requestedState) {
			this.switchState();
		}
		this.updateElapsed();
		flixel_FlxG.signals.preUpdate.dispatch();
		this.updateInput();
		flixel_FlxG.sound.update(flixel_FlxG.elapsed);
		var elapsed = flixel_FlxG.elapsed;
		var _g = 0;
		var _g1 = flixel_FlxG.plugins.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.active) {
				plugin.update(elapsed);
			}
		}
		this._state.tryUpdate(flixel_FlxG.elapsed);
		var elapsed = flixel_FlxG.elapsed;
		var _g = 0;
		var _g1 = flixel_FlxG.cameras.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera != null && camera.exists && camera.active) {
				camera.update(elapsed);
			}
		}
		flixel_FlxG.signals.postUpdate.dispatch();
		flixel_util_FlxArrayUtil.clearArray(flixel_FlxG.swipes);
		this.set_filters(this.filtersEnabled ? this._filters : null);
	}
	,updateElapsed: function() {
		if(flixel_FlxG.fixedTimestep) {
			flixel_FlxG.elapsed = flixel_FlxG.timeScale * this._stepSeconds;
		} else {
			flixel_FlxG.elapsed = flixel_FlxG.timeScale * (this._elapsedMS / 1000);
			var max = flixel_FlxG.maxElapsed * flixel_FlxG.timeScale;
			if(flixel_FlxG.elapsed > max) {
				flixel_FlxG.elapsed = max;
			}
		}
	}
	,updateInput: function() {
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.update();
		}
	}
	,draw: function() {
		if(!this._state.visible || !this._state.exists) {
			return;
		}
		flixel_FlxG.signals.preDraw.dispatch();
		if(flixel_FlxG.renderTile) {
			flixel_graphics_tile_FlxDrawBaseItem.drawCalls = 0;
		}
		var _this = flixel_FlxG.cameras;
		var _g = 0;
		var _g1 = _this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			if(flixel_FlxG.renderBlit) {
				camera.checkResize();
				if(_this.useBufferLocking) {
					camera.buffer.lock();
				}
			}
			if(flixel_FlxG.renderTile) {
				camera.clearDrawStack();
				camera.canvas.get_graphics().clear();
			}
			if(flixel_FlxG.renderBlit) {
				camera.fill(camera.bgColor,camera.useBgAlphaBlending);
				camera.screen.dirty = true;
			} else {
				camera.fill(camera.bgColor & 16777215,camera.useBgAlphaBlending,(camera.bgColor >> 24 & 255) / 255);
			}
		}
		var _g = 0;
		var _g1 = flixel_FlxG.plugins.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.visible) {
				plugin.draw();
			}
		}
		this._state.draw();
		if(flixel_FlxG.renderTile) {
			if(flixel_FlxG.renderTile) {
				var _g = 0;
				var _g1 = flixel_FlxG.cameras.list;
				while(_g < _g1.length) {
					var camera = _g1[_g];
					++_g;
					if(camera != null && camera.exists && camera.visible) {
						camera.render();
					}
				}
			}
		}
		var _this = flixel_FlxG.cameras;
		var _g = 0;
		var _g1 = _this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			camera.drawFX();
			if(flixel_FlxG.renderBlit) {
				if(_this.useBufferLocking) {
					camera.buffer.unlock();
				}
				camera.screen.dirty = true;
			}
		}
		flixel_FlxG.signals.postDraw.dispatch();
	}
	,getTicks: function() {
		return this.getTimer() - this._startTime;
	}
	,getTimer: function() {
		return openfl_Lib.getTimer();
	}
	,__class__: flixel_FlxGame
});
var flixel_IFlxSprite = function() { };
$hxClasses["flixel.IFlxSprite"] = flixel_IFlxSprite;
flixel_IFlxSprite.__name__ = "flixel.IFlxSprite";
flixel_IFlxSprite.__isInterface__ = true;
flixel_IFlxSprite.__interfaces__ = [flixel_IFlxBasic];
flixel_IFlxSprite.prototype = {
	set_x: null
	,set_y: null
	,set_alpha: null
	,set_angle: null
	,set_facing: null
	,set_moves: null
	,set_immovable: null
	,x: null
	,y: null
	,alpha: null
	,angle: null
	,facing: null
	,moves: null
	,immovable: null
	,offset: null
	,origin: null
	,scale: null
	,velocity: null
	,maxVelocity: null
	,acceleration: null
	,drag: null
	,scrollFactor: null
	,reset: null
	,setPosition: null
	,__class__: flixel_IFlxSprite
	,__properties__: {set_immovable:"set_immovable",set_moves:"set_moves",set_facing:"set_facing",set_angle:"set_angle",set_alpha:"set_alpha",set_y:"set_y",set_x:"set_x"}
};
var flixel_addons_display_FlxGridOverlay = function() { };
$hxClasses["flixel.addons.display.FlxGridOverlay"] = flixel_addons_display_FlxGridOverlay;
flixel_addons_display_FlxGridOverlay.__name__ = "flixel.addons.display.FlxGridOverlay";
flixel_addons_display_FlxGridOverlay.create = function(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2) {
	if(Color2 == null) {
		Color2 = -2501163;
	}
	if(Color1 == null) {
		Color1 = -1579290;
	}
	if(Alternate == null) {
		Alternate = true;
	}
	if(Height == null) {
		Height = -1;
	}
	if(Width == null) {
		Width = -1;
	}
	if(Width == -1) {
		Width = flixel_FlxG.width;
	}
	if(Height == -1) {
		Height = flixel_FlxG.height;
	}
	if(Width < CellWidth || Height < CellHeight) {
		return null;
	}
	var grid = flixel_addons_display_FlxGridOverlay.createGrid(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2);
	var output = new flixel_FlxSprite();
	output.set_pixels(grid);
	output.dirty = true;
	return output;
};
flixel_addons_display_FlxGridOverlay.overlay = function(Sprite,CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2) {
	if(Color2 == null) {
		Color2 = -1998989867;
	}
	if(Color1 == null) {
		Color1 = -1998067994;
	}
	if(Alternate == null) {
		Alternate = true;
	}
	if(Height == null) {
		Height = -1;
	}
	if(Width == null) {
		Width = -1;
	}
	if(Width == -1) {
		Width = flixel_FlxG.width;
	}
	if(Height == -1) {
		Height = flixel_FlxG.height;
	}
	if(Width < CellWidth || Height < CellHeight) {
		return null;
	}
	var grid = flixel_addons_display_FlxGridOverlay.createGrid(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2);
	Sprite.get_pixels().copyPixels(grid,new openfl_geom_Rectangle(0,0,Width,Height),new openfl_geom_Point(0,0),null,null,true);
	return Sprite;
};
flixel_addons_display_FlxGridOverlay.createGrid = function(CellWidth,CellHeight,Width,Height,Alternate,Color1,Color2) {
	var rowColor = Color1;
	var lastColor = Color1;
	var grid = new openfl_display_BitmapData(Width,Height,true);
	var y = 0;
	while(y <= Height) {
		if(y > 0 && lastColor == rowColor && Alternate) {
			if(lastColor == Color1) {
				lastColor = Color2;
			} else {
				lastColor = Color1;
			}
		} else if(y > 0 && lastColor != rowColor && Alternate == false) {
			if(lastColor == Color2) {
				lastColor = Color1;
			} else {
				lastColor = Color2;
			}
		}
		var x = 0;
		while(x <= Width) {
			if(x == 0) {
				rowColor = lastColor;
			}
			grid.fillRect(new openfl_geom_Rectangle(x,y,CellWidth,CellHeight),lastColor);
			if(lastColor == Color1) {
				lastColor = Color2;
			} else {
				lastColor = Color1;
			}
			x += CellWidth;
		}
		y += CellHeight;
	}
	return grid;
};
var flixel_addons_effects_FlxSkewedSprite = function(X,Y,SimpleGraphic) {
	this._skewMatrix = new openfl_geom_Matrix();
	this.matrixExposed = false;
	this.transformMatrix = new openfl_geom_Matrix();
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.skew = point;
	flixel_FlxSprite.call(this,X,Y,SimpleGraphic);
};
$hxClasses["flixel.addons.effects.FlxSkewedSprite"] = flixel_addons_effects_FlxSkewedSprite;
flixel_addons_effects_FlxSkewedSprite.__name__ = "flixel.addons.effects.FlxSkewedSprite";
flixel_addons_effects_FlxSkewedSprite.__super__ = flixel_FlxSprite;
flixel_addons_effects_FlxSkewedSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	skew: null
	,transformMatrix: null
	,matrixExposed: null
	,_skewMatrix: null
	,destroy: function() {
		this.skew = flixel_util_FlxDestroyUtil.put(this.skew);
		this._skewMatrix = null;
		this.transformMatrix = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,drawComplex: function(camera) {
		var doFlipX = this.flipX != this._frame.flipX;
		var doFlipY = this.flipY != this._frame.flipY;
		this._frame.prepareMatrix(this._matrix,0,this.animation._curAnim != null ? doFlipX != this.animation._curAnim.flipX : doFlipX,this.animation._curAnim != null ? doFlipY != this.animation._curAnim.flipY : doFlipY);
		this._matrix.translate(-this.origin.x,-this.origin.y);
		this._matrix.scale(this.scale.x,this.scale.y);
		if(this.matrixExposed) {
			this._matrix.concat(this.transformMatrix);
		} else {
			if(this.bakedRotationAngle <= 0) {
				if(this._angleChanged) {
					var radians = this.angle * (Math.PI / 180);
					this._sinAngle = Math.sin(radians);
					this._cosAngle = Math.cos(radians);
					this._angleChanged = false;
				}
				if(this.angle != 0) {
					var _this = this._matrix;
					var cos = this._cosAngle;
					var sin = this._sinAngle;
					var a1 = _this.a * cos - _this.b * sin;
					_this.b = _this.a * sin + _this.b * cos;
					_this.a = a1;
					var c1 = _this.c * cos - _this.d * sin;
					_this.d = _this.c * sin + _this.d * cos;
					_this.c = c1;
					var tx1 = _this.tx * cos - _this.ty * sin;
					_this.ty = _this.tx * sin + _this.ty * cos;
					_this.tx = tx1;
				}
			}
			this.updateSkewMatrix();
			this._matrix.concat(this._skewMatrix);
		}
		this._point.addPoint(this.origin);
		if(this.isPixelPerfectRender(camera)) {
			var _this = this._point;
			_this.set_x(Math.floor(_this.x));
			_this.set_y(Math.floor(_this.y));
		}
		this._matrix.translate(this._point.x,this._point.y);
		camera.drawPixels(this._frame,this.framePixels,this._matrix,this.colorTransform,this.blend,this.antialiasing);
	}
	,updateSkewMatrix: function() {
		this._skewMatrix.identity();
		if(this.skew.x != 0 || this.skew.y != 0) {
			this._skewMatrix.b = Math.tan(this.skew.y * (Math.PI / 180));
			this._skewMatrix.c = Math.tan(this.skew.x * (Math.PI / 180));
		}
	}
	,isSimpleRender: function(camera) {
		if(flixel_FlxG.renderBlit) {
			if(flixel_FlxSprite.prototype.isSimpleRender.call(this,camera) && this.skew.x == 0 && this.skew.y == 0) {
				return !this.matrixExposed;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,__class__: flixel_addons_effects_FlxSkewedSprite
});
var flixel_addons_effects_FlxTrail = function(Target,Graphic,Length,Delay,Alpha,Diff) {
	if(Diff == null) {
		Diff = 0.05;
	}
	if(Alpha == null) {
		Alpha = 0.4;
	}
	if(Delay == null) {
		Delay = 3;
	}
	if(Length == null) {
		Length = 10;
	}
	this._recentAnimations = [];
	this._recentFlipY = [];
	this._recentFlipX = [];
	this._recentFrames = [];
	this._recentScales = [];
	this._recentAngles = [];
	this._recentPositions = [];
	this._transp = 1;
	this._trailLength = 0;
	this._counter = 0;
	this.framesEnabled = true;
	this.scalesEnabled = true;
	this.rotationsEnabled = true;
	this.yEnabled = true;
	this.xEnabled = true;
	flixel_group_FlxTypedSpriteGroup.call(this);
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var _this = point;
	var point = Target.origin;
	_this.set_x(point.x);
	_this.set_y(point.y);
	if(point._weak) {
		point.put();
	}
	this._spriteOrigin = _this;
	this.target = Target;
	this.delay = Delay;
	this._graphic = Graphic;
	this._transp = Alpha;
	this._difference = Diff;
	this.increaseLength(Length);
	this.set_solid(false);
};
$hxClasses["flixel.addons.effects.FlxTrail"] = flixel_addons_effects_FlxTrail;
flixel_addons_effects_FlxTrail.__name__ = "flixel.addons.effects.FlxTrail";
flixel_addons_effects_FlxTrail.__super__ = flixel_group_FlxTypedSpriteGroup;
flixel_addons_effects_FlxTrail.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	target: null
	,delay: null
	,xEnabled: null
	,yEnabled: null
	,rotationsEnabled: null
	,scalesEnabled: null
	,framesEnabled: null
	,_counter: null
	,_trailLength: null
	,_graphic: null
	,_transp: null
	,_difference: null
	,_recentPositions: null
	,_recentAngles: null
	,_recentScales: null
	,_recentFrames: null
	,_recentFlipX: null
	,_recentFlipY: null
	,_recentAnimations: null
	,_spriteOrigin: null
	,destroy: function() {
		flixel_util_FlxDestroyUtil.putArray(this._recentPositions);
		flixel_util_FlxDestroyUtil.putArray(this._recentScales);
		this._recentAngles = null;
		this._recentPositions = null;
		this._recentScales = null;
		this._recentFrames = null;
		this._recentFlipX = null;
		this._recentFlipY = null;
		this._recentAnimations = null;
		this._spriteOrigin = null;
		this.target = null;
		this._graphic = null;
		flixel_group_FlxTypedSpriteGroup.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		this._counter++;
		if(this._counter >= this.delay && this._trailLength >= 1) {
			this._counter = 0;
			var spritePosition = null;
			if(this._recentPositions.length == this._trailLength) {
				spritePosition = this._recentPositions.pop();
			} else {
				var point = flixel_math_FlxPoint._pool.get().set(0,0);
				point._inPool = false;
				spritePosition = point;
			}
			spritePosition.set(this.target.x - this.target.offset.x,this.target.y - this.target.offset.y);
			this._recentPositions.unshift(spritePosition);
			if(this.rotationsEnabled) {
				this.cacheValue(this._recentAngles,this.target.angle);
			}
			if(this.scalesEnabled) {
				var spriteScale = null;
				if(this._recentScales.length == this._trailLength) {
					spriteScale = this._recentScales.pop();
				} else {
					var point = flixel_math_FlxPoint._pool.get().set(0,0);
					point._inPool = false;
					spriteScale = point;
				}
				spriteScale.set(this.target.scale.x,this.target.scale.y);
				this._recentScales.unshift(spriteScale);
			}
			if(this.framesEnabled && this._graphic == null) {
				this.cacheValue(this._recentFrames,this.target.animation.frameIndex);
				this.cacheValue(this._recentFlipX,this.target.flipX);
				this.cacheValue(this._recentFlipY,this.target.flipY);
				this.cacheValue(this._recentAnimations,this.target.animation._curAnim);
			}
			var trailSprite;
			var _g = 0;
			var _g1 = this._recentPositions.length;
			while(_g < _g1) {
				var i = _g++;
				trailSprite = this.group.members[i];
				trailSprite.set_x(this._recentPositions[i].x);
				trailSprite.set_y(this._recentPositions[i].y);
				if(this.rotationsEnabled) {
					trailSprite.set_angle(this._recentAngles[i]);
					trailSprite.origin.set_x(this._spriteOrigin.x);
					trailSprite.origin.set_y(this._spriteOrigin.y);
				}
				if(this.scalesEnabled) {
					trailSprite.scale.set_x(this._recentScales[i].x);
					trailSprite.scale.set_y(this._recentScales[i].y);
				}
				if(this.framesEnabled && this._graphic == null) {
					trailSprite.animation.set_frameIndex(this._recentFrames[i]);
					trailSprite.set_flipX(this._recentFlipX[i]);
					trailSprite.set_flipY(this._recentFlipY[i]);
					var _this = trailSprite.animation;
					var Anim = this._recentAnimations[i];
					if(Anim != _this._curAnim) {
						if(_this._curAnim != null) {
							_this._curAnim.stop();
						}
						if(Anim != null) {
							Anim.play();
						}
					}
					_this._curAnim = Anim;
				}
				trailSprite.set_exists(true);
			}
		}
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
	}
	,cacheValue: function(array,value) {
		array.unshift(value);
		flixel_util_FlxArrayUtil.setLength_cacheValue_T(array,this._trailLength);
	}
	,resetTrail: function() {
		this._recentPositions.splice(0,this._recentPositions.length);
		this._recentAngles.splice(0,this._recentAngles.length);
		this._recentScales.splice(0,this._recentScales.length);
		this._recentFrames.splice(0,this._recentFrames.length);
		this._recentFlipX.splice(0,this._recentFlipX.length);
		this._recentFlipY.splice(0,this._recentFlipY.length);
		this._recentAnimations.splice(0,this._recentAnimations.length);
		var _g = 0;
		var _g1 = this.group.members.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.group.members[i] != null) {
				this.group.members[i].set_exists(false);
			}
		}
	}
	,increaseLength: function(Amount) {
		if(Amount <= 0) {
			return;
		}
		this._trailLength += Amount;
		var _g = 0;
		var _g1 = Amount;
		while(_g < _g1) {
			var i = _g++;
			var trailSprite = new flixel_FlxSprite(0,0);
			if(this._graphic == null) {
				trailSprite.loadGraphicFromSprite(this.target);
			} else {
				trailSprite.loadGraphic(this._graphic);
			}
			trailSprite.set_exists(false);
			this.add(trailSprite);
			trailSprite.set_alpha(this._transp);
			this._transp -= this._difference;
			trailSprite.set_solid((this.allowCollisions & 4369) > 0);
			if(trailSprite.alpha <= 0) {
				trailSprite.kill();
			}
		}
	}
	,changeGraphic: function(Image1) {
		this._graphic = Image1;
		var _g = 0;
		var _g1 = this._trailLength;
		while(_g < _g1) {
			var i = _g++;
			this.group.members[i].loadGraphic(Image1);
		}
	}
	,changeValuesEnabled: function(Angle,X,Y,Scale) {
		if(Scale == null) {
			Scale = true;
		}
		if(Y == null) {
			Y = true;
		}
		if(X == null) {
			X = true;
		}
		this.rotationsEnabled = Angle;
		this.xEnabled = X;
		this.yEnabled = Y;
		this.scalesEnabled = Scale;
	}
	,__class__: flixel_addons_effects_FlxTrail
});
var flixel_addons_effects_FlxTrailArea = function(X,Y,Width,Height,AlphaMultiplier,Delay,SimpleRender,Antialiasing,TrailBlendMode) {
	if(Antialiasing == null) {
		Antialiasing = false;
	}
	if(SimpleRender == null) {
		SimpleRender = false;
	}
	if(Delay == null) {
		Delay = 2;
	}
	if(AlphaMultiplier == null) {
		AlphaMultiplier = 0.8;
	}
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._height = 1;
	this._width = 1;
	this._counter = 0;
	this.alphaOffset = 0;
	this.blueOffset = 0;
	this.greenOffset = 0;
	this.redOffset = 0;
	this.blueMultiplier = 1;
	this.greenMultiplier = 1;
	this.redMultiplier = 1;
	this.blendMode = null;
	this.simpleRender = false;
	this.delay = 2;
	flixel_FlxSprite.call(this,X,Y);
	this.group = new flixel_group_FlxTypedGroup();
	this.delay = Delay;
	this.simpleRender = SimpleRender;
	this.blendMode = TrailBlendMode;
	this.set_antialiasing(Antialiasing);
	this.alphaMultiplier = AlphaMultiplier;
	this.setSize(Width,Height);
	this.set_pixels(this._areaPixels);
};
$hxClasses["flixel.addons.effects.FlxTrailArea"] = flixel_addons_effects_FlxTrailArea;
flixel_addons_effects_FlxTrailArea.__name__ = "flixel.addons.effects.FlxTrailArea";
flixel_addons_effects_FlxTrailArea.__super__ = flixel_FlxSprite;
flixel_addons_effects_FlxTrailArea.prototype = $extend(flixel_FlxSprite.prototype,{
	delay: null
	,simpleRender: null
	,blendMode: null
	,group: null
	,redMultiplier: null
	,greenMultiplier: null
	,blueMultiplier: null
	,alphaMultiplier: null
	,redOffset: null
	,greenOffset: null
	,blueOffset: null
	,alphaOffset: null
	,_counter: null
	,_width: null
	,_height: null
	,_areaPixels: null
	,setSize: function(Width,Height) {
		if(Width <= 0) {
			Width = flixel_FlxG.width;
		}
		if(Height <= 0) {
			Height = flixel_FlxG.height;
		}
		if(Width != this._width || Height != this._height) {
			this._width = Width;
			this._height = Height;
			this._areaPixels = new openfl_display_BitmapData(this._width | 0,this._height | 0,true,0);
		}
	}
	,destroy: function() {
		this.group = flixel_util_FlxDestroyUtil.destroy(this.group);
		this.blendMode = null;
		if(this.get_pixels() != this._areaPixels) {
			this._areaPixels.dispose();
		}
		this._areaPixels = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,draw: function() {
		this._counter++;
		if(this._counter >= this.delay) {
			this._counter = 0;
			this._areaPixels.lock();
			var cTrans = new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
			this._areaPixels.colorTransform(new openfl_geom_Rectangle(0,0,this._areaPixels.width,this._areaPixels.height),cTrans);
			var _g = 0;
			var _g1 = this.group.members;
			while(_g < _g1.length) {
				var member = _g1[_g];
				++_g;
				if(member.exists) {
					var finalX = member.x - this.x - member.offset.x;
					var finalY = member.y - this.y - member.offset.y;
					if(this.simpleRender) {
						this._areaPixels.copyPixels(member.updateFramePixels(),new openfl_geom_Rectangle(0,0,member.frameWidth,member.frameHeight),new openfl_geom_Point(finalX,finalY),null,null,true);
					} else {
						var scaled = member.scale.x != 1 || member.scale.y != 1;
						var rotated = member.angle != 0 && member.bakedRotationAngle <= 0;
						this._matrix.identity();
						if(rotated || scaled) {
							this._matrix.translate(-member.origin.x,-member.origin.y);
							if(scaled) {
								this._matrix.scale(member.scale.x,member.scale.y);
							}
							if(rotated) {
								this._matrix.rotate(member.angle * (Math.PI / 180));
							}
							this._matrix.translate(member.origin.x,member.origin.y);
						}
						this._matrix.translate(finalX,finalY);
						this._areaPixels.draw(member.updateFramePixels(),this._matrix,member.colorTransform,this.blendMode,null,this.antialiasing);
					}
				}
			}
			this._areaPixels.unlock();
			this.set_pixels(this._areaPixels);
		}
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,resetTrail: function() {
		this._areaPixels.fillRect(new openfl_geom_Rectangle(0,0,this._areaPixels.width,this._areaPixels.height),0);
	}
	,add: function(Sprite) {
		return this.group.add(Sprite);
	}
	,get_width: function() {
		return this._width;
	}
	,set_width: function(Width) {
		if(Width <= 0) {
			Width = flixel_FlxG.width;
		}
		if(Width != this._width) {
			this._areaPixels = new openfl_display_BitmapData(Width | 0,this._height | 0,true,0);
		}
		return this._width = Width;
	}
	,get_height: function() {
		return this._height;
	}
	,set_height: function(Height) {
		if(Height <= 0) {
			Height = flixel_FlxG.height;
		}
		if(Height != this._height) {
			this._areaPixels = new openfl_display_BitmapData(this._width | 0,Height | 0,true,0);
		}
		return this._height = Height;
	}
	,__class__: flixel_addons_effects_FlxTrailArea
});
var flixel_addons_effects_chainable_FlxEffectSprite = function(Target,Effects) {
	this.updateTargetAnimation = true;
	this.effectsEnabled = true;
	flixel_FlxSprite.call(this);
	this.target = Target;
	this.effects = Effects != null ? Effects : [];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._effectOffset = point;
};
$hxClasses["flixel.addons.effects.chainable.FlxEffectSprite"] = flixel_addons_effects_chainable_FlxEffectSprite;
flixel_addons_effects_chainable_FlxEffectSprite.__name__ = "flixel.addons.effects.chainable.FlxEffectSprite";
flixel_addons_effects_chainable_FlxEffectSprite.__super__ = flixel_FlxSprite;
flixel_addons_effects_chainable_FlxEffectSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	effectsEnabled: null
	,target: null
	,updateTargetAnimation: null
	,effects: null
	,_effectOffset: null
	,destroy: function() {
		this.effects = flixel_util_FlxDestroyUtil.destroyArray(this.effects);
		this._effectOffset = flixel_util_FlxDestroyUtil.put(this._effectOffset);
		this.target = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,getScreenPosition: function(point,Camera) {
		return flixel_FlxSprite.prototype.getScreenPosition.call(this,point,Camera).addPoint(this._effectOffset);
	}
	,draw: function() {
		if(this.target.dirty) {
			this.target.drawFrame();
		}
		if(this.target.framePixels == null) {
			flixel_FlxSprite.prototype.draw.call(this);
			return;
		}
		if(this.get_pixels() != null && this.get_pixels().width == this.target.framePixels.width && this.get_pixels().height == this.target.framePixels.height) {
			this.get_pixels().fillRect(this.get_pixels().rect,0);
			this.get_pixels().draw(this.target.framePixels);
		} else {
			flixel_util_FlxDestroyUtil.dispose(this.get_pixels());
			this.set_pixels(this.target.framePixels.clone());
		}
		this._effectOffset.set(0,0);
		if(this.effectsEnabled) {
			this.get_pixels().lock();
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var effect = _g1[_g];
				++_g;
				if(effect.active) {
					this.set_pixels(effect.apply(this.get_pixels()));
					if(effect.offset != null) {
						this._effectOffset.addPoint(effect.offset);
					}
				}
			}
			this.get_pixels().unlock();
			this._flashRect = this.get_pixels().rect;
		}
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,update: function(elapsed) {
		if(this.updateTargetAnimation && this.target.animation._sprite.numFrames > 1) {
			this.target.updateAnimation(elapsed);
		}
		if(this.effectsEnabled) {
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var effect = _g1[_g];
				++_g;
				if(effect.active) {
					effect.update(elapsed);
				}
			}
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,__class__: flixel_addons_effects_chainable_FlxEffectSprite
});
var flixel_addons_effects_chainable_IFlxEffect = function() { };
$hxClasses["flixel.addons.effects.chainable.IFlxEffect"] = flixel_addons_effects_chainable_IFlxEffect;
flixel_addons_effects_chainable_IFlxEffect.__name__ = "flixel.addons.effects.chainable.IFlxEffect";
flixel_addons_effects_chainable_IFlxEffect.__isInterface__ = true;
flixel_addons_effects_chainable_IFlxEffect.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_effects_chainable_IFlxEffect.prototype = {
	active: null
	,offset: null
	,update: null
	,apply: null
	,__class__: flixel_addons_effects_chainable_IFlxEffect
};
var flixel_addons_effects_chainable_FlxWaveEffect = function(Mode,Strength,Center,Speed,Wavelength,Direction,InterlaceOffset) {
	if(InterlaceOffset == null) {
		InterlaceOffset = 0;
	}
	if(Wavelength == null) {
		Wavelength = 5;
	}
	if(Speed == null) {
		Speed = 3;
	}
	if(Center == null) {
		Center = 0.5;
	}
	if(Strength == null) {
		Strength = 10;
	}
	this._flashRect = new openfl_geom_Rectangle();
	this._flashPoint = new openfl_geom_Point();
	this._time = 0;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.offset = point;
	this.active = true;
	this.strength = Strength;
	this.mode = Mode == null ? flixel_addons_effects_chainable_FlxWaveMode.ALL : Mode;
	this.speed = Speed;
	this.wavelength = Wavelength;
	this.direction = Direction != null ? Direction : flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL;
	this.center = Center;
	this.set_interlaceOffset(InterlaceOffset);
};
$hxClasses["flixel.addons.effects.chainable.FlxWaveEffect"] = flixel_addons_effects_chainable_FlxWaveEffect;
flixel_addons_effects_chainable_FlxWaveEffect.__name__ = "flixel.addons.effects.chainable.FlxWaveEffect";
flixel_addons_effects_chainable_FlxWaveEffect.__interfaces__ = [flixel_addons_effects_chainable_IFlxEffect];
flixel_addons_effects_chainable_FlxWaveEffect.prototype = {
	active: null
	,offset: null
	,mode: null
	,speed: null
	,center: null
	,direction: null
	,wavelength: null
	,strength: null
	,interlaceOffset: null
	,_time: null
	,_flashPoint: null
	,_flashRect: null
	,_pixels: null
	,destroy: function() {
		this._flashPoint = null;
		this._flashRect = null;
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this._pixels = flixel_util_FlxDestroyUtil.dispose(this._pixels);
	}
	,update: function(elapsed) {
		this._time += elapsed * this.speed;
	}
	,apply: function(bitmapData) {
		var horizontalStrength = this.direction == flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL ? this.strength : 0;
		var verticalStrength = this.direction == flixel_addons_effects_chainable_FlxWaveDirection.VERTICAL ? this.strength : 0;
		this.offset.set(-horizontalStrength,-verticalStrength);
		if(this._pixels == null || this._pixels.width < bitmapData.width + horizontalStrength * 2 || this._pixels.height < bitmapData.height + verticalStrength * 2) {
			flixel_util_FlxDestroyUtil.dispose(this._pixels);
			this._pixels = new openfl_display_BitmapData(bitmapData.width + horizontalStrength * 2,bitmapData.height + verticalStrength * 2,true,0);
		} else {
			this._pixels.fillRect(this._pixels.rect,0);
		}
		var length = this.direction == flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL ? bitmapData.height : bitmapData.width;
		var p = 0;
		while(p < length) {
			var pixelOffset = 0;
			var offsetP = length * this.center;
			var size = 1;
			switch(this.mode._hx_index) {
			case 0:
				offsetP = this.strength;
				break;
			case 1:
				if(p <= offsetP) {
					offsetP = (1 - p / offsetP) * this.strength;
				} else {
					size = length - p;
					offsetP = 0;
				}
				break;
			case 2:
				if(p >= offsetP) {
					offsetP = (1 - (1 - p / length) / (1 - this.center)) * this.strength;
				} else {
					size = Math.ceil(offsetP);
					offsetP = 0;
				}
				break;
			}
			var waveOffset = 0;
			if(this.interlaceOffset != 0 && this.interlaceOffset != 1 && ((p | 0) & 1) != 0) {
				waveOffset = Math.PI * 2 * this.interlaceOffset;
			}
			var n = p / this.wavelength + this._time + waveOffset;
			n *= 0.3183098862;
			if(n > 1) {
				n -= Math.ceil(n) >> 1 << 1;
			} else if(n < -1) {
				n += Math.ceil(-n) >> 1 << 1;
			}
			pixelOffset = offsetP * (n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6))));
			if(this.direction == flixel_addons_effects_chainable_FlxWaveDirection.HORIZONTAL) {
				this._flashPoint.setTo(this.strength + pixelOffset,p);
				this._flashRect.setTo(0,p,bitmapData.width,size);
			} else {
				this._flashPoint.setTo(p,this.strength + pixelOffset);
				this._flashRect.setTo(p,0,size,bitmapData.height);
			}
			this._pixels.copyPixels(bitmapData,this._flashRect,this._flashPoint);
			p += size;
		}
		flixel_util_FlxDestroyUtil.dispose(bitmapData);
		return this._pixels.clone();
	}
	,calculateOffset: function(p,length) {
		var waveOffset = 0;
		if(this.interlaceOffset != 0 && this.interlaceOffset != 1 && ((p | 0) & 1) != 0) {
			waveOffset = Math.PI * 2 * this.interlaceOffset;
		}
		var n = p / this.wavelength + this._time + waveOffset;
		n *= 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		if(n > 0) {
			return n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6)));
		} else {
			return n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		}
	}
	,set_interlaceOffset: function(InterlaceOffset) {
		var lowerBound = InterlaceOffset < 0 ? 0 : InterlaceOffset;
		return this.interlaceOffset = lowerBound > 1 ? 1 : lowerBound;
	}
	,__class__: flixel_addons_effects_chainable_FlxWaveEffect
	,__properties__: {set_interlaceOffset:"set_interlaceOffset"}
};
var flixel_addons_effects_chainable_FlxWaveMode = $hxEnums["flixel.addons.effects.chainable.FlxWaveMode"] = { __ename__ : "flixel.addons.effects.chainable.FlxWaveMode", __constructs__ : ["ALL","START","END"]
	,ALL: {_hx_index:0,__enum__:"flixel.addons.effects.chainable.FlxWaveMode",toString:$estr}
	,START: {_hx_index:1,__enum__:"flixel.addons.effects.chainable.FlxWaveMode",toString:$estr}
	,END: {_hx_index:2,__enum__:"flixel.addons.effects.chainable.FlxWaveMode",toString:$estr}
};
var flixel_addons_effects_chainable_FlxWaveDirection = $hxEnums["flixel.addons.effects.chainable.FlxWaveDirection"] = { __ename__ : "flixel.addons.effects.chainable.FlxWaveDirection", __constructs__ : ["HORIZONTAL","VERTICAL"]
	,HORIZONTAL: {_hx_index:0,__enum__:"flixel.addons.effects.chainable.FlxWaveDirection",toString:$estr}
	,VERTICAL: {_hx_index:1,__enum__:"flixel.addons.effects.chainable.FlxWaveDirection",toString:$estr}
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = "openfl.media.Sound";
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_media_AudioBuffer.fromFile(path));
};
openfl_media_Sound.loadFromFile = function(path) {
	return lime_media_AudioBuffer.loadFromFile(path).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.loadFromFiles = function(paths) {
	return lime_media_AudioBuffer.loadFromFiles(paths).then(function(audioBuffer) {
		return lime_app_Future.withValue(openfl_media_Sound.fromAudioBuffer(audioBuffer));
	});
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,close: function() {
		if(this.__buffer != null) {
			this.__buffer.dispose();
			this.__buffer = null;
		}
	}
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		if(defaultLibrary != null && Object.prototype.hasOwnProperty.call(defaultLibrary.cachedAudioBuffers.h,this.url)) {
			this.AudioBuffer_onURLLoad(defaultLibrary.cachedAudioBuffers.h[this.url]);
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength) {
		if(bytes == null || bytesLength <= 0) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var this1 = new openfl_utils_ByteArrayData(length);
			var copy = this1;
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		this.__buffer = lime_media_AudioBuffer.fromBytes(openfl_utils_ByteArray.toBytes(bytes));
		if(this.__buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		if(format == null) {
			format = "float";
		}
		if(bytes == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
			return;
		}
		var bitsPerSample = format == "float" ? 32 : 16;
		var channels = stereo ? 2 : 1;
		var bytesLength = samples * channels * (bitsPerSample / 8) | 0;
		if(UInt.gt(bytes.position,0) || UInt.gt(openfl_utils_ByteArray.get_length(bytes),bytesLength)) {
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			var this1 = new openfl_utils_ByteArrayData(length);
			var copy = this1;
			var offset = bytes.position;
			var length = bytesLength;
			if(length == null) {
				length = 0;
			}
			if(offset == null) {
				offset = 0;
			}
			copy.writeBytes(bytes,offset,length);
			bytes = copy;
		}
		var audioBuffer = new lime_media_AudioBuffer();
		audioBuffer.bitsPerSample = bitsPerSample;
		audioBuffer.channels = channels;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var buffer = openfl_utils_ByteArray.toArrayBuffer(bytes);
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer,0);
			} else {
				this1 = new Uint8Array(buffer,0,len);
			}
		} else {
			this1 = null;
		}
		audioBuffer.data = this1;
		audioBuffer.sampleRate = sampleRate | 0;
		this.__buffer = audioBuffer;
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(this.__buffer == null || openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_media_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		if(this.__buffer != null) {
			return this.__buffer.get_src().duration() * 1000 | 0;
		}
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var flixel_addons_text_TypeSound = function(stream,context) {
	openfl_media_Sound.call(this,stream,context);
};
$hxClasses["flixel.addons.text.TypeSound"] = flixel_addons_text_TypeSound;
flixel_addons_text_TypeSound.__name__ = "flixel.addons.text.TypeSound";
flixel_addons_text_TypeSound.__super__ = openfl_media_Sound;
flixel_addons_text_TypeSound.prototype = $extend(openfl_media_Sound.prototype,{
	__class__: flixel_addons_text_TypeSound
});
var flixel_text_FlxText = function(X,Y,FieldWidth,Text1,Size,EmbeddedFont) {
	if(EmbeddedFont == null) {
		EmbeddedFont = true;
	}
	if(Size == null) {
		Size = 8;
	}
	if(FieldWidth == null) {
		FieldWidth = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._hasBorderAlpha = false;
	this._regen = true;
	this._formatRanges = [];
	this.borderQuality = 1;
	this.borderSize = 1;
	this.borderColor = 0;
	this.borderStyle = flixel_text_FlxTextBorderStyle.NONE;
	this.text = "";
	flixel_FlxSprite.call(this,X,Y);
	if(Text1 == null || Text1 == "") {
		this.set_text("");
		Text1 = " ";
	} else {
		this.set_text(Text1);
	}
	this.textField = new openfl_text_TextField();
	this.textField.set_selectable(false);
	this.textField.set_multiline(true);
	this.textField.set_wordWrap(true);
	this._defaultFormat = new openfl_text_TextFormat(null,Size,16777215);
	this.set_font(flixel_system_FlxAssets.FONT_DEFAULT);
	this._formatAdjusted = new openfl_text_TextFormat();
	this.textField.set_defaultTextFormat(this._defaultFormat);
	this.textField.set_text(Text1);
	this.set_fieldWidth(FieldWidth);
	this.textField.set_embedFonts(EmbeddedFont);
	this.textField.set_sharpness(100);
	this.textField.set_height(Text1.length <= 0 ? 1 : 10);
	this.set_allowCollisions(0);
	this.set_moves(false);
	this.drawFrame();
	var X = 1;
	var Y = 1;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	this.shadowOffset = point;
};
$hxClasses["flixel.text.FlxText"] = flixel_text_FlxText;
flixel_text_FlxText.__name__ = "flixel.text.FlxText";
flixel_text_FlxText.__super__ = flixel_FlxSprite;
flixel_text_FlxText.prototype = $extend(flixel_FlxSprite.prototype,{
	text: null
	,borderStyle: null
	,borderColor: null
	,borderSize: null
	,borderQuality: null
	,textField: null
	,shadowOffset: null
	,_defaultFormat: null
	,_formatAdjusted: null
	,_formatRanges: null
	,_font: null
	,_regen: null
	,_borderPixels: null
	,_borderColorTransform: null
	,_hasBorderAlpha: null
	,destroy: function() {
		this.textField = null;
		this._font = null;
		this._defaultFormat = null;
		this._formatAdjusted = null;
		this.shadowOffset = flixel_util_FlxDestroyUtil.put(this.shadowOffset);
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,drawFrame: function(Force) {
		if(Force == null) {
			Force = false;
		}
		this._regen = this._regen || Force;
		flixel_FlxSprite.prototype.drawFrame.call(this,this._regen);
	}
	,stampOnAtlas: function(atlas) {
		this.regenGraphic();
		var node = atlas.addNode(this.graphic.bitmap,this.graphic.key);
		var result = node != null;
		if(node != null) {
			this.set_frames(node.getImageFrame());
		}
		return result;
	}
	,applyMarkup: function(input,rules) {
		if(rules == null || rules.length == 0) {
			return this;
		}
		this.clearFormats();
		var rangeStarts = [];
		var rangeEnds = [];
		var rulesToApply = [];
		var i = 0;
		var _g = 0;
		while(_g < rules.length) {
			var rule = rules[_g];
			++_g;
			if(rule.marker == null || rule.format == null) {
				continue;
			}
			var start = false;
			var markerLength = UnicodeString.get_length(rule.marker);
			if(input.indexOf(rule.marker) == -1) {
				continue;
			}
			var _g1 = 0;
			var _g2 = UnicodeString.get_length(input);
			while(_g1 < _g2) {
				var charIndex = _g1++;
				if(UnicodeString.substr(input,charIndex,markerLength) != rule.marker) {
					continue;
				}
				if(start) {
					start = false;
					rangeEnds.push(charIndex);
				} else {
					start = true;
					rangeStarts.push(charIndex);
					rulesToApply.push(rule);
				}
			}
			if(start) {
				rangeEnds.push(-1);
			}
			++i;
		}
		var _g = 0;
		while(_g < rules.length) {
			var rule = rules[_g];
			++_g;
			input = StringTools.replace(input,rule.marker,"");
		}
		var _g = 0;
		var _g1 = rangeStarts.length;
		while(_g < _g1) {
			var i = _g++;
			var delIndex = rangeStarts[i];
			var markerLength = UnicodeString.get_length(rulesToApply[i].marker);
			var _g2 = 0;
			var _g3 = rangeStarts.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(rangeStarts[j] > delIndex) {
					rangeStarts[j] -= markerLength;
				}
				if(rangeEnds[j] > delIndex) {
					rangeEnds[j] -= markerLength;
				}
			}
			delIndex = rangeEnds[i];
			var _g4 = 0;
			var _g5 = rangeStarts.length;
			while(_g4 < _g5) {
				var j1 = _g4++;
				if(rangeStarts[j1] > delIndex) {
					rangeStarts[j1] -= markerLength;
				}
				if(rangeEnds[j1] > delIndex) {
					rangeEnds[j1] -= markerLength;
				}
			}
		}
		this.set_text(input);
		var _g = 0;
		var _g1 = rangeStarts.length;
		while(_g < _g1) {
			var i = _g++;
			this.addFormat(rulesToApply[i].format,rangeStarts[i],rangeEnds[i]);
		}
		return this;
	}
	,addFormat: function(Format,Start,End) {
		if(End == null) {
			End = -1;
		}
		if(Start == null) {
			Start = -1;
		}
		this._formatRanges.push(new flixel_text__$FlxText_FlxTextFormatRange(Format,Start,End));
		this._formatRanges.sort(function(left,right) {
			if(left.range.start < right.range.start) {
				return -1;
			} else {
				return 1;
			}
		});
		this._regen = true;
		return this;
	}
	,removeFormat: function(Format,Start,End) {
		var i = this._formatRanges.length;
		while(i-- > 0) {
			var formatRange = this._formatRanges[i];
			if(formatRange.format != Format) {
				continue;
			}
			if(Start != null && End != null) {
				var range = formatRange.range;
				if(Start >= range.end || End <= range.start) {
					continue;
				}
				if(Start > range.start && End < range.end) {
					this.addFormat(formatRange.format,End + 1,range.end);
					range.end = Start;
					continue;
				}
				if(Start <= range.start && End < range.end) {
					range.start = End;
					continue;
				}
				if(Start > range.start && End >= range.end) {
					range.end = Start;
					continue;
				}
			}
			HxOverrides.remove(this._formatRanges,formatRange);
		}
		this._regen = true;
		return this;
	}
	,clearFormats: function() {
		this._formatRanges = [];
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this;
	}
	,setFormat: function(Font,Size,Color,Alignment,BorderStyle,BorderColor,EmbeddedFont) {
		if(EmbeddedFont == null) {
			EmbeddedFont = true;
		}
		if(BorderColor == null) {
			BorderColor = 0;
		}
		if(Color == null) {
			Color = -1;
		}
		if(Size == null) {
			Size = 8;
		}
		if(BorderStyle == null) {
			BorderStyle = flixel_text_FlxTextBorderStyle.NONE;
		}
		if(EmbeddedFont) {
			this.set_font(Font);
		} else if(Font != null) {
			this.set_systemFont(Font);
		}
		this.set_size(Size);
		this.set_color(Color);
		if(Alignment != null) {
			this.set_alignment(Alignment);
		}
		var Color = BorderColor;
		if(Color == null) {
			Color = 0;
		}
		this.set_borderStyle(BorderStyle);
		this.set_borderColor(Color);
		this.set_borderSize(1);
		this.set_borderQuality(1);
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this;
	}
	,setBorderStyle: function(Style,Color,Size,Quality) {
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		this.set_borderStyle(Style);
		this.set_borderColor(Color);
		this.set_borderSize(Size);
		this.set_borderQuality(Quality);
		return this;
	}
	,updateHitbox: function() {
		this.regenGraphic();
		flixel_FlxSprite.prototype.updateHitbox.call(this);
	}
	,set_fieldWidth: function(value) {
		if(this.textField == null) {
			return value;
		}
		if(value <= 0) {
			this.set_wordWrap(false);
			this.set_autoSize(true);
		} else {
			this.set_autoSize(false);
			this.set_wordWrap(true);
			this.textField.set_width(value);
		}
		this._regen = true;
		return value;
	}
	,get_fieldWidth: function() {
		if(this.textField != null) {
			return this.textField.get_width();
		} else {
			return 0;
		}
	}
	,set_autoSize: function(value) {
		if(this.textField != null) {
			this.textField.set_autoSize(value ? 1 : 2);
			this._regen = true;
		}
		return value;
	}
	,get_autoSize: function() {
		if(this.textField != null) {
			return this.textField.get_autoSize() != 2;
		} else {
			return false;
		}
	}
	,set_text: function(Text1) {
		this.text = Text1;
		if(this.textField != null) {
			var ot = this.textField.get_text();
			this.textField.set_text(Text1);
			this._regen = this.textField.get_text() != ot || this._regen;
		}
		return Text1;
	}
	,get_size: function() {
		return this._defaultFormat.size | 0;
	}
	,set_size: function(Size) {
		this._defaultFormat.size = Size;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Size;
	}
	,set_color: function(Color) {
		if(this._defaultFormat.color == (Color & 16777215)) {
			return Color;
		}
		this._defaultFormat.color = Color & 16777215;
		this.color = Color;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Color;
	}
	,get_font: function() {
		return this._font;
	}
	,set_font: function(Font) {
		this.textField.set_embedFonts(true);
		if(Font != null) {
			var newFontName = Font;
			if(openfl_utils_Assets.exists(Font,"FONT")) {
				newFontName = openfl_utils_Assets.getFont(Font).name;
			}
			this._defaultFormat.font = newFontName;
		} else {
			this._defaultFormat.font = flixel_system_FlxAssets.FONT_DEFAULT;
		}
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this._font = this._defaultFormat.font;
	}
	,get_embedded: function() {
		return this.textField.set_embedFonts(true);
	}
	,get_systemFont: function() {
		return this._defaultFormat.font;
	}
	,set_systemFont: function(Font) {
		this.textField.set_embedFonts(false);
		this._defaultFormat.font = Font;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Font;
	}
	,get_bold: function() {
		return this._defaultFormat.bold;
	}
	,set_bold: function(value) {
		if(this._defaultFormat.bold != value) {
			this._defaultFormat.bold = value;
			this.textField.set_defaultTextFormat(this._defaultFormat);
			this.textField.setTextFormat(this._defaultFormat);
			this._regen = true;
		}
		return value;
	}
	,get_italic: function() {
		return this._defaultFormat.italic;
	}
	,set_italic: function(value) {
		if(this._defaultFormat.italic != value) {
			this._defaultFormat.italic = value;
			this.textField.set_defaultTextFormat(this._defaultFormat);
			this.textField.setTextFormat(this._defaultFormat);
			this._regen = true;
		}
		return value;
	}
	,get_wordWrap: function() {
		return this.textField.get_wordWrap();
	}
	,set_wordWrap: function(value) {
		if(this.textField.get_wordWrap() != value) {
			this.textField.set_wordWrap(value);
			this._regen = true;
		}
		return value;
	}
	,get_alignment: function() {
		return flixel_text_FlxTextAlign.fromOpenFL(this._defaultFormat.align);
	}
	,set_alignment: function(Alignment) {
		this._defaultFormat.align = flixel_text_FlxTextAlign.toOpenFL(Alignment);
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Alignment;
	}
	,set_borderStyle: function(style) {
		if(style != this.borderStyle) {
			this._regen = true;
		}
		return this.borderStyle = style;
	}
	,set_borderColor: function(Color) {
		if(this.borderColor != Color && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		this._hasBorderAlpha = (Color >> 24 & 255) / 255 < 1;
		return this.borderColor = Color;
	}
	,set_borderSize: function(Value) {
		if(Value != this.borderSize && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		return this.borderSize = Value;
	}
	,set_borderQuality: function(Value) {
		var lowerBound = Value < 0 ? 0 : Value;
		Value = lowerBound > 1 ? 1 : lowerBound;
		if(Value != this.borderQuality && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		return this.borderQuality = Value;
	}
	,set_graphic: function(Value) {
		var oldGraphic = this.graphic;
		var graph = flixel_FlxSprite.prototype.set_graphic.call(this,Value);
		flixel_FlxG.bitmap.removeIfNoUse(oldGraphic);
		return graph;
	}
	,get_width: function() {
		this.regenGraphic();
		return flixel_FlxSprite.prototype.get_width.call(this);
	}
	,get_height: function() {
		this.regenGraphic();
		return flixel_FlxSprite.prototype.get_height.call(this);
	}
	,updateColorTransform: function() {
		if(this.colorTransform == null) {
			this.colorTransform = new openfl_geom_ColorTransform();
		}
		if(this.alpha != 1) {
			this.colorTransform.alphaMultiplier = this.alpha;
			this.useColorTransform = true;
		} else {
			this.colorTransform.alphaMultiplier = 1;
			this.useColorTransform = false;
		}
		this.dirty = true;
	}
	,regenGraphic: function() {
		if(this.textField == null || !this._regen) {
			return;
		}
		var oldWidth = 0;
		var oldHeight = 4;
		if(this.graphic != null) {
			oldWidth = this.graphic.width;
			oldHeight = this.graphic.height;
		}
		var newWidth = this.textField.get_width();
		var newHeight = this.textField.get_textHeight() + 4;
		if(this.textField.get_textHeight() == 0) {
			newHeight = oldHeight;
		}
		if(oldWidth != newWidth || oldHeight != newHeight) {
			this.set_height(newHeight);
			var key = flixel_FlxG.bitmap.getUniqueKey("text");
			this.makeGraphic(newWidth | 0,newHeight | 0,0,false,key);
			if(this._hasBorderAlpha) {
				this._borderPixels = this.graphic.bitmap.clone();
			}
			this.frameHeight = this.get_height() | 0;
			this.textField.set_height(this.get_height() * 1.2);
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = newWidth;
			this._flashRect.height = newHeight;
		} else {
			this.graphic.bitmap.fillRect(this._flashRect,0);
			if(this._hasBorderAlpha) {
				if(this._borderPixels == null) {
					this._borderPixels = new openfl_display_BitmapData(this.frameWidth,this.frameHeight,true);
				} else {
					this._borderPixels.fillRect(this._flashRect,0);
				}
			}
		}
		if(this.textField != null && this.textField.get_text() != null && this.textField.get_text().length > 0) {
			this.copyTextFormat(this._defaultFormat,this._formatAdjusted);
			this._matrix.identity();
			this.applyBorderStyle();
			if(this._hasBorderAlpha) {
				if(this._borderColorTransform == null) {
					this._borderColorTransform = new openfl_geom_ColorTransform();
				}
				this._borderColorTransform.alphaMultiplier = (this.borderColor >> 24 & 255) / 255;
				this._borderPixels.colorTransform(this._borderPixels.rect,this._borderColorTransform);
				this.graphic.bitmap.draw(this._borderPixels);
			}
			this.applyFormats(this._formatAdjusted,false);
			this.drawTextFieldTo(this.graphic.bitmap);
		}
		this._regen = false;
		this.set_frame(this.frame);
	}
	,drawTextFieldTo: function(graphic) {
		graphic.draw(this.textField,this._matrix);
	}
	,draw: function() {
		this.regenGraphic();
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
		if(this.textField == null) {
			return;
		}
		if(flixel_FlxG.renderTile && !RunOnCpp) {
			return;
		}
		this.regenGraphic();
		flixel_FlxSprite.prototype.calcFrame.call(this,RunOnCpp);
	}
	,applyBorderStyle: function() {
		var iterations = this.borderSize * this.borderQuality | 0;
		if(iterations <= 0) {
			iterations = 1;
		}
		var delta = this.borderSize / iterations;
		switch(this.borderStyle._hx_index) {
		case 0:
			break;
		case 1:
			this.applyFormats(this._formatAdjusted,true);
			var _g = 0;
			var _g1 = iterations;
			while(_g < _g1) {
				var i = _g++;
				var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(delta,delta);
				this.drawTextFieldTo(graphic);
			}
			this._matrix.translate(-this.shadowOffset.x * this.borderSize,-this.shadowOffset.y * this.borderSize);
			break;
		case 2:
			this.applyFormats(this._formatAdjusted,true);
			var curDelta = delta;
			var _g = 0;
			var _g1 = iterations;
			while(_g < _g1) {
				var i = _g++;
				var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,-curDelta);
				this.drawTextFieldTo(graphic);
				var graphic1 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta,0);
				this.drawTextFieldTo(graphic1);
				var graphic2 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta,0);
				this.drawTextFieldTo(graphic2);
				var graphic3 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta);
				this.drawTextFieldTo(graphic3);
				var graphic4 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta);
				this.drawTextFieldTo(graphic4);
				var graphic5 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,0);
				this.drawTextFieldTo(graphic5);
				var graphic6 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,0);
				this.drawTextFieldTo(graphic6);
				var graphic7 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,-curDelta);
				this.drawTextFieldTo(graphic7);
				this._matrix.translate(curDelta,0);
				curDelta += delta;
			}
			break;
		case 3:
			this.applyFormats(this._formatAdjusted,true);
			var curDelta = delta;
			var _g = 0;
			var _g1 = iterations;
			while(_g < _g1) {
				var i = _g++;
				var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,-curDelta);
				this.drawTextFieldTo(graphic);
				var graphic1 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta * 2,0);
				this.drawTextFieldTo(graphic1);
				var graphic2 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta * 2);
				this.drawTextFieldTo(graphic2);
				var graphic3 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta * 2,0);
				this.drawTextFieldTo(graphic3);
				this._matrix.translate(curDelta,-curDelta);
				curDelta += delta;
			}
			break;
		}
	}
	,applyBorderTransparency: function() {
		if(!this._hasBorderAlpha) {
			return;
		}
		if(this._borderColorTransform == null) {
			this._borderColorTransform = new openfl_geom_ColorTransform();
		}
		this._borderColorTransform.alphaMultiplier = (this.borderColor >> 24 & 255) / 255;
		this._borderPixels.colorTransform(this._borderPixels.rect,this._borderColorTransform);
		this.graphic.bitmap.draw(this._borderPixels);
	}
	,copyTextWithOffset: function(x,y) {
		var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
		this._matrix.translate(x,y);
		this.drawTextFieldTo(graphic);
	}
	,applyFormats: function(FormatAdjusted,UseBorderColor) {
		if(UseBorderColor == null) {
			UseBorderColor = false;
		}
		this.copyTextFormat(this._defaultFormat,FormatAdjusted,false);
		FormatAdjusted.color = UseBorderColor ? this.borderColor & 16777215 : this._defaultFormat.color;
		this.textField.setTextFormat(FormatAdjusted);
		var _g = 0;
		var _g1 = this._formatRanges;
		while(_g < _g1.length) {
			var formatRange = _g1[_g];
			++_g;
			if(this.textField.get_text().length - 1 < formatRange.range.start) {
				break;
			} else {
				var textFormat = formatRange.format.format;
				this.copyTextFormat(textFormat,FormatAdjusted,false);
				FormatAdjusted.color = UseBorderColor ? formatRange.format.borderColor & 16777215 : textFormat.color;
			}
			this.textField.setTextFormat(FormatAdjusted,formatRange.range.start,Math.min(formatRange.range.end,this.textField.get_text().length) | 0);
		}
	}
	,copyTextFormat: function(from,to,withAlign) {
		if(withAlign == null) {
			withAlign = true;
		}
		to.font = from.font;
		to.bold = from.bold;
		to.italic = from.italic;
		to.size = from.size;
		to.color = from.color;
		if(withAlign) {
			to.align = from.align;
		}
	}
	,dtfCopy: function() {
		var dtf = this.textField.get_defaultTextFormat();
		return new openfl_text_TextFormat(dtf.font,dtf.size,dtf.color,dtf.bold,dtf.italic,dtf.underline,dtf.url,dtf.target,dtf.align);
	}
	,updateDefaultFormat: function() {
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
	}
	,set_frames: function(Frames) {
		flixel_FlxSprite.prototype.set_frames.call(this,Frames);
		this._regen = false;
		return Frames;
	}
	,__class__: flixel_text_FlxText
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_fieldWidth:"set_fieldWidth",get_fieldWidth:"get_fieldWidth",set_borderQuality:"set_borderQuality",set_borderSize:"set_borderSize",set_borderColor:"set_borderColor",set_borderStyle:"set_borderStyle",set_alignment:"set_alignment",get_alignment:"get_alignment",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_systemFont:"set_systemFont",get_systemFont:"get_systemFont",get_embedded:"get_embedded",set_font:"set_font",get_font:"get_font",set_size:"set_size",get_size:"get_size",set_text:"set_text"})
});
var flixel_addons_text_FlxTypeText = function(X,Y,Width,Text1,Size,EmbeddedFont) {
	if(EmbeddedFont == null) {
		EmbeddedFont = true;
	}
	if(Size == null) {
		Size = 8;
	}
	this._typeVarPercent = 0.5;
	this._typingVariation = false;
	this._cursorTimer = 0.0;
	this._waiting = false;
	this._erasing = false;
	this._typing = false;
	this._length = 0;
	this._waitTimer = 0.0;
	this._timer = 0.0;
	this._finalText = "";
	this.skipKeys = [];
	this.finishSounds = false;
	this.useDefaultSound = false;
	this.paused = false;
	this.waitTime = 1.0;
	this.autoErase = false;
	this.prefix = "";
	this.cursorBlinkSpeed = 0.5;
	this.cursorCharacter = "|";
	this.showCursor = false;
	this.eraseDelay = 0.02;
	this.delay = 0.05;
	flixel_text_FlxText.call(this,X,Y,Width,"",Size,EmbeddedFont);
	this._finalText = Text1;
};
$hxClasses["flixel.addons.text.FlxTypeText"] = flixel_addons_text_FlxTypeText;
flixel_addons_text_FlxTypeText.__name__ = "flixel.addons.text.FlxTypeText";
flixel_addons_text_FlxTypeText.__super__ = flixel_text_FlxText;
flixel_addons_text_FlxTypeText.prototype = $extend(flixel_text_FlxText.prototype,{
	delay: null
	,eraseDelay: null
	,showCursor: null
	,cursorCharacter: null
	,cursorBlinkSpeed: null
	,prefix: null
	,autoErase: null
	,waitTime: null
	,paused: null
	,sounds: null
	,useDefaultSound: null
	,finishSounds: null
	,skipKeys: null
	,completeCallback: null
	,eraseCallback: null
	,_finalText: null
	,_timer: null
	,_waitTimer: null
	,_length: null
	,_typing: null
	,_erasing: null
	,_waiting: null
	,_cursorTimer: null
	,_typingVariation: null
	,_typeVarPercent: null
	,_sound: null
	,start: function(Delay,ForceRestart,AutoErase,SkipKeys,Callback) {
		if(AutoErase == null) {
			AutoErase = false;
		}
		if(ForceRestart == null) {
			ForceRestart = false;
		}
		if(Delay != null) {
			this.delay = Delay;
		}
		this._typing = true;
		this._erasing = false;
		this.paused = false;
		this._waiting = false;
		if(ForceRestart) {
			this.set_text("");
			this._length = 0;
		}
		this.autoErase = AutoErase;
		if(SkipKeys != null) {
			this.skipKeys = SkipKeys;
		}
		this.completeCallback = Callback;
		this.insertBreakLines();
		if(this.useDefaultSound) {
			this.loadDefaultSound();
		}
	}
	,applyMarkup: function(input,rules) {
		flixel_text_FlxText.prototype.applyMarkup.call(this,input,rules);
		this.resetText(this.text);
		return this;
	}
	,insertBreakLines: function() {
		var saveText = this.text;
		var last = this._finalText.length;
		var n0 = 0;
		var n1 = 0;
		while(true) {
			last = HxOverrides.substr(this._finalText,0,last).lastIndexOf(" ");
			if(last <= 0) {
				break;
			}
			this.set_text(this.prefix + this._finalText);
			n0 = this.textField.get_numLines();
			var nextText = HxOverrides.substr(this._finalText,0,last) + "\n" + HxOverrides.substr(this._finalText,last + 1,this._finalText.length);
			this.set_text(this.prefix + nextText);
			n1 = this.textField.get_numLines();
			if(n0 == n1) {
				this._finalText = nextText;
			}
		}
		this.set_text(saveText);
	}
	,erase: function(Delay,ForceRestart,SkipKeys,Callback) {
		if(ForceRestart == null) {
			ForceRestart = false;
		}
		this._erasing = true;
		this._typing = false;
		this.paused = false;
		this._waiting = false;
		if(Delay != null) {
			this.eraseDelay = Delay;
		}
		if(ForceRestart) {
			this._length = this._finalText.length;
			this.set_text(this._finalText);
		}
		if(SkipKeys != null) {
			this.skipKeys = SkipKeys;
		}
		this.eraseCallback = Callback;
		if(this.useDefaultSound) {
			this.loadDefaultSound();
		}
	}
	,resetText: function(Text1) {
		this.set_text("");
		this._finalText = Text1;
		this._typing = false;
		this._erasing = false;
		this.paused = false;
		this._waiting = false;
		this._length = 0;
	}
	,setTypingVariation: function(Amount,On) {
		if(On == null) {
			On = true;
		}
		if(Amount == null) {
			Amount = 0.5;
		}
		this._typingVariation = On;
		var lowerBound = Amount < 0 ? 0 : Amount;
		this._typeVarPercent = lowerBound > 1 ? 1 : lowerBound;
	}
	,onComplete: function() {
		this._timer = 0;
		this._typing = false;
		if(this.useDefaultSound) {
			var _this = this._sound;
			_this.cleanup(_this.autoDestroy,true);
		} else if(this.sounds != null) {
			var _g = 0;
			var _g1 = this.sounds;
			while(_g < _g1.length) {
				var sound = _g1[_g];
				++_g;
				sound.cleanup(sound.autoDestroy,true);
			}
		}
		if(this.completeCallback != null) {
			this.completeCallback();
		}
		if(this.autoErase && this.waitTime <= 0) {
			this._erasing = true;
		} else if(this.autoErase) {
			this._waitTimer = this.waitTime;
			this._waiting = true;
		}
	}
	,onErased: function() {
		this._timer = 0;
		this._erasing = false;
		if(this.eraseCallback != null) {
			this.eraseCallback();
		}
	}
	,update: function(elapsed) {
		if(this.skipKeys != null && this.skipKeys.length > 0 && flixel_FlxG.keys.checkKeyArrayState(this.skipKeys,2)) {
			this.skip();
		}
		if(this._waiting && !this.paused) {
			this._waitTimer -= elapsed;
			if(this._waitTimer <= 0) {
				this._waiting = false;
				this._erasing = true;
			}
		}
		if(!this._waiting && !this.paused) {
			if(this._length < this._finalText.length && this._typing) {
				this._timer += elapsed;
			}
			if(this._length > 0 && this._erasing) {
				this._timer += elapsed;
			}
		}
		if(this._typing || this._erasing) {
			if(this._typing && this._timer >= this.delay) {
				this._length += this._timer / this.delay | 0;
				if(this._length > this._finalText.length) {
					this._length = this._finalText.length;
				}
			}
			if(this._erasing && this._timer >= this.eraseDelay) {
				this._length -= this._timer / this.eraseDelay | 0;
				if(this._length < 0) {
					this._length = 0;
				}
			}
			if(this._typing && this._timer >= this.delay || this._erasing && this._timer >= this.eraseDelay) {
				if(this._typingVariation) {
					if(this._typing) {
						this._timer = flixel_FlxG.random.float(-this.delay * this._typeVarPercent / 2,this.delay * this._typeVarPercent / 2);
					} else {
						this._timer = flixel_FlxG.random.float(-this.eraseDelay * this._typeVarPercent / 2,this.eraseDelay * this._typeVarPercent / 2);
					}
				} else {
					this._timer %= this.delay;
				}
				if(this.sounds != null && !this.useDefaultSound) {
					if(!this.finishSounds) {
						var _g = 0;
						var _g1 = this.sounds;
						while(_g < _g1.length) {
							var sound = _g1[_g];
							++_g;
							sound.cleanup(sound.autoDestroy,true);
						}
					}
					flixel_FlxG.random.getObject_flixel_system_FlxSound(this.sounds).play(!this.finishSounds);
				} else if(this.useDefaultSound) {
					this._sound.play(!this.finishSounds);
				}
			}
		}
		flixel_addons_text_FlxTypeText.helperString = this.prefix + HxOverrides.substr(this._finalText,0,this._length);
		if(this.showCursor) {
			this._cursorTimer += elapsed;
			var isBreakLine = (this.prefix + this._finalText).charAt(flixel_addons_text_FlxTypeText.helperString.length) == "\n";
			if(this._cursorTimer > this.cursorBlinkSpeed / 2 && !isBreakLine) {
				flixel_addons_text_FlxTypeText.helperString += this.cursorCharacter.charAt(0);
			}
			if(this._cursorTimer > this.cursorBlinkSpeed) {
				this._cursorTimer = 0;
			}
		}
		if(flixel_addons_text_FlxTypeText.helperString != this.text) {
			this.set_text(flixel_addons_text_FlxTypeText.helperString);
			if(this._length >= this._finalText.length && this._typing && !this._waiting && !this._erasing) {
				this.onComplete();
			}
			if(this._length == 0 && this._erasing && !this._typing && !this._waiting) {
				this.onErased();
			}
		}
		flixel_text_FlxText.prototype.update.call(this,elapsed);
	}
	,skip: function() {
		if(this._erasing || this._waiting) {
			this._length = 0;
			this._waiting = false;
		} else if(this._typing) {
			this._length = this._finalText.length;
		}
	}
	,loadDefaultSound: function() {
		this._sound = flixel_FlxG.sound.load(new flixel_addons_text_TypeSound());
	}
	,__class__: flixel_addons_text_FlxTypeText
});
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = "lime.math.Vector2";
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	result.x = pt2.x + f * (pt1.x - pt2.x);
	result.y = pt2.y + f * (pt1.y - pt2.y);
	return result;
};
lime_math_Vector2.polar = function(len,angle,result) {
	if(result == null) {
		result = new lime_math_Vector2();
	}
	var ya = len * Math.sin(angle);
	result.x = len * Math.cos(angle);
	result.y = ya;
	return result;
};
lime_math_Vector2.prototype = {
	x: null
	,y: null
	,add: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = v.x + this.x;
		result.y = v.y + this.y;
		return result;
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v,result) {
		if(result == null) {
			result = new lime_math_Vector2();
		}
		result.x = this.x - v.x;
		result.y = this.y - v.y;
		return result;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.__drawableType = 0;
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width < 0) {
		width = 0;
	}
	if(height < 0) {
		height = 0;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	this.__textureWidth = width;
	this.__textureHeight = height;
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = "openfl.display.BitmapData";
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.__textureFormat = null;
openfl_display_BitmapData.__textureInternalFormat = null;
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	return null;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	return null;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	return null;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	if(bitmapData.image != null) {
		return bitmapData;
	} else {
		return null;
	}
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__blendMode: null
	,__drawableType: null
	,__framebuffer: null
	,__framebufferContext: null
	,__indexBuffer: null
	,__indexBufferContext: null
	,__indexBufferData: null
	,__indexBufferGrid: null
	,__isMask: null
	,__isValid: null
	,__mask: null
	,__renderable: null
	,__renderTransform: null
	,__scrollRect: null
	,__stencilBuffer: null
	,__surface: null
	,__texture: null
	,__textureContext: null
	,__textureHeight: null
	,__textureVersion: null
	,__textureWidth: null
	,__transform: null
	,__uvRect: null
	,__vertexBuffer: null
	,__vertexBufferContext: null
	,__vertexBufferData: null
	,__vertexBufferGrid: null
	,__vertexBufferHeight: null
	,__vertexBufferScaleX: null
	,__vertexBufferScaleY: null
	,__vertexBufferWidth: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable) {
			return;
		}
		var needSecondBitmapData = filter.__needSecondBitmapData;
		var needCopyOfOriginal = filter.__preserveObject;
		var bitmapData2 = null;
		var bitmapData3 = null;
		if(needSecondBitmapData) {
			bitmapData2 = new openfl_display_BitmapData(this.width,this.height,true,0);
		} else {
			bitmapData2 = this;
		}
		if(needCopyOfOriginal) {
			bitmapData3 = new openfl_display_BitmapData(this.width,this.height,true,0);
		}
		if(filter.__preserveObject) {
			bitmapData3.copyPixels(this,this.rect,destPoint);
		}
		var lastBitmap = filter.__applyFilter(bitmapData2,this,sourceRect,destPoint);
		if(filter.__preserveObject) {
			lastBitmap.draw(bitmapData3,null,null);
		}
		if(needSecondBitmapData && lastBitmap == bitmapData2) {
			bitmapData2.image.version = this.image.version;
			this.image = bitmapData2.image;
		}
		this.image.dirty = true;
		this.image.version++;
	}
	,clone: function() {
		var bitmapData;
		if(!this.__isValid) {
			bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent,0);
		} else if(!this.readable && this.image == null) {
			bitmapData = new openfl_display_BitmapData(0,0,this.transparent,0);
			bitmapData.width = this.width;
			bitmapData.height = this.height;
			bitmapData.__textureWidth = this.__textureWidth;
			bitmapData.__textureHeight = this.__textureHeight;
			bitmapData.rect.copyFrom(this.rect);
			bitmapData.__framebuffer = this.__framebuffer;
			bitmapData.__framebufferContext = this.__framebufferContext;
			bitmapData.__texture = this.__texture;
			bitmapData.__textureContext = this.__textureContext;
			bitmapData.__isValid = true;
		} else {
			bitmapData = openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
		bitmapData.__worldTransform.copyFrom(this.__worldTransform);
		bitmapData.__renderTransform.copyFrom(this.__renderTransform);
		return bitmapData;
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.readable == false || otherBitmapData.readable == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.width;
			while(_g2 < _g3) {
				var x = _g2++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >>> 16 & 255) - (otherPixel >>> 16 & 255);
					g = (pixel >>> 8 & 255) - (otherPixel >>> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >>> 24 & 255) - (otherPixel >>> 24 & 255);
						if(a != 0) {
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
							comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | 255;
							comparePixel = (a & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
							foundDifference = true;
						}
					} else {
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >>> 24 & 255 & 255) << 24 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >>> 16 & 255 & 255) << 16 | (comparePixel >>> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__vertexBuffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,disposeImage: function() {
		this.readable = false;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(source == null) {
			return;
		}
		source.__update(false,true);
		var transform = openfl_geom_Matrix.__pool.get();
		transform.copyFrom(source.__renderTransform);
		transform.invert();
		if(matrix != null) {
			transform.concat(matrix);
		}
		var clipMatrix = null;
		if(clipRect != null) {
			clipMatrix = openfl_geom_Matrix.__pool.get();
			clipMatrix.copyFrom(transform);
			clipMatrix.invert();
		}
		var _colorTransform = new openfl_geom_ColorTransform();
		_colorTransform.__copyFrom(source.__worldColorTransform);
		_colorTransform.__invert();
		if(!this.readable && openfl_Lib.get_current().stage.context3D != null) {
			if(this.__textureContext == null) {
				this.__textureContext = lime_app_Application.current.__window.context;
			}
			if(colorTransform != null) {
				_colorTransform.__combine(colorTransform);
			}
			var renderer = new openfl_display_OpenGLRenderer(openfl_Lib.get_current().stage.context3D,this);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			renderer.__resize(this.width,this.height);
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawGL(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				boundsMatrix.tx = -bounds.x;
				boundsMatrix.ty = -bounds.y;
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source,boundsMatrix);
				copy.colorTransform(copy.rect,colorTransform);
				copy.__renderTransform.identity();
				copy.__renderTransform.tx = bounds.x;
				copy.__renderTransform.ty = bounds.y;
				copy.__renderTransform.concat(source.__renderTransform);
				copy.__worldAlpha = source.__worldAlpha;
				copy.__worldColorTransform.__copyFrom(source.__worldColorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
			var renderer = new openfl_display_CanvasRenderer(this.image.buffer.__srcContext);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawCanvas(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		}
		openfl_geom_Matrix.__pool.release(transform);
	}
	,drawWithQuality: function(source,matrix,colorTransform,blendMode,clipRect,smoothing,quality) {
		if(smoothing == null) {
			smoothing = false;
		}
		this.draw(source,matrix,colorTransform,blendMode,clipRect,quality != 2 && smoothing);
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.readable || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(byteArray == null) {
			var this1 = new openfl_utils_ByteArrayData(0);
			byteArray = this1;
		}
		var image = this.image;
		if(!rect.equals(this.rect)) {
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.tx = Math.round(-rect.x);
			matrix.ty = Math.round(-rect.y);
			var bitmapData = new openfl_display_BitmapData(Math.ceil(rect.width),Math.ceil(rect.height),true,0);
			bitmapData.draw(this,matrix);
			image = bitmapData.image;
			openfl_geom_Matrix.__pool.release(matrix);
		}
		if(((compressor) instanceof openfl_display_PNGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils_ByteArray.fromBytes(image.encode(lime_graphics_ImageFileFormat.PNG)),0,0);
			return byteArray;
		} else if(((compressor) instanceof openfl_display_JPEGEncoderOptions)) {
			byteArray.writeBytes(openfl_utils_ByteArray.fromBytes(image.encode(lime_graphics_ImageFileFormat.JPEG,(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality)),0,0);
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		this.__fillRect(rect,color,true);
	}
	,floodFill: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.floodFill(x,y,color,1);
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getIndexBuffer: function(context,scale9Grid) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context || scale9Grid != null && this.__indexBufferGrid == null || this.__indexBufferGrid != null && !this.__indexBufferGrid.equals(scale9Grid)) {
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = null;
			if(scale9Grid != null) {
				if(this.__indexBufferGrid == null) {
					this.__indexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__indexBufferGrid.copyFrom(scale9Grid);
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(54);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBufferData[18] = 8;
					this.__indexBufferData[19] = 9;
					this.__indexBufferData[20] = 0;
					this.__indexBufferData[21] = 0;
					this.__indexBufferData[22] = 9;
					this.__indexBufferData[23] = 1;
					this.__indexBufferData[24] = 10;
					this.__indexBufferData[25] = 8;
					this.__indexBufferData[26] = 4;
					this.__indexBufferData[27] = 4;
					this.__indexBufferData[28] = 8;
					this.__indexBufferData[29] = 0;
					this.__indexBufferData[30] = 11;
					this.__indexBufferData[31] = 10;
					this.__indexBufferData[32] = 6;
					this.__indexBufferData[33] = 6;
					this.__indexBufferData[34] = 10;
					this.__indexBufferData[35] = 4;
					this.__indexBufferData[36] = 12;
					this.__indexBufferData[37] = 13;
					this.__indexBufferData[38] = 8;
					this.__indexBufferData[39] = 8;
					this.__indexBufferData[40] = 13;
					this.__indexBufferData[41] = 9;
					this.__indexBufferData[42] = 14;
					this.__indexBufferData[43] = 12;
					this.__indexBufferData[44] = 10;
					this.__indexBufferData[45] = 10;
					this.__indexBufferData[46] = 12;
					this.__indexBufferData[47] = 8;
					this.__indexBufferData[48] = 15;
					this.__indexBufferData[49] = 14;
					this.__indexBufferData[50] = 11;
					this.__indexBufferData[51] = 11;
					this.__indexBufferData[52] = 14;
					this.__indexBufferData[53] = 10;
					this.__indexBuffer = context.createIndexBuffer(54);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(18);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 5;
					this.__indexBufferData[8] = 0;
					this.__indexBufferData[9] = 0;
					this.__indexBufferData[10] = 5;
					this.__indexBufferData[11] = 1;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 7;
					this.__indexBufferData[14] = 4;
					this.__indexBufferData[15] = 4;
					this.__indexBufferData[16] = 7;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				} else if(centerX != 0 && centerY == 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(18);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				}
			} else {
				this.__indexBufferGrid = null;
			}
			if(this.__indexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1 = new Uint16Array(6);
				this.__indexBufferData = this1;
				this.__indexBufferData[0] = 0;
				this.__indexBufferData[1] = 1;
				this.__indexBufferData[2] = 2;
				this.__indexBufferData[3] = 2;
				this.__indexBufferData[4] = 1;
				this.__indexBufferData[5] = 3;
				this.__indexBuffer = context.createIndexBuffer(6);
			}
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,getVertexBuffer: function(context,scale9Grid,targetObject) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context || scale9Grid != null && this.__vertexBufferGrid == null || this.__vertexBufferGrid != null && !this.__vertexBufferGrid.equals(scale9Grid) || targetObject != null && (this.__vertexBufferWidth != targetObject.get_width() || this.__vertexBufferHeight != targetObject.get_height() || this.__vertexBufferScaleX != targetObject.get_scaleX() || this.__vertexBufferScaleY != targetObject.get_scaleY())) {
			this.__uvRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
			var uvWidth = 1;
			var uvHeight = 1;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = null;
			if(targetObject != null) {
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
			}
			if(scale9Grid != null && targetObject != null) {
				if(this.__vertexBufferGrid == null) {
					this.__vertexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__vertexBufferGrid.copyFrom(scale9Grid);
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(224);
					this.__vertexBufferData = this1;
					var left = scale9Grid.x;
					var top = scale9Grid.y;
					var right = this.width - centerX - left;
					var bottom = this.height - centerY - top;
					var uvLeft = left / this.width;
					var uvTop = top / this.height;
					var uvCenterX = centerX / this.width;
					var uvCenterY = centerY / this.height;
					var uvRight = right / this.width;
					var uvBottom = bottom / this.height;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedTop = top / targetObject.get_scaleY();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedTop;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight * uvTop;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedTop;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight * uvTop;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBufferData[112] = renderedLeft;
					this.__vertexBufferData[113] = renderedTop + renderedCenterY;
					this.__vertexBufferData[115] = uvWidth * uvLeft;
					this.__vertexBufferData[116] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[127] = renderedTop + renderedCenterY;
					this.__vertexBufferData[130] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[140] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[141] = renderedTop + renderedCenterY;
					this.__vertexBufferData[143] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[144] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[154] = this.width;
					this.__vertexBufferData[155] = renderedTop + renderedCenterY;
					this.__vertexBufferData[157] = uvWidth;
					this.__vertexBufferData[158] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[168] = renderedLeft;
					this.__vertexBufferData[169] = this.height;
					this.__vertexBufferData[171] = uvWidth * uvLeft;
					this.__vertexBufferData[172] = uvHeight;
					this.__vertexBufferData[183] = this.height;
					this.__vertexBufferData[186] = uvHeight;
					this.__vertexBufferData[196] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[197] = this.height;
					this.__vertexBufferData[199] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[200] = uvHeight;
					this.__vertexBufferData[210] = this.width;
					this.__vertexBufferData[211] = this.height;
					this.__vertexBufferData[213] = uvWidth;
					this.__vertexBufferData[214] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(16,14);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(112);
					this.__vertexBufferData = this1;
					var top = scale9Grid.y;
					var bottom = this.height - centerY - top;
					var uvTop = top / this.height;
					var uvCenterY = centerY / this.height;
					var uvBottom = bottom / this.height;
					var renderedTop = top / targetObject.get_scaleY();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					var renderedWidth = targetObject.get_width() / targetObject.get_scaleX();
					this.__vertexBufferData[0] = renderedWidth;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedWidth;
					this.__vertexBufferData[31] = uvWidth;
					this.__vertexBufferData[56] = renderedWidth;
					this.__vertexBufferData[57] = renderedTop + renderedCenterY;
					this.__vertexBufferData[59] = uvWidth;
					this.__vertexBufferData[60] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[71] = renderedTop + renderedCenterY;
					this.__vertexBufferData[74] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[84] = renderedWidth;
					this.__vertexBufferData[85] = this.height;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[99] = this.height;
					this.__vertexBufferData[102] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				} else if(centerY == 0 && centerX != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(112);
					this.__vertexBufferData = this1;
					var left = scale9Grid.x;
					var right = this.width - centerX - left;
					var uvLeft = left / this.width;
					var uvCenterX = centerX / this.width;
					var uvRight = right / this.width;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedHeight = targetObject.get_height() / targetObject.get_scaleY();
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedHeight;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight;
					this.__vertexBufferData[15] = renderedHeight;
					this.__vertexBufferData[18] = uvHeight;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedHeight;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedHeight;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				}
			} else {
				this.__vertexBufferGrid = null;
			}
			if(this.__vertexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1 = new Float32Array(56);
				this.__vertexBufferData = this1;
				this.__vertexBufferData[0] = this.width;
				this.__vertexBufferData[1] = this.height;
				this.__vertexBufferData[3] = uvWidth;
				this.__vertexBufferData[4] = uvHeight;
				this.__vertexBufferData[15] = this.height;
				this.__vertexBufferData[18] = uvHeight;
				this.__vertexBufferData[28] = this.width;
				this.__vertexBufferData[31] = uvWidth;
				this.__vertexBuffer = context.createVertexBuffer(3,14);
			}
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
		return this.__vertexBuffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.readable) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >>> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.readable) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		var byteArray = openfl_utils_ByteArray.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
		byteArray.__endian = 0;
		return byteArray;
	}
	,getSurface: function() {
		if(!this.readable) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo_CairoImageSurface.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(context) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != context.__context) {
			this.__textureContext = context.__context;
			this.__texture = context.createRectangleTexture(this.width,this.height,1,false);
			this.__textureVersion = -1;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version > this.__textureVersion) {
			if(this.__surface != null) {
				lime_graphics_cairo_CairoSurface.flush(this.__surface);
			}
			var textureImage = this.image;
			if(!openfl_display3D_textures_TextureBase.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			this.__texture.__uploadFromImage(textureImage);
			this.__textureVersion = this.image.version;
			this.__textureWidth = textureImage.buffer.width;
			this.__textureHeight = textureImage.buffer.height;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = UInt.toFloat(openfl_utils_ByteArray.get_length(pixels)) / UInt.toFloat(4) | 0;
		var result = openfl_Vector.toIntVector(null,length,true);
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			result.set(i,pixels.readUnsignedInt());
		}
		return result;
	}
	,histogram: function(hRect) {
		var rect = hRect != null ? hRect : new openfl_geom_Rectangle(0,0,this.width,this.height);
		var pixels = this.getPixels(rect);
		var _g = [];
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < 256) {
			var j = _g2++;
			_g1.push(0);
		}
		_g.push(_g1);
		var result = _g;
		var _g = 0;
		var _g1 = openfl_utils_ByteArray.get_length(pixels);
		while(_g < _g1) {
			var i = _g++;
			var result1 = result[i % 4];
			++result1[pixels.readUnsignedByte()];
		}
		return result;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.readable) {
			return false;
		}
		if(((secondObject) instanceof openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).__bitmapData;
		}
		if(((secondObject) instanceof openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				var pixel = this.getPixel32(x,y);
				if((pixel >> 24 & 255) > firstAlphaThreshold) {
					return true;
				}
			}
		} else if(((secondObject) instanceof openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x;
			var y;
			if(secondBitmapDataPoint == null) {
				x = 0;
				y = 0;
			} else {
				x = Math.round(secondBitmapDataPoint.x - firstPoint.x);
				y = Math.round(secondBitmapDataPoint.y - firstPoint.y);
			}
			var hitRect = openfl_geom_Rectangle.__pool.get();
			hitRect.setTo(x,y,secondBitmapData.width,secondBitmapData.height);
			if(this.rect.intersects(hitRect)) {
				if(x < 0) {
					hitRect.x = 0;
					hitRect.width = Math.min(secondBitmapData.width + x,this.width);
				} else {
					hitRect.width = Math.min(secondBitmapData.width,this.width - x);
				}
				if(y < 0) {
					hitRect.y = 0;
					hitRect.height = Math.min(secondBitmapData.height + y,this.height);
				} else {
					hitRect.height = Math.min(secondBitmapData.height,this.height - y);
				}
				var pixels = this.getPixels(hitRect);
				hitRect.x = x < 0 ? -x : 0;
				hitRect.y = y < 0 ? -y : 0;
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel;
				var testPixel;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if(UInt.gt(pixel >>> 24 & 255,firstAlphaThreshold) && UInt.gt(testPixel >>> 24 & 255,secondAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(hitRect);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(hitRect);
		} else if(((secondObject) instanceof openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__pool.get();
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels = this.getPixels(secondRectangle);
				var length = UInt.toFloat(openfl_utils_ByteArray.get_length(pixels)) / UInt.toFloat(4) | 0;
				var pixel;
				var _g = 0;
				var _g1 = length;
				while(_g < _g1) {
					var i = _g++;
					pixel = pixels.readUnsignedInt();
					if(UInt.gt(pixel >>> 24 & 255,firstAlphaThreshold)) {
						openfl_geom_Rectangle.__pool.release(secondRectangle);
						return true;
					}
				}
			}
			openfl_geom_Rectangle.__pool.release(secondRectangle);
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.readable || sourceBitmapData == null || !sourceBitmapData.readable || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.readable) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		var rand = func;
		rand();
		var range = high - low;
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g = 0;
		var _g1 = this.height;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = 0;
			var _g3 = this.width;
			while(_g2 < _g3) {
				var x = _g2++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + rand() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + rand() % range;
					}
					if(greenChannel) {
						green = low + rand() % range;
					}
					if(blueChannel) {
						blue = low + rand() % range;
					}
					if(alphaChannel) {
						alpha = low + rand() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = sourceBitmapData.getPixels(sourceRect);
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var _g = 0;
		var _g1 = sh * sw;
		while(_g < _g1) {
			var i = _g++;
			pixelValue = pixels.readUnsignedInt();
			a = alphaArray == null ? pixelValue & -16777216 : alphaArray[pixelValue >> 24 & 255];
			r = redArray == null ? pixelValue & 16711680 : redArray[pixelValue >> 16 & 255];
			g = greenArray == null ? pixelValue & 65280 : greenArray[pixelValue >> 8 & 255];
			b = blueArray == null ? pixelValue & 255 : blueArray[pixelValue & 255];
			color = a + r + g + b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		var destRect = openfl_geom_Rectangle.__pool.get();
		destRect.setTo(destPoint.x,destPoint.y,sw,sh);
		this.setPixels(destRect,pixels);
		openfl_geom_Rectangle.__pool.release(destRect);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(!this.readable) {
			return;
		}
		var noise = new openfl_display__$internal_PerlinNoise(randomSeed,numOctaves,channelOptions,grayScale,0.5,stitch,0.15);
		noise.fill(this,baseX,baseY,0);
	}
	,scroll: function(x,y) {
		if(!this.readable) {
			return;
		}
		this.image.scroll(x,y);
	}
	,setPixel: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel(x,y,color,1);
	}
	,setPixel32: function(x,y,color) {
		if(!this.readable) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
	}
	,setPixels: function(rect,byteArray) {
		if(!this.readable || rect == null) {
			return;
		}
		var length = rect.width * rect.height * 4;
		if(UInt.toFloat(byteArray.length - byteArray.position) < length) {
			throw haxe_Exception.thrown(new openfl_errors_Error("End of file was encountered.",2030));
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils_ByteArray.toBytePointer(byteArray),1,openfl_utils_Endian.toLimeEndian(byteArray.__endian));
	}
	,setVector: function(rect,inputVector) {
		var this1 = new openfl_utils_ByteArrayData(0);
		var byteArray = this1;
		openfl_utils_ByteArray.set_length(byteArray,inputVector.get_length() * 4);
		var color = inputVector.iterator();
		while(color.hasNext()) {
			var color1 = color.next();
			byteArray.writeUnsignedInt(color1);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__applyAlpha: function(alpha) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g = 0;
		var _g1 = openfl_utils_ByteArray.get_length(alpha);
		while(_g < _g1) {
			var i = _g++;
			data[i * 4 + 3] = alpha.readUnsignedByte();
		}
		this.image.version++;
	}
	,__drawCairo: function(source,renderer) {
	}
	,__drawCanvas: function(source,renderer) {
		var buffer = this.image.buffer;
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,false);
		}
		renderer.__render(source);
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,true);
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
		this.image.dirty = true;
		this.image.version++;
	}
	,__drawGL: function(source,renderer) {
		var context = renderer.__context3D;
		var cacheRTT = context.__state.renderToTexture;
		var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
		context.setRenderToTexture(this.getTexture(context),true);
		renderer.__render(source);
		if(cacheRTT != null) {
			context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			context.setRenderToBackBuffer();
		}
	}
	,__fillRect: function(rect,color,allowFramebuffer) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(allowFramebuffer && this.__texture != null && this.__texture.__glFramebuffer != null && openfl_Lib.get_current().stage.__renderer.__type == "opengl") {
			var renderer = openfl_Lib.get_current().stage.__renderer;
			var context = renderer.__context3D;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			var cacheRTT = context.__state.renderToTexture;
			var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
			var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
			var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
			context.setRenderToTexture(this.__texture);
			if(useScissor) {
				context.setScissorRectangle(rect);
			}
			context.clear((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,this.transparent ? (color1 >>> 24 & 255) / 255 : 1,0,0,1);
			if(useScissor) {
				context.setScissorRectangle(null);
			}
			if(cacheRTT != null) {
				context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
			} else {
				context.setRenderToBackBuffer();
			}
		} else if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		}
	}
	,__fromBase64: function(base64,type) {
		var image = lime_graphics_Image.fromBase64(base64,type);
		this.__fromImage(image);
	}
	,__fromBytes: function(bytes,rawAlpha) {
		var image = lime_graphics_Image.fromBytes(openfl_utils_ByteArray.toBytes(bytes));
		this.__fromImage(image);
		if(rawAlpha != null) {
			this.__applyAlpha(rawAlpha);
		}
	}
	,__fromFile: function(path) {
		var image = lime_graphics_Image.fromFile(path);
		this.__fromImage(image);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__textureWidth = this.width;
			this.__textureHeight = this.height;
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__loadFromBase64: function(base64,type) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromBytes: function(bytes,rawAlpha) {
		var _gthis = this;
		return lime_graphics_Image.loadFromBytes(openfl_utils_ByteArray.toBytes(bytes)).then(function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				_gthis.__applyAlpha(rawAlpha);
			}
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__loadFromFile: function(path) {
		var _gthis = this;
		return lime_graphics_Image.loadFromFile(path).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		});
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
		this.__textureWidth = width;
		this.__textureHeight = height;
	}
	,__setUVRect: function(context,x,y,width,height) {
		var buffer = this.getVertexBuffer(context);
		if(buffer != null && (width != this.__uvRect.width || height != this.__uvRect.height || x != this.__uvRect.x || y != this.__uvRect.y)) {
			var gl = context.gl;
			if(this.__uvRect == null) {
				this.__uvRect = new openfl_geom_Rectangle();
			}
			this.__uvRect.setTo(x,y,width,height);
			var uvX = this.__textureWidth > 0 ? x / this.__textureWidth : 0;
			var uvY = this.__textureHeight > 0 ? y / this.__textureHeight : 0;
			var uvWidth = this.__textureWidth > 0 ? width / this.__textureWidth : 0;
			var uvHeight = this.__textureHeight > 0 ? height / this.__textureHeight : 0;
			this.__vertexBufferData[0] = width;
			this.__vertexBufferData[1] = height;
			this.__vertexBufferData[3] = uvX + uvWidth;
			this.__vertexBufferData[4] = uvY + uvHeight;
			this.__vertexBufferData[15] = height;
			this.__vertexBufferData[17] = uvX;
			this.__vertexBufferData[18] = uvY + uvHeight;
			this.__vertexBufferData[28] = width;
			this.__vertexBufferData[31] = uvX + uvWidth;
			this.__vertexBufferData[32] = uvY;
			this.__vertexBufferData[45] = uvX;
			this.__vertexBufferData[46] = uvY;
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
	}
	,__sync: function() {
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
	}
	,__update: function(transformOnly,updateChildren) {
		this.__updateTransforms();
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform.copyFrom(overrideTransform);
		}
		this.__renderTransform.copyFrom(this.__worldTransform);
	}
	,__class__: openfl_display_BitmapData
};
var flixel_addons_transition_GraphicTransTileCircle = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_addons_transition_GraphicTransTileCircle.preload != null) {
		this.__fromImage(flixel_addons_transition_GraphicTransTileCircle.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_addons_transition_GraphicTransTileCircle.resourceName),flixel_addons_transition_GraphicTransTileCircle.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_addons_transition_GraphicTransTileCircle.preload == null) {
				flixel_addons_transition_GraphicTransTileCircle.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.addons.transition.GraphicTransTileCircle"] = flixel_addons_transition_GraphicTransTileCircle;
flixel_addons_transition_GraphicTransTileCircle.__name__ = "flixel.addons.transition.GraphicTransTileCircle";
flixel_addons_transition_GraphicTransTileCircle.preload = null;
flixel_addons_transition_GraphicTransTileCircle.__super__ = openfl_display_BitmapData;
flixel_addons_transition_GraphicTransTileCircle.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_addons_transition_GraphicTransTileCircle
});
var flixel_addons_transition_GraphicTransTileDiamond = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_addons_transition_GraphicTransTileDiamond.preload != null) {
		this.__fromImage(flixel_addons_transition_GraphicTransTileDiamond.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_addons_transition_GraphicTransTileDiamond.resourceName),flixel_addons_transition_GraphicTransTileDiamond.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_addons_transition_GraphicTransTileDiamond.preload == null) {
				flixel_addons_transition_GraphicTransTileDiamond.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.addons.transition.GraphicTransTileDiamond"] = flixel_addons_transition_GraphicTransTileDiamond;
flixel_addons_transition_GraphicTransTileDiamond.__name__ = "flixel.addons.transition.GraphicTransTileDiamond";
flixel_addons_transition_GraphicTransTileDiamond.preload = null;
flixel_addons_transition_GraphicTransTileDiamond.__super__ = openfl_display_BitmapData;
flixel_addons_transition_GraphicTransTileDiamond.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_addons_transition_GraphicTransTileDiamond
});
var flixel_addons_transition_GraphicTransTileSquare = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_addons_transition_GraphicTransTileSquare.preload != null) {
		this.__fromImage(flixel_addons_transition_GraphicTransTileSquare.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_addons_transition_GraphicTransTileSquare.resourceName),flixel_addons_transition_GraphicTransTileSquare.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_addons_transition_GraphicTransTileSquare.preload == null) {
				flixel_addons_transition_GraphicTransTileSquare.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.addons.transition.GraphicTransTileSquare"] = flixel_addons_transition_GraphicTransTileSquare;
flixel_addons_transition_GraphicTransTileSquare.__name__ = "flixel.addons.transition.GraphicTransTileSquare";
flixel_addons_transition_GraphicTransTileSquare.preload = null;
flixel_addons_transition_GraphicTransTileSquare.__super__ = openfl_display_BitmapData;
flixel_addons_transition_GraphicTransTileSquare.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_addons_transition_GraphicTransTileSquare
});
var flixel_addons_transition_FlxTransitionSprite = function(X,Y,Delay,Graphic,GraphicWidth,GraphicHeight,FrameRate) {
	if(FrameRate == null) {
		FrameRate = 40;
	}
	if(GraphicHeight == null) {
		GraphicHeight = 32;
	}
	if(GraphicWidth == null) {
		GraphicWidth = 32;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._newStatus = -1;
	this.status = 0;
	this._finished = false;
	this._starting = true;
	flixel_FlxSprite.call(this,X,Y);
	if(Graphic == null) {
		Graphic = flixel_graphics_FlxGraphic.fromClass(flixel_addons_transition_GraphicTransTileDiamond);
		GraphicWidth = 32;
		GraphicHeight = 32;
	}
	this._delay = Delay;
	this.loadGraphic(Graphic,true,GraphicWidth,GraphicHeight);
	this.graphic.persist = true;
	this.graphic.set_destroyOnNoUse(false);
	var inArray = [];
	var outArray = [];
	var _g = 1;
	var _g1 = this.numFrames - 1;
	while(_g < _g1) {
		var i = _g++;
		inArray.push(i);
	}
	outArray = inArray.slice();
	outArray.reverse();
	this.animation.add("empty",[0],0,false);
	this.animation.add("in",inArray,FrameRate,false);
	this.animation.add("full",[this.numFrames - 1],0,false);
	this.animation.add("out",outArray,FrameRate,false);
	this.setStatus(3);
};
$hxClasses["flixel.addons.transition.FlxTransitionSprite"] = flixel_addons_transition_FlxTransitionSprite;
flixel_addons_transition_FlxTransitionSprite.__name__ = "flixel.addons.transition.FlxTransitionSprite";
flixel_addons_transition_FlxTransitionSprite.__super__ = flixel_FlxSprite;
flixel_addons_transition_FlxTransitionSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	_delay: null
	,_count: null
	,_starting: null
	,_finished: null
	,status: null
	,_newStatus: null
	,start: function(NewStatus) {
		this._starting = true;
		this._finished = false;
		this._count = 0;
		this._newStatus = NewStatus;
	}
	,startStatus: function(NewStatus) {
		this.setStatus(NewStatus);
	}
	,setStatus: function(Status) {
		var anim;
		switch(Status) {
		case -1:case 2:
			anim = "empty";
			break;
		case 0:
			anim = "in";
			break;
		case 1:
			anim = "out";
			break;
		case 3:
			anim = "full";
			break;
		}
		this.animation.play(anim);
		this.animation.finishCallback = $bind(this,this.onFinishAnim);
		this.status = Status;
	}
	,onFinishAnim: function(str) {
		if(!this._finished) {
			this._finished = true;
			switch(this.status) {
			case 0:
				this.setStatus(3);
				break;
			case 1:
				this.setStatus(2);
				break;
			default:
			}
		}
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this._starting) {
			this._count += elapsed;
			if(this._count >= this._delay) {
				this.onTime();
			}
		}
	}
	,onTime: function() {
		this._starting = false;
		this._count = 0;
		this.setStatus(this._newStatus);
		this._newStatus = -1;
	}
	,__class__: flixel_addons_transition_FlxTransitionSprite
});
var flixel_addons_transition_Transition = function(data) {
	flixel_FlxSubState.call(this,0);
	this._effect = this.createEffect(data);
	this._effect.scrollFactor.set(0,0);
	this.add(this._effect);
};
$hxClasses["flixel.addons.transition.Transition"] = flixel_addons_transition_Transition;
flixel_addons_transition_Transition.__name__ = "flixel.addons.transition.Transition";
flixel_addons_transition_Transition.__super__ = flixel_FlxSubState;
flixel_addons_transition_Transition.prototype = $extend(flixel_FlxSubState.prototype,{
	_effect: null
	,update: function(elapsed) {
		flixel_FlxSubState.prototype.update.call(this,elapsed);
		this._effect.update(elapsed);
	}
	,destroy: function() {
		flixel_FlxSubState.prototype.destroy.call(this);
		this.set_finishCallback(null);
		this._effect.destroy();
		this._effect = null;
	}
	,start: function(NewStatus) {
		this._effect.start(NewStatus);
	}
	,setStatus: function(NewStatus) {
		this._effect.setStatus(NewStatus);
	}
	,createEffect: function(Data) {
		switch(Data.type) {
		case "fade":
			return new flixel_addons_transition_TransitionFade(Data);
		case "tiles":
			return new flixel_addons_transition_TransitionTiles(Data);
		default:
			return null;
		}
	}
	,get_finishCallback: function() {
		if(this._effect != null) {
			return this._effect.finishCallback;
		}
		return null;
	}
	,set_finishCallback: function(f) {
		if(this._effect != null) {
			this._effect.finishCallback = f;
			return f;
		}
		return null;
	}
	,__class__: flixel_addons_transition_Transition
	,__properties__: $extend(flixel_FlxSubState.prototype.__properties__,{set_finishCallback:"set_finishCallback",get_finishCallback:"get_finishCallback"})
});
var flixel_addons_transition_TransitionData = function(TransType,Color,Duration,Direction,TileData,Region) {
	if(Duration == null) {
		Duration = 1.0;
	}
	if(Color == null) {
		Color = -1;
	}
	if(TransType == null) {
		TransType = "fade";
	}
	this.duration = 1.0;
	this.type = TransType;
	this.tileData = TileData;
	this.duration = Duration;
	this.color = Color;
	this.direction = Direction;
	if(this.direction == null) {
		this.direction = new flixel_math_FlxPoint(0,0);
	}
	var Value = this.direction.x;
	var lowerBound = Value < -1 ? -1 : Value;
	var tmp = lowerBound > 1;
	var Value = this.direction.y;
	var lowerBound = Value < -1 ? -1 : Value;
	var tmp = lowerBound > 1;
	this.tweenOptions = { onComplete : null};
	this.region = Region;
	if(Region == null) {
		this.region = new flixel_math_FlxRect(0,0,flixel_FlxG.width,flixel_FlxG.height);
	}
};
$hxClasses["flixel.addons.transition.TransitionData"] = flixel_addons_transition_TransitionData;
flixel_addons_transition_TransitionData.__name__ = "flixel.addons.transition.TransitionData";
flixel_addons_transition_TransitionData.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_transition_TransitionData.prototype = {
	type: null
	,tileData: null
	,color: null
	,duration: null
	,direction: null
	,tweenOptions: null
	,region: null
	,destroy: function() {
		this.tileData = null;
		this.direction = null;
		this.tweenOptions.onComplete = null;
		this.tweenOptions.ease = null;
		this.tweenOptions = null;
		this.region = null;
		this.direction = null;
	}
	,__class__: flixel_addons_transition_TransitionData
};
var flixel_addons_transition_TransitionEffect = function(data) {
	this._finalDelayTime = 0.0;
	this._started = false;
	this.finished = false;
	this._data = data;
	flixel_group_FlxTypedSpriteGroup.call(this);
};
$hxClasses["flixel.addons.transition.TransitionEffect"] = flixel_addons_transition_TransitionEffect;
flixel_addons_transition_TransitionEffect.__name__ = "flixel.addons.transition.TransitionEffect";
flixel_addons_transition_TransitionEffect.__super__ = flixel_group_FlxTypedSpriteGroup;
flixel_addons_transition_TransitionEffect.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	finishCallback: null
	,finished: null
	,_started: null
	,_endStatus: null
	,_finalDelayTime: null
	,_data: null
	,destroy: function() {
		flixel_group_FlxTypedSpriteGroup.prototype.destroy.call(this);
		this.finishCallback = null;
	}
	,start: function(NewStatus) {
		this._started = true;
		if(NewStatus == 0) {
			this._endStatus = 3;
		} else {
			this._endStatus = 2;
		}
	}
	,setStatus: function(NewStatus) {
	}
	,delayThenFinish: function() {
		new flixel_util_FlxTimer().start(this._finalDelayTime,$bind(this,this.onFinish));
	}
	,onFinish: function(f) {
		this.finished = true;
		if(this.finishCallback != null) {
			this.finishCallback();
			this.finishCallback = null;
		}
	}
	,__class__: flixel_addons_transition_TransitionEffect
});
var flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.preload != null) {
		this.__fromImage(flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.preload);
	} else {
		var _gthis = this;
		lime_graphics_Image.loadFromBase64(haxe_Resource.getString(flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.resourceName),flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.resourceType).then(function(image) {
			_gthis.__fromImage(image);
			return lime_app_Future.withValue(_gthis);
		}).onComplete(function(b) {
			if(flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.preload == null) {
				flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.preload = b.image;
			}
			if(onload != null && Reflect.isFunction(onload)) {
				onload(b);
			}
		});
	}
};
$hxClasses["flixel.addons.transition._TransitionFade.GraphicDiagonalGradient"] = flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient;
flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.__name__ = "flixel.addons.transition._TransitionFade.GraphicDiagonalGradient";
flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.preload = null;
flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.__super__ = openfl_display_BitmapData;
flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient
});
var flixel_addons_transition_TransitionFade = function(data) {
	this.tweenValEnd2 = 0;
	this.tweenValEnd = 0;
	this.tweenValStart2 = 0;
	this.tweenValStart = 0;
	this.tweenStr2 = "";
	this.tweenStr = "";
	flixel_addons_transition_TransitionEffect.call(this,data);
	this.back = this.makeSprite(data.direction.x,data.direction.y,data.region);
	this.back.scrollFactor.set(0,0);
	this.add(this.back);
};
$hxClasses["flixel.addons.transition.TransitionFade"] = flixel_addons_transition_TransitionFade;
flixel_addons_transition_TransitionFade.__name__ = "flixel.addons.transition.TransitionFade";
flixel_addons_transition_TransitionFade.__super__ = flixel_addons_transition_TransitionEffect;
flixel_addons_transition_TransitionFade.prototype = $extend(flixel_addons_transition_TransitionEffect.prototype,{
	back: null
	,tweenStr: null
	,tweenStr2: null
	,tweenValStart: null
	,tweenValStart2: null
	,tweenValEnd: null
	,tweenValEnd2: null
	,destroy: function() {
		flixel_addons_transition_TransitionEffect.prototype.destroy.call(this);
		this.back = null;
	}
	,start: function(NewStatus) {
		flixel_addons_transition_TransitionEffect.prototype.start.call(this,NewStatus);
		this.setTweenValues(NewStatus,this._data.direction.x,this._data.direction.y);
		switch(this.tweenStr) {
		case "alpha":
			this.back.set_alpha(this.tweenValStart);
			break;
		case "x":
			this.back.set_x(this.tweenValStart);
			break;
		case "y":
			this.back.set_y(this.tweenValStart);
			break;
		}
		switch(this.tweenStr2) {
		case "alpha":
			this.back.set_alpha(this.tweenValStart2);
			break;
		case "x":
			this.back.set_x(this.tweenValStart2);
			break;
		case "y":
			this.back.set_y(this.tweenValStart2);
			break;
		}
		var Values = { };
		Values[this.tweenStr] = this.tweenValEnd;
		if(this.tweenStr2 != "") {
			Values[this.tweenStr2] = this.tweenValEnd2;
		}
		this._data.tweenOptions.onComplete = $bind(this,this.finishTween);
		flixel_tweens_FlxTween.tween(this.back,Values,this._data.duration,this._data.tweenOptions);
	}
	,setTweenValues: function(NewStatus,DirX,DirY) {
		if(DirX == 0 && DirY == 0) {
			this.tweenStr = "alpha";
			this.tweenValStart = NewStatus == 0 ? 0.0 : 1.0;
			this.tweenValEnd = NewStatus == 0 ? 1.0 : 0.0;
		} else if(Math.abs(DirX) > 0 && DirY == 0) {
			this.tweenStr = "x";
			if(DirX > 0) {
				this.tweenValStart = NewStatus == 0 ? -this.back.get_width() : 0;
				this.tweenValEnd = NewStatus == 0 ? 0 : -this.back.get_width();
			} else {
				this.tweenValStart = NewStatus == 0 ? flixel_FlxG.width : -this.back.get_width() / 2;
				this.tweenValEnd = NewStatus == 0 ? -this.back.get_width() / 2 : flixel_FlxG.width;
			}
		} else if(DirX == 0 && Math.abs(DirY) > 0) {
			this.tweenStr = "y";
			if(DirY > 0) {
				this.tweenValStart = NewStatus == 0 ? -this.back.get_height() : 0;
				this.tweenValEnd = NewStatus == 0 ? 0 : -this.back.get_height();
			} else {
				this.tweenValStart = NewStatus == 0 ? flixel_FlxG.height : -this.back.get_height() / 2;
				this.tweenValEnd = NewStatus == 0 ? -this.back.get_height() / 2 : flixel_FlxG.height;
			}
		} else if(Math.abs(DirX) > 0 && Math.abs(DirY) > 0) {
			this.tweenStr = "x";
			this.tweenStr2 = "y";
			if(DirX > 0) {
				this.tweenValStart = NewStatus == 0 ? -this.back.get_width() : 0;
				this.tweenValEnd = NewStatus == 0 ? 0 : -this.back.get_width();
			} else {
				this.tweenValStart = NewStatus == 0 ? flixel_FlxG.width : -this.back.get_width() * 0.66666666666666663;
				this.tweenValEnd = NewStatus == 0 ? -this.back.get_width() * 0.66666666666666663 : flixel_FlxG.width;
			}
			if(DirY > 0) {
				this.tweenValStart2 = NewStatus == 0 ? -this.back.get_height() : 0;
				this.tweenValEnd2 = NewStatus == 0 ? 0 : -this.back.get_height();
			} else {
				this.tweenValStart2 = NewStatus == 0 ? flixel_FlxG.height : -this.back.get_height() * 0.66666666666666663;
				this.tweenValEnd2 = NewStatus == 0 ? -this.back.get_height() * 0.66666666666666663 : flixel_FlxG.height;
			}
		}
	}
	,makeSprite: function(DirX,DirY,region) {
		var s = new flixel_FlxSprite(region.x,region.y);
		var locX = 0;
		var locY = 0;
		var angle = 0;
		var pixels = null;
		if(DirX == 0 && DirY == 0) {
			s.makeGraphic(region.width | 0,region.height | 0,this._data.color);
		} else if(DirX == 0 && Math.abs(DirY) > 0) {
			locY = DirY > 0 ? region.height : 0;
			angle = DirY > 0 ? 90 : 270;
			s.makeGraphic(1,region.height * 2 | 0,this._data.color);
			pixels = s.get_pixels();
			var gvert = flixel_util_FlxGradient.createGradientBitmapData(1,region.height | 0,[this._data.color,0],1,angle);
			pixels.copyPixels(gvert,gvert.rect,new openfl_geom_Point(0,locY));
			s.set_pixels(pixels);
			s.scale.set(region.width,1.0);
			s.updateHitbox();
		} else if(Math.abs(DirX) > 0 && DirY == 0) {
			locX = DirX > 0 ? region.width : 0;
			angle = DirX > 0 ? 0 : 180;
			s.makeGraphic(region.width * 2 | 0,1,this._data.color);
			pixels = s.get_pixels();
			var ghorz = flixel_util_FlxGradient.createGradientBitmapData(region.width | 0,1,[this._data.color,0],1,angle);
			pixels.copyPixels(ghorz,ghorz.rect,new openfl_geom_Point(locX,0));
			s.set_pixels(pixels);
			s.scale.set(1.0,region.height);
			s.updateHitbox();
		} else if(Math.abs(DirX) > 0 && Math.abs(DirY) > 0) {
			locY = DirY > 0 ? region.height : 0;
			s.loadGraphic(this.getGradient());
			s.set_flipX(DirX < 0);
			s.set_flipY(DirY < 0);
		}
		return s;
	}
	,getGradient: function() {
		var rawBmp = new flixel_addons_transition__$TransitionFade_GraphicDiagonalGradient(0,0);
		var gdiag = rawBmp;
		var gdiag_scaled = new openfl_display_BitmapData(flixel_FlxG.width * 2,flixel_FlxG.height * 2,true);
		var m = new openfl_geom_Matrix();
		m.scale(gdiag_scaled.width / gdiag.width,gdiag_scaled.height / gdiag.height);
		gdiag_scaled.draw(gdiag,m,null,null,null,true);
		var theColor = this._data.color;
		var final_pixels = new openfl_display_BitmapData(flixel_FlxG.width * 3,flixel_FlxG.height * 3,true,theColor);
		final_pixels.copyChannel(gdiag_scaled,gdiag_scaled.rect,new openfl_geom_Point(final_pixels.width - gdiag_scaled.width,final_pixels.height - gdiag_scaled.height),1,8);
		gdiag.dispose();
		gdiag_scaled.dispose();
		return final_pixels;
	}
	,finishTween: function(f) {
		this.delayThenFinish();
	}
	,__class__: flixel_addons_transition_TransitionFade
});
var flixel_addons_transition_TransitionTiles = function(data) {
	this._isCenter = false;
	flixel_addons_transition_TransitionEffect.call(this,data);
	this._grpSprites = new flixel_group_FlxTypedSpriteGroup();
	var delay = 0;
	if(data.tileData == null) {
		data.tileData = { asset : null, width : 32, height : 32};
	}
	var region = data.region;
	var tilesX = Math.ceil(region.width / data.tileData.width);
	var tilesY = Math.ceil(region.height / data.tileData.height);
	var maxTiles = tilesX > tilesY ? tilesX : tilesY;
	var dTime = data.duration / maxTiles;
	var xDelay = dTime * Math.abs(data.direction.x);
	var yDelay = dTime * Math.abs(data.direction.y);
	var addX = data.tileData.width;
	var addY = data.tileData.height;
	var tx = 0;
	var ty = 0;
	var startX = region.x | 0;
	var startY = region.y | 0;
	if(data.direction.x < 0) {
		addX *= -1;
		startX += region.width + addX | 0;
	}
	if(data.direction.y < 0) {
		addY *= -1;
		startY += region.height + addY | 0;
	}
	tx = startX;
	ty = startY;
	var _g = 0;
	var _g1 = tilesY;
	while(_g < _g1) {
		var iy = _g++;
		var _g2 = 0;
		var _g3 = tilesX;
		while(_g2 < _g3) {
			var ix = _g2++;
			var frameRate = 40;
			if(data.tileData.frameRate != null) {
				frameRate = data.tileData.frameRate;
			}
			var ts = new flixel_addons_transition_FlxTransitionSprite(tx,ty,delay,data.tileData.asset,data.tileData.width,data.tileData.height,frameRate);
			ts.set_color(data.color);
			ts.scrollFactor.set(0,0);
			this._grpSprites.add(ts);
			tx += addX;
			delay += xDelay;
		}
		ty += addY;
		tx = startX;
		delay = (iy + 1) * yDelay;
	}
	this.add(this._grpSprites);
	this._isCenter = data.direction.x == 0 && data.direction.y == 0;
};
$hxClasses["flixel.addons.transition.TransitionTiles"] = flixel_addons_transition_TransitionTiles;
flixel_addons_transition_TransitionTiles.__name__ = "flixel.addons.transition.TransitionTiles";
flixel_addons_transition_TransitionTiles.__super__ = flixel_addons_transition_TransitionEffect;
flixel_addons_transition_TransitionTiles.prototype = $extend(flixel_addons_transition_TransitionEffect.prototype,{
	_grpSprites: null
	,_isCenter: null
	,destroy: function() {
		flixel_addons_transition_TransitionEffect.prototype.destroy.call(this);
		this._grpSprites = null;
	}
	,start: function(NewStatus) {
		flixel_addons_transition_TransitionEffect.prototype.start.call(this,NewStatus);
		this._grpSprites.group.forEach(function(t) {
			t.start(NewStatus);
		},false);
	}
	,setStatus: function(NewStatus) {
		flixel_addons_transition_TransitionEffect.prototype.setStatus.call(this,NewStatus);
		this._grpSprites.group.forEach(function(t) {
			t.setStatus(NewStatus);
		},false);
	}
	,update: function(elapsed) {
		flixel_addons_transition_TransitionEffect.prototype.update.call(this,elapsed);
		if(this._started) {
			var allDone = true;
			var _g = 0;
			var _g1 = this._grpSprites.group.members;
			while(_g < _g1.length) {
				var sprite = _g1[_g];
				++_g;
				if(sprite.status != -1 && sprite.status != this._endStatus) {
					allDone = false;
					break;
				}
			}
			if(allDone) {
				this._started = false;
				this.delayThenFinish();
			}
		}
	}
	,__class__: flixel_addons_transition_TransitionTiles
});
var flixel_addons_ui_Anchor = function(XOff,YOff,XSide,YSide,XFlush,YFlush) {
	this.x = new flixel_addons_ui_AnchorPoint(XOff,XSide,XFlush);
	this.y = new flixel_addons_ui_AnchorPoint(YOff,YSide,YFlush);
};
$hxClasses["flixel.addons.ui.Anchor"] = flixel_addons_ui_Anchor;
flixel_addons_ui_Anchor.__name__ = "flixel.addons.ui.Anchor";
flixel_addons_ui_Anchor.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_ui_Anchor.prototype = {
	x: null
	,y: null
	,destroy: function() {
		this.x = null;
		this.y = null;
	}
	,anchorThing: function(thing,destination) {
		var destX = 0;
		var destY = 0;
		switch(this.x.side) {
		case "center":
			destX = destination.x + destination.get_width() / 2;
			break;
		case "left":
			destX = destination.x;
			break;
		case "right":
			destX = destination.x + destination.get_width();
			break;
		default:
			destX = destination.x;
		}
		switch(this.y.side) {
		case "bottom":
			destY = destination.y + destination.get_height();
			break;
		case "center":
			destY = destination.y + destination.get_height() / 2;
			break;
		case "top":
			destY = destination.y;
			break;
		default:
			destY = destination.y;
		}
		switch(this.x.flush) {
		case "center":
			destX -= thing.get_width() / 2;
			break;
		case "left":
			break;
		case "right":
			destX -= thing.get_width();
			break;
		default:
		}
		switch(this.y.flush) {
		case "bottom":
			destY -= thing.get_height();
			break;
		case "center":
			destY -= thing.get_height() / 2;
			break;
		case "top":
			break;
		default:
		}
		thing.set_x(destX + this.x.offset);
		thing.set_y(destY + this.y.offset);
	}
	,getFlipped: function(FlipX,FlipY,AnchorObject) {
		var xoff = FlipX ? -1 * this.x.offset : this.x.offset;
		var yoff = FlipY ? -1 * this.y.offset : this.y.offset;
		var xside = FlipX ? this.flipAnchorSide(this.x.side) : this.x.side;
		var yside = FlipY ? this.flipAnchorSide(this.y.side) : this.y.side;
		var xflush = FlipX ? this.flipAnchorSide(this.x.flush) : this.x.flush;
		var yflush = FlipY ? this.flipAnchorSide(this.y.flush) : this.y.flush;
		if(AnchorObject == null) {
			AnchorObject = new flixel_addons_ui_Anchor(xoff,yoff,xside,yside,xflush,yflush);
		} else {
			AnchorObject.x.offset = xoff;
			AnchorObject.y.offset = yoff;
			AnchorObject.x.side = xside;
			AnchorObject.y.side = yside;
			AnchorObject.x.flush = xflush;
			AnchorObject.y.flush = yflush;
		}
		return AnchorObject;
	}
	,clone: function() {
		return new flixel_addons_ui_Anchor(this.x.offset,this.y.offset,this.x.side,this.y.side,this.x.flush,this.y.flush);
	}
	,flipAnchorSide: function(str) {
		if(str == "left") {
			return "right";
		}
		if(str == "right") {
			return "left";
		}
		if(str == "top") {
			return "bottom";
		}
		if(str == "bottom") {
			return "top";
		}
		return str;
	}
	,__class__: flixel_addons_ui_Anchor
};
var flixel_addons_ui_AnchorPoint = function(Offset,Side,Flush) {
	this.flush = "center";
	this.side = "center";
	this.offset = 0;
	this.offset = Offset;
	this.side = Side;
	this.flush = Flush;
};
$hxClasses["flixel.addons.ui.AnchorPoint"] = flixel_addons_ui_AnchorPoint;
flixel_addons_ui_AnchorPoint.__name__ = "flixel.addons.ui.AnchorPoint";
flixel_addons_ui_AnchorPoint.prototype = {
	offset: null
	,side: null
	,flush: null
	,__class__: flixel_addons_ui_AnchorPoint
};
var flixel_addons_ui_BorderDef = function(Style,Color,Size,Quality) {
	if(Quality == null) {
		Quality = 1;
	}
	if(Size == null) {
		Size = 1;
	}
	this.style = Style;
	this.color = Color;
	this.size = Size;
	this.quality = Quality;
};
$hxClasses["flixel.addons.ui.BorderDef"] = flixel_addons_ui_BorderDef;
flixel_addons_ui_BorderDef.__name__ = "flixel.addons.ui.BorderDef";
flixel_addons_ui_BorderDef.fromXML = function(data) {
	var border_str = flixel_addons_ui_U.xml_str(data,"border");
	var border_style = flixel_text_FlxTextBorderStyle.NONE;
	var border_color = flixel_addons_ui_U.xml_color(data,"border_color",true,0);
	var border_size = flixel_addons_ui_U.xml_f(data,"border_size",1);
	var border_quality = flixel_addons_ui_U.xml_f(data,"border_quality",0);
	var borderDef = new flixel_addons_ui_BorderDef(border_style,border_color,border_size,border_quality);
	switch(border_str) {
	case "":
		border_str = flixel_addons_ui_U.xml_str(data,"shadow",true,"");
		if(border_str != "" && border_str != "false" && border_str != "none") {
			borderDef.style = flixel_text_FlxTextBorderStyle.SHADOW;
			var safe = true;
			if(safe == null) {
				safe = false;
			}
			var return_val = flixel_util_FlxColor.fromString(border_str);
			if(return_val == null) {
				if(!safe) {
					throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + border_str);
				} else {
					return_val = 0;
				}
			}
			borderDef.color = return_val;
		} else {
			border_str = flixel_addons_ui_U.xml_str(data,"outline",true,"");
			if(border_str != "" && border_str != "false" && border_str != "none") {
				borderDef.style = flixel_text_FlxTextBorderStyle.OUTLINE;
				var safe = true;
				if(safe == null) {
					safe = false;
				}
				var return_val = flixel_util_FlxColor.fromString(border_str);
				if(return_val == null) {
					if(!safe) {
						throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + border_str);
					} else {
						return_val = 0;
					}
				}
				borderDef.color = return_val;
			} else {
				border_str = flixel_addons_ui_U.xml_str(data,"outline_fast");
				if(border_str != "" && border_str != "false" && border_str != "none") {
					borderDef.style = flixel_text_FlxTextBorderStyle.OUTLINE_FAST;
					var safe = true;
					if(safe == null) {
						safe = false;
					}
					var return_val = flixel_util_FlxColor.fromString(border_str);
					if(return_val == null) {
						if(!safe) {
							throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + border_str);
						} else {
							return_val = 0;
						}
					}
					borderDef.color = return_val;
				}
			}
		}
		break;
	case "false":case "none":
		borderDef.style = flixel_text_FlxTextBorderStyle.NONE;
		break;
	case "outline":
		borderDef.style = flixel_text_FlxTextBorderStyle.OUTLINE;
		break;
	case "outline_fast":
		borderDef.style = flixel_text_FlxTextBorderStyle.OUTLINE_FAST;
		break;
	case "shadow":
		borderDef.style = flixel_text_FlxTextBorderStyle.SHADOW;
		break;
	}
	return borderDef;
};
flixel_addons_ui_BorderDef.prototype = {
	style: null
	,color: null
	,size: null
	,quality: null
	,clone: function() {
		return new flixel_addons_ui_BorderDef(this.style,this.color,this.size,this.quality);
	}
	,apply: function(f) {
		var Color = this.color;
		var Size = this.size;
		var Quality = this.quality;
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		f.set_borderStyle(this.style);
		f.set_borderColor(Color);
		f.set_borderSize(Size);
		f.set_borderQuality(Quality);
		return f;
	}
	,__class__: flixel_addons_ui_BorderDef
};
var flixel_addons_ui_ButtonLabelStyle = function(Font,Align,Color,Border) {
	this.align = null;
	this.color = null;
	this.border = null;
	this.font = null;
	this.font = Font;
	this.border = Border;
	this.color = Color;
	this.align = Align;
};
$hxClasses["flixel.addons.ui.ButtonLabelStyle"] = flixel_addons_ui_ButtonLabelStyle;
flixel_addons_ui_ButtonLabelStyle.__name__ = "flixel.addons.ui.ButtonLabelStyle";
flixel_addons_ui_ButtonLabelStyle.prototype = {
	font: null
	,border: null
	,color: null
	,align: null
	,apply: function(f) {
		if(this.font != null) {
			this.font.apply(null,f);
		}
		if(this.border != null) {
			this.border.apply(f);
		}
		if(this.color != null) {
			f.set_color(this.color);
		}
		if(this.align != null) {
			f.set_alignment(this.align);
		}
	}
	,__class__: flixel_addons_ui_ButtonLabelStyle
};
var flixel_addons_ui_FlxBaseMultiInput = function() {
};
$hxClasses["flixel.addons.ui.FlxBaseMultiInput"] = flixel_addons_ui_FlxBaseMultiInput;
flixel_addons_ui_FlxBaseMultiInput.__name__ = "flixel.addons.ui.FlxBaseMultiInput";
flixel_addons_ui_FlxBaseMultiInput.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_ui_FlxBaseMultiInput.prototype = {
	input: null
	,combos: null
	,forbiddens: null
	,destroy: function() {
		this.combos = null;
		this.forbiddens = null;
	}
	,checkJustPressed: function() {
		return false;
	}
	,checkJustReleased: function() {
		return false;
	}
	,checkPressed: function() {
		return false;
	}
	,justPressed: function() {
		if(this.checkJustPressed()) {
			return this.passCombosAndForbiddens();
		} else {
			return false;
		}
	}
	,justReleased: function() {
		if(this.checkJustReleased()) {
			if(this.forbiddens != null) {
				return this.checkForbiddens(false);
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,pressed: function() {
		if(this.checkPressed()) {
			return this.passCombosAndForbiddens();
		} else {
			return false;
		}
	}
	,equals: function(other) {
		if(other == null) {
			return false;
		}
		if(Type.typeof(other) != Type.typeof(this)) {
			return false;
		}
		if(this.input != other.input) {
			return false;
		}
		if(this.combos == null != (other.combos == null)) {
			return false;
		}
		if(this.forbiddens == null != (other.forbiddens == null)) {
			return false;
		}
		if(this.combos != null && other.combos != null) {
			var _g = 0;
			var _g1 = this.combos;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(other.combos.indexOf(i) == -1) {
					return false;
				}
			}
		}
		if(this.forbiddens != null && other.forbiddens != null) {
			var _g = 0;
			var _g1 = this.forbiddens;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(other.forbiddens.indexOf(i) == -1) {
					return false;
				}
			}
		}
		return true;
	}
	,passCombosAndForbiddens: function(comboValue,forbiddenValue) {
		if(forbiddenValue == null) {
			forbiddenValue = false;
		}
		if(comboValue == null) {
			comboValue = true;
		}
		var passCombos = this.combos == null || this.checkCombos(comboValue);
		var passForbiddens = this.forbiddens == null || this.checkForbiddens(forbiddenValue);
		if(passCombos) {
			return passForbiddens;
		} else {
			return false;
		}
	}
	,checkCombos: function(value) {
		return false;
	}
	,checkForbiddens: function(value) {
		return false;
	}
	,__class__: flixel_addons_ui_FlxBaseMultiInput
};
var flixel_addons_ui_FlxInputText = function(X,Y,Width,Text1,size,TextColor,BackgroundColor,EmbeddedFont) {
	if(EmbeddedFont == null) {
		EmbeddedFont = true;
	}
	if(BackgroundColor == null) {
		BackgroundColor = -1;
	}
	if(TextColor == null) {
		TextColor = -16777216;
	}
	if(size == null) {
		size = 8;
	}
	if(Width == null) {
		Width = 150;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._scrollBoundIndeces = { left : 0, right : 0};
	this.backgroundColor = -1;
	this.fieldBorderThickness = 1;
	this.fieldBorderColor = -16777216;
	this.filterMode = 0;
	this.maxLength = 0;
	this.forceCase = 0;
	this.caretIndex = 0;
	this.hasFocus = false;
	this.caretWidth = 1;
	this.background = false;
	flixel_text_FlxText.call(this,X,Y,Width,Text1,size,EmbeddedFont);
	this.set_backgroundColor(BackgroundColor);
	if(BackgroundColor != 0) {
		this.background = true;
	}
	this.set_color(TextColor);
	this.set_caretColor(TextColor);
	this.caret = new flixel_FlxSprite();
	this.caret.makeGraphic(this.caretWidth,size + 2 | 0);
	this._caretTimer = new flixel_util_FlxTimer();
	this.set_caretIndex(0);
	this.set_hasFocus(false);
	if(this.background) {
		this.fieldBorderSprite = new flixel_FlxSprite(X,Y);
		this.backgroundSprite = new flixel_FlxSprite(X,Y);
	}
	this.set_lines(1);
	openfl_Lib.get_current().stage.addEventListener("keyDown",$bind(this,this.onKeyDown));
	if(Text1 == null) {
		Text1 = "";
	}
	this.set_text(Text1);
	this.calcFrame();
};
$hxClasses["flixel.addons.ui.FlxInputText"] = flixel_addons_ui_FlxInputText;
flixel_addons_ui_FlxInputText.__name__ = "flixel.addons.ui.FlxInputText";
flixel_addons_ui_FlxInputText.__super__ = flixel_text_FlxText;
flixel_addons_ui_FlxInputText.prototype = $extend(flixel_text_FlxText.prototype,{
	customFilterPattern: null
	,set_customFilterPattern: function(cfp) {
		this.customFilterPattern = cfp;
		this.set_filterMode(4);
		return this.customFilterPattern;
	}
	,callback: null
	,background: null
	,caretColor: null
	,set_caretColor: function(i) {
		this.caretColor = i;
		this.dirty = true;
		return this.caretColor;
	}
	,caretWidth: null
	,set_caretWidth: function(i) {
		this.caretWidth = i;
		this.dirty = true;
		return this.caretWidth;
	}
	,params: null
	,hasFocus: null
	,caretIndex: null
	,focusGained: null
	,focusLost: null
	,forceCase: null
	,maxLength: null
	,lines: null
	,filterMode: null
	,fieldBorderColor: null
	,fieldBorderThickness: null
	,backgroundColor: null
	,backgroundSprite: null
	,_caretTimer: null
	,caret: null
	,fieldBorderSprite: null
	,_scrollBoundIndeces: null
	,_charBoundaries: null
	,lastScroll: null
	,destroy: function() {
		openfl_Lib.get_current().stage.removeEventListener("keyDown",$bind(this,this.onKeyDown));
		this.backgroundSprite = flixel_util_FlxDestroyUtil.destroy(this.backgroundSprite);
		this.fieldBorderSprite = flixel_util_FlxDestroyUtil.destroy(this.fieldBorderSprite);
		this.callback = null;
		flixel_text_FlxText.prototype.destroy.call(this);
	}
	,draw: function() {
		this.drawSprite(this.fieldBorderSprite);
		this.drawSprite(this.backgroundSprite);
		flixel_text_FlxText.prototype.draw.call(this);
		if(this.caretColor != this.caret.color || this.caret.get_height() != (this._defaultFormat.size | 0) + 2) {
			this.caret.set_color(this.caretColor);
		}
		this.drawSprite(this.caret);
	}
	,drawSprite: function(Sprite) {
		if(Sprite != null && Sprite.visible) {
			Sprite.scrollFactor = this.scrollFactor;
			Sprite.set_cameras(this.get_cameras());
			Sprite.draw();
		}
	}
	,update: function(elapsed) {
		flixel_text_FlxText.prototype.update.call(this,elapsed);
		if(flixel_FlxG.mouse._leftButton.current == 2) {
			var hadFocus = this.hasFocus;
			if(flixel_FlxG.mouse.overlaps(this)) {
				this.set_caretIndex(this.getCaretIndex());
				this.set_hasFocus(true);
				if(!hadFocus && this.focusGained != null) {
					this.focusGained();
				}
			} else {
				this.set_hasFocus(false);
				if(hadFocus && this.focusLost != null) {
					this.focusLost();
				}
			}
		}
	}
	,onKeyDown: function(e) {
		var key = e.keyCode;
		if(this.hasFocus) {
			if(key == 16 || key == 17 || key == 220 || key == 27) {
				return;
			} else if(key == 37) {
				if(this.caretIndex > 0) {
					var _g = this;
					_g.set_caretIndex(_g.caretIndex - 1);
					this.set_text(this.text);
				}
			} else if(key == 39) {
				if(this.caretIndex < this.text.length) {
					var _g = this;
					_g.set_caretIndex(_g.caretIndex + 1);
					this.set_text(this.text);
				}
			} else if(key == 35) {
				this.set_caretIndex(this.text.length);
				this.set_text(this.text);
			} else if(key == 36) {
				this.set_caretIndex(0);
				this.set_text(this.text);
			} else if(key == 8) {
				if(this.caretIndex > 0) {
					var _g = this;
					_g.set_caretIndex(_g.caretIndex - 1);
					this.set_text(this.text.substring(0,this.caretIndex) + this.text.substring(this.caretIndex + 1));
					this.onChange("backspace");
				}
			} else if(key == 46) {
				if(this.text.length > 0 && this.caretIndex < this.text.length) {
					this.set_text(this.text.substring(0,this.caretIndex) + this.text.substring(this.caretIndex + 1));
					this.onChange("delete");
				}
			} else if(key == 13) {
				this.onChange("enter");
			} else {
				if(e.charCode == 0) {
					return;
				}
				var code = e.charCode;
				var newText = this.filter(String.fromCodePoint(code));
				if(newText.length > 0 && (this.maxLength == 0 || this.text.length + newText.length < this.maxLength)) {
					this.set_text(this.insertSubstring(this.text,newText,this.caretIndex));
					var _g = this;
					_g.set_caretIndex(_g.caretIndex + 1);
					this.onChange("input");
				}
			}
		}
	}
	,onChange: function(action) {
		if(this.callback != null) {
			this.callback(this.text,action);
		}
	}
	,insertSubstring: function(Original,Insert,Index) {
		if(Index != Original.length) {
			Original = Original.substring(0,Index) + Insert + Original.substring(Index);
		} else {
			Original += Insert;
		}
		return Original;
	}
	,getCaretIndex: function() {
		var X = flixel_FlxG.mouse.x - this.x;
		var Y = flixel_FlxG.mouse.y - this.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		var hit = point;
		return this.getCharIndexAtPoint(hit.x,hit.y);
	}
	,getCharBoundaries: function(charIndex) {
		if(this._charBoundaries != null && charIndex >= 0 && this._charBoundaries.length > 0) {
			var r = new openfl_geom_Rectangle();
			if(charIndex >= this._charBoundaries.length) {
				var _this = this._charBoundaries[this._charBoundaries.length - 1];
				var FlashRect = r;
				if(FlashRect == null) {
					FlashRect = new openfl_geom_Rectangle();
				}
				FlashRect.x = _this.x;
				FlashRect.y = _this.y;
				FlashRect.width = _this.width;
				FlashRect.height = _this.height;
			} else {
				var _this = this._charBoundaries[charIndex];
				var FlashRect = r;
				if(FlashRect == null) {
					FlashRect = new openfl_geom_Rectangle();
				}
				FlashRect.x = _this.x;
				FlashRect.y = _this.y;
				FlashRect.width = _this.width;
				FlashRect.height = _this.height;
			}
			return r;
		}
		return null;
	}
	,set_text: function(Text1) {
		var return_text = flixel_text_FlxText.prototype.set_text.call(this,Text1);
		if(this.textField == null) {
			return return_text;
		}
		var numChars = Text1.length;
		this.prepareCharBoundaries(numChars);
		this.textField.set_text("");
		var textH = 0;
		var textW = 0;
		var lastW = 0;
		var magicX = 2;
		var magicY = 2;
		var _g = 0;
		var _g1 = numChars;
		while(_g < _g1) {
			var i = _g++;
			this.textField.appendText(HxOverrides.substr(Text1,i,1));
			textW = this.textField.get_textWidth();
			if(i == 0) {
				textH = this.textField.get_textHeight();
			}
			this._charBoundaries[i].x = magicX + lastW;
			this._charBoundaries[i].y = magicY;
			this._charBoundaries[i].width = textW - lastW;
			this._charBoundaries[i].height = textH;
			lastW = textW;
		}
		this.textField.set_text(Text1);
		this.onSetTextCheck();
		return return_text;
	}
	,getCharIndexAtPoint: function(X,Y) {
		var i = 0;
		if(this._charBoundaries != null && this._charBoundaries.length > 0) {
			if(this.textField.get_textWidth() <= this.textField.get_width()) {
				switch(this.getAlignStr()) {
				case "center":
					X = X - this.textField.get_width() / 2 + this.textField.get_textWidth() / 2;
					break;
				case "right":
					X = X - this.textField.get_width() + this.textField.get_textWidth();
					break;
				default:
				}
			}
		}
		if(this._charBoundaries != null) {
			var _g = 0;
			var _g1 = this._charBoundaries;
			while(_g < _g1.length) {
				var r = _g1[_g];
				++_g;
				if(X >= r.x && X <= r.x + r.width) {
					return i;
				}
				++i;
			}
		}
		if(this._charBoundaries != null && this._charBoundaries.length > 0) {
			if(X > this.textField.get_textWidth()) {
				return this._charBoundaries.length;
			}
		}
		return 0;
	}
	,prepareCharBoundaries: function(numChars) {
		if(this._charBoundaries == null) {
			this._charBoundaries = [];
		}
		if(this._charBoundaries.length > numChars) {
			var diff = this._charBoundaries.length - numChars;
			var _g = 0;
			var _g1 = diff;
			while(_g < _g1) {
				var i = _g++;
				this._charBoundaries.pop();
			}
		}
		var _g = 0;
		var _g1 = numChars;
		while(_g < _g1) {
			var i = _g++;
			if(this._charBoundaries.length - 1 < i) {
				var tmp = this._charBoundaries;
				var X = 0;
				var Y = 0;
				var Width = 0;
				var Height = 0;
				if(Height == null) {
					Height = 0;
				}
				if(Width == null) {
					Width = 0;
				}
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _this = flixel_math_FlxRect._pool.get();
				var X1 = X;
				var Y1 = Y;
				var Width1 = Width;
				var Height1 = Height;
				if(Height1 == null) {
					Height1 = 0;
				}
				if(Width1 == null) {
					Width1 = 0;
				}
				if(Y1 == null) {
					Y1 = 0;
				}
				if(X1 == null) {
					X1 = 0;
				}
				_this.x = X1;
				_this.y = Y1;
				_this.width = Width1;
				_this.height = Height1;
				var rect = _this;
				rect._inPool = false;
				tmp.push(rect);
			}
		}
	}
	,onSetTextCheck: function() {
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
		flixel_text_FlxText.prototype.calcFrame.call(this,RunOnCpp);
		if(this.fieldBorderSprite != null) {
			if(this.fieldBorderThickness > 0) {
				this.fieldBorderSprite.makeGraphic(this.get_width() + this.fieldBorderThickness * 2 | 0,this.get_height() + this.fieldBorderThickness * 2 | 0,this.fieldBorderColor);
				this.fieldBorderSprite.set_x(this.x - this.fieldBorderThickness);
				this.fieldBorderSprite.set_y(this.y - this.fieldBorderThickness);
			} else if(this.fieldBorderThickness == 0) {
				this.fieldBorderSprite.set_visible(false);
			}
		}
		if(this.backgroundSprite != null) {
			if(this.background) {
				this.backgroundSprite.makeGraphic(this.get_width() | 0,this.get_height() | 0,this.backgroundColor);
				this.backgroundSprite.set_x(this.x);
				this.backgroundSprite.set_y(this.y);
			} else {
				this.backgroundSprite.set_visible(false);
			}
		}
		if(this.caret != null) {
			var cw = this.caretWidth;
			var ch = (this._defaultFormat.size | 0) + 2 | 0;
			var borderC = -16777216 | this.borderColor & 16777215;
			var caretC = -16777216 | this.caretColor & 16777215;
			var caretKey = "caret" + cw + "x" + ch + "c:" + caretC + "b:" + Std.string(this.borderStyle) + "," + this.borderSize + "," + borderC;
			switch(this.borderStyle._hx_index) {
			case 0:
				this.caret.makeGraphic(cw,ch,caretC,false,caretKey);
				this.caret.offset.set_x(this.caret.offset.set_y(0));
				break;
			case 1:
				cw += this.borderSize | 0;
				ch += this.borderSize | 0;
				this.caret.makeGraphic(cw,ch,0,false,caretKey);
				var r = new openfl_geom_Rectangle(this.borderSize,this.borderSize,this.caretWidth,(this._defaultFormat.size | 0) + 2 | 0);
				this.caret.get_pixels().fillRect(r,borderC);
				r.x = r.y = 0;
				this.caret.get_pixels().fillRect(r,caretC);
				this.caret.offset.set_x(this.caret.offset.set_y(0));
				break;
			case 2:case 3:
				cw += this.borderSize * 2 | 0;
				ch += this.borderSize * 2 | 0;
				this.caret.makeGraphic(cw,ch,borderC,false,caretKey);
				var r = new openfl_geom_Rectangle(this.borderSize,this.borderSize,this.caretWidth,(this._defaultFormat.size | 0) + 2 | 0);
				this.caret.get_pixels().fillRect(r,caretC);
				this.caret.offset.set_x(this.caret.offset.set_y(this.borderSize));
				break;
			}
			this.caret.set_width(cw);
			this.caret.set_height(ch);
			this.set_caretIndex(this.caretIndex);
		}
	}
	,toggleCaret: function(timer) {
		this.caret.set_visible(!this.caret.visible);
	}
	,filter: function(text) {
		if(this.forceCase == 1) {
			text = text.toUpperCase();
		} else if(this.forceCase == 2) {
			text = text.toLowerCase();
		}
		if(this.filterMode != 0) {
			var pattern;
			switch(this.filterMode) {
			case 1:
				pattern = new EReg("[^a-zA-Z]*","g");
				break;
			case 2:
				pattern = new EReg("[^0-9]*","g");
				break;
			case 3:
				pattern = new EReg("[^a-zA-Z0-9]*","g");
				break;
			case 4:
				pattern = this.customFilterPattern;
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_Error("FlxInputText: Unknown filterMode (" + this.filterMode + ")"));
			}
			text = text.replace(pattern.r,"");
		}
		return text;
	}
	,set_params: function(p) {
		this.params = p;
		if(this.params == null) {
			this.params = [];
		}
		var namedValue = { name : "value", value : this.text};
		this.params.push(namedValue);
		return p;
	}
	,set_x: function(X) {
		if(this.fieldBorderSprite != null && this.fieldBorderThickness > 0) {
			this.fieldBorderSprite.set_x(X - this.fieldBorderThickness);
		}
		if(this.backgroundSprite != null && this.background) {
			this.backgroundSprite.set_x(X);
		}
		return flixel_text_FlxText.prototype.set_x.call(this,X);
	}
	,set_y: function(Y) {
		if(this.fieldBorderSprite != null && this.fieldBorderThickness > 0) {
			this.fieldBorderSprite.set_y(Y - this.fieldBorderThickness);
		}
		if(this.backgroundSprite != null && this.background) {
			this.backgroundSprite.set_y(Y);
		}
		return flixel_text_FlxText.prototype.set_y.call(this,Y);
	}
	,set_hasFocus: function(newFocus) {
		if(newFocus) {
			if(this.hasFocus != newFocus) {
				this._caretTimer = new flixel_util_FlxTimer().start(0.5,$bind(this,this.toggleCaret),0);
				this.caret.set_visible(true);
				this.set_caretIndex(this.text.length);
			}
		} else {
			this.caret.set_visible(false);
			if(this._caretTimer != null) {
				this._caretTimer.cancel();
			}
		}
		if(newFocus != this.hasFocus) {
			this.calcFrame();
		}
		return this.hasFocus = newFocus;
	}
	,getAlignStr: function() {
		var alignStr = "left";
		if(this._defaultFormat != null && this._defaultFormat.align != null) {
			alignStr = flixel_text_FlxTextAlign.fromOpenFL(this._defaultFormat.align);
		}
		return alignStr;
	}
	,set_caretIndex: function(newCaretIndex) {
		var offx = 0;
		var alignStr = this.getAlignStr();
		switch(alignStr) {
		case "center":
			if(offx <= 1) {
				offx = 0;
			}
			break;
		case "right":
			offx = this.textField.get_width() - 2 - this.textField.get_textWidth() - 2;
			if(offx < 0) {
				offx = 0;
			}
			break;
		default:
			offx = 0;
		}
		this.caretIndex = newCaretIndex;
		if(this.caretIndex > this.text.length + 1) {
			this.caretIndex = -1;
		}
		if(this.caretIndex != -1) {
			var boundaries = null;
			if(this.caretIndex < this.text.length) {
				boundaries = this.getCharBoundaries(this.caretIndex);
				if(boundaries != null) {
					this.caret.set_x(offx + boundaries.get_left() + this.x);
					this.caret.set_y(boundaries.get_top() + this.y);
				}
			} else {
				boundaries = this.getCharBoundaries(this.caretIndex - 1);
				if(boundaries != null) {
					this.caret.set_x(offx + boundaries.get_right() + this.x);
					this.caret.set_y(boundaries.get_top() + this.y);
				} else if(this.text.length == 0) {
					this.caret.set_x(this.x + offx + 2);
					this.caret.set_y(this.y + 2);
				}
			}
		}
		if(this.lines == 1 && this.caret.x + this.caret.get_width() > this.x + this.get_width()) {
			this.caret.set_x(this.x + this.get_width() - 2);
		}
		return this.caretIndex;
	}
	,set_forceCase: function(Value) {
		this.forceCase = Value;
		this.set_text(this.filter(this.text));
		return this.forceCase;
	}
	,set_size: function(Value) {
		flixel_text_FlxText.prototype.set_size.call(this,Value);
		this.caret.makeGraphic(1,(this._defaultFormat.size | 0) + 2 | 0);
		return Value;
	}
	,set_maxLength: function(Value) {
		this.maxLength = Value;
		if(this.text.length > this.maxLength) {
			this.set_text(this.text.substring(0,this.maxLength));
		}
		return this.maxLength;
	}
	,set_lines: function(Value) {
		if(Value == 0) {
			return 0;
		}
		if(Value > 1) {
			this.textField.set_wordWrap(true);
			this.textField.set_multiline(true);
		} else {
			this.textField.set_wordWrap(false);
			this.textField.set_multiline(false);
		}
		this.lines = Value;
		this.calcFrame();
		return this.lines;
	}
	,get_passwordMode: function() {
		return this.textField.get_displayAsPassword();
	}
	,set_passwordMode: function(value) {
		this.textField.set_displayAsPassword(value);
		this.calcFrame();
		return value;
	}
	,set_filterMode: function(Value) {
		this.filterMode = Value;
		this.set_text(this.filter(this.text));
		return this.filterMode;
	}
	,set_fieldBorderColor: function(Value) {
		this.fieldBorderColor = Value;
		this.calcFrame();
		return this.fieldBorderColor;
	}
	,set_fieldBorderThickness: function(Value) {
		this.fieldBorderThickness = Value;
		this.calcFrame();
		return this.fieldBorderThickness;
	}
	,set_backgroundColor: function(Value) {
		this.backgroundColor = Value;
		this.calcFrame();
		return this.backgroundColor;
	}
	,__class__: flixel_addons_ui_FlxInputText
	,__properties__: $extend(flixel_text_FlxText.prototype.__properties__,{set_backgroundColor:"set_backgroundColor",set_fieldBorderThickness:"set_fieldBorderThickness",set_fieldBorderColor:"set_fieldBorderColor",set_filterMode:"set_filterMode",set_lines:"set_lines",set_maxLength:"set_maxLength",set_forceCase:"set_forceCase",set_caretIndex:"set_caretIndex",set_hasFocus:"set_hasFocus",set_passwordMode:"set_passwordMode",get_passwordMode:"get_passwordMode",set_params:"set_params",set_caretWidth:"set_caretWidth",set_caretColor:"set_caretColor",set_customFilterPattern:"set_customFilterPattern"})
});
var flixel_addons_ui_FlxMultiGamepad = function(Gamepad1,Input,Combos,Forbiddens) {
	flixel_addons_ui_FlxBaseMultiInput.call(this);
	this.input = Input;
	this.gamepad = Gamepad1;
	this.combos = Combos;
	this.forbiddens = Forbiddens;
};
$hxClasses["flixel.addons.ui.FlxMultiGamepad"] = flixel_addons_ui_FlxMultiGamepad;
flixel_addons_ui_FlxMultiGamepad.__name__ = "flixel.addons.ui.FlxMultiGamepad";
flixel_addons_ui_FlxMultiGamepad.__super__ = flixel_addons_ui_FlxBaseMultiInput;
flixel_addons_ui_FlxMultiGamepad.prototype = $extend(flixel_addons_ui_FlxBaseMultiInput.prototype,{
	gamepad: null
	,destroy: function() {
		flixel_addons_ui_FlxBaseMultiInput.prototype.destroy.call(this);
		this.gamepad = null;
	}
	,checkJustPressed: function() {
		if(this.gamepad == null) {
			return false;
		}
		var _this = this.gamepad;
		var ID = this.input;
		var Status = 2;
		switch(ID) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(ID);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,checkJustReleased: function() {
		if(this.gamepad == null) {
			return false;
		}
		var _this = this.gamepad;
		var ID = this.input;
		var Status = -1;
		switch(ID) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(ID);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,checkPressed: function() {
		if(this.gamepad == null) {
			return false;
		}
		var _this = this.gamepad;
		var ID = this.input;
		var Status = 1;
		switch(ID) {
		case -2:
			return _this.anyButton(Status);
		case -1:
			return !_this.anyButton(Status);
		default:
			var RawID = _this.mapping.getRawID(ID);
			var button = _this.buttons[RawID];
			if(button != null) {
				return button.hasState(Status);
			} else {
				return false;
			}
		}
	}
	,checkCombos: function(value) {
		if(this.gamepad == null) {
			return false;
		}
		return this.gamepad.checkButtonArrayState(this.combos,1) == value;
	}
	,checkForbiddens: function(value) {
		if(this.gamepad == null) {
			return false;
		}
		return this.gamepad.checkButtonArrayState(this.forbiddens,1) == value;
	}
	,__class__: flixel_addons_ui_FlxMultiGamepad
});
var flixel_addons_ui_FlxMultiGamepadAnalogStick = function(Gamepad1,Input,Combos,Forbiddens) {
	this.sInput = Input;
	flixel_addons_ui_FlxMultiGamepad.call(this,Gamepad1,Input.id,Combos,Forbiddens);
};
$hxClasses["flixel.addons.ui.FlxMultiGamepadAnalogStick"] = flixel_addons_ui_FlxMultiGamepadAnalogStick;
flixel_addons_ui_FlxMultiGamepadAnalogStick.__name__ = "flixel.addons.ui.FlxMultiGamepadAnalogStick";
flixel_addons_ui_FlxMultiGamepadAnalogStick.getStickInput = function(str) {
	str = str.toLowerCase();
	switch(str) {
	case "left_analog_stick_x_minus":
		return { id : 19, axis : flixel_addons_ui_XY.X, positive : false};
	case "left_analog_stick_x_plus":
		return { id : 19, axis : flixel_addons_ui_XY.X, positive : true};
	case "left_analog_stick_y_minus":
		return { id : 19, axis : flixel_addons_ui_XY.Y, positive : false};
	case "left_analog_stick_y_plus":
		return { id : 19, axis : flixel_addons_ui_XY.Y, positive : true};
	case "right_analog_stick_x_minus":
		return { id : 20, axis : flixel_addons_ui_XY.X, positive : false};
	case "right_analog_stick_x_plus":
		return { id : 20, axis : flixel_addons_ui_XY.X, positive : true};
	case "right_analog_stick_y_minus":
		return { id : 20, axis : flixel_addons_ui_XY.Y, positive : false};
	case "right_analog_stick_y_plus":
		return { id : 20, axis : flixel_addons_ui_XY.Y, positive : true};
	}
	return null;
};
flixel_addons_ui_FlxMultiGamepadAnalogStick.__super__ = flixel_addons_ui_FlxMultiGamepad;
flixel_addons_ui_FlxMultiGamepadAnalogStick.prototype = $extend(flixel_addons_ui_FlxMultiGamepad.prototype,{
	sInput: null
	,destroy: function() {
		flixel_addons_ui_FlxMultiGamepad.prototype.destroy.call(this);
		this.sInput = null;
	}
	,checkJustPressed: function() {
		if(this.gamepad == null) {
			return false;
		}
		var dz = this.gamepad.get_deadZone();
		switch(this.sInput.id) {
		case 19:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				var _this = this.gamepad.analog.justMoved;
				var stick = _this.gamepad.mapping.getAnalogStick(19);
				var tmp;
				if(stick == null) {
					tmp = false;
				} else {
					var button = _this.gamepad.buttons[stick.x];
					tmp = button != null && button.hasState(_this.status);
				}
				if(tmp) {
					if(this.sInput.positive) {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(19)) > dz;
					} else {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(19)) < -dz;
					}
				} else {
					return false;
				}
			} else {
				var _this = this.gamepad.analog.justMoved;
				var stick = _this.gamepad.mapping.getAnalogStick(19);
				var tmp;
				if(stick == null) {
					tmp = false;
				} else {
					var button = _this.gamepad.buttons[stick.y];
					tmp = button != null && button.hasState(_this.status);
				}
				if(tmp) {
					if(this.sInput.positive) {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getYAxisRaw(_this.mapping.getAnalogStick(19)) > dz;
					} else {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getYAxisRaw(_this.mapping.getAnalogStick(19)) < -dz;
					}
				} else {
					return false;
				}
			}
			break;
		case 20:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				var _this = this.gamepad.analog.justMoved;
				var stick = _this.gamepad.mapping.getAnalogStick(20);
				var tmp;
				if(stick == null) {
					tmp = false;
				} else {
					var button = _this.gamepad.buttons[stick.x];
					tmp = button != null && button.hasState(_this.status);
				}
				if(tmp) {
					if(this.sInput.positive) {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(20)) > dz;
					} else {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(20)) < -dz;
					}
				} else {
					return false;
				}
			} else {
				var _this = this.gamepad.analog.justMoved;
				var stick = _this.gamepad.mapping.getAnalogStick(20);
				var tmp;
				if(stick == null) {
					tmp = false;
				} else {
					var button = _this.gamepad.buttons[stick.y];
					tmp = button != null && button.hasState(_this.status);
				}
				if(tmp) {
					if(this.sInput.positive) {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getYAxisRaw(_this.mapping.getAnalogStick(20)) > dz;
					} else {
						var _this = this.gamepad.analog.value.gamepad;
						return _this.getYAxisRaw(_this.mapping.getAnalogStick(20)) < -dz;
					}
				} else {
					return false;
				}
			}
			break;
		default:
			return false;
		}
	}
	,checkJustReleased: function() {
		if(this.gamepad == null) {
			return false;
		}
		switch(this.sInput.id) {
		case 19:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				var _this = this.gamepad.analog.justReleased;
				var stick = _this.gamepad.mapping.getAnalogStick(19);
				if(stick == null) {
					return false;
				} else {
					var button = _this.gamepad.buttons[stick.x];
					if(button != null) {
						return button.hasState(_this.status);
					} else {
						return false;
					}
				}
			} else {
				var _this = this.gamepad.analog.justReleased;
				var stick = _this.gamepad.mapping.getAnalogStick(19);
				if(stick == null) {
					return false;
				} else {
					var button = _this.gamepad.buttons[stick.y];
					if(button != null) {
						return button.hasState(_this.status);
					} else {
						return false;
					}
				}
			}
			break;
		case 20:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				var _this = this.gamepad.analog.justReleased;
				var stick = _this.gamepad.mapping.getAnalogStick(20);
				if(stick == null) {
					return false;
				} else {
					var button = _this.gamepad.buttons[stick.x];
					if(button != null) {
						return button.hasState(_this.status);
					} else {
						return false;
					}
				}
			} else {
				var _this = this.gamepad.analog.justReleased;
				var stick = _this.gamepad.mapping.getAnalogStick(20);
				if(stick == null) {
					return false;
				} else {
					var button = _this.gamepad.buttons[stick.y];
					if(button != null) {
						return button.hasState(_this.status);
					} else {
						return false;
					}
				}
			}
			break;
		default:
			return false;
		}
	}
	,checkPressed: function() {
		if(this.gamepad == null) {
			return false;
		}
		var value = false;
		var dz = this.gamepad.get_deadZone();
		switch(this.sInput.id) {
		case 19:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				if(this.sInput.positive) {
					var _this = this.gamepad.analog.value.gamepad;
					return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(19)) > dz;
				} else {
					var _this = this.gamepad.analog.value.gamepad;
					return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(19)) < -dz;
				}
			} else if(this.sInput.positive) {
				var _this = this.gamepad.analog.value.gamepad;
				return _this.getYAxisRaw(_this.mapping.getAnalogStick(19)) > dz;
			} else {
				var _this = this.gamepad.analog.value.gamepad;
				return _this.getYAxisRaw(_this.mapping.getAnalogStick(19)) < -dz;
			}
			break;
		case 20:
			if(this.sInput.axis == flixel_addons_ui_XY.X) {
				if(this.sInput.positive) {
					var _this = this.gamepad.analog.value.gamepad;
					return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(20)) > dz;
				} else {
					var _this = this.gamepad.analog.value.gamepad;
					return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(20)) < -dz;
				}
			} else if(this.sInput.positive) {
				var _this = this.gamepad.analog.value.gamepad;
				return _this.getYAxisRaw(_this.mapping.getAnalogStick(20)) > dz;
			} else {
				var _this = this.gamepad.analog.value.gamepad;
				return _this.getYAxisRaw(_this.mapping.getAnalogStick(20)) < -dz;
			}
			break;
		default:
			value = false;
			return value;
		}
	}
	,checkCombos: function(value) {
		if(this.gamepad == null) {
			return false;
		}
		return this.gamepad.checkButtonArrayState(this.combos,1) == value;
	}
	,checkForbiddens: function(value) {
		if(this.gamepad == null) {
			return false;
		}
		return this.gamepad.checkButtonArrayState(this.forbiddens,1) == value;
	}
	,__class__: flixel_addons_ui_FlxMultiGamepadAnalogStick
});
var flixel_addons_ui_XY = $hxEnums["flixel.addons.ui.XY"] = { __ename__ : "flixel.addons.ui.XY", __constructs__ : ["X","Y"]
	,X: {_hx_index:0,__enum__:"flixel.addons.ui.XY",toString:$estr}
	,Y: {_hx_index:1,__enum__:"flixel.addons.ui.XY",toString:$estr}
};
var flixel_addons_ui_FlxMultiKey = function(Input,Combos,Forbiddens) {
	flixel_addons_ui_FlxBaseMultiInput.call(this);
	this.input = Input;
	this.combos = Combos;
	this.forbiddens = Forbiddens;
};
$hxClasses["flixel.addons.ui.FlxMultiKey"] = flixel_addons_ui_FlxMultiKey;
flixel_addons_ui_FlxMultiKey.__name__ = "flixel.addons.ui.FlxMultiKey";
flixel_addons_ui_FlxMultiKey.__super__ = flixel_addons_ui_FlxBaseMultiInput;
flixel_addons_ui_FlxMultiKey.prototype = $extend(flixel_addons_ui_FlxBaseMultiInput.prototype,{
	checkJustPressed: function() {
		return flixel_FlxG.keys.checkStatus(this.input,2);
	}
	,checkJustReleased: function() {
		return flixel_FlxG.keys.checkStatus(this.input,-1);
	}
	,checkPressed: function() {
		return flixel_FlxG.keys.checkStatus(this.input,1);
	}
	,checkCombos: function(value) {
		return flixel_FlxG.keys.checkKeyArrayState(this.combos,1) == value;
	}
	,checkForbiddens: function(value) {
		return flixel_FlxG.keys.checkKeyArrayState(this.forbiddens,1) == value;
	}
	,__class__: flixel_addons_ui_FlxMultiKey
});
var flixel_addons_ui_interfaces_IFlxUIWidget = function() { };
$hxClasses["flixel.addons.ui.interfaces.IFlxUIWidget"] = flixel_addons_ui_interfaces_IFlxUIWidget;
flixel_addons_ui_interfaces_IFlxUIWidget.__name__ = "flixel.addons.ui.interfaces.IFlxUIWidget";
flixel_addons_ui_interfaces_IFlxUIWidget.__isInterface__ = true;
flixel_addons_ui_interfaces_IFlxUIWidget.__interfaces__ = [flixel_IFlxSprite];
flixel_addons_ui_interfaces_IFlxUIWidget.prototype = {
	get_width: null
	,set_width: null
	,get_height: null
	,set_height: null
	,name: null
	,broadcastToFlxUI: null
	,__class__: flixel_addons_ui_interfaces_IFlxUIWidget
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
};
var flixel_addons_ui_FlxUIGroup = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.autoBounds = true;
	this.broadcastToFlxUI = true;
	flixel_group_FlxTypedSpriteGroup.call(this,X,Y);
};
$hxClasses["flixel.addons.ui.FlxUIGroup"] = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUIGroup.__name__ = "flixel.addons.ui.FlxUIGroup";
flixel_addons_ui_FlxUIGroup.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_FlxUIGroup.__super__ = flixel_group_FlxTypedSpriteGroup;
flixel_addons_ui_FlxUIGroup.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	name: null
	,broadcastToFlxUI: null
	,autoBounds: null
	,destroy: function() {
		flixel_group_FlxTypedSpriteGroup.prototype.destroy.call(this);
	}
	,add: function(Object1) {
		var obj = flixel_group_FlxTypedSpriteGroup.prototype.add.call(this,Object1);
		if(this.autoBounds) {
			this.calcBounds();
		}
		return obj;
	}
	,remove: function(Object1,Splice) {
		if(Splice == null) {
			Splice = false;
		}
		var obj = flixel_group_FlxTypedSpriteGroup.prototype.remove.call(this,Object1,Splice);
		if(this.autoBounds) {
			this.calcBounds();
		}
		return obj;
	}
	,setScrollFactor: function(X,Y) {
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			if(obj != null) {
				obj.scrollFactor.set(X,Y);
			}
		}
	}
	,hasThis: function(Object1) {
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			if(obj == Object1) {
				return true;
			}
		}
		return false;
	}
	,calcBounds: function(rect) {
		if(this.group.members != null && this.group.members.length > 0) {
			var left = Infinity;
			var right = -Infinity;
			var top = Infinity;
			var bottom = -Infinity;
			var _g = 0;
			var _g1 = this.group.members;
			while(_g < _g1.length) {
				var fb = _g1[_g];
				++_g;
				if(fb != null) {
					if(js_Boot.__implements(fb,flixel_addons_ui_interfaces_IFlxUIWidget)) {
						var flui = fb;
						if(flui.x < left) {
							left = flui.x;
						}
						if(flui.x + flui.get_width() > right) {
							right = flui.x + flui.get_width();
						}
						if(flui.y < top) {
							top = flui.y;
						}
						if(flui.y + flui.get_height() > bottom) {
							bottom = flui.y + flui.get_height();
						}
					} else if(((fb) instanceof flixel_FlxSprite)) {
						var flxi = fb;
						if(flxi.x < left) {
							left = flxi.x;
						}
						if(flxi.x > right) {
							right = flxi.x;
						}
						if(flxi.y < top) {
							top = flxi.y;
						}
						if(flxi.y > bottom) {
							bottom = flxi.y;
						}
					}
				}
			}
			this.set_width(right - left);
			this.set_height(bottom - top);
			if(rect != null) {
				rect.x = left;
				rect.y = top;
				rect.width = this.get_width();
				rect.height = this.get_height();
			}
		} else {
			this.set_width(this.set_height(0));
		}
	}
	,floorAll: function() {
		var fs = null;
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var fb = _g1[_g];
			++_g;
			fs = fb;
			fs.set_x(Math.floor(fs.x));
			fs.set_y(Math.floor(fs.y));
		}
	}
	,__class__: flixel_addons_ui_FlxUIGroup
});
var flixel_addons_ui_FlxUI = function(data,ptr,superIndex_,tongue_,liveFilePath_,uiVars_) {
	if(liveFilePath_ == null) {
		liveFilePath_ = "";
	}
	this._scaledAssets = [];
	this._assetsToCleanUp = [];
	this._safe_input_delay_elapsed = 0.0;
	this._curr_mode = "";
	this._pointY = 1;
	this._pointX = 1;
	this._postLoaded = false;
	this.cursorLists = null;
	this.getTextFallback = null;
	this.failed_by = 0;
	this.failed = false;
	this.safe_input_delay_time = 0.01;
	this.do_safe_input_delay = true;
	flixel_addons_ui_FlxUIGroup.call(this);
	this._ptr_tongue = tongue_;
	this._ptr = ptr;
	if(superIndex_ != null) {
		this.setSuperIndex(superIndex_);
	}
	if(uiVars_ != null) {
		this._variable_index = new haxe_ds_StringMap();
		var key = haxe_ds_StringMap.keysIterator(uiVars_.h);
		while(key.hasNext()) {
			var key1 = key.next();
			this._variable_index.h[key1] = uiVars_.h[key1];
		}
	}
	if(data != null) {
		this.load(data);
	}
};
$hxClasses["flixel.addons.ui.FlxUI"] = flixel_addons_ui_FlxUI;
flixel_addons_ui_FlxUI.__name__ = "flixel.addons.ui.FlxUI";
flixel_addons_ui_FlxUI.__interfaces__ = [flixel_addons_ui_interfaces_IEventGetter];
flixel_addons_ui_FlxUI.event = function(name,sender,data,params) {
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	if(currState != null) {
		currState.getEvent(name,sender,data,params);
	}
};
flixel_addons_ui_FlxUI.fontStr = function(str,style) {
	if(style == null) {
		style = "";
	}
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	var tongue = currState._tongue;
	var t = tongue != null ? tongue : null;
	if(t != null) {
		str = t.getFont(str);
	}
	var style1 = style;
	if(style1 == null) {
		style1 = "";
	}
	var style = style1;
	if(style == null) {
		style = "";
	}
	style = style.toLowerCase();
	var suffix = "";
	switch(style) {
	case "b":case "bold":
		suffix = "b";
		break;
	case "bi":case "bold-italic":case "boldi":case "bolditalic":case "ib":case "ibold":case "italic-bold":case "italicbold":case "z":
		suffix = "z";
		break;
	case "i":case "italic":
		suffix = "i";
		break;
	case "":case "none":case "normal":case "regular":
		suffix = "";
		break;
	}
	if(str.indexOf("assets/fonts/") != 0) {
		return "assets/fonts/" + str + suffix;
	} else {
		return str + suffix;
	}
};
flixel_addons_ui_FlxUI.fontSize = function(str,size) {
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	var tongue = currState._tongue;
	var t = tongue != null ? tongue : null;
	if(t != null) {
		size = t.getFontSize(str,size);
	}
	return size;
};
flixel_addons_ui_FlxUI.font = function(str,style,extension) {
	if(extension == null) {
		extension = ".ttf";
	}
	if(style == null) {
		style = "";
	}
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	var tongue = currState._tongue;
	var t = tongue != null ? tongue : null;
	if(t != null) {
		str = t.getFont(str);
	}
	return flixel_addons_ui_U.font(str,style,extension);
};
flixel_addons_ui_FlxUI.__getTongue = function() {
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	var tongue = currState._tongue;
	if(tongue != null) {
		return tongue;
	}
	return null;
};
flixel_addons_ui_FlxUI.forceFocus = function(b,thing) {
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	if(currState != null) {
		currState.forceFocus(b,thing);
	}
};
flixel_addons_ui_FlxUI.getLeafUIState = function() {
	var state = flixel_FlxG.game._state;
	if(state != null) {
		while(state.subState != null) state = state.subState;
	}
	if(js_Boot.__implements(state,flixel_addons_ui_interfaces_IFlxUIState)) {
		return state;
	}
	return null;
};
flixel_addons_ui_FlxUI.request = function(name,sender,data,params) {
	var currState = flixel_addons_ui_FlxUI.getLeafUIState();
	if(currState != null) {
		return currState.getRequest(name,sender,data,params);
	}
	return null;
};
flixel_addons_ui_FlxUI._delta = function(thing,X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _g = thing;
	_g.set_x(_g.x + X);
	var _g = thing;
	_g.set_y(_g.y + Y);
};
flixel_addons_ui_FlxUI._center = function(thing,X,Y) {
	if(Y == null) {
		Y = true;
	}
	if(X == null) {
		X = true;
	}
	if(X) {
		thing.set_x((flixel_FlxG.width - thing.get_width()) / 2);
	}
	if(Y) {
		thing.set_y((flixel_FlxG.height - thing.get_height()) / 2);
	}
	return thing;
};
flixel_addons_ui_FlxUI.consolidateData = function(data,definition,combineUniqueChildren) {
	if(combineUniqueChildren == null) {
		combineUniqueChildren = false;
	}
	if(data == null && definition != null) {
		return definition;
	}
	if(definition == null) {
		return data;
	} else {
		var new_data = Xml.parse(haxe_xml_Printer.print(definition)).firstElement();
		var att = data.attributes();
		while(att.hasNext()) {
			var att1 = att.next();
			var val = haxe_xml__$Access_AttribAccess.resolve(data,att1);
			new_data.set(att1,val);
		}
		var v;
		if(data.nodeType == Xml.Document) {
			v = "Document";
		} else {
			if(data.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (data.nodeType == null ? "null" : XmlType.toString(data.nodeType)));
			}
			v = data.nodeName;
		}
		if(new_data.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (new_data.nodeType == null ? "null" : XmlType.toString(new_data.nodeType)));
		}
		new_data.nodeName = v;
		if(haxe_xml__$Access_HasAttribAccess.resolve(data,"name") || haxe_xml__$Access_HasAttribAccess.resolve(data,"id")) {
			new_data.set("name",flixel_addons_ui_U.xml_name(data));
		} else {
			new_data.set("name","");
		}
		var element = data.elements();
		while(element.hasNext()) {
			var element1 = element.next();
			if(element1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (element1.nodeType == null ? "null" : XmlType.toString(element1.nodeType)));
			}
			var nodeName = element1.nodeName;
			var notCombine = !combineUniqueChildren;
			if(combineUniqueChildren) {
				var new_els = new_data.elementsNamed(nodeName);
				var new_el = new_els.next();
				if(haxe_xml__$Access_NodeListAccess.resolve(data,nodeName).length == 1 && new_el != null && new_els.hasNext() == false) {
					var att = element1.attributes();
					while(att.hasNext()) {
						var att1 = att.next();
						new_el.set(att1,element1.get(att1));
					}
				} else {
					notCombine = true;
				}
			}
			if(notCombine) {
				new_data.insertChild(Xml.parse(haxe_xml_Printer.print(element1)).firstElement(),0);
			}
		}
		if(new_data.nodeType != Xml.Document && new_data.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (new_data.nodeType == null ? "null" : XmlType.toString(new_data.nodeType)));
		}
		var this1 = new_data;
		return this1;
	}
};
flixel_addons_ui_FlxUI._loadBitmapRect = function(source,rect_str) {
	var b1 = openfl_utils_Assets.getBitmapData(flixel_addons_ui_U.gfx(source));
	var coords = rect_str.split(",");
	var rect = null;
	if(coords != null && coords.length == 4) {
		var x_ = Std.parseInt(coords[0]);
		var y_ = Std.parseInt(coords[1]);
		var w_ = Std.parseInt(coords[2]);
		var h_ = Std.parseInt(coords[3]);
		rect = new openfl_geom_Rectangle(x_,y_,w_,h_);
	}
	var r = rect;
	var b2 = new openfl_display_BitmapData(r.width | 0,r.height | 0,true,16777215);
	b2.copyPixels(b1,r,new openfl_geom_Point(0,0));
	return b2;
};
flixel_addons_ui_FlxUI.getParams = function(data) {
	var params = null;
	if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
		params = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
				var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
				type = type.toLowerCase();
				var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
				var value = valueStr;
				var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
				switch(type) {
				case "bool":case "boolean":
					var str = new String(valueStr);
					str = str.toLowerCase();
					if(str == "true" || str == "1") {
						value = true;
					} else {
						value = false;
					}
					break;
				case "color":case "hex":
					var return_val = flixel_util_FlxColor.fromString(valueStr);
					if(return_val == null) {
						throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
					}
					value = return_val;
					break;
				case "float":
					value = parseFloat(valueStr);
					break;
				case "int":
					value = Std.parseInt(valueStr);
					break;
				case "string":
					value = new String(valueStr);
					break;
				}
				params.push({ sort : sort, value : value});
			}
		}
		params.sort(flixel_addons_ui_FlxUI.sortParams);
		var _g = 0;
		var _g1 = params.length;
		while(_g < _g1) {
			var i = _g++;
			params[i] = params[i].value;
		}
	}
	return params;
};
flixel_addons_ui_FlxUI.sortParams = function(a,b) {
	if(a.sort < b.sort) {
		return -1;
	}
	if(a.sort > b.sort) {
		return 1;
	}
	return 0;
};
flixel_addons_ui_FlxUI.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUI.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	do_safe_input_delay: null
	,safe_input_delay_time: null
	,failed: null
	,failed_by: null
	,get_isRoot: function() {
		if(this._ptr != null) {
			return this._ptr == flixel_addons_ui_FlxUI.getLeafUIState();
		} else {
			return false;
		}
	}
	,liveFilePath: null
	,get_tongue: function() {
		return this._ptr_tongue;
	}
	,set_tongue: function(t) {
		this._ptr_tongue = t;
		this._tongueSet(this.group.members,t);
		return this._ptr_tongue;
	}
	,focus: null
	,set_focus: function(widget) {
		if(this.focus != null) {
			this.onFocusLost(this.focus);
		}
		this.focus = widget;
		if(this.focus != null) {
			this.onFocus(this.focus);
		}
		return widget;
	}
	,getTextFallback: null
	,cursorLists: null
	,_ptr_tongue: null
	,_data: null
	,_tongueSet: function(list,tongue) {
		var _g = 0;
		while(_g < list.length) {
			var fs = list[_g];
			++_g;
			if(((fs) instanceof flixel_addons_ui_FlxUIGroup)) {
				var g = js_Boot.__cast(fs , flixel_addons_ui_FlxUIGroup);
				this._tongueSet(g.group.members,tongue);
			} else if(((fs) instanceof flixel_addons_ui_FlxUI)) {
				var fu = js_Boot.__cast(fs , flixel_addons_ui_FlxUI);
				fu.set_tongue(tongue);
			}
		}
	}
	,callEvent: function(name,sender,data,params) {
		this.getEvent(name,sender,data,params);
	}
	,getEvent: function(name,sender,data,params) {
		if(this._ptr != null) {
			this._ptr.getEvent(name,sender,data,params);
			if(name == "post_load") {
				var key = haxe_ds_StringMap.keysIterator(this._asset_index.h);
				while(key.hasNext()) {
					var key1 = key.next();
					var thing = this._asset_index.h[key1];
					if(((thing) instanceof flixel_addons_ui_FlxUI)) {
						var fui = thing;
						fui.getEvent("post_load",sender,data);
					}
				}
			}
		}
	}
	,getRequest: function(name,sender,data,params) {
		if(this._ptr != null) {
			return this._ptr.getRequest(name,sender,data,params);
		}
		return null;
	}
	,onFocus: function(widget) {
		if(((widget) instanceof flixel_addons_ui_FlxUIDropDownMenu)) {
			var _g = 0;
			var _g1 = this.group.members;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				this.setWidgetSuppression(asset,widget);
			}
		}
	}
	,setWidgetSuppression: function(asset,butNotThisOne,suppressed) {
		if(suppressed == null) {
			suppressed = true;
		}
		if(js_Boot.__implements(asset,flixel_addons_ui_interfaces_IFlxUIClickable)) {
			var skip = false;
			if(((asset) instanceof flixel_addons_ui_FlxUIDropDownMenu)) {
				var ddasset = asset;
				if(ddasset == butNotThisOne) {
					skip = true;
				}
			}
			if(!skip) {
				var ibtn = asset;
				ibtn.set_skipButtonUpdate(suppressed);
			}
		} else if(((asset) instanceof flixel_addons_ui_FlxUIGroup)) {
			var g = asset;
			var _g = 0;
			var _g1 = g.group.members;
			while(_g < _g1.length) {
				var groupAsset = _g1[_g];
				++_g;
				this.setWidgetSuppression(groupAsset,butNotThisOne,suppressed);
			}
		}
	}
	,onFocusLost: function(widget) {
		if(((widget) instanceof flixel_addons_ui_FlxUIDropDownMenu)) {
			var _g = 0;
			var _g1 = this.group.members;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				this.setWidgetSuppression(asset,null,false);
			}
		}
	}
	,setSuperIndex: function(flxUI) {
		this._superIndexUI = flxUI;
	}
	,update: function(elapsed) {
		if(this.do_safe_input_delay) {
			this._safe_input_delay_elapsed += flixel_FlxG.elapsed;
			if(this._safe_input_delay_elapsed > this.safe_input_delay_time) {
				this.do_safe_input_delay = false;
			} else {
				return;
			}
		}
		flixel_addons_ui_FlxUIGroup.prototype.update.call(this,elapsed);
	}
	,toggleShow: function(key) {
		var thing = this.getAsset(key,false);
		if(thing == null) {
			var group = this.getGroup(key,false);
			if(group != null) {
				group.set_visible(!group.visible);
				return group.visible;
			}
		} else {
			thing.set_visible(!thing.visible);
			return thing.visible;
		}
		return false;
	}
	,showGroup: function(key,Show,Active) {
		var group = this.getGroup(key,false);
		if(group != null) {
			group.set_visible(Show);
			if(Active == null) {
				group.set_active(Show);
			} else {
				group.set_active(Active);
			}
		}
	}
	,showAsset: function(key,Show,Active) {
		var asset = this.getAsset(key,false);
		if(asset != null) {
			asset.set_visible(Show);
			if(Active == null) {
				asset.set_active(Show);
			} else {
				asset.set_active(Active);
			}
		}
	}
	,removeAsset: function(key,destroy) {
		if(destroy == null) {
			destroy = true;
		}
		var asset = this.getAsset(key,false);
		if(asset != null) {
			this.replaceInGroup(asset,null,true);
			var _this = this._asset_index;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
		if(destroy && asset != null) {
			asset.destroy();
			asset = null;
		}
		return asset;
	}
	,addAsset: function(asset,key,group_name,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(group_name == null) {
			group_name = "";
		}
		if(Object.prototype.hasOwnProperty.call(this._asset_index.h,key)) {
			var tmp = key == "screen";
			return false;
		}
		var g = this.getGroup(group_name,recursive);
		if(g != null) {
			g.add(asset);
		} else {
			this.add(asset);
		}
		this._asset_index.h[key] = asset;
		return true;
	}
	,replaceAsset: function(key,replace,center_x,center_y,destroy_old) {
		if(destroy_old == null) {
			destroy_old = true;
		}
		if(center_y == null) {
			center_y = true;
		}
		if(center_x == null) {
			center_x = true;
		}
		var original = this.getAsset(key,false);
		if(original != null) {
			if(!center_x) {
				replace.set_x(original.x);
			} else {
				replace.set_x(original.x + (original.get_width() - replace.get_width()) / 2);
			}
			if(!center_y) {
				replace.set_y(original.y);
			} else {
				replace.set_y(original.y + (original.get_height() - replace.get_height()) / 2);
			}
			this.replaceInGroup(original,replace);
			var _this = this._asset_index;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			this._asset_index.h[key] = replace;
			if(destroy_old) {
				original.destroy();
				original = null;
			}
		}
		return original;
	}
	,destroy: function() {
		if(this._group_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._group_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._group_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._group_index = null;
		}
		if(this._asset_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._asset_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._asset_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._asset_index = null;
		}
		if(this._tag_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._tag_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				flixel_util_FlxArrayUtil.clearArray(this._tag_index.h[key1]);
				var _this = this._tag_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._tag_index = null;
		}
		if(this._definition_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._definition_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._definition_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._definition_index = null;
		}
		if(this._variable_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._variable_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._variable_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._variable_index = null;
		}
		if(this._mode_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._mode_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._mode_index;
				if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
					delete(_this.h[key1]);
				}
			}
			this._mode_index = null;
		}
		this._ptr = null;
		this._superIndexUI = null;
		this._ptr_tongue = null;
		if(this.cursorLists != null) {
			var _g = 0;
			var _g1 = this.cursorLists;
			while(_g < _g1.length) {
				var arr = _g1[_g];
				++_g;
				flixel_util_FlxArrayUtil.clearArray(arr);
			}
			flixel_util_FlxArrayUtil.clearArray(this.cursorLists);
		}
		this.cursorLists = null;
		flixel_util_FlxArrayUtil.clearArray(this._failure_checks);
		this._failure_checks = null;
		flixel_util_FlxArrayUtil.clearArray(this._assetsToCleanUp);
		this._assetsToCleanUp = null;
		flixel_util_FlxArrayUtil.clearArray(this._scaledAssets);
		this._scaledAssets = null;
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
	}
	,load: function(data) {
		this._group_index = new haxe_ds_StringMap();
		this._asset_index = new haxe_ds_StringMap();
		this._tag_index = new haxe_ds_StringMap();
		this._definition_index = new haxe_ds_StringMap();
		if(this._variable_index == null) {
			this._variable_index = new haxe_ds_StringMap();
		}
		this._mode_index = new haxe_ds_StringMap();
		if(data != null) {
			if(this._superIndexUI == null) {
				var screenRegion = new flixel_addons_ui_FlxUIRegion(0,0,flixel_FlxG.width,flixel_FlxG.height);
				screenRegion.name = "screen";
				this.addAsset(screenRegion,"screen");
				if(haxe_xml__$Access_HasNodeAccess.resolve(data,"screen_override")) {
					if(this._loadTest(haxe_xml__$Access_NodeAccess.resolve(data,"screen_override"))) {
						var screenNode = haxe_xml__$Access_NodeAccess.resolve(data,"screen_override");
						this._loadPosition(screenNode,screenRegion);
						screenRegion.set_width(this._loadWidth(screenNode,flixel_FlxG.width));
						screenRegion.set_height(this._loadHeight(screenNode,flixel_FlxG.height));
					}
				}
			}
			this._data = data;
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"inject")) {
				while(haxe_xml__$Access_HasNodeAccess.resolve(data,"inject")) {
					var inj_data = haxe_xml__$Access_NodeAccess.resolve(data,"inject");
					var inj_name = flixel_addons_ui_U.xml_name(inj_data);
					var payload = flixel_addons_ui_U.xml(inj_name,"xml",false);
					if(payload != null) {
						var parent = inj_data.parent;
						var i = 0;
						var _g = 0;
						var _g1 = parent.children;
						while(_g < _g1.length) {
							var child = _g1[_g];
							++_g;
							if(child == inj_data) {
								break;
							}
							++i;
						}
						if(parent.removeChild(inj_data)) {
							var j = 0;
							var e = payload.elements();
							while(e.hasNext()) {
								var e1 = e.next();
								parent.insertChild(e1,i + j);
								++j;
							}
						}
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"include")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"include");
				while(_g < _g1.length) {
					var inc_data = _g1[_g];
					++_g;
					var inc_name = flixel_addons_ui_U.xml_name(inc_data);
					var liveFile = null;
					var inc_xml = null;
					if(liveFile == null) {
						inc_xml = flixel_addons_ui_U.xml(inc_name);
					} else {
						inc_xml = liveFile;
					}
					if(inc_xml != null) {
						var _g2 = 0;
						var _g3 = haxe_xml__$Access_NodeListAccess.resolve(inc_xml,"definition");
						while(_g2 < _g3.length) {
							var def_data = _g3[_g2];
							++_g2;
							var def_name = "include:" + flixel_addons_ui_U.xml_name(def_data);
							this.unparentXML(def_data);
							this._definition_index.h[def_name] = def_data;
						}
						if(haxe_xml__$Access_HasNodeAccess.resolve(inc_xml,"point_size")) {
							this._loadPointSize(inc_xml);
						}
						if(haxe_xml__$Access_HasNodeAccess.resolve(inc_xml,"default")) {
							var _g4 = 0;
							var _g5 = haxe_xml__$Access_NodeListAccess.resolve(inc_xml,"default");
							while(_g4 < _g5.length) {
								var defaultNode = _g5[_g4];
								++_g4;
								if(this._loadTest(defaultNode)) {
									var defaultName = flixel_addons_ui_U.xml_name(defaultNode);
									this.unparentXML(defaultNode);
									this._definition_index.h["default:" + defaultName] = defaultNode;
								}
							}
						}
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"point_size")) {
				this._loadPointSize(data);
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"definition")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"definition");
				while(_g < _g1.length) {
					var def_data = _g1[_g];
					++_g;
					if(this._loadTest(def_data)) {
						var def_name = flixel_addons_ui_U.xml_name(def_data);
						var error = "";
						if(def_name.indexOf("default:") != -1) {
							error = "'default:'";
						}
						if(def_name.indexOf("include:") != -1) {
							error = "'include:'";
						}
						if(error == "") {
							this.unparentXML(def_data);
							this._definition_index.h[def_name] = def_data;
						}
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"default")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"default");
				while(_g < _g1.length) {
					var defaultNode = _g1[_g];
					++_g;
					if(this._loadTest(defaultNode)) {
						var defaultName = flixel_addons_ui_U.xml_name(defaultNode);
						this.unparentXML(defaultNode);
						this._definition_index.h["default:" + defaultName] = defaultNode;
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"variable")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"variable");
				while(_g < _g1.length) {
					var var_data = _g1[_g];
					++_g;
					if(this._loadTest(var_data)) {
						var var_name = flixel_addons_ui_U.xml_name(var_data);
						var var_value = flixel_addons_ui_U.xml_str(var_data,"value");
						if(var_name != "") {
							this._variable_index.h[var_name] = var_value;
						}
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"mode")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"mode");
				while(_g < _g1.length) {
					var mode_data = _g1[_g];
					++_g;
					if(this._loadTest(mode_data)) {
						var mode_data2 = this.applyNodeConditionals(mode_data);
						var mode_name = flixel_addons_ui_U.xml_name(mode_data);
						this.unparentXML(mode_data2);
						this._mode_index.h[mode_name] = mode_data2;
					}
				}
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"group")) {
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"group");
				while(_g < _g1.length) {
					var group_data = _g1[_g];
					++_g;
					if(this._loadTest(group_data)) {
						var name = flixel_addons_ui_U.xml_name(group_data);
						var custom = flixel_addons_ui_U.xml_str(group_data,"custom");
						var tempGroup = null;
						if(custom != "") {
							var result = this._ptr.getRequest("ui_get_group:",this,custom);
							if(result != null && ((result) instanceof flixel_addons_ui_FlxUIGroup)) {
								tempGroup = result;
							}
						}
						if(tempGroup == null) {
							tempGroup = new flixel_addons_ui_FlxUIGroup();
						}
						tempGroup.name = name;
						this._group_index.h[name] = tempGroup;
						this.add(tempGroup);
					}
				}
			}
			if(data.firstElement() != null) {
				var node = data.elements();
				while(node.hasNext()) {
					var node1 = node.next();
					this._loadSub(node1);
				}
			}
			this._postLoad(data);
		} else {
			this._onFinishLoad();
		}
	}
	,unparentXML: function(f) {
		return flixel_addons_ui_U.unparentXML(f);
	}
	,_loadPointSize: function(data) {
		var data1 = haxe_xml__$Access_NodeAccess.resolve(data,"point_size");
		var default_ = -1.0;
		if(default_ == null) {
			default_ = 0;
		}
		var ptx = this._loadWidth(data1,default_,"x");
		var data1 = haxe_xml__$Access_NodeAccess.resolve(data,"point_size");
		var default_ = -1.0;
		if(default_ == null) {
			default_ = 0;
		}
		var pty = this._loadHeight(data1,default_,"y");
		if(pty < 1 && ptx < 1) {
			pty = this._loadHeight(haxe_xml__$Access_NodeAccess.resolve(data,"point_size"),-1,"value");
			ptx = pty;
		}
		if(pty > 0) {
			this._pointX = ptx;
		}
		if(ptx > 0) {
			this._pointY = pty;
		}
	}
	,_loadSub: function(node,iteration) {
		if(iteration == null) {
			iteration = 0;
		}
		if(node.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (node.nodeType == null ? "null" : XmlType.toString(node.nodeType)));
		}
		var type = node.nodeName;
		if(node.nodeType != Xml.Document && node.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (node.nodeType == null ? "null" : XmlType.toString(node.nodeType)));
		}
		var this1 = node;
		var obj = this1;
		if(type == "load_if") {
			if(this._loadTest(obj)) {
				if(node.firstElement() != null) {
					var subNode = node.elements();
					while(subNode.hasNext()) {
						var subNode1 = subNode.next();
						this._loadSub(subNode1,iteration + 1);
					}
				}
			}
			return;
		}
		var group_name = "";
		var tempGroup = null;
		var thing_name = flixel_addons_ui_U.xml_name(obj);
		if(haxe_xml__$Access_HasAttribAccess.resolve(obj,"group")) {
			group_name = haxe_xml__$Access_AttribAccess.resolve(obj,"group");
			tempGroup = this.getGroup(group_name);
		}
		var thing = this._loadThing(type,obj);
		if(thing != null) {
			this._loadGlobals(obj,thing);
			if(thing_name != null && thing_name != "") {
				this._asset_index.h[thing_name] = thing;
				thing.name = thing_name;
				var thing_tags = flixel_addons_ui_U.xml_str(obj,"tags");
				if(thing_tags != "") {
					var tagArr = thing_tags.split(",");
					this._addTags(tagArr,thing_name);
				}
			}
			this._loadTooltip(thing,obj);
			if(tempGroup != null) {
				tempGroup.add(thing);
			} else {
				this.add(thing);
			}
			this._loadPosition(obj,thing);
		}
	}
	,_addTags: function(arr,thingName) {
		var _g = 0;
		while(_g < arr.length) {
			var tag = arr[_g];
			++_g;
			var list = null;
			if(!Object.prototype.hasOwnProperty.call(this._tag_index.h,tag)) {
				this._tag_index.h[tag] = [];
			}
			list = this._tag_index.h[tag];
			if(list.indexOf(thingName) == -1) {
				list.push(thingName);
			}
		}
	}
	,_loadGlobals: function(data,thing) {
		if(((thing) instanceof flixel_FlxBasic)) {
			var isVis = flixel_addons_ui_U.xml_bool(data,"visible",true);
			var isActive = flixel_addons_ui_U.xml_bool(data,"active",true);
			var numID = flixel_addons_ui_U.xml_i(data,"num_id");
			thing.visible = isVis;
			thing.active = isActive;
			thing.ID = numID;
			if(((thing) instanceof flixel_FlxSprite)) {
				var alpha = flixel_addons_ui_U.xml_f(data,"alpha",1.0);
				var s = thing;
				s.set_alpha(alpha);
			}
		}
	}
	,_postLoad: function(data) {
		this._postLoaded = true;
		if(data.firstElement() != null) {
			var node = data.elements();
			while(node.hasNext()) {
				var node1 = node.next();
				if(node1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (node1.nodeType == null ? "null" : XmlType.toString(node1.nodeType)));
				}
				var tmp = node1.nodeName.toLowerCase();
				if(node1.nodeType != Xml.Document && node1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Invalid nodeType " + (node1.nodeType == null ? "null" : XmlType.toString(node1.nodeType)));
				}
				var this1 = node1;
				this._postLoadThing(tmp,this1);
			}
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"mode")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"mode");
			while(_g < _g1.length) {
				var mode_node = _g1[_g];
				++_g;
				var is_default = flixel_addons_ui_U.xml_bool(mode_node,"is_default");
				if(is_default) {
					var mode_name = flixel_addons_ui_U.xml_name(mode_node);
					this.setMode(mode_name);
					break;
				}
			}
		}
		if(this._failure_checks != null) {
			var _g = 0;
			var _g1 = this._failure_checks;
			while(_g < _g1.length) {
				var data = _g1[_g];
				++_g;
				if(this._checkFailure(data)) {
					this.failed = true;
					break;
				}
			}
			flixel_addons_ui_U.clearArraySoft(this._failure_checks);
			this._failure_checks = null;
		}
		this._onFinishLoad();
	}
	,_sendTo: function(thing,dir) {
		var group = this.getAssetGroup(null,thing);
		if(group == null) {
			if(this.group.members.indexOf(thing) != -1) {
				group = this;
			} else {
				return;
			}
		}
		if(dir != -1 && dir != 1) {
			return;
		}
		HxOverrides.remove(group.group.members,thing);
		switch(dir) {
		case -1:
			group.group.members.splice(0,0,thing);
			break;
		case 1:
			group.group.members.push(thing);
			break;
		}
	}
	,sendToFront: function(name,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var thing = this.getAsset(name,recursive);
		if(thing != null) {
			this._sendTo(thing,1);
		}
	}
	,sendToBack: function(name,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var thing = this.getAsset(name,recursive);
		if(thing != null) {
			this._sendTo(thing,-1);
		}
	}
	,get_currMode: function() {
		return this._curr_mode;
	}
	,set_currMode: function(m) {
		this.setMode(m);
		return this._curr_mode;
	}
	,setMode: function(mode_name,target_name) {
		if(target_name == null) {
			target_name = "";
		}
		if(this._curr_mode == mode_name) {
			return;
		}
		var mode = this.getMode(mode_name);
		this._curr_mode = mode_name;
		var name = "";
		var thing;
		if(target_name == "") {
			if(mode != null) {
				var xml;
				var node = mode.elements();
				while(node.hasNext()) {
					var node1 = node.next();
					var node2 = this.applyNodeConditionals(node1);
					xml = node2;
					if(xml.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
					}
					var nodeName = xml.nodeName;
					var activeStatus = flixel_addons_ui_U.xml_str(xml,"active") == "" ? null : true;
					if(activeStatus != null) {
						activeStatus = flixel_addons_ui_U.xml_bool(xml,"active");
					}
					if(this._loadTest(node2)) {
						switch(nodeName) {
						case "align":
							this._alignThing(node2);
							break;
						case "change":
							this._changeThing(node2);
							break;
						case "hide":
							this.showThing(flixel_addons_ui_U.xml_name(xml),false,activeStatus);
							break;
						case "position":
							name = flixel_addons_ui_U.xml_name(xml);
							thing = this.getAsset(name);
							if(thing != null) {
								this._loadPosition(node2,thing);
							}
							break;
						case "show":
							this.showThing(flixel_addons_ui_U.xml_name(xml),true,activeStatus);
							break;
						}
					}
				}
			}
		} else {
			var target = this.getAsset(target_name);
			if(target != null && ((target) instanceof flixel_addons_ui_FlxUI)) {
				var targetUI = js_Boot.__cast(target , flixel_addons_ui_FlxUI);
				targetUI.setMode(mode_name,"");
			}
		}
	}
	,showThing: function(name,visibleStatus,activeStatus) {
		if(visibleStatus == null) {
			visibleStatus = true;
		}
		if(name.indexOf(",") != -1) {
			var names = name.split(",");
			var _g = 0;
			while(_g < names.length) {
				var each_name = names[_g];
				++_g;
				var thing = this.getAsset(each_name);
				if(thing != null) {
					thing.set_visible(visibleStatus);
					if(activeStatus != null) {
						thing.set_active(activeStatus);
					}
				} else {
					var group = this.getGroup(each_name);
					if(group != null) {
						group.set_visible(visibleStatus);
						if(activeStatus != null) {
							group.set_active(activeStatus);
						}
					}
				}
			}
		} else if(name != "*") {
			var thing = this.getAsset(name);
			if(thing != null) {
				thing.set_visible(visibleStatus);
				if(activeStatus != null) {
					thing.set_active(activeStatus);
				}
			} else {
				var group = this.getGroup(name);
				if(group != null) {
					group.set_visible(visibleStatus);
					if(activeStatus != null) {
						group.set_active(activeStatus);
					}
				}
			}
		} else {
			var asset_name = haxe_ds_StringMap.keysIterator(this._asset_index.h);
			while(asset_name.hasNext()) {
				var asset_name1 = asset_name.next();
				if(asset_name1 != "*") {
					this.showThing(asset_name1,visibleStatus,activeStatus);
				}
			}
		}
	}
	,getGroup: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var tempGroup = this._group_index.h[key];
		if(tempGroup == null && recursive && this._superIndexUI != null) {
			return this._superIndexUI.getGroup(key,recursive);
		}
		return tempGroup;
	}
	,getFlxText: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var asset = this.getAsset(key,recursive);
		if(asset != null) {
			if(((asset) instanceof flixel_text_FlxText)) {
				return js_Boot.__cast(asset , flixel_text_FlxText);
			}
		}
		return null;
	}
	,getAllAssets: function() {
		var arr = [];
		var key = haxe_ds_StringMap.keysIterator(this._asset_index.h);
		while(key.hasNext()) {
			var key1 = key.next();
			arr.push(this.getAsset(key1));
		}
		return arr;
	}
	,getAssetKeys: function() {
		var arr = [];
		var key = haxe_ds_StringMap.keysIterator(this._asset_index.h);
		while(key.hasNext()) {
			var key1 = key.next();
			arr.push(key1);
		}
		return arr;
	}
	,hasAsset: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(Object.prototype.hasOwnProperty.call(this._asset_index.h,key)) {
			return true;
		}
		if(recursive && this._superIndexUI != null) {
			return this._superIndexUI.hasAsset(key,recursive);
		}
		return false;
	}
	,getAsset: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var asset = this._asset_index.h[key];
		if(asset == null && recursive && this._superIndexUI != null) {
			return this._superIndexUI.getAsset(key,recursive);
		}
		return asset;
	}
	,getAssetsWithTag: function(tag) {
		if(Object.prototype.hasOwnProperty.call(this._tag_index.h,tag)) {
			var list = this._tag_index.h[tag];
			if(list == null || list.length == 0) {
				return null;
			}
			var arr = [];
			var _g = 0;
			while(_g < list.length) {
				var key = list[_g];
				++_g;
				var widget = this.getAsset(key);
				if(widget != null) {
					arr.push(widget);
				}
			}
			return arr;
		}
		return null;
	}
	,getAssetGroup: function(key,thing) {
		if(thing == null && (key == null || key == "")) {
			return null;
		}
		if(thing == null) {
			thing = this.getAsset(key);
		}
		if(thing == null) {
			return null;
		}
		var key = haxe_ds_StringMap.keysIterator(this._group_index.h);
		while(key.hasNext()) {
			var key1 = key.next();
			var g = this._group_index.h[key1];
			if(g.group.members.indexOf(thing) != -1) {
				return g;
			}
		}
		return null;
	}
	,getMode: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var mode = this._mode_index.h[key];
		if(mode == null && recursive && this._superIndexUI != null) {
			return this._superIndexUI.getMode(key,recursive);
		}
		return mode;
	}
	,getLabelStyleFromDefinition: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var definition = this.getDefinition(key,recursive);
		if(definition != null) {
			var fontDef = this._loadFontDef(definition);
			var align = flixel_addons_ui_U.xml_str(definition,"align");
			if(align == "") {
				align = null;
			}
			var color = this._loadColor(definition);
			var border = this._loadBorder(definition);
			return new flixel_addons_ui_ButtonLabelStyle(fontDef,align,color,border);
		}
		return null;
	}
	,getLabelStyleFromData: function(data) {
		var fontDef = this._loadFontDef(data);
		var align = flixel_addons_ui_U.xml_str(data,"align");
		if(align == "") {
			align = null;
		}
		var color = this._loadColor(data);
		var border = this._loadBorder(data);
		return new flixel_addons_ui_ButtonLabelStyle(fontDef,align,color,border);
	}
	,checkVariable: function(key,otherValue,type,op,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		if(op == null) {
			op = "==";
		}
		var variable = this.getVariable(key,recursive);
		if(variable != null) {
			return flixel_addons_ui_U.compareStringVars(variable,otherValue,type,op);
		} else {
			return flixel_addons_ui_U.compareStringVars("",otherValue,type,op);
		}
	}
	,setVariable: function(key,value) {
		this._variable_index.h[key] = value;
	}
	,getVariable: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var variable = this._variable_index.h[key];
		if(variable == null && recursive && this._superIndexUI != null) {
			variable = this._superIndexUI.getVariable(key,recursive);
		}
		return variable;
	}
	,getDefinition: function(key,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var definition = this._definition_index.h[key];
		if(definition == null && recursive && this._superIndexUI != null) {
			definition = this._superIndexUI.getDefinition(key,recursive);
		}
		if(definition == null) {
			if(key.indexOf("include:") == -1) {
				definition = this.getDefinition("include:" + key,recursive);
			}
		}
		return definition;
	}
	,screenWidth: function() {
		if(this.hasAsset("screen")) {
			return this.getAsset("screen").get_width() | 0;
		}
		return flixel_FlxG.width;
	}
	,screenHeight: function() {
		if(this.hasAsset("height")) {
			return this.getAsset("screen").get_height() | 0;
		}
		return flixel_FlxG.height;
	}
	,_postLoaded: null
	,_pointX: null
	,_pointY: null
	,_group_index: null
	,_asset_index: null
	,_tag_index: null
	,_definition_index: null
	,_variable_index: null
	,_mode_index: null
	,_curr_mode: null
	,_ptr: null
	,_superIndexUI: null
	,_safe_input_delay_elapsed: null
	,_failure_checks: null
	,_assetsToCleanUp: null
	,_scaledAssets: null
	,replaceInGroup: function(original,replace,splice) {
		if(splice == null) {
			splice = false;
		}
		if(this._group_index != null) {
			var key = haxe_ds_StringMap.keysIterator(this._group_index.h);
			while(key.hasNext()) {
				var key1 = key.next();
				var tempGroup = this._group_index.h[key1];
				if(tempGroup.group.members != null) {
					var i = 0;
					var _g = 0;
					var _g1 = tempGroup.group.members;
					while(_g < _g1.length) {
						var member = _g1[_g];
						++_g;
						if(member != null) {
							if(member == original) {
								tempGroup.group.members[i] = replace;
								if(replace == null) {
									if(splice) {
										tempGroup.group.members.splice(i,1);
										--i;
									}
								}
								return;
							}
							++i;
						}
					}
				}
			}
		}
		if(this.group.members != null) {
			var i = 0;
			var _g = 0;
			var _g1 = this.group.members;
			while(_g < _g1.length) {
				var member = _g1[_g];
				++_g;
				if(member != null) {
					if(member == original) {
						this.group.members[i] = replace;
						if(replace == null) {
							if(splice) {
								this.group.members.splice(i,1);
								--i;
							}
						}
						return;
					}
				}
				++i;
			}
		}
	}
	,applyNodeConditionals: function(info) {
		if(haxe_xml__$Access_HasNodeAccess.resolve(info,"locale") || haxe_xml__$Access_HasNodeAccess.resolve(info,"haxedef")) {
			var x = Xml.parse(haxe_xml_Printer.print(info)).firstElement();
			if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
			}
			var this1 = x;
			info = this1;
			if(haxe_xml__$Access_HasNodeAccess.resolve(info,"locale")) {
				info = this.applyNodeChanges(info,"locale");
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(info,"haxedef")) {
				info = this.applyNodeChanges(info,"haxedef");
			}
			if(haxe_xml__$Access_HasNodeAccess.resolve(info,"window")) {
				info = this.applyNodeChanges(info,"window");
			}
		}
		return info;
	}
	,applyNodeChanges: function(data,nodeName) {
		var nodeValue = "";
		if(nodeName == "locale") {
			if(this._ptr_tongue == null) {
				return data;
			}
			nodeValue = this._ptr_tongue.locale.toLowerCase();
		}
		var haxedef = false;
		if(nodeName == "haxedef") {
			haxedef = true;
		}
		if(nodeName == "window") {
			nodeValue = flixel_FlxG.width + "," + flixel_FlxG.height;
		}
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,nodeName);
		while(_g < _g1.length) {
			var cNode = _g1[_g];
			++_g;
			var cname = flixel_addons_ui_U.xml_name(cNode);
			if(haxedef) {
				nodeValue = "";
				if(flixel_addons_ui_U.checkHaxedef(cname)) {
					nodeValue = cname;
				}
			}
			if(cname == nodeValue) {
				if(haxe_xml__$Access_HasNodeAccess.resolve(cNode,"change")) {
					var _g2 = 0;
					var _g3 = haxe_xml__$Access_NodeListAccess.resolve(cNode,"change");
					while(_g2 < _g3.length) {
						var change = _g3[_g2];
						++_g2;
						var att = change.attributes();
						while(att.hasNext()) {
							var att1 = att.next();
							var value = change.get(att1);
							data.set(att1,value);
						}
					}
				}
			}
		}
		return data;
	}
	,loadThing: function(type,data) {
		return this._loadThing(type,data);
	}
	,_loadThingGetInfo: function(data) {
		var _this = data;
		if(_this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
		}
		var nodeName = _this.nodeName;
		var defaultDef = this.getDefinition("default:" + nodeName);
		var info = null;
		if(defaultDef != null) {
			info = flixel_addons_ui_FlxUI.consolidateData(data,defaultDef,true);
		}
		if(info == null) {
			info = data;
		}
		var use_def = flixel_addons_ui_U.xml_str(info,"use_def",true);
		var definition = null;
		if(use_def != "") {
			definition = this.getDefinition(use_def);
		}
		info = flixel_addons_ui_FlxUI.consolidateData(info,definition);
		info = this.applyNodeConditionals(info);
		if(this._loadTest(info) == false) {
			return null;
		}
		return info;
	}
	,_loadTooltip: function(thing,data) {
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"tooltip")) {
			var tt = this._loadTooltipData(haxe_xml__$Access_NodeAccess.resolve(data,"tooltip"));
			var state = flixel_addons_ui_FlxUI.getLeafUIState();
			if(((thing) instanceof flixel_addons_ui_FlxUICheckBox)) {
				var check = thing;
				state.tooltips.add(check.button,tt);
			} else {
				state.tooltips.add(thing,tt);
			}
		}
	}
	,_loadTooltipData: function(tNode) {
		var tt = { title : "", body : "", anchor : null, style : { titleFormat : null, bodyFormat : null, titleBorder : null, bodyBorder : null, titleOffset : null, bodyOffset : null, titleWidth : -1, bodyWidth : -1, background : null, borderSize : -1, borderColor : null, arrow : null, autoSizeVertical : null, autoSizeHorizontal : null, leftPadding : -1, rightPadding : -1, topPadding : -1, bottomPadding : -1}};
		var defaultDef = this.getDefinition("default:tooltip");
		if(defaultDef != null) {
			tNode = flixel_addons_ui_FlxUI.consolidateData(tNode,defaultDef,true);
		}
		if(haxe_xml__$Access_HasAttribAccess.resolve(tNode,"use_def")) {
			var defStr = flixel_addons_ui_U.xml_str(tNode,"use_def",true);
			var def = this.getDefinition(defStr);
			if(def != null) {
				tNode = flixel_addons_ui_FlxUI.consolidateData(tNode,def,true);
			}
		}
		if(haxe_xml__$Access_HasAttribAccess.resolve(tNode,"text")) {
			this._loadTooltipText(tNode,"text",tt);
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(tNode,"title")) {
			this._loadTooltipText(haxe_xml__$Access_NodeAccess.resolve(tNode,"title"),"text",tt);
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(tNode,"body")) {
			this._loadTooltipText(haxe_xml__$Access_NodeAccess.resolve(tNode,"body"),"text",tt);
		}
		tt.anchor = this._loadAnchor(tNode);
		this._loadTooltipStyle(tNode,tt);
		return tt;
	}
	,_loadTooltipStyle: function(node,tt) {
		tt.style.background = flixel_addons_ui_U.xml_color(node,"background");
		tt.style.borderSize = flixel_addons_ui_U.xml_i(node,"border",-1);
		tt.style.borderColor = flixel_addons_ui_U.xml_color(node,"border_color");
		var tmp;
		if(haxe_xml__$Access_HasAttribAccess.resolve(node,"arrow")) {
			var data = node;
			var str = "";
			if(data.get("arrow") != null) {
				str = data.get("arrow");
				if(str == "" || str == null) {
					str = "";
				} else {
					str = flixel_addons_ui_U.gfx(str);
					try {
						if(!openfl_utils_Assets.exists(str,"IMAGE")) {
							throw haxe_Exception.thrown("couldn't load bmp \"" + "arrow" + "\"");
						}
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						if(typeof(haxe_Exception.caught(_g).unwrap()) != "string") {
							throw _g;
						}
					}
				}
			}
			tmp = str;
		} else {
			tmp = null;
		}
		tt.style.arrow = tmp;
		tt.style.autoSizeHorizontal = flixel_addons_ui_U.xml_bool(node,"auto_size_horizontal",true);
		tt.style.autoSizeVertical = flixel_addons_ui_U.xml_bool(node,"auto_size_vertical",true);
		var padAll = this._loadHeight(node,-1,"pad_all") | 0;
		if(padAll != -1) {
			tt.style.leftPadding = tt.style.rightPadding = tt.style.topPadding = tt.style.bottomPadding = padAll;
		} else {
			var tmp = this._loadWidth(node,0,"pad_left") | 0;
			tt.style.leftPadding = tmp;
			var tmp = this._loadWidth(node,0,"pad_right") | 0;
			tt.style.rightPadding = tmp;
			var tmp = this._loadHeight(node,0,"pad_top") | 0;
			tt.style.topPadding = tmp;
			var tmp = this._loadHeight(node,0,"pad_bottom") | 0;
			tt.style.bottomPadding = tmp;
		}
	}
	,_loadTooltipText: function(node,fieldName,tt) {
		var nodeName;
		if(node.nodeType == Xml.Document) {
			nodeName = "Document";
		} else {
			if(node.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (node.nodeType == null ? "null" : XmlType.toString(node.nodeType)));
			}
			nodeName = node.nodeName;
		}
		var text = this._loadString(node,fieldName);
		var offset = new flixel_math_FlxPoint(this._loadWidth(node,0,"x"),this._loadHeight(node,0,"y"));
		if(haxe_xml__$Access_HasAttribAccess.resolve(node,"use_def")) {
			var use_def = flixel_addons_ui_U.xml_str(node,"use_def",true);
			var the_def = this.getDefinition(use_def);
			if(the_def != null) {
				node = flixel_addons_ui_FlxUI.consolidateData(node,the_def);
			}
		}
		var border = this._loadBorder(node);
		var format = this._loadFontDef(node);
		var color = flixel_addons_ui_U.xml_color(node,"color",true,-16777216);
		format.format.color = color;
		var W = this._loadWidth(node,-1,"width") | 0;
		switch(nodeName) {
		case "body":
			if(text != "") {
				tt.body = text;
			}
			tt.style.bodyOffset = offset;
			tt.style.bodyFormat = format;
			tt.style.bodyWidth = W;
			tt.style.bodyBorder = border;
			break;
		case "title":case "tooltip":
			if(text != "") {
				tt.title = text;
			}
			tt.style.titleOffset = offset;
			tt.style.titleFormat = format;
			tt.style.titleWidth = W;
			tt.style.titleBorder = border;
			break;
		default:
		}
	}
	,_loadAnchor: function(data) {
		var xOff = this._loadWidth(data,0,"x");
		var yOff = this._loadHeight(data,0,"y");
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"anchor")) {
			var xSide = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"x",true,"right");
			var ySide = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"y",true,"top");
			var xFlush = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"x-flush",true,"left");
			var yFlush = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"y-flush",true,"top");
			return new flixel_addons_ui_Anchor(xOff,yOff,xSide,ySide,xFlush,yFlush);
		}
		return null;
	}
	,_loadThing: function(type,data) {
		var info = this._loadThingGetInfo(data);
		if(info == null) {
			return null;
		}
		switch(type) {
		case "align":
			this._alignThing(info,true);
			return null;
		case "bar":
			return this._loadBar(info);
		case "box":
			return this._loadBox(info);
		case "button":
			return this._loadButton(info);
		case "button_toggle":
			return this._loadButton(info,true,true);
		case "change":
			this._changeThing(info);
			return null;
		case "checkbox":
			return this._loadCheckBox(info);
		case "failure":
			if(this._failure_checks == null) {
				this._failure_checks = [];
			}
			this.unparentXML(info);
			this._failure_checks.push(info);
			return null;
		case "input_text":
			return this._loadInputText(info);
		case "line":
			return this._loadLine(info);
		case "default":case "group":case "include":case "inject":case "load_if":case "mode":
			return null;
		case "chrome":case "nine_slice":case "nine_slice_sprite":case "nineslice":case "nineslicesprite":
			return this._load9SliceSprite(info);
		case "num_stepper":case "numeric_stepper":case "numstepper":
			return this._loadNumericStepper(info);
		case "position":
			this.name = flixel_addons_ui_U.xml_name(info);
			var thing = this.getAsset(this.name);
			if(thing != null) {
				this._loadPosition(info,thing);
			}
			return null;
		case "dropdown":case "dropdown_menu":case "pulldown":case "pulldown_menu":
			return this._loadDropDownMenu(info);
		case "radio_group":
			return this._loadRadioGroup(info);
		case "region":
			return this._loadRegion(info);
		case "sprite":
			return this._loadSprite(info);
		case "tab_menu":
			return this._loadTabMenu(info);
		case "text":
			return this._loadText(info);
		case "tile_test":
			return this._loadTileTest(info);
		case "layout":case "ui":
			return this._loadLayout(info);
		default:
			var result = this._ptr.getRequest("ui_get:" + type,this,info,[data]);
			return result;
		}
	}
	,_loadX: function(data,default_) {
		if(default_ == null) {
			default_ = 0;
		}
		return this._loadWidth(data,default_,"x");
	}
	,_loadY: function(data,default_) {
		if(default_ == null) {
			default_ = 0;
		}
		return this._loadHeight(data,default_,"y");
	}
	,_loadScale: function(data,default_,str) {
		if(str == null) {
			str = "scale";
		}
		if(default_ == null) {
			default_ = 1.0;
		}
		return this._loadHeight(data,default_,str,"none");
	}
	,_loadScaleX: function(data,default_) {
		if(default_ == null) {
			default_ = 1.0;
		}
		return this._loadWidth(data,default_,"scale_x","none");
	}
	,_loadScaleY: function(data,default_) {
		if(default_ == null) {
			default_ = 1.0;
		}
		return this._loadHeight(data,default_,"scale_y","none");
	}
	,_loadWidth: function(data,default_,str,defaultRound) {
		if(defaultRound == null) {
			defaultRound = "";
		}
		if(str == null) {
			str = "width";
		}
		if(default_ == null) {
			default_ = 10;
		}
		var ws = flixel_addons_ui_U.xml_str(data,str,true,default_ == null ? "null" : "" + default_);
		var round = this.getRound(data,defaultRound);
		return this.doRound(this._getDataSize("w",ws,default_),round);
	}
	,_loadHeight: function(data,default_,str,defaultRound) {
		if(defaultRound == null) {
			defaultRound = "";
		}
		if(str == null) {
			str = "height";
		}
		if(default_ == null) {
			default_ = 10;
		}
		var hs = flixel_addons_ui_U.xml_str(data,str,true,default_ == null ? "null" : "" + default_);
		var round = this.getRound(data,defaultRound);
		return this.doRound(this._getDataSize("h",hs,default_),round);
	}
	,_loadCompass: function(data,str) {
		if(str == null) {
			str = "resize_point";
		}
		var cs = flixel_addons_ui_U.xml_str(data,str,true,"nw");
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var fp = point;
		switch(cs) {
		case "c":case "center":case "m":case "mid":
			fp.set_x(0.5);
			fp.set_y(0.5);
			break;
		case "ll":case "sw":
			fp.set_x(0);
			fp.set_y(1);
			break;
		case "n":case "u":
			fp.set_x(0.5);
			fp.set_y(0);
			break;
		case "nw":case "ul":
			fp.set_x(0);
			fp.set_y(0);
			break;
		case "e":case "r":
			fp.set_x(1);
			fp.set_y(0.5);
			break;
		case "s":
			fp.set_x(0.5);
			fp.set_y(1);
			break;
		case "lr":case "se":
			fp.set_x(1);
			fp.set_y(1);
			break;
		case "ne":case "ur":
			fp.set_x(1);
			fp.set_y(0);
			break;
		case "w":
			fp.set_x(0.5);
			fp.set_y(0);
			break;
		}
		return fp;
	}
	,_changeParamsThing: function(data) {
		var name = flixel_addons_ui_U.xml_name(data);
		var thing = this.getAsset(name);
		if(thing == null) {
			return;
		}
		if(!js_Boot.__implements(thing,flixel_addons_ui_interfaces_IHasParams)) {
			return;
		}
		var ihp = thing;
		var params = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			params = [];
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
			while(_g < _g1.length) {
				var param = _g1[_g];
				++_g;
				if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
					var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
					type = type.toLowerCase();
					var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
					var value = valueStr;
					var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
					switch(type) {
					case "bool":case "boolean":
						var str = new String(valueStr);
						str = str.toLowerCase();
						if(str == "true" || str == "1") {
							value = true;
						} else {
							value = false;
						}
						break;
					case "color":case "hex":
						var return_val = flixel_util_FlxColor.fromString(valueStr);
						if(return_val == null) {
							throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
						}
						value = return_val;
						break;
					case "float":
						value = parseFloat(valueStr);
						break;
					case "int":
						value = Std.parseInt(valueStr);
						break;
					case "string":
						value = new String(valueStr);
						break;
					}
					params.push({ sort : sort, value : value});
				}
			}
			params.sort(flixel_addons_ui_FlxUI.sortParams);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i = _g++;
				params[i] = params[i].value;
			}
		}
		ihp.set_params(params);
	}
	,_changeThing: function(data) {
		var name = flixel_addons_ui_U.xml_name(data);
		var thing = this.getAsset(name);
		if(thing == null) {
			return;
		}
		var new_width = -1;
		var new_height = -1;
		var context = "";
		var code = "";
		var attribute = data.attributes();
		while(attribute.hasNext()) {
			var attribute1 = attribute.next();
			switch(attribute1) {
			case "height":
				new_height = this._loadHeight(data);
				break;
			case "label":
				var label = flixel_addons_ui_U.xml_str(data,"label");
				context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
				code = flixel_addons_ui_U.xml_str(data,"code",true,"");
				label = this.getText(label,context,true,code);
				if(js_Boot.__implements(thing,flixel_addons_ui_interfaces_ILabeled)) {
					var b = thing;
					b.getLabel().set_text(label);
				}
				break;
			case "text":
				if(((thing) instanceof flixel_addons_ui_FlxUIText)) {
					var text = flixel_addons_ui_U.xml_str(data,"text");
					context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
					var t = thing;
					code = flixel_addons_ui_U.xml_str(data,"code",true,"");
					t.set_text(this.getText(text,context,true,code));
				}
				break;
			case "width":
				new_width = this._loadWidth(data);
				break;
			}
		}
		if(js_Boot.__implements(thing,flixel_addons_ui_interfaces_IResizable)) {
			var ir = thing;
			if(new_width != -1 || new_height != -1) {
				if(new_width == -1) {
					new_width = ir.get_width();
				}
				if(new_height == -1) {
					new_height = ir.get_height();
				}
				ir.resize(new_width,new_height);
			}
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			if(js_Boot.__implements(thing,flixel_addons_ui_interfaces_IHasParams)) {
				var ihp = thing;
				var params = null;
				if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
					params = [];
					var _g = 0;
					var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
					while(_g < _g1.length) {
						var param = _g1[_g];
						++_g;
						if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
							var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
							type = type.toLowerCase();
							var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
							var value = valueStr;
							var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
							switch(type) {
							case "bool":case "boolean":
								var str = new String(valueStr);
								str = str.toLowerCase();
								if(str == "true" || str == "1") {
									value = true;
								} else {
									value = false;
								}
								break;
							case "color":case "hex":
								var return_val = flixel_util_FlxColor.fromString(valueStr);
								if(return_val == null) {
									throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
								}
								value = return_val;
								break;
							case "float":
								value = parseFloat(valueStr);
								break;
							case "int":
								value = Std.parseInt(valueStr);
								break;
							case "string":
								value = new String(valueStr);
								break;
							}
							params.push({ sort : sort, value : value});
						}
					}
					params.sort(flixel_addons_ui_FlxUI.sortParams);
					var _g = 0;
					var _g1 = params.length;
					while(_g < _g1) {
						var i = _g++;
						params[i] = params[i].value;
					}
				}
				ihp.set_params(params);
			}
		}
	}
	,_alignThing: function(data,suppressError) {
		if(suppressError == null) {
			suppressError = false;
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"objects")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"objects");
			while(_g < _g1.length) {
				var objectNode = _g1[_g];
				++_g;
				var objects = flixel_addons_ui_U.xml_str(objectNode,"value",true,"").split(",");
				var axis = flixel_addons_ui_U.xml_str(data,"axis",true);
				if(axis != "horizontal" && axis != "vertical") {
					throw haxe_Exception.thrown(new openfl_errors_Error("FlxUI._alignThing(): axis must be \"horizontal\" or \"vertical\"!"));
				}
				var spacing = -1;
				if(axis == "horizontal") {
					spacing = this._getDataSize("w",flixel_addons_ui_U.xml_str(data,"spacing",true),-1);
				} else {
					spacing = this._getDataSize("h",flixel_addons_ui_U.xml_str(data,"spacing",true),-1);
				}
				var resize = flixel_addons_ui_U.xml_bool(data,"resize");
				var grow = flixel_addons_ui_U.xml_bool(data,"grow",true);
				var shrink = flixel_addons_ui_U.xml_bool(data,"shrink",true);
				var X = -1;
				var Y = -1;
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var point = flixel_math_FlxPoint._pool.get().set(X,Y);
				point._inPool = false;
				var bounds = point;
				var boundsError = "";
				if(haxe_xml__$Access_HasNodeAccess.resolve(data,"bounds")) {
					if(axis == "horizontal") {
						bounds.set_x(this._getDataSize("w",flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"bounds"),"left"),-1));
						bounds.set_y(this._getDataSize("w",flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"bounds"),"right"),-1));
					} else if(axis == "vertical") {
						bounds.set_x(this._getDataSize("h",flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"bounds"),"top"),-1));
						bounds.set_y(this._getDataSize("h",flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"bounds"),"bottom"),-1));
					}
				}
				if(bounds.x != -1 && bounds.y != -1) {
					if(bounds.y <= bounds.x) {
						boundsError = "bounds max must be > bounds min! (max=" + bounds.y + " min=" + bounds.x + ")";
					}
				} else {
					boundsError = "missing bound!";
				}
				if(boundsError == "") {
					this._doAlign(objects,axis,spacing,resize,bounds,grow,shrink);
				}
				if(haxe_xml__$Access_HasNodeAccess.resolve(data,"anchor") || haxe_xml__$Access_HasAttribAccess.resolve(data,"x") || haxe_xml__$Access_HasAttribAccess.resolve(data,"y")) {
					var _g2 = 0;
					while(_g2 < objects.length) {
						var object = objects[_g2];
						++_g2;
						var thing = this.getAsset(object);
						this._loadPosition(data,thing);
					}
				} else {
					var tmp = boundsError != "";
				}
			}
		} else {
			throw haxe_Exception.thrown(new openfl_errors_Error("FlxUI._alignThing(): <objects> node not found!"));
		}
	}
	,_doAlign: function(objects,axis,spacing,resize,bounds,allowGrow,allowShrink) {
		if(allowShrink == null) {
			allowShrink = true;
		}
		if(allowGrow == null) {
			allowGrow = true;
		}
		var total_spacing = 0;
		var total_size = 0;
		var bound_range = bounds.y - bounds.x;
		var spaces = objects.length - 1;
		var space_size = 0;
		var object_size = 0;
		var size_prop = "width";
		var pos_prop = "x";
		if(axis == "vertical") {
			size_prop = "height";
			pos_prop = "y";
		}
		var _g = 0;
		while(_g < objects.length) {
			var nameStr = objects[_g];
			++_g;
			var widget = this.getAsset(nameStr);
			if(widget != null) {
				var theval = 0;
				switch(size_prop) {
				case "height":
					theval = widget.get_height();
					break;
				case "width":
					theval = widget.get_width();
					break;
				}
				total_size += theval;
			}
		}
		if(resize == false) {
			total_spacing = bound_range - total_size;
			space_size = total_spacing / spaces;
		} else {
			space_size = spacing;
			total_spacing = spacing * spaces;
			object_size = (bound_range - total_spacing) / objects.length;
		}
		object_size = object_size | 0;
		space_size = space_size | 0;
		var last_pos = bounds.x;
		var _g = 0;
		while(_g < objects.length) {
			var nameStr = objects[_g];
			++_g;
			var widget = this.getAsset(nameStr);
			if(widget != null) {
				var pos = last_pos;
				if(!resize) {
					switch(size_prop) {
					case "height":
						object_size = widget.get_height();
						break;
					case "width":
						object_size = widget.get_width();
						break;
					}
				} else if(js_Boot.__implements(widget,flixel_addons_ui_interfaces_IResizable)) {
					var allow = true;
					var widgetr = widget;
					if(axis == "vertical") {
						if(object_size > widgetr.get_width()) {
							allow = allowGrow;
						} else if(object_size < widgetr.get_width()) {
							allow = allowShrink;
						}
						if(allow) {
							widgetr.resize(widgetr.get_width(),object_size);
						}
					} else if(axis == "horizontal") {
						if(object_size > widgetr.get_height()) {
							allow = allowGrow;
						} else if(object_size < widgetr.get_height()) {
							allow = allowShrink;
						}
						if(allow) {
							widgetr.resize(object_size,widgetr.get_height());
						}
					}
				}
				last_pos = pos + object_size + space_size;
				switch(pos_prop) {
				case "x":
					widget.set_x(pos);
					break;
				case "y":
					widget.set_y(pos);
					break;
				}
			}
		}
	}
	,_checkFailure: function(data) {
		var target = flixel_addons_ui_U.xml_str(data,"target",true);
		var property = flixel_addons_ui_U.xml_str(data,"property",true);
		var compare = flixel_addons_ui_U.xml_str(data,"compare",true);
		var value = flixel_addons_ui_U.xml_str(data,"value",true);
		var thing = this.getAsset(target);
		if(thing == null) {
			return false;
		}
		var prop_f = 0;
		var val_f = 0;
		var p = flixel_addons_ui_U.perc_to_float(value);
		switch(property) {
		case "h":case "height":
			prop_f = thing.get_height();
			break;
		case "w":case "width":
			prop_f = thing.get_width();
			break;
		}
		if(isNaN(p)) {
			if(flixel_addons_ui_U.isStrNum(value)) {
				val_f = parseFloat(value);
			} else {
				return false;
			}
		} else {
			switch(property) {
			case "h":case "height":
				val_f = p * this.screenHeight();
				break;
			case "w":case "width":
				val_f = p * this.screenWidth();
				break;
			}
		}
		var return_val = false;
		switch(compare) {
		case "<":
			if(prop_f < val_f) {
				this.failed_by = val_f - prop_f;
				return_val = true;
			}
			break;
		case "<=":
			if(prop_f <= val_f) {
				this.failed_by = val_f - prop_f;
				return_val = true;
			}
			break;
		case "=":case "==":
			if(prop_f == val_f) {
				this.failed_by = Math.abs(prop_f - val_f);
				return_val = true;
			}
			break;
		case ">":
			if(prop_f > val_f) {
				this.failed_by = prop_f - val_f;
				return_val = true;
			}
			break;
		case ">=":
			if(prop_f >= val_f) {
				this.failed_by = prop_f - val_f;
				return_val = true;
			}
			break;
		}
		return return_val;
	}
	,_resizeThing: function(fo_r,bounds) {
		var do_resize = false;
		var ww = fo_r.get_width();
		var hh = fo_r.get_height();
		if(ww < bounds.min_width) {
			do_resize = true;
			ww = bounds.min_width;
		} else if(ww > bounds.max_width) {
			do_resize = true;
			ww = bounds.max_width;
		}
		if(hh < bounds.min_height) {
			do_resize = true;
			hh = bounds.min_height;
		} else if(hh > bounds.max_height) {
			do_resize = true;
			hh = bounds.max_height;
		}
		if(do_resize) {
			fo_r.resize(ww,hh);
		}
	}
	,_postLoadThing: function(type,data) {
		if(type == "load_if") {
			if(this._loadTest(data)) {
				if(data.firstElement() != null) {
					var subNode = data.elements();
					while(subNode.hasNext()) {
						var subNode1 = subNode.next();
						if(subNode1.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, expected Element but found " + (subNode1.nodeType == null ? "null" : XmlType.toString(subNode1.nodeType)));
						}
						var nodeType = subNode1.nodeName.toLowerCase();
						if(subNode1.nodeType != Xml.Document && subNode1.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Invalid nodeType " + (subNode1.nodeType == null ? "null" : XmlType.toString(subNode1.nodeType)));
						}
						var this1 = subNode1;
						this._postLoadThing(nodeType,this1);
					}
				}
			}
			return;
		}
		if(this._loadTest(data) == false) {
			return;
		}
		var name = flixel_addons_ui_U.xml_name(data);
		var thing = this.getAsset(name);
		var isGroup = type == "group";
		if(isGroup) {
			thing = this.getGroup(name);
		}
		if(type == "align") {
			this._alignThing(data);
		}
		if(type == "change") {
			this._changeThing(data);
		}
		if(type == "position") {
			this._loadPosition(data,thing);
			return;
		}
		if(type == "cursor") {
			this._loadCursor(data);
		}
		if(thing == null && !isGroup) {
			return;
		}
		if(!isGroup) {
			var use_def = flixel_addons_ui_U.xml_str(data,"use_def",true);
			var definition = null;
			if(use_def != "") {
				definition = this.getDefinition(use_def);
			}
			if(js_Boot.__implements(thing,flixel_addons_ui_interfaces_IResizable)) {
				var ww = this._getDataSize("w",flixel_addons_ui_U.xml_str(data,"width"));
				var hh = this._getDataSize("h",flixel_addons_ui_U.xml_str(data,"height"));
				if(ww == 0 || ww == thing.get_width()) {
					ww = null;
				}
				if(hh == 0 || hh == thing.get_height()) {
					hh = null;
				}
				var bounds = this.calcMaxMinSize(data);
				if(bounds != null) {
					if(ww != null) {
						if(ww < bounds.min_width) {
							ww = bounds.min_width;
						}
						if(ww > bounds.max_width) {
							ww = bounds.max_width;
						}
						bounds.min_width = bounds.max_width = ww;
					}
					if(hh != null) {
						if(hh < bounds.min_height) {
							hh = bounds.min_height;
						}
						if(hh > bounds.max_height) {
							hh = bounds.max_height;
						}
						bounds.min_height = bounds.max_height = hh;
					}
					this._resizeThing(js_Boot.__cast(thing , flixel_addons_ui_interfaces_IResizable),bounds);
				}
			}
			var X = -thing.x;
			var Y = -thing.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var _g = thing;
			_g.set_x(_g.x + X);
			var _g = thing;
			_g.set_y(_g.y + Y);
			this._loadPosition(data,thing);
		}
		var send_to = flixel_addons_ui_U.xml_str(data,"send_to",true,"");
		if(send_to != "") {
			switch(send_to) {
			case "back":case "bottom":
				this._sendTo(thing,-1);
				break;
			case "front":case "top":
				this._sendTo(thing,1);
				break;
			}
		}
		if(!isGroup && ((thing) instanceof flixel_addons_ui_FlxUI)) {
			var fui_thing = thing;
			if(fui_thing._postLoaded == false) {
				fui_thing.getEvent("post_load",this,null);
			}
		}
	}
	,_loadTileTest: function(data) {
		var tiles_w = flixel_addons_ui_U.xml_i(data,"tiles_w",2);
		var tiles_h = flixel_addons_ui_U.xml_i(data,"tiles_h",2);
		var w = this._loadWidth(data);
		var h = this._loadHeight(data);
		var bounds = this.calcMaxMinSize(data);
		if(w < bounds.min_width) {
			w = bounds.min_width;
		}
		if(h < bounds.min_height) {
			h = bounds.min_height;
		}
		var tileWidth = w / tiles_w | 0;
		var tileHeight = h / tiles_h | 0;
		if(tileWidth < tileHeight) {
			tileHeight = tileWidth;
		} else if(tileHeight < tileWidth) {
			tileWidth = tileHeight;
		}
		var totalw = tileWidth * tiles_w;
		var totalh = tileHeight * tiles_h;
		if(totalw > bounds.max_width) {
			tileWidth = bounds.max_width / tiles_w | 0;
		}
		if(totalh > bounds.max_height) {
			tileHeight = bounds.max_height / tiles_h | 0;
		}
		if(tileWidth < tileHeight) {
			tileHeight = tileWidth;
		} else if(tileHeight < tileWidth) {
			tileWidth = tileHeight;
		}
		if(tileWidth < 2) {
			tileWidth = 2;
		}
		if(tileHeight < 2) {
			tileHeight = 2;
		}
		var color1 = flixel_util_FlxColor.fromString(flixel_addons_ui_U.xml_str(data,"color1",true,"0x808080"));
		var color2 = flixel_util_FlxColor.fromString(flixel_addons_ui_U.xml_str(data,"color2",true,"0xc4c4c4"));
		var baseTileSize = flixel_addons_ui_U.xml_i(data,"base_tile_size",-1);
		var floorToEven = flixel_addons_ui_U.xml_bool(data,"floor_to_even",false);
		var ftt = new flixel_addons_ui_FlxUITileTest(0,0,tileWidth,tileHeight,tiles_w,tiles_h,color1,color2,floorToEven);
		ftt.baseTileSize = baseTileSize;
		return ftt;
	}
	,_loadString: function(data,attributeName) {
		var string = flixel_addons_ui_U.xml_str(data,attributeName);
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		string = this.getText(string,context,true,code);
		return string;
	}
	,_loadText: function(data) {
		var text = flixel_addons_ui_U.xml_str(data,"text");
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		text = this.getText(text,context,true,code);
		var W = this._loadWidth(data,100) | 0;
		var H = this._loadHeight(data,-1) | 0;
		var the_font = this._loadFontFace(data);
		var input = flixel_addons_ui_U.xml_bool(data,"input");
		if(input) {
			throw haxe_Exception.thrown(new openfl_errors_Error("FlxUI._loadText(): <text> with input has been deprecated. Use <input_text> instead."));
		}
		var align = flixel_addons_ui_U.xml_str(data,"align");
		if(align == "") {
			align = null;
		}
		var size = this._loadHeight(data,8,"size","floor") | 0;
		var color = this._loadColor(data);
		var border = this._loadBorder(data);
		var ftu = new flixel_addons_ui_FlxUIText(0,0,W,text,size);
		ftu.setFormat(the_font,size,color,align);
		border.apply(ftu);
		ftu.drawFrame();
		var ft = ftu;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			var params = null;
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
				params = [];
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
				while(_g < _g1.length) {
					var param = _g1[_g];
					++_g;
					if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
						var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
						type = type.toLowerCase();
						var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
						var value = valueStr;
						var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
						switch(type) {
						case "bool":case "boolean":
							var str = new String(valueStr);
							str = str.toLowerCase();
							if(str == "true" || str == "1") {
								value = true;
							} else {
								value = false;
							}
							break;
						case "color":case "hex":
							var return_val = flixel_util_FlxColor.fromString(valueStr);
							if(return_val == null) {
								throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
							}
							value = return_val;
							break;
						case "float":
							value = parseFloat(valueStr);
							break;
						case "int":
							value = Std.parseInt(valueStr);
							break;
						case "string":
							value = new String(valueStr);
							break;
						}
						params.push({ sort : sort, value : value});
					}
				}
				params.sort(flixel_addons_ui_FlxUI.sortParams);
				var _g = 0;
				var _g1 = params.length;
				while(_g < _g1) {
					var i = _g++;
					params[i] = params[i].value;
				}
			}
			var params1 = params;
			var ihp = ft;
			ihp.set_params(params1);
		}
		if(H > 0 && ft.get_height() != H) {
			if(js_Boot.__implements(ft,flixel_addons_ui_interfaces_IResizable)) {
				var r = ft;
				r.resize(r.get_width(),H);
			}
		}
		ftu.set_text(" ");
		ftu.set_text(text);
		return ft;
	}
	,_loadInputText: function(data) {
		var text = flixel_addons_ui_U.xml_str(data,"text");
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		text = this.getText(text,context,true,code);
		var W = this._loadWidth(data,100) | 0;
		var H = this._loadHeight(data,-1) | 0;
		var the_font = this._loadFontFace(data);
		var align = flixel_addons_ui_U.xml_str(data,"align");
		if(align == "") {
			align = null;
		}
		var size = this._loadHeight(data,8,"size") | 0;
		var color = this._loadColor(data);
		var border = this._loadBorder(data);
		var str = flixel_addons_ui_U.xml_str(data,"background",true,"0x00000000");
		var safe = true;
		var default_color = 0;
		if(default_color == null) {
			default_color = 0;
		}
		if(safe == null) {
			safe = false;
		}
		var return_val = flixel_util_FlxColor.fromString(str);
		if(return_val == null) {
			if(!safe) {
				throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + str);
			} else {
				return_val = default_color;
			}
		}
		var backgroundColor = return_val;
		var passwordMode = flixel_addons_ui_U.xml_bool(data,"password_mode");
		var fti = new flixel_addons_ui_FlxUIInputText(0,0,W,text,size,color,backgroundColor);
		fti.set_passwordMode(passwordMode);
		var force_case = flixel_addons_ui_U.xml_str(data,"force_case",true,"");
		var forceCase;
		switch(force_case) {
		case "lower":case "lower_case":case "lowercase":
			forceCase = 2;
			break;
		case "l":case "u":
			throw haxe_Exception.thrown(new openfl_errors_Error("FlxUI._loadInputText(): 1 letter values have been deprecated (force_case attribute)."));
		case "upper":case "upper_case":case "uppercase":
			forceCase = 1;
			break;
		default:
			forceCase = 0;
		}
		var filter = flixel_addons_ui_U.xml_str(data,"filter",true,"");
		var filterMode;
		while(filter.indexOf("_") != -1) filter = StringTools.replace(filter,"_","");
		switch(filter) {
		case "a":case "an":case "n":
			throw haxe_Exception.thrown(new openfl_errors_Error("FlxUI._loadInputText(): 1 letter values have been deprecated (filter attribute)."));
		case "alpha":case "onlyalpha":
			filterMode = 1;
			break;
		case "alphanum":case "alphanumeric":case "onlyalphanumeric":
			filterMode = 3;
			break;
		case "num":case "numeric":case "onlynumeric":
			filterMode = 2;
			break;
		default:
			filterMode = 0;
		}
		fti.setFormat(the_font,size,color,align);
		fti.set_forceCase(forceCase);
		fti.set_filterMode(filterMode);
		border.apply(fti);
		fti.drawFrame();
		var ft = fti;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			var params = null;
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
				params = [];
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
				while(_g < _g1.length) {
					var param = _g1[_g];
					++_g;
					if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
						var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
						type = type.toLowerCase();
						var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
						var value = valueStr;
						var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
						switch(type) {
						case "bool":case "boolean":
							var str = new String(valueStr);
							str = str.toLowerCase();
							if(str == "true" || str == "1") {
								value = true;
							} else {
								value = false;
							}
							break;
						case "color":case "hex":
							var return_val = flixel_util_FlxColor.fromString(valueStr);
							if(return_val == null) {
								throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
							}
							value = return_val;
							break;
						case "float":
							value = parseFloat(valueStr);
							break;
						case "int":
							value = Std.parseInt(valueStr);
							break;
						case "string":
							value = new String(valueStr);
							break;
						}
						params.push({ sort : sort, value : value});
					}
				}
				params.sort(flixel_addons_ui_FlxUI.sortParams);
				var _g = 0;
				var _g1 = params.length;
				while(_g < _g1) {
					var i = _g++;
					params[i] = params[i].value;
				}
			}
			var params1 = params;
			var ihp = ft;
			ihp.set_params(params1);
		}
		if(H > 0 && ft.get_height() != H) {
			if(js_Boot.__implements(ft,flixel_addons_ui_interfaces_IResizable)) {
				var r = ft;
				r.resize(r.get_width(),H);
			}
		}
		return ft;
	}
	,_loadRadioGroup: function(data) {
		var frg = null;
		var dot_src = flixel_addons_ui_U.xml_str(data,"dot_src",true);
		var radio_src = flixel_addons_ui_U.xml_str(data,"radio_src",true);
		var labels = [];
		var names = [];
		var W = this._loadWidth(data,11,"radio_width");
		var H = this._loadHeight(data,11,"radio_height");
		var scrollH = this._loadHeight(data,0,"height");
		var scrollW = this._loadHeight(data,0,"width");
		var labelW = this._loadWidth(data,100,"label_width");
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"radio");
		while(_g < _g1.length) {
			var radioNode = _g1[_g];
			++_g;
			var name = flixel_addons_ui_U.xml_name(radioNode);
			var label = flixel_addons_ui_U.xml_str(radioNode,"label");
			var context = flixel_addons_ui_U.xml_str(radioNode,"context",true,"ui");
			var code = flixel_addons_ui_U.xml_str(radioNode,"code",true,"");
			label = this.getText(label,context,true,code);
			names.push(name);
			labels.push(label);
		}
		names.reverse();
		labels.reverse();
		var y_space = this._loadHeight(data,25,"y_space");
		var params = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			params = [];
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
			while(_g < _g1.length) {
				var param = _g1[_g];
				++_g;
				if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
					var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
					type = type.toLowerCase();
					var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
					var value = valueStr;
					var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
					switch(type) {
					case "bool":case "boolean":
						var str = new String(valueStr);
						str = str.toLowerCase();
						if(str == "true" || str == "1") {
							value = true;
						} else {
							value = false;
						}
						break;
					case "color":case "hex":
						var return_val = flixel_util_FlxColor.fromString(valueStr);
						if(return_val == null) {
							throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
						}
						value = return_val;
						break;
					case "float":
						value = parseFloat(valueStr);
						break;
					case "int":
						value = Std.parseInt(valueStr);
						break;
					case "string":
						value = new String(valueStr);
						break;
					}
					params.push({ sort : sort, value : value});
				}
			}
			params.sort(flixel_addons_ui_FlxUI.sortParams);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i = _g++;
				params[i] = params[i].value;
			}
		}
		var params1 = params;
		var radio_asset = null;
		if(radio_src != "") {
			radio_asset = flixel_addons_ui_U.gfx(radio_src);
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"box")) {
			if(flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"box"),"slice9") != "") {
				radio_asset = this._load9SliceSprite(haxe_xml__$Access_NodeAccess.resolve(data,"box"));
			} else {
				radio_asset = this._loadSprite(haxe_xml__$Access_NodeAccess.resolve(data,"box"));
			}
		}
		var dot_asset = null;
		if(dot_src != "") {
			dot_asset = flixel_addons_ui_U.gfx(dot_src);
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"dot")) {
			if(flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"dot"),"slice9") != "") {
				dot_asset = this._load9SliceSprite(haxe_xml__$Access_NodeAccess.resolve(data,"dot"));
			} else {
				dot_asset = this._loadSprite(haxe_xml__$Access_NodeAccess.resolve(data,"dot"));
			}
		}
		var prevOffset = null;
		var nextOffset = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"button")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"button");
			while(_g < _g1.length) {
				var btnNode = _g1[_g];
				++_g;
				var name = flixel_addons_ui_U.xml_name(btnNode);
				if(name == "previous" || name == "prev") {
					var X = flixel_addons_ui_U.xml_f(btnNode,"x");
					var Y = flixel_addons_ui_U.xml_f(btnNode,"y");
					if(Y == null) {
						Y = 0;
					}
					if(X == null) {
						X = 0;
					}
					var point = flixel_math_FlxPoint._pool.get().set(X,Y);
					point._inPool = false;
					prevOffset = point;
				} else if(name == "next") {
					var X1 = flixel_addons_ui_U.xml_f(btnNode,"x");
					var Y1 = flixel_addons_ui_U.xml_f(btnNode,"y");
					if(Y1 == null) {
						Y1 = 0;
					}
					if(X1 == null) {
						X1 = 0;
					}
					var point1 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
					point1._inPool = false;
					nextOffset = point1;
				}
			}
		}
		frg = new flixel_addons_ui_FlxUIRadioGroup(0,0,names,labels,null,y_space,W,H,labelW,null,prevOffset,nextOffset);
		frg.set_params(params1);
		if(radio_asset != "" && radio_asset != null) {
			frg.loadGraphics(radio_asset,dot_asset);
		}
		var text_x = this._loadWidth(data,0,"text_x") | 0;
		var text_y = this._loadHeight(data,0,"text_y") | 0;
		var radios = frg.getRadios();
		var i = 0;
		var styleSet = false;
		var radioList = data.elementsNamed("radio");
		var radioNode = null;
		var _g = 0;
		var _g1 = radios.length;
		while(_g < _g1) {
			var k = _g++;
			var fo = radios[radios.length - 1 - k];
			radioNode = radioList.hasNext() ? radioList.next() : null;
			if(fo != null) {
				if(((fo) instanceof flixel_addons_ui_FlxUICheckBox)) {
					var fc = js_Boot.__cast(fo , flixel_addons_ui_FlxUICheckBox);
					var t = this.formatButtonText(data,fc);
					if(t != null && styleSet == false) {
						var fd = flixel_addons_ui_FontDef.copyFromFlxText(t);
						var bd = new flixel_addons_ui_BorderDef(t.borderStyle,t.borderColor,t.borderSize,t.borderQuality);
						frg.set_activeStyle(new flixel_addons_ui_CheckStyle(16777215,fd,flixel_text_FlxTextAlign.fromOpenFL(t._defaultFormat.align),t.color,bd));
						styleSet = true;
					}
					fc.set_textX(text_x);
					fc.set_textY(text_y);
					++i;
					if(radioNode != null) {
						if(radioNode.nodeType != Xml.Document && radioNode.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Invalid nodeType " + (radioNode.nodeType == null ? "null" : XmlType.toString(radioNode.nodeType)));
						}
						var this1 = radioNode;
						this._loadTooltip(fc,this1);
					}
				}
			}
		}
		if(scrollW != 0) {
			frg.fixedSize = true;
			frg.set_width(scrollW);
		}
		if(scrollH != 0) {
			frg.fixedSize = true;
			frg.set_height(scrollH);
		}
		return frg;
	}
	,_loadCheckBox: function(data) {
		var fc = null;
		var label = flixel_addons_ui_U.xml_str(data,"label");
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		var checked = flixel_addons_ui_U.xml_bool(data,"checked",false);
		label = this.getText(label,context,true,code);
		var labelW = this._loadWidth(data,100,"label_width");
		var check_src = flixel_addons_ui_U.xml_str(data,"check_src",true);
		var box_src = flixel_addons_ui_U.xml_str(data,"box_src",true);
		var params = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			params = [];
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
			while(_g < _g1.length) {
				var param = _g1[_g];
				++_g;
				if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
					var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
					type = type.toLowerCase();
					var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
					var value = valueStr;
					var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
					switch(type) {
					case "bool":case "boolean":
						var str = new String(valueStr);
						str = str.toLowerCase();
						if(str == "true" || str == "1") {
							value = true;
						} else {
							value = false;
						}
						break;
					case "color":case "hex":
						var return_val = flixel_util_FlxColor.fromString(valueStr);
						if(return_val == null) {
							throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
						}
						value = return_val;
						break;
					case "float":
						value = parseFloat(valueStr);
						break;
					case "int":
						value = Std.parseInt(valueStr);
						break;
					case "string":
						value = new String(valueStr);
						break;
					}
					params.push({ sort : sort, value : value});
				}
			}
			params.sort(flixel_addons_ui_FlxUI.sortParams);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i = _g++;
				params[i] = params[i].value;
			}
		}
		var params1 = params;
		var box_asset = null;
		var check_asset = null;
		if(box_src != "") {
			box_asset = flixel_addons_ui_U.gfx(box_src);
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"box")) {
			if(flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"box"),"slice9") != "") {
				box_asset = this._load9SliceSprite(haxe_xml__$Access_NodeAccess.resolve(data,"box"));
			} else {
				box_asset = this._loadSprite(haxe_xml__$Access_NodeAccess.resolve(data,"box"));
			}
		}
		if(check_src != "") {
			check_asset = flixel_addons_ui_U.gfx(check_src);
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"check")) {
			if(flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"check"),"slice9") != "") {
				check_asset = this._load9SliceSprite(haxe_xml__$Access_NodeAccess.resolve(data,"check"));
			} else {
				check_asset = this._loadSprite(haxe_xml__$Access_NodeAccess.resolve(data,"check"));
			}
		}
		fc = new flixel_addons_ui_FlxUICheckBox(0,0,box_asset,check_asset,label,labelW,params1);
		this.formatButtonText(data,fc);
		var text_x = this._loadWidth(data,0,"text_x") | 0;
		var text_y = this._loadHeight(data,0,"text_y") | 0;
		fc.set_textX(text_x);
		fc.set_textY(text_y);
		fc.set_text(label);
		fc.set_checked(checked);
		return fc;
	}
	,_loadDropDownMenu: function(data) {
		var fud = null;
		var label = flixel_addons_ui_U.xml_str(data,"label");
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		label = this.getText(label,context,true,code);
		var back_def = flixel_addons_ui_U.xml_str(data,"back_def",true);
		var panel_def = flixel_addons_ui_U.xml_str(data,"panel_def",true);
		var button_def = flixel_addons_ui_U.xml_str(data,"button_def",true);
		var label_def = flixel_addons_ui_U.xml_str(data,"label_def",true);
		var back_asset = null;
		var panel_asset = null;
		var button_asset = null;
		var label_asset = null;
		if(back_def != "") {
			back_asset = this._loadSprite(this.getDefinition(back_def));
		}
		if(panel_def != "") {
			panel_asset = this._load9SliceSprite(this.getDefinition(panel_def));
		}
		if(button_def != "") {
			try {
				button_asset = this._loadButton(this.getDefinition(button_def),false,false);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				if(((haxe_Exception.caught(_g).unwrap()) instanceof openfl_errors_Error)) {
					button_asset = null;
				} else {
					throw _g;
				}
			}
		}
		if(label_def != "") {
			try {
				label_asset = this._loadText(this.getDefinition(label_def));
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				if(((haxe_Exception.caught(_g).unwrap()) instanceof openfl_errors_Error)) {
					label_asset = null;
				} else {
					throw _g;
				}
			}
			if(label_asset != null && label != "") {
				label_asset.set_text(label);
			}
		}
		var asset_list = null;
		var data_list = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"data")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"data");
			while(_g < _g1.length) {
				var dataNode = _g1[_g];
				++_g;
				if(data_list == null) {
					data_list = [];
				}
				var namel = new flixel_addons_ui_StrNameLabel(flixel_addons_ui_U.xml_str(dataNode,"name",true),flixel_addons_ui_U.xml_str(dataNode,"label"));
				data_list.push(namel);
			}
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"asset")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"asset");
			while(_g < _g1.length) {
				var assetNode = _g1[_g];
				++_g;
				if(asset_list == null) {
					asset_list = [];
				}
				var def_name = flixel_addons_ui_U.xml_str(assetNode,"def",true);
				var name = flixel_addons_ui_U.xml_name(assetNode);
				var asset = null;
				try {
					asset = this._loadButton(this.getDefinition(def_name),false);
				} catch( _g2 ) {
					haxe_NativeStackTrace.lastError = _g2;
					if(!((haxe_Exception.caught(_g2).unwrap()) instanceof openfl_errors_Error)) {
						throw _g2;
					}
				}
				if(asset != null) {
					asset.name = name;
					if(asset_list == null) {
						asset_list = [];
					}
					asset_list.push(asset);
				}
			}
		}
		var header = new flixel_addons_ui_FlxUIDropDownHeader(120,back_asset,label_asset,button_asset);
		fud = new flixel_addons_ui_FlxUIDropDownMenu(0,0,data_list,null,header,panel_asset,asset_list);
		return fud;
	}
	,_loadTest: function(data) {
		var result = true;
		var tmp;
		if(data.nodeType == Xml.Document) {
			tmp = "Document";
		} else {
			if(data.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (data.nodeType == null ? "null" : XmlType.toString(data.nodeType)));
			}
			tmp = data.nodeName;
		}
		if(tmp == "load_if") {
			result = this._loadTestSub(data);
			if(result == false) {
				return false;
			}
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"load_if")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"load_if");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				var _this = node;
				if(_this.nodeType != Xml.Document && _this.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
				}
				if(_this.children[0] == null) {
					result = this._loadTestSub(node);
					if(result == false) {
						return false;
					}
				}
			}
		}
		return result;
	}
	,_loadTestSub: function(node) {
		var matchValue = flixel_addons_ui_U.xml_bool(node,"is",true);
		var match = matchValue;
		var aspect_ratio = flixel_addons_ui_U.xml_f(node,"aspect_ratio",-1);
		if(aspect_ratio != -1) {
			match = true;
			var screen_ratio = js_Boot.__cast(flixel_FlxG.width , Float) / js_Boot.__cast(flixel_FlxG.height , Float);
			var diff = Math.abs(screen_ratio - aspect_ratio);
			if(haxe_xml__$Access_HasAttribAccess.resolve(node,"tolerance")) {
				var tolerance = flixel_addons_ui_U.xml_f(node,"tolerance",0.1);
				if(diff > tolerance) {
					match = false;
				}
			} else if(haxe_xml__$Access_HasAttribAccess.resolve(node,"tolerance_plus") || haxe_xml__$Access_HasAttribAccess.resolve(node,"tolerance_minus")) {
				var tolerance_minus = flixel_addons_ui_U.xml_f(node,"tolerance_minus",-1);
				var tolerance_plus = flixel_addons_ui_U.xml_f(node,"tolerance_plus",-1);
				if(screen_ratio > aspect_ratio && tolerance_plus != -1) {
					if(diff > tolerance_plus) {
						match = false;
					}
				}
				if(screen_ratio < aspect_ratio && tolerance_minus != -1) {
					if(diff > tolerance_minus) {
						match = false;
					}
				}
			}
			if(match != matchValue) {
				return false;
			}
		}
		var resolution = flixel_addons_ui_U.xml_pt(node,"resolution",null);
		if(resolution != null) {
			match = true;
			var toleranceRes = flixel_addons_ui_U.xml_pt(node,"tolerance",null);
			if(toleranceRes == null) {
				toleranceRes = new flixel_math_FlxPoint(0,0);
			}
			var diffX = Math.abs(resolution.x - flixel_FlxG.width);
			var diffY = Math.abs(resolution.y - flixel_FlxG.height);
			if(diffX > toleranceRes.x || diffY > toleranceRes.y) {
				match = false;
			}
			if(match != matchValue) {
				return false;
			}
		}
		var haxeDef = flixel_addons_ui_U.xml_str(node,"haxedef",true,"");
		var haxeVal = flixel_addons_ui_U.xml_bool(node,"value",true);
		if(haxeDef != "") {
			match = true;
			var defValue = flixel_addons_ui_U.checkHaxedef(haxeDef);
			match = defValue == haxeVal;
			if(match != matchValue) {
				return false;
			}
		}
		var variable = flixel_addons_ui_U.xml_str(node,"variable",false,"");
		var variableType = flixel_addons_ui_U.xml_str(node,"type",true,"string");
		if(variable != "") {
			match = true;
			var varData = this.parseVarValue(variable);
			if(varData != null) {
				match = this.checkVariable(varData.variable,varData.value,variableType,varData.op);
			}
			if(match != matchValue) {
				return false;
			}
		}
		return true;
	}
	,parseVarValue: function(varString) {
		var arr = ["==","=","!=","!==","<",">","<=",">="];
		var temp;
		var _g = 0;
		while(_g < arr.length) {
			var op = arr[_g];
			++_g;
			if(varString.indexOf(op) != -1) {
				temp = varString.split(op);
				if(temp != null && temp.length == 2) {
					return { variable : temp[0], value : temp[1], op : op};
				}
			}
		}
		return null;
	}
	,_loadLayout: function(data) {
		var name = flixel_addons_ui_U.xml_str(data,"name",true);
		var X = this._loadWidth(data,0,"x");
		var Y = this._loadHeight(data,0,"y");
		var _ui = this.createUI(data);
		_ui.set_x(X);
		_ui.set_y(Y);
		_ui.name = name;
		return _ui;
	}
	,addToCleanup: function(str) {
		if(this._assetsToCleanUp == null) {
			return;
		}
		if(this._assetsToCleanUp.indexOf(str) == -1) {
			this._assetsToCleanUp.push(str);
		}
	}
	,addToScaledAssets: function(str) {
		if(this._scaledAssets != null && this._scaledAssets.indexOf(str) == -1) {
			this._scaledAssets.push(str);
		}
	}
	,cleanup: function() {
		var _g = 0;
		var _g1 = this._assetsToCleanUp;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			flixel_FlxG.bitmap.removeByKey(key);
		}
		this._assetsToCleanUp = null;
		this._scaledAssets = null;
	}
	,createUI: function(data) {
		return new flixel_addons_ui_FlxUI(data,this,this,this._ptr_tongue,this.liveFilePath);
	}
	,_loadTabMenu: function(data) {
		var back_def_str = flixel_addons_ui_U.xml_str(data,"back_def");
		var back_def = this.getDefinition(back_def_str);
		if(back_def == null) {
			back_def = data;
		}
		back_def = flixel_addons_ui_FlxUI.consolidateData(back_def,data);
		var back_type = flixel_addons_ui_U.xml_str(data,"back_type",true,"chrome");
		var backSprite;
		switch(back_type) {
		case "region":
			backSprite = new flixel_addons_ui_FlxUIRegion();
			break;
		case "sprite":
			backSprite = this._loadSprite(back_def);
			break;
		default:
			backSprite = this._load9SliceSprite(back_def,"tab_menu");
		}
		var tab_def = null;
		var stretch_tabs = flixel_addons_ui_U.xml_bool(data,"stretch_tabs",false);
		var stackToggled = "front";
		var stackUntoggled = "back";
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"stacking")) {
			stackToggled = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"stacking"),"toggled",true,"front");
			stackUntoggled = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"stacking"),"untoggled",true,"back");
		}
		var tab_spacing_str = flixel_addons_ui_U.xml_str(data,"spacing",true,"");
		var tab_spacing = null;
		if(tab_spacing_str != "") {
			tab_spacing = this._loadWidth(data,0,"spacing");
		}
		var tab_x = this._loadWidth(data,0,"tab_x");
		var tab_y = this._loadHeight(data,0,"tab_y");
		var X = tab_x;
		var Y = tab_y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		var tab_offset = point;
		var tab_def_str = "";
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"tab")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"tab");
			while(_g < _g1.length) {
				var tabNode = _g1[_g];
				++_g;
				var temp = flixel_addons_ui_U.xml_str(tabNode,"use_def");
				if(temp != "") {
					tab_def_str = temp;
				}
			}
			if(tab_def_str != "") {
				tab_def = this.getDefinition(tab_def_str);
			} else {
				tab_def = haxe_xml__$Access_NodeAccess.resolve(data,"tab");
			}
		}
		var list_tabs = [];
		var name = "";
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"tab")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"tab");
			while(_g < _g1.length) {
				var tab_node = _g1[_g];
				++_g;
				name = flixel_addons_ui_U.xml_name(tab_node);
				if(name != "") {
					var label = flixel_addons_ui_U.xml_str(tab_node,"label");
					var context = flixel_addons_ui_U.xml_str(tab_node,"context",true,"ui");
					var code = flixel_addons_ui_U.xml_str(tab_node,"code",true,"");
					label = this.getText(label,context,true,code);
					label = this.getText(label,context,true,code);
					var tab_info = flixel_addons_ui_FlxUI.consolidateData(tab_node,tab_def);
					var tab = this._loadButton(tab_info,true,true,"tab_menu");
					tab.name = name;
					list_tabs.push(tab);
					this._loadTooltip(tab,tab_info);
				}
			}
		}
		if(list_tabs.length > 0) {
			if(tab_def == null || !haxe_xml__$Access_HasNodeAccess.resolve(tab_def,"text")) {
				var _g = 0;
				while(_g < list_tabs.length) {
					var t = list_tabs[_g];
					++_g;
					if(((t) instanceof flixel_addons_ui_FlxUITypedButton)) {
						var tb = t;
						tb.label.set_color(16777215);
						if(((tb.label) instanceof flixel_addons_ui_FlxUIText)) {
							var labelText = tb.label;
							labelText.set_borderStyle(flixel_text_FlxTextBorderStyle.OUTLINE);
							labelText.set_borderColor(0);
							labelText.set_borderSize(1);
							labelText.set_borderQuality(1);
						}
					}
				}
			}
			if(tab_def == null || !haxe_xml__$Access_HasAttribAccess.resolve(tab_def,"width")) {
				stretch_tabs = true;
			}
		}
		var tab_stacking = [stackToggled,stackUntoggled];
		var fg = new flixel_addons_ui_FlxUITabMenu(backSprite,list_tabs,null,tab_offset,stretch_tabs,tab_spacing,tab_stacking);
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"group")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"group");
			while(_g < _g1.length) {
				var group_node = _g1[_g];
				++_g;
				name = flixel_addons_ui_U.xml_name(group_node);
				var _ui = new flixel_addons_ui_FlxUI(group_node,fg,this,this._ptr_tongue);
				if(list_tabs != null && list_tabs.length > 0) {
					var _g2 = _ui;
					_g2.set_y(_g2.y + list_tabs[0].get_height());
				}
				_ui.name = name;
				fg.addGroup(_ui);
			}
		}
		return fg;
	}
	,_loadNumericStepper: function(data,setCallback) {
		if(setCallback == null) {
			setCallback = true;
		}
		var stepSize = flixel_addons_ui_U.xml_f(data,"step",1);
		var defaultValue = flixel_addons_ui_U.xml_f(data,"value",0);
		var min = flixel_addons_ui_U.xml_f(data,"min",0);
		var max = flixel_addons_ui_U.xml_f(data,"max",10);
		var decimals = flixel_addons_ui_U.xml_i(data,"decimals",0);
		var percent = flixel_addons_ui_U.xml_bool(data,"percent");
		var stack = flixel_addons_ui_U.xml_str(data,"stack",true,"");
		if(stack == "") {
			stack = flixel_addons_ui_U.xml_str(data,"stacking",true,"");
		}
		stack = stack.toLowerCase();
		var stacking;
		switch(stack) {
		case "h":case "horizontal":case "horz":
			stacking = 1;
			break;
		case "v":case "vert":case "vertical":
			stacking = 0;
			break;
		default:
			stacking = 1;
		}
		var theText = null;
		var buttPlus = null;
		var buttMinus = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"text")) {
			theText = this._loadThing("text",haxe_xml__$Access_NodeAccess.resolve(data,"text"));
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"plus")) {
			buttPlus = this._loadThing("button",haxe_xml__$Access_NodeAccess.resolve(data,"plus"));
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"minus")) {
			buttMinus = this._loadThing("button",haxe_xml__$Access_NodeAccess.resolve(data,"minus"));
		}
		var ns = new flixel_addons_ui_FlxUINumericStepper(0,0,stepSize,defaultValue,min,max,decimals,stacking,theText,buttPlus,buttMinus,percent);
		if(setCallback) {
			var params = null;
			if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
				params = [];
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
				while(_g < _g1.length) {
					var param = _g1[_g];
					++_g;
					if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
						var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
						type = type.toLowerCase();
						var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
						var value = valueStr;
						var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
						switch(type) {
						case "bool":case "boolean":
							var str = new String(valueStr);
							str = str.toLowerCase();
							if(str == "true" || str == "1") {
								value = true;
							} else {
								value = false;
							}
							break;
						case "color":case "hex":
							var return_val = flixel_util_FlxColor.fromString(valueStr);
							if(return_val == null) {
								throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
							}
							value = return_val;
							break;
						case "float":
							value = parseFloat(valueStr);
							break;
						case "int":
							value = Std.parseInt(valueStr);
							break;
						case "string":
							value = new String(valueStr);
							break;
						}
						params.push({ sort : sort, value : value});
					}
				}
				params.sort(flixel_addons_ui_FlxUI.sortParams);
				var _g = 0;
				var _g1 = params.length;
				while(_g < _g1) {
					var i = _g++;
					params[i] = params[i].value;
				}
			}
			var params1 = params;
			ns.set_params(params1);
		}
		return ns;
	}
	,getResizeRatio: function(data,defaultAxis) {
		if(defaultAxis == null) {
			defaultAxis = 1;
		}
		var str = flixel_addons_ui_U.xml_str(data,"resize_ratio_x",true);
		if(str == "") {
			str = flixel_addons_ui_U.xml_str(data,"resize_ratio_y",true);
			if(str == "") {
				var resize_ratio = flixel_addons_ui_U.xml_f(data,"resize_ratio",-1);
				return new flixel_math_FlxPoint(resize_ratio,defaultAxis);
			} else {
				return new flixel_math_FlxPoint(parseFloat(str),1);
			}
		} else {
			return new flixel_math_FlxPoint(parseFloat(str),0);
		}
	}
	,_loadButton: function(data,setCallback,isToggle,load_code) {
		if(load_code == null) {
			load_code = "";
		}
		if(isToggle == null) {
			isToggle = false;
		}
		if(setCallback == null) {
			setCallback = true;
		}
		var fb = null;
		var color = this._loadColor(data);
		var resize_ratio = flixel_addons_ui_U.xml_f(data,"resize_ratio",-1);
		var resize_point = this._loadCompass(data,"resize_point");
		var resize_label = flixel_addons_ui_U.xml_bool(data,"resize_label",false);
		var label = flixel_addons_ui_U.xml_str(data,"label");
		var sprite = null;
		var toggleSprite = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"sprite")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"sprite");
			while(_g < _g1.length) {
				var spriteNode = _g1[_g];
				++_g;
				var forToggle = isToggle && flixel_addons_ui_U.xml_bool(spriteNode,"toggle");
				if(forToggle) {
					toggleSprite = this._loadThing("sprite",spriteNode);
				} else {
					sprite = this._loadThing("sprite",spriteNode);
				}
			}
		}
		var context = flixel_addons_ui_U.xml_str(data,"context",true,"ui");
		var code = flixel_addons_ui_U.xml_str(data,"code",true,"");
		label = this.getText(label,context,true,code);
		var W = this._loadWidth(data,0,"width") | 0;
		var H = this._loadHeight(data,0,"height") | 0;
		var params = null;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"param")) {
			params = [];
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"param");
			while(_g < _g1.length) {
				var param = _g1[_g];
				++_g;
				if(haxe_xml__$Access_HasAttribAccess.resolve(param,"type") && haxe_xml__$Access_HasAttribAccess.resolve(param,"value")) {
					var type = haxe_xml__$Access_AttribAccess.resolve(param,"type");
					type = type.toLowerCase();
					var valueStr = haxe_xml__$Access_AttribAccess.resolve(param,"value");
					var value = valueStr;
					var sort = flixel_addons_ui_U.xml_i(param,"sort",-1);
					switch(type) {
					case "bool":case "boolean":
						var str = new String(valueStr);
						str = str.toLowerCase();
						if(str == "true" || str == "1") {
							value = true;
						} else {
							value = false;
						}
						break;
					case "color":case "hex":
						var return_val = flixel_util_FlxColor.fromString(valueStr);
						if(return_val == null) {
							throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + valueStr);
						}
						value = return_val;
						break;
					case "float":
						value = parseFloat(valueStr);
						break;
					case "int":
						value = Std.parseInt(valueStr);
						break;
					case "string":
						value = new String(valueStr);
						break;
					}
					params.push({ sort : sort, value : value});
				}
			}
			params.sort(flixel_addons_ui_FlxUI.sortParams);
			var _g = 0;
			var _g1 = params.length;
			while(_g < _g1) {
				var i = _g++;
				params[i] = params[i].value;
			}
		}
		var params1 = params;
		if(sprite == null) {
			var useDefaultGraphic = haxe_xml__$Access_HasNodeAccess.resolve(data,"graphic") == false;
			fb = new flixel_addons_ui_FlxUIButton(0,0,label,null,useDefaultGraphic,false,color);
			var fuib = fb;
			fuib._autoCleanup = false;
		} else {
			var tempGroup = null;
			if(label != "") {
				var labelTxt = new flixel_addons_ui_FlxUIText(0,0,80,label,8);
				labelTxt.setFormat(null,8,3355443,"center");
				tempGroup = new flixel_group_FlxTypedSpriteGroup();
				tempGroup.add(sprite);
				tempGroup.add(labelTxt);
				fb = new flixel_addons_ui_FlxUISpriteButton(0,0,tempGroup);
			} else {
				fb = new flixel_addons_ui_FlxUISpriteButton(0,0,sprite);
			}
		}
		fb.resize_ratio = resize_ratio;
		fb.resize_point = resize_point;
		fb.autoResizeLabel = resize_label;
		if(setCallback) {
			fb.set_params(params1);
		}
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"graphic")) {
			var blank = flixel_addons_ui_U.xml_bool(haxe_xml__$Access_NodeAccess.resolve(data,"graphic"),"blank");
			if(blank) {
				fb.loadGraphicSlice9(["","",""],W,H,null,0,resize_ratio);
			} else {
				var graphic_names = null;
				var slice9_names = null;
				var frames = null;
				if(isToggle) {
					graphic_names = ["","","","","",""];
					slice9_names = [null,null,null,null,null,null];
				} else {
					graphic_names = ["","",""];
					slice9_names = [null,null,null];
				}
				var src_w = flixel_addons_ui_U.xml_i(haxe_xml__$Access_NodeAccess.resolve(data,"graphic"),"src_w",0);
				var src_h = flixel_addons_ui_U.xml_i(haxe_xml__$Access_NodeAccess.resolve(data,"graphic"),"src_h",0);
				var tileStr = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"graphic"),"tile",true,"");
				var tile = 0;
				switch(tileStr) {
				case "h":case "horizontal":
					tile = 16;
					break;
				case "v":case "vertical":
					tile = 1;
					break;
				case "all":case "both":case "hv":case "true":case "vh":
					tile = 17;
					break;
				}
				var tile1 = tile;
				var frame_str = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"graphic"),"frames",true);
				if(frame_str != "") {
					frames = [];
					var arr = frame_str.split(",");
					var _g = 0;
					while(_g < arr.length) {
						var numstr = arr[_g];
						++_g;
						frames.push(Std.parseInt(numstr));
					}
				}
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"graphic");
				while(_g < _g1.length) {
					var graphicNode = _g1[_g];
					++_g;
					var graphic_name = flixel_addons_ui_U.xml_name(graphicNode);
					var image = flixel_addons_ui_U.xml_str(graphicNode,"image");
					var slice9 = flixel_util_FlxStringUtil.toIntArray(flixel_addons_ui_U.xml_str(graphicNode,"slice9"));
					var tileStr = flixel_addons_ui_U.xml_str(graphicNode,"tile",true,"");
					var tile = 0;
					switch(tileStr) {
					case "h":case "horizontal":
						tile = 16;
						break;
					case "v":case "vertical":
						tile = 1;
						break;
					case "all":case "both":case "hv":case "true":case "vh":
						tile = 17;
						break;
					}
					tile1 = tile;
					var toggleState = flixel_addons_ui_U.xml_bool(graphicNode,"toggle");
					toggleState = toggleState && isToggle;
					var igfx = flixel_addons_ui_U.gfx(image);
					switch(graphic_name) {
					case "all":
						var tilesTall = isToggle ? 6 : 3;
						var temp = null;
						if(src_h != 0) {
							var temp1 = flixel_addons_ui_U.getBmp(igfx);
							tilesTall = temp1.height / src_h | 0;
						}
						if(image != "") {
							graphic_names = [this.loadScaledSrc(graphicNode,"image","scale_src",1,tilesTall)];
						}
						slice9_names = [this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[0],"image")];
						temp = flixel_addons_ui_U.getBmp(graphic_names[0]);
						src_w = temp.width;
						src_h = temp.height / tilesTall | 0;
						break;
					case "active":case "highlight":case "hilight":case "hover":case "over":
						if(image != "") {
							if(!toggleState) {
								graphic_names[1] = this.loadScaledSrc(graphicNode,"image","scale_src");
							} else {
								graphic_names[4] = this.loadScaledSrc(graphicNode,"image","scale_src");
							}
						}
						if(!toggleState) {
							slice9_names[1] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[1],"image");
						} else {
							slice9_names[4] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[4],"image");
						}
						break;
					case "down":case "pressed":case "pushed":
						if(image != "") {
							if(!toggleState) {
								graphic_names[2] = this.loadScaledSrc(graphicNode,"image","scale_src");
							} else {
								graphic_names[5] = this.loadScaledSrc(graphicNode,"image","scale_src");
							}
						}
						if(!toggleState) {
							slice9_names[2] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[2],"image");
						} else {
							slice9_names[5] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[5],"image");
						}
						break;
					case "":case "inactive":case "normal":case "up":
						if(image != "") {
							if(!toggleState) {
								graphic_names[0] = this.loadScaledSrc(graphicNode,"image","scale_src");
							} else {
								graphic_names[3] = this.loadScaledSrc(graphicNode,"image","scale_src");
							}
						}
						if(!toggleState) {
							slice9_names[0] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[0],"image");
						} else {
							slice9_names[3] = this.load9SliceSprite_scaleSub(slice9,graphicNode,graphic_names[3],"image");
						}
						break;
					}
					if(graphic_names[0] != "") {
						if(graphic_names.length >= 3) {
							if(graphic_names[1] == "") {
								graphic_names[1] = graphic_names[0];
							}
							if(graphic_names[2] == "") {
								graphic_names[2] = graphic_names[1];
							}
							if(graphic_names.length >= 6) {
								if(graphic_names[3] == "") {
									graphic_names[3] = graphic_names[0];
								}
								if(graphic_names[4] == "") {
									graphic_names[4] = graphic_names[1];
								}
								if(graphic_names[5] == "") {
									graphic_names[5] = graphic_names[2];
								}
							}
						}
					}
				}
				fb.loadGraphicSlice9(graphic_names,W,H,slice9_names,tile1,resize_ratio,isToggle,src_w,src_h,frames);
			}
		} else if(load_code == "tab_menu") {
			var graphic_names = ["flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab.png","flixel/flixel-ui/img/tab.png","flixel/flixel-ui/img/tab.png"];
			var slice9_tab = flixel_util_FlxStringUtil.toIntArray("6,6,11,11");
			var slice9_names = [slice9_tab,slice9_tab,slice9_tab,slice9_tab,slice9_tab,slice9_tab];
			if(((fb) instanceof flixel_addons_ui_FlxUIButton)) {
				var fbui = fb;
				fbui.loadGraphicSlice9(graphic_names,W,H,slice9_names,0,resize_ratio,isToggle);
			} else if(((fb) instanceof flixel_addons_ui_FlxUISpriteButton)) {
				var fbuis = fb;
				fbuis.loadGraphicSlice9(graphic_names,W,H,slice9_names,0,resize_ratio,isToggle);
			} else {
				fb.loadGraphicSlice9(graphic_names,W,H,slice9_names,0,resize_ratio,isToggle);
			}
		} else {
			if(W <= 0) {
				W = 80;
			}
			if(H <= 0) {
				H = 20;
			}
			fb.loadGraphicSlice9(null,W,H,null,0,resize_ratio,isToggle);
		}
		if(sprite == null) {
			if(data != null && haxe_xml__$Access_HasNodeAccess.resolve(data,"text")) {
				this.formatButtonText(data,fb);
			} else if(load_code == "tab_menu") {
				fb.up_color = 16777215;
				fb.down_color = 16777215;
				fb.over_color = 16777215;
				fb.up_toggle_color = 16777215;
				fb.down_toggle_color = 16777215;
				fb.over_toggle_color = 16777215;
			} else {
				fb.autoCenterLabel();
			}
		} else {
			fb.autoCenterLabel();
		}
		if(sprite != null && label != "") {
			if(data != null && haxe_xml__$Access_HasNodeAccess.resolve(data,"text")) {
				this.formatButtonText(data,fb);
			}
		}
		var text_x = 0;
		var text_y = 0;
		if(data.get("text_x") != null) {
			text_x = this._loadWidth(data,0,"text_x") | 0;
		} else if(data.get("label_x") != null) {
			text_x = this._loadWidth(data,0,"label_x") | 0;
		}
		if(data.get("text_y") != null) {
			text_y = this._loadHeight(data,0,"text_y") | 0;
		} else if(data.get("label_y") != null) {
			text_y = this._loadHeight(data,0,"label_y") | 0;
		}
		if(((fb) instanceof flixel_addons_ui_FlxUISpriteButton)) {
			var fbs = fb;
			if(((fbs.label) instanceof flixel_group_FlxTypedSpriteGroup)) {
				var g = fbs.label;
				var _g = 0;
				var _g1 = g.group.members;
				while(_g < _g1.length) {
					var sprite1 = _g1[_g];
					++_g;
					if(((sprite1) instanceof flixel_addons_ui_FlxUIText)) {
						var _g2 = sprite1.offset;
						_g2.set_x(_g2.x - text_x);
						var _g3 = sprite1.offset;
						_g3.set_y(_g3.y - text_y);
						break;
					}
				}
			} else {
				var _g = fbs.label.offset;
				_g.set_x(_g.x - text_x);
				var _g = fbs.label.offset;
				_g.set_y(_g.y - text_y);
				if(toggleSprite != null) {
					var _g = toggleSprite.offset;
					_g.set_x(_g.x - text_x);
					var _g = toggleSprite.offset;
					_g.set_y(_g.y - text_y);
				}
			}
		} else {
			var fbu = fb;
			var _g = fbu.label.offset;
			_g.set_x(_g.x - text_x);
			var _g = fbu.label.offset;
			_g.set_y(_g.y - text_y);
		}
		if(sprite != null && toggleSprite != null) {
			fb.set_toggle_label(toggleSprite);
		}
		if(((fb) instanceof flixel_addons_ui_FlxUITypedButton)) {
			var fuitb = fb;
			if(fuitb._assetsToCleanup != null) {
				var _g = 0;
				var _g1 = fuitb._assetsToCleanup;
				while(_g < _g1.length) {
					var key = _g1[_g];
					++_g;
					this.addToCleanup(key);
				}
			}
		}
		return fb;
	}
	,_loadRegion: function(data) {
		var bounds = this.calcMaxMinSize(data);
		var w = this._loadWidth(data) | 0;
		var h = this._loadHeight(data) | 0;
		if(bounds != null) {
			var pt = flixel_addons_ui_U.conformToBounds(new openfl_geom_Point(w,h),bounds);
			w = pt.x | 0;
			h = pt.y | 0;
		}
		var vis = flixel_addons_ui_U.xml_bool(data,"visible",true);
		var reg = new flixel_addons_ui_FlxUIRegion(0,0,w,h);
		reg.set_visible(vis);
		return reg;
	}
	,_load9SliceSprite: function(data,load_code) {
		if(load_code == null) {
			load_code = "";
		}
		var src = "";
		var f9s = null;
		var resize = this.getResizeRatio(data);
		var color = this._loadColor(data);
		var resize_ratio = resize.x;
		var resize_point = this._loadCompass(data,"resize_point");
		var resize_ratio_axis = resize.y | 0;
		var bounds = this.calcMaxMinSize(data);
		var data1 = data;
		var str = "";
		if(data1.get("src") != null) {
			str = data1.get("src");
			if(str == "" || str == null) {
				str = "";
			} else {
				str = flixel_addons_ui_U.gfx(str);
				try {
					if(!openfl_utils_Assets.exists(str,"IMAGE")) {
						throw haxe_Exception.thrown("couldn't load bmp \"" + "src" + "\"");
					}
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					if(typeof(haxe_Exception.caught(_g).unwrap()) != "string") {
						throw _g;
					}
				}
			}
		}
		src = str;
		var hasScaledSrc = haxe_xml__$Access_HasNodeAccess.resolve(data,"scale_src");
		if(hasScaledSrc) {
			var origSrc = src;
			src = this.loadScaledSrc(data,"src","scale_src");
			if(src != origSrc) {
				this.addToCleanup(origSrc);
			}
		}
		if(src == "") {
			src = null;
		}
		if(src == null) {
			if(load_code == "tab_menu") {
				src = "flixel/flixel-ui/img/chrome_flat.png";
			}
		}
		var rect_w = this._loadWidth(data) | 0;
		var rect_h = this._loadHeight(data) | 0;
		if(bounds != null) {
			if(rect_w < bounds.min_width) {
				rect_w = bounds.min_width | 0;
			} else if(rect_w > bounds.max_width) {
				rect_w = bounds.max_width;
			}
			if(rect_h < bounds.min_height) {
				rect_h = bounds.min_height | 0;
			} else if(rect_h > bounds.max_height) {
				rect_h = bounds.max_height | 0;
			}
		}
		if(rect_w == 0 || rect_h == 0) {
			return null;
		}
		var rc = new openfl_geom_Rectangle(0,0,rect_w,rect_h);
		var slice9 = flixel_util_FlxStringUtil.toIntArray(flixel_addons_ui_U.xml_str(data,"slice9"));
		var srcId = "";
		var srcGraphic = src;
		if(hasScaledSrc) {
			slice9 = this.load9SliceSprite_scaleSub(slice9,data,src);
			srcId = src;
			srcGraphic = flixel_FlxG.bitmap._cache.h[src];
		}
		var smooth = flixel_addons_ui_U.xml_bool(data,"smooth",false);
		var tileStr = flixel_addons_ui_U.xml_str(data,"tile",true,"");
		var tile = 0;
		switch(tileStr) {
		case "h":case "horizontal":
			tile = 16;
			break;
		case "v":case "vertical":
			tile = 1;
			break;
		case "all":case "both":case "hv":case "true":case "vh":
			tile = 17;
			break;
		}
		var tile1 = tile;
		f9s = new flixel_addons_ui_FlxUI9SliceSprite(0,0,srcGraphic,rc,slice9,tile1,smooth,srcId,resize_ratio,resize_point,resize_ratio_axis,false,color);
		return f9s;
	}
	,load9SliceSprite_scaleSub: function(slice9,data,src,srcString) {
		if(srcString == null) {
			srcString = "src";
		}
		var data1 = data;
		var str = "";
		if(data1.get(srcString) != null) {
			str = data1.get(srcString);
			if(str == "" || str == null) {
				str = "";
			} else {
				str = flixel_addons_ui_U.gfx(str);
				try {
					if(!openfl_utils_Assets.exists(str,"IMAGE")) {
						throw haxe_Exception.thrown("couldn't load bmp \"" + srcString + "\"");
					}
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					if(typeof(haxe_Exception.caught(_g).unwrap()) != "string") {
						throw _g;
					}
				}
			}
		}
		var origSrc = str;
		if(src == origSrc) {
			return slice9;
		}
		var srcAsset = flixel_FlxG.bitmap._cache.h[src] != null ? flixel_FlxG.bitmap._cache.h[src].bitmap : null;
		if(srcAsset == null) {
			srcAsset = openfl_utils_Assets.getBitmapData(origSrc);
		}
		var origAsset = openfl_utils_Assets.getBitmapData(origSrc,false);
		var srcScaleFactorX = srcAsset.width / origAsset.width;
		var srcScaleFactorY = srcAsset.height / origAsset.height;
		if(Math.abs(1.0 - srcScaleFactorX) <= 0.001 && Math.abs(1.0 - srcScaleFactorY) <= 0.001) {
			return slice9;
		}
		if(slice9 != null) {
			slice9[0] = slice9[0] * srcScaleFactorX | 0;
			slice9[1] = slice9[1] * srcScaleFactorY | 0;
			var widthDiff = origAsset.width - slice9[2];
			var heightDiff = origAsset.height - slice9[3];
			widthDiff = widthDiff * srcScaleFactorX | 0;
			heightDiff = heightDiff * srcScaleFactorY | 0;
			slice9[2] = srcAsset.width - widthDiff | 0;
			slice9[3] = srcAsset.height - heightDiff | 0;
		}
		return slice9;
	}
	,_loadTileRule: function(data) {
		var tileStr = flixel_addons_ui_U.xml_str(data,"tile",true,"");
		var tile = 0;
		switch(tileStr) {
		case "h":case "horizontal":
			tile = 16;
			break;
		case "v":case "vertical":
			tile = 1;
			break;
		case "all":case "both":case "hv":case "true":case "vh":
			tile = 17;
			break;
		}
		return tile;
	}
	,_loadBox: function(data) {
		var fs = null;
		var thickness = this._loadWidth(data,1,"thickness") | 0;
		var bounds = this.calcMaxMinSize(data);
		if(bounds == null) {
			bounds = { min_width : -Infinity, min_height : -Infinity, max_width : Infinity, max_height : Infinity};
		}
		var W = this._loadWidth(data) | 0;
		var H = this._loadHeight(data) | 0;
		if(bounds != null) {
			if(W < bounds.min_width) {
				W = bounds.min_width | 0;
			} else if(W > bounds.max_width) {
				W = bounds.max_width | 0;
			}
			if(H < bounds.min_height) {
				H = bounds.max_height | 0;
			} else if(H > bounds.max_height) {
				H = bounds.max_height | 0;
			}
		}
		var cstr = flixel_addons_ui_U.xml_str(data,"color",true,"0xff000000");
		var C = 0;
		if(cstr != "") {
			var return_val = flixel_util_FlxColor.fromString(cstr);
			if(return_val == null) {
				throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + cstr);
			}
			C = return_val;
		}
		fs = new flixel_addons_ui_FlxUISprite(0,0);
		var key = W + "x" + H + ":" + C + ":" + thickness;
		if(flixel_FlxG.bitmap._cache.h[key] != null) {
			fs.loadGraphic(key);
		} else {
			fs.makeGraphic(W,H,C,false,key);
			var r = new openfl_geom_Rectangle(thickness,thickness,W - thickness * 2,H - thickness * 2);
			fs.graphic.bitmap.fillRect(r,0);
		}
		return fs;
	}
	,_loadLine: function(data) {
		var axis = flixel_addons_ui_U.xml_str(data,"axis",true,"horizontal");
		var thickness = this._loadWidth(data,-1,"thickness") | 0;
		var bounds = this.calcMaxMinSize(data);
		if(bounds == null) {
			bounds = { min_width : 1, min_height : 1, max_width : Infinity, max_height : Infinity};
		}
		switch(axis) {
		case "h":case "horizontal":case "horz":
			bounds.max_height = thickness;
			bounds.min_height = thickness;
			break;
		case "v":case "vert":case "vertical":
			bounds.max_width = thickness;
			bounds.min_width = thickness;
			break;
		}
		var W = this._loadWidth(data) | 0;
		var H = this._loadHeight(data) | 0;
		if(bounds != null) {
			if(W < bounds.min_width) {
				W = bounds.min_width | 0;
			} else if(W > bounds.max_width) {
				W = bounds.max_width | 0;
			}
			if(H < bounds.min_height) {
				H = bounds.max_height | 0;
			} else if(H > bounds.max_height) {
				H = bounds.max_height | 0;
			}
		}
		var cstr = flixel_addons_ui_U.xml_str(data,"color",true,"0xff000000");
		var C = 0;
		if(cstr != "") {
			var return_val = flixel_util_FlxColor.fromString(cstr);
			if(return_val == null) {
				throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + cstr);
			}
			C = return_val;
		}
		var lineAxis = axis == "horizontal" ? flixel_addons_ui_LineAxis.HORIZONTAL : flixel_addons_ui_LineAxis.VERTICAL;
		var lineLength = lineAxis == flixel_addons_ui_LineAxis.HORIZONTAL ? W : H;
		var lineThickness = thickness != -1 ? thickness : lineAxis == flixel_addons_ui_LineAxis.HORIZONTAL ? H : W;
		var fl = new flixel_addons_ui_FlxUILine(0,0,lineAxis,lineLength,lineThickness,C);
		return fl;
	}
	,_loadBar: function(data) {
		var fb = null;
		var style = { filledColors : null, emptyColors : null, chunkSize : null, gradRotation : null, filledColor : null, emptyColor : null, borderColor : null, filledImgSrc : "", emptyImgSrc : ""};
		var W = this._loadWidth(data,-1) | 0;
		var H = this._loadHeight(data,-1) | 0;
		var direction = flixel_addons_ui_U.xml_str(data,"fill_direction",true);
		var fillDir = flixel_ui_FlxBarFillDirection.TOP_TO_BOTTOM;
		switch(direction) {
		case "bottom_to_top":
			fillDir = flixel_ui_FlxBarFillDirection.BOTTOM_TO_TOP;
			break;
		case "horizontal_inside_out":
			fillDir = flixel_ui_FlxBarFillDirection.HORIZONTAL_INSIDE_OUT;
			break;
		case "horizontal_outside_in":
			fillDir = flixel_ui_FlxBarFillDirection.HORIZONTAL_OUTSIDE_IN;
			break;
		case "left_to_right":
			fillDir = flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT;
			break;
		case "right_to_left":
			fillDir = flixel_ui_FlxBarFillDirection.RIGHT_TO_LEFT;
			break;
		case "top_to_bottom":
			fillDir = flixel_ui_FlxBarFillDirection.TOP_TO_BOTTOM;
			break;
		case "vertical_inside_out":
			fillDir = flixel_ui_FlxBarFillDirection.VERTICAL_INSIDE_OUT;
			break;
		case "vertical_outside_in":
			fillDir = flixel_ui_FlxBarFillDirection.VERTICAL_OUTSIDE_IN;
			break;
		default:
			fillDir = flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT;
		}
		var parentRefStr = flixel_addons_ui_U.xml_str(data,"parent_ref",true);
		var parentRef = parentRefStr != "" ? this.getAsset(parentRefStr) : null;
		var variableName = flixel_addons_ui_U.xml_str(data,"variable");
		var value = flixel_addons_ui_U.xml_f(data,"value",-1);
		var min = flixel_addons_ui_U.xml_f(data,"min",0);
		var max = flixel_addons_ui_U.xml_f(data,"max",100);
		if(value == -1) {
			value = max;
		}
		style.borderColor = flixel_addons_ui_U.xml_color(data,"border_color");
		var showBorder = style.borderColor != null;
		style.filledColor = flixel_addons_ui_U.xml_color(data,"filled_color");
		if(style.filledColor == null) {
			style.filledColor = flixel_addons_ui_U.xml_color(data,"color");
		}
		style.emptyColor = flixel_addons_ui_U.xml_color(data,"empty_color");
		style.filledColors = flixel_addons_ui_U.xml_colorArray(data,"filled_colors");
		style.emptyColors = flixel_addons_ui_U.xml_colorArray(data,"empty_colors");
		if(style.filledColors == null) {
			style.filledColors = flixel_addons_ui_U.xml_colorArray(data,"colors");
		}
		style.filledImgSrc = this.loadScaledSrc(data,"src_filled");
		style.emptyImgSrc = this.loadScaledSrc(data,"src_empty");
		if(style.filledImgSrc == "") {
			style.filledImgSrc = this.loadScaledSrc(data,"src");
		}
		style.chunkSize = flixel_addons_ui_U.xml_i(data,"chunk_size",1);
		style.gradRotation = flixel_addons_ui_U.xml_i(data,"rotation",90);
		if(style.filledImgSrc == "" && style.filledColor == null && style.filledColors == null) {
			style.filledColor = -65536;
		}
		if(W == -1 && H == -1) {
			fb = new flixel_addons_ui_FlxUIBar(0,0,fillDir,100,10,parentRef,variableName,min,max,showBorder);
		} else {
			fb = new flixel_addons_ui_FlxUIBar(0,0,fillDir,W,H,parentRef,variableName,min,max,showBorder);
		}
		fb.set_style(style);
		fb.resize(fb.barWidth,fb.barHeight);
		fb.set_value(value);
		return fb;
	}
	,_loadSprite: function(data) {
		var src = "";
		var fs = null;
		src = this.loadScaledSrc(data);
		var bounds = this.calcMaxMinSize(data);
		var resize = this.getResizeRatio(data,-1);
		var resize_ratio = resize.x;
		var resize_ratio_axis = resize.y | 0;
		var resize_point = this._loadCompass(data,"resize_point");
		var W = this._loadWidth(data,-1) | 0;
		var H = this._loadHeight(data,-1) | 0;
		if(bounds != null) {
			if(W < bounds.min_width) {
				W = bounds.min_width | 0;
			} else if(W > bounds.max_width) {
				W = bounds.max_width | 0;
			}
			if(H < bounds.min_height) {
				H = bounds.max_height | 0;
			} else if(H > bounds.max_height) {
				H = bounds.max_height | 0;
			}
		}
		if(src != "") {
			if(W == -1 && H == -1) {
				fs = new flixel_addons_ui_FlxUISprite(0,0,src);
			} else {
				if(resize_ratio != -1 && (W == -1 || H == -1)) {
					if(resize_ratio_axis == -1) {
						if(W == -1) {
							resize_ratio_axis = 0;
						}
						if(H == -1) {
							resize_ratio_axis = 1;
						}
					}
					if(resize_ratio_axis == 1) {
						H = W * (1 / resize_ratio);
					} else if(resize_ratio_axis == 0) {
						W = H * (1 / resize_ratio);
					}
				}
				var smooth = this.loadSmooth(data,true);
				fs = new flixel_addons_ui_FlxUISprite(0,0,flixel_addons_ui_U.loadScaledImage(flixel_addons_ui_U.xml_str(data,"src"),W,H,smooth));
			}
		} else {
			var cstr = flixel_addons_ui_U.xml_str(data,"color");
			var C = 0;
			if(cstr != "") {
				var return_val = flixel_util_FlxColor.fromString(cstr);
				if(return_val == null) {
					throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + cstr);
				}
				C = return_val;
			}
			fs = new flixel_addons_ui_FlxUISprite(0,0);
			fs.makeGraphic(W,H,C);
		}
		fs.set_resize_point(resize_point);
		fs.set_resize_ratio(resize_ratio);
		fs.resize_ratio_axis = resize_ratio_axis;
		return fs;
	}
	,loadSmooth: function(scaleNode,defaultValue) {
		var defaultStr = defaultValue ? "true" : "false";
		var smoothStr = flixel_addons_ui_U.xml_str(scaleNode,"smooth",true,defaultStr);
		if(smoothStr == "") {
			smoothStr = flixel_addons_ui_U.xml_str(scaleNode,"antialias",true,defaultStr);
		}
		return flixel_addons_ui_U.boolify(smoothStr);
	}
	,loadScaledSrc: function(data,attName,scaleName,tilesWide,tilesTall) {
		if(tilesTall == null) {
			tilesTall = 1;
		}
		if(tilesWide == null) {
			tilesWide = 1;
		}
		if(scaleName == null) {
			scaleName = "scale";
		}
		if(attName == null) {
			attName = "src";
		}
		var src = flixel_addons_ui_U.xml_str(data,attName);
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,scaleName)) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,scaleName);
			while(_g < _g1.length) {
				var scaleNode = _g1[_g];
				++_g;
				var ratio = flixel_addons_ui_U.xml_f(scaleNode,"screen_ratio",-1);
				var tolerance = flixel_addons_ui_U.xml_f(scaleNode,"tolerance",0.1);
				var actualRatio = flixel_FlxG.width / flixel_FlxG.height;
				if(ratio < 0 || ratio > 0 && Math.abs(ratio - actualRatio) <= tolerance) {
					var suffix = flixel_addons_ui_U.xml_str(scaleNode,"suffix");
					var srcSuffix = src + suffix;
					var testAsset = null;
					var scale_ = -1;
					var smooth = this.loadSmooth(scaleNode,true);
					var to_height = this._loadHeight(scaleNode,-1,"to_height");
					if(to_height != -1) {
						var testAsset1 = flixel_addons_ui_U.getBmp(flixel_addons_ui_U.gfx(src));
						if(testAsset1 != null) {
							scale_ = to_height / testAsset1.height;
						}
					} else {
						scale_ = this._loadScale(scaleNode,-1);
						if(scale_ == -1) {
							scale_ = this._loadScale(scaleNode,-1,"value");
						}
					}
					var scale_x = scale_ != -1 ? scale_ : this._loadScaleX(scaleNode,-1);
					var scale_y = scale_ != -1 ? scale_ : this._loadScaleY(scaleNode,-1);
					var sw = 0;
					var sh = 0;
					if(scale_x > 0 && scale_y > 0) {
						if(scale_x <= 0) {
							scale_x = 1.0;
						}
						if(scale_y <= 0) {
							scale_y = 1.0;
						}
						sw = this._loadWidth(scaleNode,-1);
						sh = this._loadHeight(scaleNode,-1);
						if(sw == -1 || sh == -1) {
							testAsset = openfl_utils_Assets.getBitmapData(flixel_addons_ui_U.gfx(src));
							sw = testAsset.width;
							sh = testAsset.height;
						}
						sw *= scale_x;
						sh *= scale_y;
					} else {
						sw = this._loadWidth(scaleNode,-1);
						sh = this._loadHeight(scaleNode,-1);
					}
					if(sw != 0 && sh != 0) {
						if(tilesTall > 1 || tilesWide > 1) {
							testAsset = openfl_utils_Assets.getBitmapData(flixel_addons_ui_U.gfx(src));
							var str = flixel_addons_ui_U.scaleAndStoreTileset(flixel_addons_ui_U.gfx(srcSuffix),scale_y,testAsset.width / tilesWide | 0,testAsset.height / tilesTall | 0,sw | 0,sh / tilesTall | 0,smooth);
							this.addToScaledAssets(str);
							return str;
						} else {
							var str1 = flixel_addons_ui_U.loadScaledImage(srcSuffix,sw,sh,smooth);
							this.addToScaledAssets(str1);
							return str1;
						}
					}
					break;
				}
			}
		}
		var data1 = data;
		var str = "";
		if(data1.get(attName) != null) {
			str = data1.get(attName);
			if(str == "" || str == null) {
				str = "";
			} else {
				str = flixel_addons_ui_U.gfx(str);
				try {
					if(!openfl_utils_Assets.exists(str,"IMAGE")) {
						throw haxe_Exception.thrown("couldn't load bmp \"" + attName + "\"");
					}
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					if(typeof(haxe_Exception.caught(_g).unwrap()) != "string") {
						throw _g;
					}
				}
			}
		}
		return str;
	}
	,thisWidth: function() {
		return flixel_FlxG.width;
	}
	,thisHeight: function() {
		return flixel_FlxG.height;
	}
	,_getAnchorPos: function(thing,axis,str) {
		switch(str) {
		case "":
			return 0;
		case "bottom":case "down":
			return this.screenHeight();
		case "center":
			if(axis == "x") {
				return this.screenWidth() / 2;
			} else if(axis == "y") {
				return this.screenHeight() / 2;
			}
			break;
		case "left":
			return 0;
		case "right":
			return this.screenWidth();
		case "top":case "up":
			return 0;
		default:
			var perc = flixel_addons_ui_U.perc_to_float(str);
			if(!isNaN(perc)) {
				if(axis == "x") {
					return perc * this.screenWidth();
				} else if(axis == "y") {
					return perc * this.screenHeight();
				}
			} else {
				var r = new EReg("[\\w]+\\.[\\w]+","");
				if(r.match(str)) {
					var wh = "";
					if(axis == "x") {
						wh = "w";
					}
					if(axis == "y") {
						wh = "h";
					}
					var assetValue = this._getStretch(1,wh,str);
					return assetValue;
				}
			}
		}
		return 0;
	}
	,getRound: function(node,defaultStr) {
		if(defaultStr == null) {
			defaultStr = "";
		}
		var roundStr = flixel_addons_ui_U.xml_str(node,"round",true,defaultStr);
		switch(roundStr) {
		case "-1":case "down":case "floor":
			return flixel_addons_ui_Rounding.Floor;
		case "1":case "ceil":case "ceiling":case "up":
			return flixel_addons_ui_Rounding.Ceil;
		case "0":case "round":case "true":
			return flixel_addons_ui_Rounding.Round;
		}
		return flixel_addons_ui_Rounding.None;
	}
	,doRound: function(f,round) {
		switch(round._hx_index) {
		case 0:
			return Math.floor(f);
		case 1:
			return Math.ceil(f);
		case 2:
			return Math.round(f);
		case 3:
			return f;
		}
	}
	,calcMaxMinSize: function(data,width,height) {
		var min_w = 0;
		var min_h = 0;
		var max_w = Infinity;
		var max_h = Infinity;
		var temp_min_w = 0;
		var temp_min_h = 0;
		var temp_max_w = Infinity;
		var temp_max_h = Infinity;
		var round = flixel_addons_ui_Rounding.None;
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"exact_size")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"exact_size");
			while(_g < _g1.length) {
				var exactNode = _g1[_g];
				++_g;
				var exact_w_str = flixel_addons_ui_U.xml_str(exactNode,"width");
				var exact_h_str = flixel_addons_ui_U.xml_str(exactNode,"height");
				round = this.getRound(exactNode);
				min_w = this.doRound(this._getDataSize("w",exact_w_str,0),round);
				min_h = this.doRound(this._getDataSize("h",exact_h_str,0),round);
				max_w = this.doRound(min_w,round);
				max_h = this.doRound(min_h,round);
			}
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"min_size")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"min_size");
			while(_g < _g1.length) {
				var minNode = _g1[_g];
				++_g;
				var min_w_str = flixel_addons_ui_U.xml_str(minNode,"width");
				var min_h_str = flixel_addons_ui_U.xml_str(minNode,"height");
				round = this.getRound(minNode);
				temp_min_w = this.doRound(this._getDataSize("w",min_w_str,0),round);
				temp_min_h = this.doRound(this._getDataSize("h",min_h_str,0),round);
				if(temp_min_w > min_w) {
					min_w = temp_min_w;
				}
				if(temp_min_h > min_h) {
					min_h = temp_min_h;
				}
			}
		} else if(haxe_xml__$Access_HasNodeAccess.resolve(data,"max_size")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"max_size");
			while(_g < _g1.length) {
				var maxNode = _g1[_g];
				++_g;
				var max_w_str = flixel_addons_ui_U.xml_str(maxNode,"width");
				var max_h_str = flixel_addons_ui_U.xml_str(maxNode,"height");
				round = this.getRound(maxNode);
				temp_max_w = this.doRound(this._getDataSize("w",max_w_str,Infinity),round);
				temp_max_h = this.doRound(this._getDataSize("h",max_h_str,Infinity),round);
				if(temp_max_w < max_w) {
					max_w = temp_max_w;
				}
				if(temp_max_h < max_h) {
					max_h = temp_max_h;
				}
			}
		} else {
			return null;
		}
		if(width != null) {
			if(width > min_w) {
				min_w = width;
			}
			if(width < max_w) {
				max_w = width;
			}
		}
		if(height != null) {
			if(height > min_h) {
				min_h = height;
			}
			if(height < max_h) {
				max_h = height;
			}
		}
		if(max_w <= 0) {
			max_w = Infinity;
		}
		if(max_h <= 0) {
			max_h = Infinity;
		}
		return { min_width : min_w, min_height : min_h, max_width : max_w, max_height : max_h};
	}
	,_getDataSize: function(target,str,default_) {
		if(default_ == null) {
			default_ = 0;
		}
		if(flixel_addons_ui_U.isStrNum(str)) {
			return parseFloat(str);
		}
		var percf = flixel_addons_ui_U.perc_to_float(str);
		if(!isNaN(percf)) {
			switch(target) {
			case "h":case "height":
				return this.screenHeight() * percf;
			case "scale":case "scale_x":case "scale_y":
				return percf;
			case "w":case "width":
				return this.screenWidth() * percf;
			}
		} else {
			if(str.indexOf("stretch:") == 0) {
				str = StringTools.replace(str,"stretch:","");
				var arr = str.split(",");
				var stretch_0 = this._getStretch(0,target,arr[0]);
				var stretch_1 = this._getStretch(1,target,arr[1]);
				if(stretch_0 != -1 && stretch_1 != -1) {
					return stretch_1 - stretch_0;
				} else {
					return default_;
				}
			} else if(str.indexOf("asset:") == 0) {
				str = StringTools.replace(str,"asset:","");
				var assetValue = this._getStretch(1,target,str);
				return assetValue;
			} else {
				var r = new EReg("[\\w]+\\.[\\w]+","");
				if(r.match(str)) {
					var assetValue = this._getStretch(1,target,str);
					return assetValue;
				}
			}
			var ptStr = "";
			if(str.indexOf("pt") == str.length - 2) {
				ptStr = HxOverrides.substr(str,0,str.length - 2);
			}
			if(ptStr != "" && flixel_addons_ui_U.isStrNum(ptStr)) {
				var tempNum = parseFloat(ptStr);
				switch(target) {
				case "h":case "height":
					return this._pointY * tempNum;
				case "w":case "width":
					return this._pointX * tempNum;
				}
			}
		}
		return default_;
	}
	,_getOperation: function(str) {
		var list = ["+","-","*","/","^"];
		var op = "";
		var besti = Infinity;
		var _g = 0;
		while(_g < list.length) {
			var item = list[_g];
			++_g;
			var i = str.indexOf(item);
			if(i != -1) {
				if(i < besti) {
					besti = i;
					op = item;
				}
			}
		}
		var hasPoint = false;
		if(op != "") {
			if(str.indexOf(op) != -1) {
				var opindex = str.indexOf(op);
				if(opindex != str.length - 1) {
					var firstBit = HxOverrides.substr(str,0,opindex);
					var secondBit = HxOverrides.substr(str,opindex + 1,str.length - (opindex + 1));
					var f = 0;
					var ptIndex = secondBit.indexOf("pt");
					if(ptIndex != -1 && ptIndex == secondBit.length - 2) {
						var sansPt = StringTools.replace(secondBit,"pt","");
						f = parseFloat(sansPt);
						hasPoint = true;
					} else {
						f = parseFloat(secondBit);
					}
					if(isNaN(f)) {
						f = this.getAssetProperty(1,"",secondBit);
					}
					if(f == 0 && secondBit != "0") {
						return null;
					} else {
						return [firstBit,op,f,hasPoint];
					}
				}
			}
		}
		return null;
	}
	,_doOperation: function(value,op,operand) {
		switch(op) {
		case "*":
			return value * operand;
		case "+":
			return value + operand;
		case "-":
			return value - operand;
		case "/":
			return value / operand;
		case "^":
			return Math.pow(value,operand);
		}
		return value;
	}
	,_getStretch: function(index,target,str) {
		var arr = null;
		var op = "";
		var operand = 0;
		var hasPoint = false;
		arr = this._getOperation(str);
		if(arr != null) {
			str = arr[0];
			op = arr[1];
			operand = arr[2];
			hasPoint = arr[3];
			if(hasPoint) {
				switch(target) {
				case "h":case "height":
					operand *= this._pointY;
					break;
				case "w":case "width":
					operand *= this._pointX;
					break;
				default:
					operand *= this._pointY;
				}
			}
		}
		var return_val = this.getAssetProperty(index,target,str);
		if(return_val != -1 && op != "") {
			return_val = this._doOperation(return_val,op,operand);
		}
		return return_val;
	}
	,getAssetProperty: function(index,target,str) {
		var prop = "";
		if(str.indexOf(".") != -1) {
			var arr = null;
			arr = str.split(".");
			str = arr[0];
			prop = arr[1];
		}
		var other = this.getAsset(str);
		var return_val = 0;
		if(other == null) {
			switch(str) {
			case "bottom":case "down":
				return_val = this.screenHeight();
				break;
			case "left":
				return_val = 0;
				break;
			case "right":
				return_val = this.screenWidth();
				break;
			case "top":case "up":
				return_val = 0;
				break;
			default:
				if(flixel_addons_ui_U.isStrNum(str)) {
					return_val = parseFloat(str);
				} else {
					return_val = -1;
				}
			}
		} else {
			switch(target) {
			case "h":case "height":
				if(prop == "") {
					if(index == 0) {
						return_val = other.y + other.get_height();
					}
					if(index == 1) {
						return_val = other.y;
					}
				} else {
					switch(prop) {
					case "bottom":case "down":
						return_val = other.y + other.get_height();
						break;
					case "center":
						return_val = other.y + other.get_height() / 2;
						break;
					case "halfheight":
						return_val = other.get_height() / 2;
						break;
					case "halfwidth":
						return_val = other.get_width() / 2;
						break;
					case "height":
						return_val = other.get_height();
						break;
					case "right":
						return_val = other.x + other.get_width();
						break;
					case "top":case "up":case "y":
						return_val = other.y;
						break;
					case "width":
						return_val = other.get_width();
						break;
					case "left":case "x":
						return_val = other.x;
						break;
					}
				}
				break;
			case "w":case "width":
				if(prop == "") {
					if(index == 0) {
						return_val = other.x + other.get_width();
					}
					if(index == 1) {
						return_val = other.x;
					}
				} else {
					switch(prop) {
					case "bottom":case "down":
						return_val = other.y + other.get_height();
						break;
					case "center":
						return_val = other.x + other.get_width() / 2;
						break;
					case "halfheight":
						return_val = other.get_height() / 2;
						break;
					case "halfwidth":
						return_val = other.get_width() / 2;
						break;
					case "height":
						return_val = other.get_height();
						break;
					case "right":
						return_val = other.x + other.get_width();
						break;
					case "top":case "up":case "y":
						return_val = other.y;
						break;
					case "width":
						return_val = other.get_width();
						break;
					case "left":case "x":
						return_val = other.x;
						break;
					}
				}
				break;
			default:
				switch(prop) {
				case "bottom":case "down":
					return_val = other.y + other.get_height();
					break;
				case "centerx":
					return_val = other.x + other.get_width() / 2;
					break;
				case "centery":
					return_val = other.y + other.get_height() / 2;
					break;
				case "halfheight":
					return_val = other.get_height() / 2;
					break;
				case "halfwidth":
					return_val = other.get_width() / 2;
					break;
				case "height":
					return_val = other.get_height();
					break;
				case "right":
					return_val = other.x + other.get_width();
					break;
				case "top":case "up":case "y":
					return_val = other.y;
					break;
				case "width":
					return_val = other.get_width();
					break;
				case "left":case "x":
					return_val = other.x;
					break;
				}
			}
		}
		return return_val;
	}
	,_loadCursor: function(data) {
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"list")) {
			if(this.cursorLists == null) {
				this.cursorLists = [];
			}
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(data,"list");
			while(_g < _g1.length) {
				var lNode = _g1[_g];
				++_g;
				var ids = flixel_addons_ui_U.xml_str(lNode,"ids");
				var arr = ids.split(",");
				if(arr != null && arr.length > 0) {
					var list = [];
					var _g2 = 0;
					while(_g2 < arr.length) {
						var str = arr[_g2];
						++_g2;
						var widget = this.getAsset(str);
						if(widget != null) {
							list.push(widget);
						}
					}
					this.cursorLists.push(list);
				}
			}
		}
	}
	,_loadPosition: function(data,thing) {
		var X = this._loadWidth(data,0,"x");
		var Y = this._loadHeight(data,0,"y");
		var ctrX = flixel_addons_ui_U.xml_bool(data,"center_x");
		var ctrY = flixel_addons_ui_U.xml_bool(data,"center_y");
		var center_on = flixel_addons_ui_U.xml_str(data,"center_on");
		var center_on_x = flixel_addons_ui_U.xml_str(data,"center_on_x");
		var center_on_y = flixel_addons_ui_U.xml_str(data,"center_on_y");
		var anchor_x_str = "";
		var anchor_y_str = "";
		var anchor_x = 0;
		var anchor_y = 0;
		var anchor_x_flush = "";
		var anchor_y_flush = "";
		if(haxe_xml__$Access_HasNodeAccess.resolve(data,"anchor")) {
			anchor_x_str = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"x");
			anchor_y_str = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"y");
			var rounding = this.getRound(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"));
			anchor_x = this._getAnchorPos(thing,"x",anchor_x_str);
			anchor_y = this._getAnchorPos(thing,"y",anchor_y_str);
			anchor_x = this.doRound(anchor_x,rounding);
			anchor_y = this.doRound(anchor_y,rounding);
			anchor_x_flush = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"x-flush",true);
			anchor_y_flush = flixel_addons_ui_U.xml_str(haxe_xml__$Access_NodeAccess.resolve(data,"anchor"),"y-flush",true);
		}
		if(anchor_x_str != "" || anchor_y_str != "") {
			switch(anchor_x_flush) {
			case "center":
				anchor_x -= thing.get_width() / 2;
				break;
			case "left":
				break;
			case "right":
				anchor_x -= thing.get_width();
				break;
			}
			switch(anchor_y_flush) {
			case "bottom":case "down":
				anchor_y -= thing.get_height();
				break;
			case "center":
				anchor_y -= thing.get_height() / 2;
				break;
			case "top":case "up":
				break;
			}
			if(anchor_x_str != "") {
				thing.set_x(anchor_x);
			}
			if(anchor_y_str != "") {
				thing.set_y(anchor_y);
			}
		}
		if(ctrX || ctrY) {
			var X1 = ctrX;
			var Y1 = ctrY;
			if(Y1 == null) {
				Y1 = true;
			}
			if(X1 == null) {
				X1 = true;
			}
			if(X1) {
				thing.set_x((flixel_FlxG.width - thing.get_width()) / 2);
			}
			if(Y1) {
				thing.set_y((flixel_FlxG.height - thing.get_height()) / 2);
			}
		}
		if(center_on != "") {
			var other = this.getAsset(center_on);
			if(other != null) {
				var fb1 = js_Boot.__cast(other , flixel_FlxObject);
				var fb2 = js_Boot.__cast(thing , flixel_FlxObject);
				fb2.set_x(fb1.x + (fb1.get_width() - fb2.get_width()) / 2);
				fb2.set_y(fb1.y + (fb1.get_height() - fb2.get_height()) / 2);
			}
		} else {
			if(center_on_x != "") {
				var other = this.getAsset(center_on_x);
				if(other != null) {
					var fb1 = js_Boot.__cast(other , flixel_FlxObject);
					var fb2 = js_Boot.__cast(thing , flixel_FlxObject);
					var centerX = true;
					var centerY = false;
					if(centerY == null) {
						centerY = true;
					}
					if(centerX == null) {
						centerX = true;
					}
					if(centerX) {
						fb2.set_x(fb1.x + (fb1.get_width() - fb2.get_width()) / 2);
					}
					if(centerY) {
						fb2.set_y(fb1.y + (fb1.get_height() - fb2.get_height()) / 2);
					}
				}
			}
			if(center_on_y != "") {
				var other = this.getAsset(center_on_y);
				if(other != null) {
					var fb1 = js_Boot.__cast(other , flixel_FlxObject);
					var fb2 = js_Boot.__cast(thing , flixel_FlxObject);
					var centerX = false;
					var centerY = true;
					if(centerY == null) {
						centerY = true;
					}
					if(centerX == null) {
						centerX = true;
					}
					if(centerX) {
						fb2.set_x(fb1.x + (fb1.get_width() - fb2.get_width()) / 2);
					}
					if(centerY) {
						fb2.set_y(fb1.y + (fb1.get_height() - fb2.get_height()) / 2);
					}
				}
			}
		}
		var X1 = X;
		var Y1 = Y;
		if(Y1 == null) {
			Y1 = 0;
		}
		if(X1 == null) {
			X1 = 0;
		}
		var _g = thing;
		_g.set_x(_g.x + X1);
		var _g = thing;
		_g.set_y(_g.y + Y1);
	}
	,_loadBorder: function(data) {
		var borderDef = flixel_addons_ui_BorderDef.fromXML(data);
		var round = this.getRound(data,"floor");
		var dataSize = this._getDataSize("h",flixel_addons_ui_U.xml_str(data,"border_size"),1);
		var border_size = this.doRound(dataSize,round) | 0;
		borderDef.size = border_size;
		return borderDef;
	}
	,_loadColor: function(data,colorName,_default) {
		if(_default == null) {
			_default = -1;
		}
		if(colorName == null) {
			colorName = "color";
		}
		var colorStr = flixel_addons_ui_U.xml_str(data,colorName);
		var tmp;
		if(colorStr == "") {
			var _this = data;
			if(_this.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
			}
			tmp = _this.nodeName == colorName;
		} else {
			tmp = false;
		}
		if(tmp) {
			colorStr = flixel_addons_ui_U.xml_str(data,"value");
		}
		var color = _default;
		if(colorStr != "") {
			var return_val = flixel_util_FlxColor.fromString(colorStr);
			if(return_val == null) {
				throw haxe_Exception.thrown("U.parseHex() unable to parse hex String " + colorStr);
			}
			color = return_val;
		}
		return color;
	}
	,_loadFontDef: function(data) {
		var fd = flixel_addons_ui_FontDef.fromXML(data);
		var fontSize = this._loadHeight(data,8,"size") | 0;
		fd.format.size = flixel_addons_ui_FlxUI.fontSize(fd.file,fontSize);
		fd.set_size(fontSize);
		return fd;
	}
	,_loadFontFace: function(data) {
		var fontFace = flixel_addons_ui_U.xml_str(data,"font");
		var fontStyle = flixel_addons_ui_U.xml_str(data,"style");
		var the_font = null;
		if(fontFace != "") {
			the_font = flixel_addons_ui_FlxUI.font(fontFace,fontStyle);
		}
		return the_font;
	}
	,_onFinishLoad: function() {
		if(this._ptr != null) {
			this._ptr.getEvent("finish_load",this,null);
		}
	}
	,getText: function(flag,context,safe,code) {
		if(code == null) {
			code = "";
		}
		if(safe == null) {
			safe = true;
		}
		if(context == null) {
			context = "data";
		}
		var str = "";
		if(this._ptr_tongue != null) {
			str = this._ptr_tongue.get(flag,context,safe);
			return this.formatFromCode(str,code);
		} else if(this.getTextFallback != null) {
			str = this.getTextFallback(flag,context,safe);
			return this.formatFromCode(str,code);
		}
		return flag;
	}
	,formatFromCode: function(str,code) {
		switch(code) {
		case "fu":
			return flixel_addons_ui_U.FU(str);
		case "fu_":
			return flixel_addons_ui_U.FU_(str);
		case "l":
			return str.toLowerCase();
		case "u":
			return str.toUpperCase();
		}
		return str;
	}
	,formatButtonText: function(data,button) {
		if(data != null && haxe_xml__$Access_HasNodeAccess.resolve(data,"text")) {
			var textNode = haxe_xml__$Access_NodeAccess.resolve(data,"text");
			var use_def = flixel_addons_ui_U.xml_str(textNode,"use_def",true);
			var text_def = null;
			if(use_def != "") {
				text_def = this.getDefinition(use_def);
			}
			var info = flixel_addons_ui_FlxUI.consolidateData(textNode,text_def);
			var the_font = this._loadFontFace(info);
			var size = this._loadHeight(info,8,"size","floor") | 0;
			var color = this._loadColor(info);
			var labelWidth = flixel_addons_ui_U.xml_f(info,"width");
			var border = this._loadBorder(info);
			var align = flixel_addons_ui_U.xml_str(info,"align",true);
			if(align == "") {
				align = null;
			}
			var the_label = null;
			var fb = null;
			var fsb = null;
			var ifb = null;
			if(((button) instanceof flixel_addons_ui_FlxUICheckBox) == false) {
				ifb = button;
				if(align == "" || align == null) {
					align = "center";
				}
			} else {
				var cb = button;
				ifb = cb.button;
				align = "left";
			}
			if(ifb != null) {
				if(((ifb) instanceof flixel_addons_ui_FlxUIButton)) {
					fb = ifb;
					the_label = fb.label;
				} else if(((ifb) instanceof flixel_addons_ui_FlxUISpriteButton)) {
					fsb = ifb;
					if(((fsb.label) instanceof flixel_text_FlxText)) {
						the_label = fsb.label;
					} else if(((fsb.label) instanceof flixel_group_FlxTypedSpriteGroup)) {
						var fsg = fsb.label;
						var _g = 0;
						var _g1 = fsg.group.members;
						while(_g < _g1.length) {
							var fs = _g1[_g];
							++_g;
							if(((fs) instanceof flixel_text_FlxText)) {
								the_label = fs;
								break;
							}
						}
					}
				}
				ifb.up_color = color;
				ifb.down_color = 0;
				ifb.over_color = 0;
			}
			if(the_label != null) {
				if(labelWidth != 0) {
					the_label.set_width(labelWidth);
					the_label.resetHelpers();
				}
				if(fb != null) {
					fb.setLabelFormat(the_font,size,color,align);
				} else {
					the_label.setFormat(the_font,size,color,align);
				}
				the_label.set_borderStyle(border.style);
				the_label.set_borderColor(border.color);
				the_label.set_borderSize(border.size);
				the_label.set_borderQuality(border.quality);
				if(((the_label) instanceof flixel_addons_ui_FlxUIText)) {
					var ftu = the_label;
					ftu.drawFrame();
				}
				if(fb != null) {
					fb.autoCenterLabel();
				}
				if(fsb != null) {
					fsb.autoCenterLabel();
				}
			}
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(info,"color");
			while(_g < _g1.length) {
				var textColorNode = _g1[_g];
				++_g;
				var color = this._loadColor(textColorNode);
				var vis = flixel_addons_ui_U.xml_bool(textColorNode,"visible",true);
				var state_name = flixel_addons_ui_U.xml_name(textColorNode);
				var toggle = flixel_addons_ui_U.xml_bool(textColorNode,"toggle");
				switch(state_name) {
				case "active":case "hilight":case "hover":case "over":
					if(!toggle) {
						ifb.over_color = color;
						ifb.over_visible = vis;
					} else {
						ifb.over_toggle_color = color;
						ifb.over_toggle_visible = vis;
					}
					break;
				case "down":case "pressed":case "pushed":
					if(!toggle) {
						ifb.down_color = color;
						ifb.down_visible = vis;
					} else {
						ifb.down_toggle_color = color;
						ifb.down_toggle_visible = vis;
					}
					break;
				case "":case "inactive":case "normal":case "up":
					if(!toggle) {
						ifb.up_color = color;
						ifb.up_visible = vis;
					} else {
						ifb.up_toggle_color = color;
						ifb.up_toggle_visible = vis;
					}
					break;
				}
			}
			if(ifb.over_color == 0) {
				ifb.over_color = ifb.up_color;
			}
			if(ifb.down_color == 0) {
				ifb.down_color = ifb.over_color;
			}
			if(ifb.up_toggle_color == 0) {
				ifb.up_toggle_color = ifb.up_color;
			}
			if(ifb.over_toggle_color == 0) {
				ifb.over_toggle_color = ifb.over_color;
			}
			if(ifb.down_toggle_color == 0) {
				ifb.down_toggle_color = ifb.down_color;
			}
			if(the_label != null) {
				the_label.set_visible(ifb.up_visible);
				the_label.set_color(ifb.up_color);
			}
			return the_label;
		}
		return null;
	}
	,__class__: flixel_addons_ui_FlxUI
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_currMode:"set_currMode",get_currMode:"get_currMode",set_focus:"set_focus",set_tongue:"set_tongue",get_tongue:"get_tongue",get_isRoot:"get_isRoot"})
});
var flixel_addons_ui_Rounding = $hxEnums["flixel.addons.ui.Rounding"] = { __ename__ : "flixel.addons.ui.Rounding", __constructs__ : ["Floor","Ceil","Round","None"]
	,Floor: {_hx_index:0,__enum__:"flixel.addons.ui.Rounding",toString:$estr}
	,Ceil: {_hx_index:1,__enum__:"flixel.addons.ui.Rounding",toString:$estr}
	,Round: {_hx_index:2,__enum__:"flixel.addons.ui.Rounding",toString:$estr}
	,None: {_hx_index:3,__enum__:"flixel.addons.ui.Rounding",toString:$estr}
};
var flixel_addons_ui_interfaces_IResizable = function() { };
$hxClasses["flixel.addons.ui.interfaces.IResizable"] = flixel_addons_ui_interfaces_IResizable;
flixel_addons_ui_interfaces_IResizable.__name__ = "flixel.addons.ui.interfaces.IResizable";
flixel_addons_ui_interfaces_IResizable.__isInterface__ = true;
flixel_addons_ui_interfaces_IResizable.prototype = {
	get_width: null
	,set_width: null
	,get_height: null
	,set_height: null
	,resize: null
	,__class__: flixel_addons_ui_interfaces_IResizable
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
};
var flixel_addons_ui_FlxUISprite = function(X,Y,SimpleGraphic) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._originalKey = "";
	this.resize_ratio_axis = 1;
	this.recycled = false;
	this.ptr_owner = null;
	this.broadcastToFlxUI = true;
	flixel_FlxSprite.call(this,X,Y,SimpleGraphic);
};
$hxClasses["flixel.addons.ui.FlxUISprite"] = flixel_addons_ui_FlxUISprite;
flixel_addons_ui_FlxUISprite.__name__ = "flixel.addons.ui.FlxUISprite";
flixel_addons_ui_FlxUISprite.__interfaces__ = [flixel_addons_ui_interfaces_IResizable,flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_FlxUISprite.__super__ = flixel_FlxSprite;
flixel_addons_ui_FlxUISprite.prototype = $extend(flixel_FlxSprite.prototype,{
	broadcastToFlxUI: null
	,name: null
	,ptr_owner: null
	,recycled: null
	,resize_ratio: null
	,resize_ratio_axis: null
	,set_resize_ratio: function(r) {
		this.resize_ratio = r;
		return r;
	}
	,resize_point: null
	,set_resize_point: function(r) {
		if(r != null) {
			var point = flixel_math_FlxPoint._pool.get().set(0,0);
			point._inPool = false;
			this.resize_point = point;
			this.resize_point.set_x(r.x);
			this.resize_point.set_y(r.y);
		}
		return this.resize_point;
	}
	,recycle: function(data) {
		this.recycled = true;
	}
	,resize: function(w,h) {
		var old_width = this.get_width();
		var old_height = this.get_height();
		if(this.resize_ratio > 0) {
			var effective_ratio = w / h;
			if(Math.abs(effective_ratio - this.resize_ratio) > 0.0001) {
				if(this.resize_ratio_axis == 1) {
					h = w * (1 / this.resize_ratio);
				} else {
					w = h * (1 / this.resize_ratio);
				}
			}
		}
		if(this._originalKey != "" && this._originalKey != null) {
			var newKey = flixel_addons_ui_U.loadScaledImage(this._originalKey,w,h);
			if(newKey != "" && newKey != null) {
				this.loadFromScaledGraphic(newKey);
			}
		}
		var diff_w = this.get_width() - old_width;
		var diff_h = this.get_height() - old_height;
		if(this.resize_point != null) {
			var delta_x = diff_w * this.resize_point.x;
			var delta_y = diff_h * this.resize_point.y;
			var _g = this;
			_g.set_x(_g.x - delta_x);
			var _g = this;
			_g.set_y(_g.y - delta_y);
		}
	}
	,loadGraphicAtScale: function(GraphicKey,W,H) {
		this.loadGraphic(GraphicKey,false);
		this.resize(W,H);
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		var sprite = flixel_FlxSprite.prototype.loadGraphic.call(this,Graphic,Animated,Width,Height,Unique,Key);
		this._originalKey = this.graphic.assetsKey;
		if(this._originalKey == null) {
			this._originalKey = this.graphic.key;
		}
		return sprite;
	}
	,destroy: function() {
		this.ptr_owner = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,loadFromScaledGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		flixel_FlxSprite.prototype.loadGraphic.call(this,Graphic,Animated,Width,Height,Unique,Key);
	}
	,_originalKey: null
	,__class__: flixel_addons_ui_FlxUISprite
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_resize_point:"set_resize_point",set_resize_ratio:"set_resize_ratio"})
});
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = "openfl.geom.Point";
openfl_geom_Point.__limeVector2 = null;
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = "openfl.geom.Rectangle";
openfl_geom_Rectangle.__limeRectangle = null;
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x ? toUnion.x : this.x;
		var x1 = this.get_right() < toUnion.get_right() ? toUnion.get_right() : this.get_right();
		var y0 = this.y > toUnion.y ? toUnion.y : this.y;
		var y1 = this.get_bottom() < toUnion.get_bottom() ? toUnion.get_bottom() : this.get_bottom();
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var flixel_addons_ui_FlxUI9SliceSprite = function(X,Y,Graphic,Rect,Slice9,Tile,Smooth,Id,Ratio,Resize_point,Resize_axis,DeferResize,Color) {
	if(Color == null) {
		Color = -1;
	}
	if(DeferResize == null) {
		DeferResize = false;
	}
	if(Resize_axis == null) {
		Resize_axis = 1;
	}
	if(Ratio == null) {
		Ratio = -1;
	}
	if(Id == null) {
		Id = "";
	}
	if(Smooth == null) {
		Smooth = false;
	}
	if(Tile == null) {
		Tile = 0;
	}
	this._asset_id = "";
	this._smooth = false;
	this._tile = 0;
	this._slice9 = null;
	this.paintScale9_id = "";
	flixel_addons_ui_FlxUISprite.call(this,X,Y,null);
	this.set_color(Color);
	this._slice9 = Slice9;
	this._tile = Tile;
	this._smooth = Smooth;
	this._asset_id = "";
	if(Graphic == null) {
		Graphic = "flixel/flixel-ui/img/chrome.png";
	}
	if(typeof(Graphic) == "string") {
		this._asset_id = Graphic;
		this._raw_pixels = null;
	} else if(((Graphic) instanceof openfl_display_BitmapData)) {
		this._asset_id = Id;
		this._raw_pixels = Graphic;
	} else if(((Graphic) instanceof flixel_graphics_FlxGraphic)) {
		var fg = Graphic;
		this._asset_id = fg.key;
		this._raw_pixels = fg.bitmap;
	}
	this.set_resize_ratio(Ratio);
	this.resize_ratio_axis = Resize_axis;
	if(Resize_point != null) {
		this.set_resize_point(Resize_point);
	}
	if(DeferResize) {
		var pt = flixel_addons_ui_U.applyResize(this.resize_ratio,this.resize_ratio_axis,Rect.width,Rect.height);
		this.set_width(pt.x);
		this.set_height(pt.y);
	} else {
		this.resize(Rect.width,Rect.height);
	}
};
$hxClasses["flixel.addons.ui.FlxUI9SliceSprite"] = flixel_addons_ui_FlxUI9SliceSprite;
flixel_addons_ui_FlxUI9SliceSprite.__name__ = "flixel.addons.ui.FlxUI9SliceSprite";
flixel_addons_ui_FlxUI9SliceSprite.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIWidget,flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUI9SliceSprite.sectionCache = null;
flixel_addons_ui_FlxUI9SliceSprite.cacheCounter = null;
flixel_addons_ui_FlxUI9SliceSprite._staticRects = null;
flixel_addons_ui_FlxUI9SliceSprite.getRectFromString = function(str) {
	var coords = str.split(",");
	var rect = null;
	if(coords != null && coords.length == 4) {
		var x_ = Std.parseInt(coords[0]);
		var y_ = Std.parseInt(coords[1]);
		var w_ = Std.parseInt(coords[2]);
		var h_ = Std.parseInt(coords[3]);
		rect = new openfl_geom_Rectangle(x_,y_,w_,h_);
	}
	return rect;
};
flixel_addons_ui_FlxUI9SliceSprite.getRectIntsFromString = function(str) {
	var coords = str.split(",");
	if(coords != null && coords.length == 4) {
		var x1 = Std.parseInt(coords[0]);
		var y1 = Std.parseInt(coords[1]);
		var x2 = Std.parseInt(coords[2]);
		var y2 = Std.parseInt(coords[3]);
		return [x1,y1,x2,y2];
	}
	return null;
};
flixel_addons_ui_FlxUI9SliceSprite.paintScale9 = function(g,assetID,scale9,rc,tile,smooth,raw) {
	if(smooth == null) {
		smooth = false;
	}
	if(tile == null) {
		tile = 0;
	}
	if(scale9 != null) {
		var w;
		var h;
		if(raw == null) {
			var assetBmp = flixel_addons_ui_U.getBmp(assetID);
			if(assetBmp != null) {
				w = assetBmp.width;
				h = assetBmp.height;
			} else {
				var assetFlx = flixel_FlxG.bitmap._cache.h[assetID];
				w = assetFlx.width;
				h = assetFlx.height;
			}
		} else {
			w = raw.width;
			h = raw.height;
		}
		var x1 = scale9[0];
		var y1 = scale9[1];
		var x2 = scale9[2];
		var y2 = scale9[3];
		if(flixel_addons_ui_FlxUI9SliceSprite._staticRects == null) {
			flixel_addons_ui_FlxUI9SliceSprite._staticRects = new haxe_ds_StringMap();
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["top.left"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["top"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["top.right"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["left"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["middle"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["right"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["bottom.left"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["bottom"] = rect;
			var this1 = flixel_addons_ui_FlxUI9SliceSprite._staticRects;
			var _this = flixel_math_FlxRect._pool.get();
			var X = 0;
			var Y = 0;
			var Width = 0;
			var Height = 0;
			if(Height == null) {
				Height = 0;
			}
			if(Width == null) {
				Width = 0;
			}
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
			var rect = _this;
			rect._inPool = false;
			this1.h["bottom.right"] = rect;
		}
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top.left"];
		var X = 0;
		var Y = 0;
		var Width = x1;
		var Height = y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top"];
		var X = x1;
		var Y = 0;
		var Width = x2 - x1;
		var Height = y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top.right"];
		var X = x2;
		var Y = 0;
		var Width = w - x2;
		var Height = y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["left"];
		var X = 0;
		var Y = y1;
		var Width = x1;
		var Height = y2 - y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["middle"];
		var X = x1;
		var Y = y1;
		var Width = x2 - x1;
		var Height = y2 - y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["right"];
		var X = x2;
		var Y = y1;
		var Width = w - x2;
		var Height = y2 - y1;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom.left"];
		var X = 0;
		var Y = y2;
		var Width = x1;
		var Height = h - y2;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom"];
		var X = x1;
		var Y = y2;
		var Width = x2 - x1;
		var Height = h - y2;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom.right"];
		var X = x2;
		var Y = y2;
		var Width = w - x2;
		var Height = h - y2;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		if(flixel_addons_ui_FlxUI9SliceSprite.cacheCounter == null) {
			flixel_addons_ui_FlxUI9SliceSprite.cacheCounter = new haxe_ds_StringMap();
		}
		var uniqueID = flixel_addons_ui_FlxUI9SliceSprite.makePaintScale9Id(assetID,scale9,rc);
		var sectionCounter = flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h[uniqueID];
		if(sectionCounter == null) {
			sectionCounter = { useCount : 0, subKeys : []};
			var _g = 0;
			while(_g < 9) {
				var i = _g++;
				var rect;
				switch(i) {
				case 0:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top.left"];
					break;
				case 1:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top"];
					break;
				case 2:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top.right"];
					break;
				case 3:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["left"];
					break;
				case 4:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["middle"];
					break;
				case 5:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["right"];
					break;
				case 6:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom.left"];
					break;
				case 7:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom"];
					break;
				case 8:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["bottom.right"];
					break;
				default:
					rect = flixel_addons_ui_FlxUI9SliceSprite._staticRects.h["top.left"];
				}
				var cacheId = assetID + "_" + rect.x + "_" + rect.y + "_" + rect.width + "_" + rect.height + "_";
				sectionCounter.subKeys.push(cacheId);
			}
			flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h[uniqueID] = sectionCounter;
		}
		flixel_addons_ui_FlxUI9SliceSprite.paintCompoundBitmap(g,assetID,flixel_addons_ui_FlxUI9SliceSprite._staticRects,rc,tile,smooth,raw);
		return uniqueID;
	}
	return "";
};
flixel_addons_ui_FlxUI9SliceSprite.makePaintScale9Id = function(assetId,slice9,rect) {
	var tmp = assetId + "_" + slice9.join(",") + "_";
	var value = rect.x;
	var _this = flixel_util_LabelValuePair._pool.get();
	_this.label = "x";
	_this.value = value;
	var value = rect.y;
	var _this1 = flixel_util_LabelValuePair._pool.get();
	_this1.label = "y";
	_this1.value = value;
	var value = rect.width;
	var _this2 = flixel_util_LabelValuePair._pool.get();
	_this2.label = "w";
	_this2.value = value;
	var value = rect.height;
	var _this3 = flixel_util_LabelValuePair._pool.get();
	_this3.label = "h";
	_this3.value = value;
	return tmp + flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
};
flixel_addons_ui_FlxUI9SliceSprite.paintCompoundBitmap = function(g,assetID,sourceRects,targetRect,tile,smooth,raw) {
	if(smooth == null) {
		smooth = false;
	}
	if(tile == null) {
		tile = 0;
	}
	targetRect.x = targetRect.x | 0;
	targetRect.y = targetRect.y | 0;
	targetRect.width = targetRect.width | 0;
	targetRect.height = targetRect.height | 0;
	var tl = sourceRects.h["top.left"];
	if(tl != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = 0;
		var Y = 0;
		var Width = tl.width;
		var Height = tl.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,tl,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,0,smooth,raw);
	}
	var tr = sourceRects.h["top.right"];
	if(tr != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = targetRect.width - tr.width;
		var Y = 0;
		var Width = tr.width;
		var Height = tr.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,tr,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,0,smooth,raw);
	}
	var t = sourceRects.h["top"];
	if(t != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = tl.width;
		var Y = 0;
		var Width = targetRect.width - tl.width - tr.width;
		var Height = t.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,t,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,tile & 16,smooth,raw);
	}
	var bl = sourceRects.h["bottom.left"];
	if(bl != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = 0;
		var Y = targetRect.height - bl.height;
		var Width = bl.width;
		var Height = bl.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,bl,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,0,smooth,raw);
	}
	var br = sourceRects.h["bottom.right"];
	if(br != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = targetRect.width - br.width;
		var Y = targetRect.height - br.height;
		var Width = br.width;
		var Height = br.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,br,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,0,smooth,raw);
	}
	var b = sourceRects.h["bottom"];
	if(b != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = bl.width;
		var Y = targetRect.height - b.height;
		var Width = targetRect.width - bl.width - br.width;
		var Height = b.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,b,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,tile & 16,smooth,raw);
	}
	var l = sourceRects.h["left"];
	if(l != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = 0;
		var Y = tl.height;
		var Width = l.width;
		var Height = targetRect.height - tl.height - bl.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,l,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,tile & 1,smooth,raw);
	}
	var r = sourceRects.h["right"];
	if(r != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = targetRect.width - r.width;
		var Y = tr.height;
		var Width = r.width;
		var Height = targetRect.height - tl.height - bl.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,r,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,tile & 1,smooth,raw);
	}
	var m = sourceRects.h["middle"];
	if(m != null) {
		var _this = flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2;
		var X = l.width;
		var Y = t.height;
		var Width = targetRect.width - l.width - r.width;
		var Height = targetRect.height - t.height - b.height;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection(g,assetID,m,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect2,null,tile,smooth,raw);
	}
};
flixel_addons_ui_FlxUI9SliceSprite.paintBitmapSection = function(g,assetId,src,dst,srcData,tile,smooth,raw) {
	if(smooth == null) {
		smooth = false;
	}
	if(tile == null) {
		tile = 0;
	}
	if(srcData == null) {
		if(raw != null) {
			srcData = raw;
		} else {
			srcData = flixel_addons_ui_U.getBmp(assetId);
		}
	}
	src.x = src.x | 0;
	src.y = src.y | 0;
	src.width = src.width | 0;
	src.height = src.height | 0;
	dst.x = dst.x | 0;
	dst.y = dst.y | 0;
	dst.width = dst.width | 0;
	dst.height = dst.height | 0;
	var section = null;
	var cacheId = null;
	if(flixel_addons_ui_FlxUI9SliceSprite.useSectionCache == true && assetId != null) {
		if(flixel_addons_ui_FlxUI9SliceSprite.sectionCache == null) {
			flixel_addons_ui_FlxUI9SliceSprite.sectionCache = new haxe_ds_StringMap();
		}
		cacheId = assetId + "_" + src.x + "_" + src.y + "_" + src.width + "_" + src.height + "_";
		section = flixel_addons_ui_FlxUI9SliceSprite.sectionCache.h[cacheId];
	}
	if(section == null) {
		var fillcolor = 16777215;
		section = new openfl_display_BitmapData(src.width | 0,src.height | 0,true,fillcolor);
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.x = src.x;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.y = src.y;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.width = src.width;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.height = src.height;
		section.copyPixels(srcData,flixel_addons_ui_FlxUI9SliceSprite._staticRect2,flixel_addons_ui_FlxUI9SliceSprite._staticPointZero);
		if(flixel_addons_ui_FlxUI9SliceSprite.useSectionCache == true && cacheId != null) {
			flixel_addons_ui_FlxUI9SliceSprite.sectionCache.h[cacheId] = section;
		}
		flixel_addons_ui_FlxUI9SliceSprite.bitmapsCreated++;
	}
	if(dst.width > 0 && dst.height > 0) {
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.x = dst.x;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.y = dst.y;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.width = dst.width;
		flixel_addons_ui_FlxUI9SliceSprite._staticRect2.height = dst.height;
		flixel_addons_ui_FlxUI9SliceSprite.bitmapFillRect(g,flixel_addons_ui_FlxUI9SliceSprite._staticRect2,section,tile,smooth);
	}
};
flixel_addons_ui_FlxUI9SliceSprite.bitmapFillRect = function(g,dst,section,tile,smooth_) {
	if(smooth_ == null) {
		smooth_ = false;
	}
	if(tile == null) {
		tile = 0;
	}
	var final_pixels = new openfl_display_BitmapData(dst.width | 0,dst.height | 0,true,0);
	flixel_addons_ui_FlxUI9SliceSprite._staticMatrix.identity();
	flixel_addons_ui_FlxUI9SliceSprite._staticRect.x = 0;
	flixel_addons_ui_FlxUI9SliceSprite._staticRect.y = 0;
	flixel_addons_ui_FlxUI9SliceSprite._staticRect.width = section.width;
	flixel_addons_ui_FlxUI9SliceSprite._staticRect.height = section.height;
	if((tile & 16) == 0) {
		flixel_addons_ui_FlxUI9SliceSprite._staticMatrix.scale(dst.width / section.width,1.0);
		flixel_addons_ui_FlxUI9SliceSprite._staticRect.width = dst.width;
	}
	if((tile & 1) == 0) {
		flixel_addons_ui_FlxUI9SliceSprite._staticMatrix.scale(1.0,dst.height / section.height);
		flixel_addons_ui_FlxUI9SliceSprite._staticRect.height = dst.height;
	}
	if(section.width == dst.width && section.height == dst.height) {
		flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x = 0;
		flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y = 0;
		final_pixels.copyPixels(section,section.rect,flixel_addons_ui_FlxUI9SliceSprite._staticPoint);
	} else if(smooth_) {
		final_pixels.draw(section,flixel_addons_ui_FlxUI9SliceSprite._staticMatrix,null,null,null,true);
	} else {
		final_pixels.draw(section,flixel_addons_ui_FlxUI9SliceSprite._staticMatrix,null,null,null,false);
	}
	if(tile != 0) {
		if((tile & 16) == 16) {
			flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x = 0;
			flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y = 0;
			while(flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x < dst.width) {
				flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x += flixel_addons_ui_FlxUI9SliceSprite._staticRect.width;
				final_pixels.copyPixels(final_pixels,flixel_addons_ui_FlxUI9SliceSprite._staticRect,flixel_addons_ui_FlxUI9SliceSprite._staticPoint);
			}
		}
		if((tile & 1) == 1) {
			flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x = 0;
			flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y = 0;
			flixel_addons_ui_FlxUI9SliceSprite._staticRect.width = final_pixels.width;
			while(flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y < dst.height) {
				flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y += flixel_addons_ui_FlxUI9SliceSprite._staticRect.height;
				final_pixels.copyPixels(final_pixels,flixel_addons_ui_FlxUI9SliceSprite._staticRect,flixel_addons_ui_FlxUI9SliceSprite._staticPoint);
			}
		}
	}
	flixel_addons_ui_FlxUI9SliceSprite._staticPoint.x = dst.x;
	flixel_addons_ui_FlxUI9SliceSprite._staticPoint.y = dst.y;
	g.copyPixels(final_pixels,final_pixels.rect,flixel_addons_ui_FlxUI9SliceSprite._staticPoint);
	final_pixels = flixel_util_FlxDestroyUtil.dispose(final_pixels);
};
flixel_addons_ui_FlxUI9SliceSprite.__super__ = flixel_addons_ui_FlxUISprite;
flixel_addons_ui_FlxUI9SliceSprite.prototype = $extend(flixel_addons_ui_FlxUISprite.prototype,{
	_bmpCanvas: null
	,paintScale9_id: null
	,_slice9: null
	,_tile: null
	,_smooth: null
	,_asset_id: null
	,_raw_pixels: null
	,destroy: function() {
		this.noLongerUsingCachedID(this.paintScale9_id);
		flixel_addons_ui_FlxUISprite.prototype.destroy.call(this);
	}
	,resize: function(w,h) {
		if((w | 0) < 1) {
			w = 1;
		}
		if((h | 0) < 1) {
			h = 1;
		}
		var old_width = this.get_width();
		var old_height = this.get_height();
		var pt = flixel_addons_ui_U.applyResize(this.resize_ratio,this.resize_ratio_axis,w,h);
		w = pt.x;
		h = pt.y;
		var iw = pt.x | 0;
		var ih = pt.y | 0;
		if(this._slice9 == null || this._slice9 == []) {
			this._slice9 = [4,4,7,7];
		}
		var key = this._asset_id + "_" + this._slice9.join(",") + "_" + iw + "x" + ih + "_" + this._tile + "_" + Std.string(this._smooth);
		if(flixel_FlxG.bitmap._cache.h[key] != null) {
			this.loadGraphic(key,false,iw,ih);
		} else {
			var bmpCanvas = new openfl_display_BitmapData(w | 0,h | 0);
			flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect.x = 0;
			flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect.y = 0;
			flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect.width = w;
			flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect.height = h;
			var oldID = this.paintScale9_id;
			var newID = flixel_addons_ui_FlxUI9SliceSprite.makePaintScale9Id(this._asset_id,this._slice9,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect);
			if(newID != oldID) {
				this.paintScale9_id = flixel_addons_ui_FlxUI9SliceSprite.paintScale9(bmpCanvas,this._asset_id,this._slice9,flixel_addons_ui_FlxUI9SliceSprite._staticFlxRect,this._tile,this._smooth,this._raw_pixels);
				var sectionCounter = flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h[this.paintScale9_id];
				sectionCounter.useCount++;
				this.noLongerUsingCachedID(oldID);
			}
			this.loadGraphic(bmpCanvas,false,bmpCanvas.width,bmpCanvas.height,false,key);
		}
		var diff_w = this.get_width() - old_width;
		var diff_h = this.get_height() - old_height;
		if(this.resize_point != null) {
			var delta_x = diff_w * this.resize_point.x;
			var delta_y = diff_h * this.resize_point.y;
			var _g = this;
			_g.set_x(_g.x - delta_x);
			var _g = this;
			_g.set_y(_g.y - delta_y);
		}
	}
	,noLongerUsingCachedID: function(id) {
		if(Object.prototype.hasOwnProperty.call(flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h,id)) {
			var oldCounter = flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h[id];
			oldCounter.useCount--;
			if(oldCounter.useCount <= 0) {
				this.purgeSections(id);
			}
		}
	}
	,purgeSections: function(id) {
		var counter = flixel_addons_ui_FlxUI9SliceSprite.cacheCounter.h[id];
		if(counter != null) {
			var _g = 0;
			var _g1 = counter.subKeys;
			while(_g < _g1.length) {
				var key = _g1[_g];
				++_g;
				var _this = flixel_addons_ui_FlxUI9SliceSprite.sectionCache;
				if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
					delete(_this.h[key]);
				}
			}
			counter.subKeys = null;
			var _this = flixel_addons_ui_FlxUI9SliceSprite.cacheCounter;
			if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
				delete(_this.h[id]);
			}
		}
	}
	,__class__: flixel_addons_ui_FlxUI9SliceSprite
});
var flixel_addons_ui_FlxUIAssets = function() { };
$hxClasses["flixel.addons.ui.FlxUIAssets"] = flixel_addons_ui_FlxUIAssets;
flixel_addons_ui_FlxUIAssets.__name__ = "flixel.addons.ui.FlxUIAssets";
var flixel_ui_FlxBar = function(x,y,direction,width,height,parentRef,variable,min,max,showBorder) {
	if(showBorder == null) {
		showBorder = false;
	}
	if(max == null) {
		max = 100;
	}
	if(min == null) {
		min = 0;
	}
	if(variable == null) {
		variable = "";
	}
	if(height == null) {
		height = 10;
	}
	if(width == null) {
		width = 100;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._maxPercent = 100;
	this.numDivisions = 100;
	this.killOnEmpty = false;
	this.fixedPosition = true;
	flixel_FlxSprite.call(this,x,y);
	if(direction == null) {
		direction = flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT;
	}
	this.barWidth = width;
	this.barHeight = height;
	this._filledBarPoint = new openfl_geom_Point();
	this._filledBarRect = new openfl_geom_Rectangle();
	if(flixel_FlxG.renderBlit) {
		this._zeroOffset = new openfl_geom_Point();
		this._emptyBarRect = new openfl_geom_Rectangle();
		this.makeGraphic(width,height,0,true);
	} else {
		var _this = flixel_math_FlxRect._pool.get();
		var X = 0;
		var Y = 0;
		var Width = 0;
		var Height = 0;
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var rect = _this;
		rect._inPool = false;
		this._filledFlxRect = rect;
	}
	if(parentRef != null) {
		this.parent = parentRef;
		this.parentVariable = variable;
	}
	this.set_fillDirection(direction);
	this.createFilledBar(-16756480,-16714752,showBorder);
	this.setRange(min,max);
};
$hxClasses["flixel.ui.FlxBar"] = flixel_ui_FlxBar;
flixel_ui_FlxBar.__name__ = "flixel.ui.FlxBar";
flixel_ui_FlxBar.__super__ = flixel_FlxSprite;
flixel_ui_FlxBar.prototype = $extend(flixel_FlxSprite.prototype,{
	fixedPosition: null
	,pxPerPercent: null
	,positionOffset: null
	,killOnEmpty: null
	,value: null
	,min: null
	,max: null
	,range: null
	,pct: null
	,numDivisions: null
	,emptyCallback: null
	,filledCallback: null
	,parent: null
	,parentVariable: null
	,barWidth: null
	,barHeight: null
	,frontFrames: null
	,fillDirection: null
	,_fillHorizontal: null
	,_frontFrame: null
	,_filledFlxRect: null
	,_emptyBar: null
	,_emptyBarRect: null
	,_filledBar: null
	,_zeroOffset: null
	,_filledBarRect: null
	,_filledBarPoint: null
	,_maxPercent: null
	,destroy: function() {
		this.positionOffset = flixel_util_FlxDestroyUtil.put(this.positionOffset);
		if(flixel_FlxG.renderBlit) {
			this._frontFrame = null;
			this._filledFlxRect = flixel_util_FlxDestroyUtil.put(this._filledFlxRect);
		} else {
			this._emptyBarRect = null;
			this._zeroOffset = null;
			this._emptyBar = flixel_util_FlxDestroyUtil.dispose(this._emptyBar);
			this._filledBar = flixel_util_FlxDestroyUtil.dispose(this._filledBar);
		}
		this._filledBarRect = null;
		this._filledBarPoint = null;
		this.parent = null;
		this.positionOffset = null;
		this.emptyCallback = null;
		this.filledCallback = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,trackParent: function(offsetX,offsetY) {
		this.fixedPosition = false;
		var X = offsetX;
		var Y = offsetY;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.positionOffset = point;
		if(Object.prototype.hasOwnProperty.call(this.parent,"scrollFactor")) {
			this.scrollFactor.set_x(this.parent.scrollFactor.x);
			this.scrollFactor.set_y(this.parent.scrollFactor.y);
		}
	}
	,setParent: function(parentRef,variable,track,offsetX,offsetY) {
		if(offsetY == null) {
			offsetY = 0;
		}
		if(offsetX == null) {
			offsetX = 0;
		}
		if(track == null) {
			track = false;
		}
		this.parent = parentRef;
		this.parentVariable = variable;
		if(track) {
			this.trackParent(offsetX,offsetY);
		}
		this.updateValueFromParent();
	}
	,stopTrackingParent: function(posX,posY) {
		this.fixedPosition = true;
		this.set_x(posX);
		this.set_y(posY);
	}
	,setCallbacks: function(onEmpty,onFilled,killOnEmpty) {
		if(killOnEmpty == null) {
			killOnEmpty = false;
		}
		this.emptyCallback = onEmpty != null ? onEmpty : this.emptyCallback;
		this.filledCallback = onFilled != null ? onFilled : this.filledCallback;
		this.killOnEmpty = killOnEmpty;
	}
	,setRange: function(min,max) {
		if(max <= min) {
			throw haxe_Exception.thrown("FlxBar: max cannot be less than or equal to min");
		}
		this.min = min;
		this.max = max;
		this.range = max - min;
		this.pct = this.range / this._maxPercent;
		this.pxPerPercent = this._fillHorizontal ? this.barWidth / this._maxPercent : this.barHeight / this._maxPercent;
		var f = this.get_value();
		if(!isNaN(f)) {
			this.set_value(Math.max(min,Math.min(this.get_value(),max)));
		} else {
			this.set_value(min);
		}
	}
	,createFilledBar: function(empty,fill,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		this.createColoredEmptyBar(empty,showBorder,border);
		this.createColoredFilledBar(fill,showBorder,border);
		return this;
	}
	,createColoredEmptyBar: function(empty,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(flixel_FlxG.renderTile) {
			var emptyKey = "empty: " + this.barWidth + "x" + this.barHeight + ":" + ("0x" + StringTools.hex(empty >> 24 & 255,2) + StringTools.hex(empty >> 16 & 255,2) + StringTools.hex(empty >> 8 & 255,2) + StringTools.hex(empty & 255,2));
			if(showBorder) {
				emptyKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.h[emptyKey] == null) {
				var emptyBar = null;
				if(showBorder) {
					emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					emptyBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),empty);
				} else {
					emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,empty);
				}
				flixel_FlxG.bitmap.add(emptyBar,false,emptyKey);
			}
			this.set_frames(flixel_FlxG.bitmap._cache.h[emptyKey].get_imageFrame());
		} else {
			if(showBorder) {
				this._emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				this._emptyBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),empty);
			} else {
				this._emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,empty);
			}
			this._emptyBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateEmptyBar();
		}
		return this;
	}
	,createColoredFilledBar: function(fill,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(flixel_FlxG.renderTile) {
			var filledKey = "filled: " + this.barWidth + "x" + this.barHeight + ":" + ("0x" + StringTools.hex(fill >> 24 & 255,2) + StringTools.hex(fill >> 16 & 255,2) + StringTools.hex(fill >> 8 & 255,2) + StringTools.hex(fill & 255,2));
			if(showBorder) {
				filledKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.h[filledKey] == null) {
				var filledBar = null;
				if(showBorder) {
					filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					filledBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),fill);
				} else {
					filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,fill);
				}
				flixel_FlxG.bitmap.add(filledBar,false,filledKey);
			}
			this.set_frontFrames(flixel_FlxG.bitmap._cache.h[filledKey].get_imageFrame());
		} else {
			if(showBorder) {
				this._filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				this._filledBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),fill);
			} else {
				this._filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,fill);
			}
			this._filledBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateFilledBar();
		}
		return this;
	}
	,createGradientBar: function(empty,fill,chunkSize,rotation,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(rotation == null) {
			rotation = 180;
		}
		if(chunkSize == null) {
			chunkSize = 1;
		}
		this.createGradientEmptyBar(empty,chunkSize,rotation,showBorder,border);
		this.createGradientFilledBar(fill,chunkSize,rotation,showBorder,border);
		return this;
	}
	,createGradientEmptyBar: function(empty,chunkSize,rotation,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(rotation == null) {
			rotation = 180;
		}
		if(chunkSize == null) {
			chunkSize = 1;
		}
		if(flixel_FlxG.renderTile) {
			var emptyKey = "Gradient:" + this.barWidth + "x" + this.barHeight + ",colors:[";
			var _g = 0;
			while(_g < empty.length) {
				var col = empty[_g];
				++_g;
				emptyKey += "0x" + StringTools.hex(col >> 24 & 255,2) + StringTools.hex(col >> 16 & 255,2) + StringTools.hex(col >> 8 & 255,2) + StringTools.hex(col & 255,2) + ",";
			}
			emptyKey += "],chunkSize: " + chunkSize + ",rotation: " + rotation;
			if(showBorder) {
				emptyKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.h[emptyKey] == null) {
				var emptyBar = null;
				if(showBorder) {
					emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					flixel_util_FlxGradient.overlayGradientOnBitmapData(emptyBar,this.barWidth - 2,this.barHeight - 2,empty,1,1,chunkSize,rotation);
				} else {
					emptyBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,empty,chunkSize,rotation);
				}
				flixel_FlxG.bitmap.add(emptyBar,false,emptyKey);
			}
			this.set_frames(flixel_FlxG.bitmap._cache.h[emptyKey].get_imageFrame());
		} else {
			if(showBorder) {
				this._emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				flixel_util_FlxGradient.overlayGradientOnBitmapData(this._emptyBar,this.barWidth - 2,this.barHeight - 2,empty,1,1,chunkSize,rotation);
			} else {
				this._emptyBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,empty,chunkSize,rotation);
			}
			this._emptyBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateEmptyBar();
		}
		return this;
	}
	,createGradientFilledBar: function(fill,chunkSize,rotation,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(rotation == null) {
			rotation = 180;
		}
		if(chunkSize == null) {
			chunkSize = 1;
		}
		if(flixel_FlxG.renderTile) {
			var filledKey = "Gradient:" + this.barWidth + "x" + this.barHeight + ",colors:[";
			var _g = 0;
			while(_g < fill.length) {
				var col = fill[_g];
				++_g;
				filledKey += "0x" + StringTools.hex(col >> 24 & 255,2) + StringTools.hex(col >> 16 & 255,2) + StringTools.hex(col >> 8 & 255,2) + StringTools.hex(col & 255,2) + ",";
			}
			filledKey += "],chunkSize: " + chunkSize + ",rotation: " + rotation;
			if(showBorder) {
				filledKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.h[filledKey] == null) {
				var filledBar = null;
				if(showBorder) {
					filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					flixel_util_FlxGradient.overlayGradientOnBitmapData(filledBar,this.barWidth - 2,this.barHeight - 2,fill,1,1,chunkSize,rotation);
				} else {
					filledBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,fill,chunkSize,rotation);
				}
				flixel_FlxG.bitmap.add(filledBar,false,filledKey);
			}
			this.set_frontFrames(flixel_FlxG.bitmap._cache.h[filledKey].get_imageFrame());
		} else {
			if(showBorder) {
				this._filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				flixel_util_FlxGradient.overlayGradientOnBitmapData(this._filledBar,this.barWidth - 2,this.barHeight - 2,fill,1,1,chunkSize,rotation);
			} else {
				this._filledBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,fill,chunkSize,rotation);
			}
			this._filledBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateFilledBar();
		}
		return this;
	}
	,createImageBar: function(empty,fill,emptyBackground,fillBackground) {
		if(fillBackground == null) {
			fillBackground = -16711936;
		}
		if(emptyBackground == null) {
			emptyBackground = -16777216;
		}
		this.createImageEmptyBar(empty,emptyBackground);
		this.createImageFilledBar(fill,fillBackground);
		return this;
	}
	,createImageEmptyBar: function(empty,emptyBackground) {
		if(emptyBackground == null) {
			emptyBackground = -16777216;
		}
		if(empty != null) {
			var emptyGraphic = flixel_FlxG.bitmap.add(empty);
			if(flixel_FlxG.renderTile) {
				this.set_frames(emptyGraphic.get_imageFrame());
			} else {
				this._emptyBar = emptyGraphic.bitmap.clone();
				this.barWidth = this._emptyBar.width;
				this.barHeight = this._emptyBar.height;
				this._emptyBarRect.setTo(0,0,this.barWidth,this.barHeight);
				if(this.graphic == null || (this.frame.sourceSize.x != this.barWidth || this.frame.sourceSize.y != this.barHeight)) {
					this.makeGraphic(this.barWidth,this.barHeight,0,true);
				}
				this.updateEmptyBar();
			}
		} else {
			this.createColoredEmptyBar(emptyBackground);
		}
		return this;
	}
	,createImageFilledBar: function(fill,fillBackground) {
		if(fillBackground == null) {
			fillBackground = -16711936;
		}
		if(fill != null) {
			var filledGraphic = flixel_FlxG.bitmap.add(fill);
			if(flixel_FlxG.renderTile) {
				this.set_frontFrames(filledGraphic.get_imageFrame());
			} else {
				this._filledBar = filledGraphic.bitmap.clone();
				this._filledBarRect.setTo(0,0,this.barWidth,this.barHeight);
				if(this.graphic == null || (this.frame.sourceSize.x != this.barWidth || this.frame.sourceSize.y != this.barHeight)) {
					this.makeGraphic(this.barWidth,this.barHeight,0,true);
				}
				this.pxPerPercent = this._fillHorizontal ? this.barWidth / this._maxPercent : this.barHeight / this._maxPercent;
				this.updateFilledBar();
			}
		} else {
			this.createColoredFilledBar(fillBackground);
		}
		return this;
	}
	,set_fillDirection: function(direction) {
		this.fillDirection = direction;
		switch(direction._hx_index) {
		case 2:case 3:case 6:case 7:
			this._fillHorizontal = false;
			break;
		case 0:case 1:case 4:case 5:
			this._fillHorizontal = true;
			break;
		}
		return this.fillDirection;
	}
	,updateValueFromParent: function() {
		this.set_value(Reflect.getProperty(this.parent,this.parentVariable));
	}
	,updateBar: function() {
		this.updateEmptyBar();
		this.updateFilledBar();
	}
	,updateEmptyBar: function() {
		if(flixel_FlxG.renderBlit) {
			this.get_pixels().copyPixels(this._emptyBar,this._emptyBarRect,this._zeroOffset);
			this.dirty = true;
		}
	}
	,updateFilledBar: function() {
		this._filledBarRect.width = this.barWidth;
		this._filledBarRect.height = this.barHeight;
		var fraction = (this.get_value() - this.min) / this.range;
		var percent = fraction * this._maxPercent;
		var maxScale = this._fillHorizontal ? this.barWidth : this.barHeight;
		var scaleInterval = maxScale / this.numDivisions;
		var interval = Math.round((fraction * maxScale / scaleInterval | 0) * scaleInterval);
		if(this._fillHorizontal) {
			this._filledBarRect.width = interval | 0;
		} else {
			this._filledBarRect.height = interval | 0;
		}
		if(percent > 0) {
			switch(this.fillDirection._hx_index) {
			case 1:
				this._filledBarRect.x = this.barWidth - this._filledBarRect.width;
				this._filledBarPoint.x = this.barWidth - this._filledBarRect.width;
				break;
			case 0:case 2:
				break;
			case 3:
				this._filledBarRect.y = this.barHeight - this._filledBarRect.height;
				this._filledBarPoint.y = this.barHeight - this._filledBarRect.height;
				break;
			case 4:
				this._filledBarRect.x = this.barWidth / 2 - this._filledBarRect.width / 2 | 0;
				this._filledBarPoint.x = this.barWidth / 2 - this._filledBarRect.width / 2 | 0;
				break;
			case 5:
				this._filledBarRect.width = maxScale - interval | 0;
				this._filledBarPoint.x = (this.barWidth - this._filledBarRect.width) / 2 | 0;
				break;
			case 6:
				this._filledBarRect.y = this.barHeight / 2 - this._filledBarRect.height / 2 | 0;
				this._filledBarPoint.y = this.barHeight / 2 - this._filledBarRect.height / 2 | 0;
				break;
			case 7:
				this._filledBarRect.height = maxScale - interval | 0;
				this._filledBarPoint.y = (this.barHeight - this._filledBarRect.height) / 2 | 0;
				break;
			}
			if(flixel_FlxG.renderBlit) {
				this.get_pixels().copyPixels(this._filledBar,this._filledBarRect,this._filledBarPoint,null,null,true);
			} else if(this.get_frontFrames() != null) {
				var _this = this._filledFlxRect;
				var FlashRect = this._filledBarRect;
				_this.x = FlashRect.x;
				_this.y = FlashRect.y;
				_this.width = FlashRect.width;
				_this.height = FlashRect.height;
				var _this1 = _this;
				_this1.x = Math.round(_this1.x);
				_this1.y = Math.round(_this1.y);
				_this1.width = Math.round(_this1.width);
				_this1.height = Math.round(_this1.height);
				if((percent | 0) > 0) {
					this._frontFrame = this.get_frontFrames().get_frame().clipTo(this._filledFlxRect,this._frontFrame);
				}
			}
		}
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
		}
	}
	,update: function(elapsed) {
		if(this.parent != null) {
			if(Reflect.getProperty(this.parent,this.parentVariable) != this.get_value()) {
				this.updateValueFromParent();
			}
			if(!this.fixedPosition) {
				this.set_x(this.parent.x + this.positionOffset.x);
				this.set_y(this.parent.y + this.positionOffset.y);
			}
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		if(!flixel_FlxG.renderTile) {
			return;
		}
		if(this.alpha == 0) {
			return;
		}
		if(this.get_percent() > 0 && this._frontFrame.type != 2) {
			var _g = 0;
			var _g1 = this.get_cameras();
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) {
					continue;
				}
				this.getScreenPosition(this._point,camera).subtractPoint(this.offset);
				this._frontFrame.prepareMatrix(this._matrix,0,this.flipX,this.flipY);
				this._matrix.translate(-this.origin.x,-this.origin.y);
				this._matrix.scale(this.scale.x,this.scale.y);
				if(this.angle != 0) {
					var _this = this._matrix;
					var cos = this._cosAngle;
					var sin = this._sinAngle;
					var a1 = _this.a * cos - _this.b * sin;
					_this.b = _this.a * sin + _this.b * cos;
					_this.a = a1;
					var c1 = _this.c * cos - _this.d * sin;
					_this.d = _this.c * sin + _this.d * cos;
					_this.c = c1;
					var tx1 = _this.tx * cos - _this.ty * sin;
					_this.ty = _this.tx * sin + _this.ty * cos;
					_this.tx = tx1;
				}
				var _this1 = this._point;
				var X = this.origin.x;
				var Y = this.origin.y;
				if(Y == null) {
					Y = 0;
				}
				if(X == null) {
					X = 0;
				}
				var _g2 = _this1;
				_g2.set_x(_g2.x + X);
				var _g3 = _this1;
				_g3.set_y(_g3.y + Y);
				if(this.isPixelPerfectRender(camera)) {
					var _this2 = this._point;
					_this2.set_x(Math.floor(_this2.x));
					_this2.set_y(Math.floor(_this2.y));
				}
				this._matrix.translate(this._point.x,this._point.y);
				camera.drawPixels(this._frontFrame,null,this._matrix,this.colorTransform,this.blend,this.antialiasing,this.shader);
			}
		}
	}
	,set_pixels: function(Pixels) {
		if(flixel_FlxG.renderTile) {
			return Pixels;
		} else {
			return flixel_FlxSprite.prototype.set_pixels.call(this,Pixels);
		}
	}
	,toString: function() {
		var value = this.min;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "min";
		_this.value = value;
		var value = this.max;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "max";
		_this1.value = value;
		var value = this.range;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "range";
		_this2.value = value;
		var value = this.pct;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "%";
		_this3.value = value;
		var value = this.pxPerPercent;
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "px/%";
		_this4.value = value;
		var value = this.get_value();
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "value";
		_this5.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);
	}
	,get_percent: function() {
		if(this.get_value() > this.max) {
			return this._maxPercent;
		}
		return Math.floor((this.get_value() - this.min) / this.range * this._maxPercent);
	}
	,set_percent: function(newPct) {
		if(newPct >= 0 && newPct <= this._maxPercent) {
			this.set_value(this.pct * newPct);
		}
		return newPct;
	}
	,set_value: function(newValue) {
		this.value = Math.max(this.min,Math.min(newValue,this.max));
		if(this.get_value() == this.min && this.emptyCallback != null) {
			this.emptyCallback();
		}
		if(this.get_value() == this.max && this.filledCallback != null) {
			this.filledCallback();
		}
		if(this.get_value() == this.min && this.killOnEmpty) {
			this.kill();
		}
		this.updateBar();
		return newValue;
	}
	,get_value: function() {
		return this.value;
	}
	,set_numDivisions: function(newValue) {
		this.numDivisions = newValue > 0 ? newValue : 100;
		this.updateFilledBar();
		return newValue;
	}
	,get_frontFrames: function() {
		if(flixel_FlxG.renderTile) {
			return this.frontFrames;
		}
		return null;
	}
	,set_frontFrames: function(value) {
		if(flixel_FlxG.renderTile) {
			this.frontFrames = value;
			this._frontFrame = value != null ? value.get_frame().copyTo(this._frontFrame) : null;
		} else {
			this.createImageFilledBar(value.get_frame().paint());
		}
		return value;
	}
	,get_backFrames: function() {
		if(flixel_FlxG.renderTile) {
			return this.frames;
		}
		return null;
	}
	,set_backFrames: function(value) {
		if(flixel_FlxG.renderTile) {
			this.set_frames(value);
		} else {
			this.createImageEmptyBar(value.get_frame().paint());
		}
		return value;
	}
	,__class__: flixel_ui_FlxBar
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_fillDirection:"set_fillDirection",set_backFrames:"set_backFrames",get_backFrames:"get_backFrames",set_frontFrames:"set_frontFrames",get_frontFrames:"get_frontFrames",set_numDivisions:"set_numDivisions",set_value:"set_value",get_value:"get_value",set_percent:"set_percent",get_percent:"get_percent"})
});
var flixel_addons_ui_interfaces_IHasParams = function() { };
$hxClasses["flixel.addons.ui.interfaces.IHasParams"] = flixel_addons_ui_interfaces_IHasParams;
flixel_addons_ui_interfaces_IHasParams.__name__ = "flixel.addons.ui.interfaces.IHasParams";
flixel_addons_ui_interfaces_IHasParams.__isInterface__ = true;
flixel_addons_ui_interfaces_IHasParams.prototype = {
	params: null
	,set_params: null
	,__class__: flixel_addons_ui_interfaces_IHasParams
	,__properties__: {set_params:"set_params"}
};
var flixel_addons_ui_FlxUIBar = function(x,y,direction,width,height,parentRef,variable,min,max,showBorder) {
	if(showBorder == null) {
		showBorder = false;
	}
	if(max == null) {
		max = 100;
	}
	if(min == null) {
		min = 0;
	}
	if(variable == null) {
		variable = "";
	}
	if(height == null) {
		height = 10;
	}
	if(width == null) {
		width = 100;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	flixel_ui_FlxBar.call(this,x,y,direction,width,height,parentRef,variable,min,max,showBorder);
};
$hxClasses["flixel.addons.ui.FlxUIBar"] = flixel_addons_ui_FlxUIBar;
flixel_addons_ui_FlxUIBar.__name__ = "flixel.addons.ui.FlxUIBar";
flixel_addons_ui_FlxUIBar.__interfaces__ = [flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIWidget,flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUIBar.__super__ = flixel_ui_FlxBar;
flixel_addons_ui_FlxUIBar.prototype = $extend(flixel_ui_FlxBar.prototype,{
	name: null
	,style: null
	,params: null
	,broadcastToFlxUI: null
	,clone: function() {
		var w = this.get_width() | 0;
		var h = this.get_height() | 0;
		var showBorder = this.style != null && this.style.borderColor != null;
		if(showBorder) {
			w -= 2;
			h -= 2;
		}
		var b = new flixel_addons_ui_FlxUIBar(this.x,this.y,this.fillDirection,w,h,this.parent,this.parentVariable,this.min,this.max,showBorder);
		b.set_style(this.style);
		b.set_value(this.get_value());
		return b;
	}
	,set_style: function(Style) {
		this.style = Style;
		this.resize(this.barWidth,this.barHeight);
		return this.style;
	}
	,resize: function(w,h) {
		this.set_width(w);
		this.set_height(h);
		this.barWidth = this.get_width() | 0;
		this.barHeight = this.get_height() | 0;
		if(flixel_FlxG.renderBlit) {
			this.makeGraphic(this.barWidth,this.barHeight,0,true);
		}
		var showBorder = this.style.borderColor != null;
		var ec = this.style.emptyColor == null ? -16777216 : this.style.emptyColor;
		var fc = this.style.filledColor == null ? -65536 : this.style.filledColor;
		var bc = this.style.borderColor == null ? -16777216 : this.style.borderColor;
		if(this.style.filledColor != null) {
			this.createFilledBar(ec,fc,showBorder,bc);
		}
		if(this.style.filledColors != null) {
			var ecs = this.style.emptyColors == null ? [-16777216] : this.style.emptyColors;
			var fcs = this.style.filledColors == null ? [-65536] : this.style.filledColors;
			var chunk = this.style.chunkSize == null ? 1 : this.style.chunkSize;
			var gradRot = this.style.emptyImgSrc == null ? 180 : this.style.gradRotation;
			this.createGradientBar(ecs,fcs,chunk,gradRot,showBorder,bc);
		}
		if(this.style.filledImgSrc != "") {
			this.createImageBar(this.style.emptyImgSrc,this.style.filledImgSrc,ec,fc);
		}
		this.setRange(this.min,this.max);
		this.set_value(this.get_value());
	}
	,set_params: function(p) {
		this.params = p;
		return this.params;
	}
	,__class__: flixel_addons_ui_FlxUIBar
	,__properties__: $extend(flixel_ui_FlxBar.prototype.__properties__,{set_params:"set_params",set_style:"set_style"})
});
var flixel_input_IFlxInput = function() { };
$hxClasses["flixel.input.IFlxInput"] = flixel_input_IFlxInput;
flixel_input_IFlxInput.__name__ = "flixel.input.IFlxInput";
flixel_input_IFlxInput.__isInterface__ = true;
flixel_input_IFlxInput.prototype = {
	get_justReleased: null
	,get_released: null
	,get_pressed: null
	,get_justPressed: null
	,__class__: flixel_input_IFlxInput
	,__properties__: {get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased"}
};
var flixel_ui_FlxTypedButton = function(X,Y,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.lastStatus = -1;
	this.maxInputMovement = Infinity;
	this.mouseButtons = [-1];
	this.allowSwiping = true;
	this.statusAnimations = ["normal","highlight","pressed"];
	this.labelAlphas = [0.8,1.0,0.5];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	var point2 = flixel_math_FlxPoint._pool.get().set(0,1);
	point2._inPool = false;
	this.labelOffsets = [point,point1,point2];
	flixel_FlxSprite.call(this,X,Y);
	this.loadDefaultGraphic();
	this.onUp = new flixel_ui__$FlxButton_FlxButtonEvent(OnClick);
	this.onDown = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOver = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOut = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.set_status(0);
	this.scrollFactor.set();
	openfl_Lib.get_current().stage.addEventListener("mouseUp",$bind(this,this.onUpEventListener));
	this.input = new flixel_input_FlxInput(0);
};
$hxClasses["flixel.ui.FlxTypedButton"] = flixel_ui_FlxTypedButton;
flixel_ui_FlxTypedButton.__name__ = "flixel.ui.FlxTypedButton";
flixel_ui_FlxTypedButton.__interfaces__ = [flixel_input_IFlxInput];
flixel_ui_FlxTypedButton.__super__ = flixel_FlxSprite;
flixel_ui_FlxTypedButton.prototype = $extend(flixel_FlxSprite.prototype,{
	label: null
	,labelOffsets: null
	,labelAlphas: null
	,statusAnimations: null
	,allowSwiping: null
	,mouseButtons: null
	,maxInputMovement: null
	,status: null
	,onUp: null
	,onDown: null
	,onOver: null
	,onOut: null
	,_spriteLabel: null
	,input: null
	,currentInput: null
	,lastStatus: null
	,graphicLoaded: function() {
		flixel_FlxSprite.prototype.graphicLoaded.call(this);
		this.setupAnimation("normal",0);
		this.setupAnimation("highlight",1);
		this.setupAnimation("pressed",2);
	}
	,loadDefaultGraphic: function() {
		this.loadGraphic("flixel/images/ui/button.png",true,80,20);
	}
	,setupAnimation: function(animationName,frameIndex) {
		frameIndex = Math.min(frameIndex,this.animation._sprite.numFrames - 1) | 0;
		this.animation.add(animationName,[frameIndex]);
	}
	,destroy: function() {
		this.set_label(flixel_util_FlxDestroyUtil.destroy(this.label));
		this._spriteLabel = null;
		this.onUp = flixel_util_FlxDestroyUtil.destroy(this.onUp);
		this.onDown = flixel_util_FlxDestroyUtil.destroy(this.onDown);
		this.onOver = flixel_util_FlxDestroyUtil.destroy(this.onOver);
		this.onOut = flixel_util_FlxDestroyUtil.destroy(this.onOut);
		this.labelOffsets = flixel_util_FlxDestroyUtil.putArray(this.labelOffsets);
		this.labelAlphas = null;
		this.currentInput = null;
		this.input = null;
		openfl_Lib.get_current().stage.removeEventListener("mouseUp",$bind(this,this.onUpEventListener));
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		if(this.visible) {
			this.updateButton();
			if(this.lastStatus != this.status) {
				this.updateStatusAnimation();
				this.lastStatus = this.status;
			}
		}
		this.input.update();
	}
	,updateStatusAnimation: function() {
		this.animation.play(this.statusAnimations[this.status]);
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		if(this._spriteLabel != null && this._spriteLabel.visible) {
			this._spriteLabel.set_cameras(this.get_cameras());
			this._spriteLabel.draw();
		}
	}
	,stampOnAtlas: function(atlas) {
		var buttonNode = atlas.addNode(this.graphic.bitmap,this.graphic.key);
		var result = buttonNode != null;
		if(buttonNode != null) {
			var buttonFrames = this.frames;
			var X = buttonFrames.tileSize.x;
			var Y = buttonFrames.tileSize.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var tileSize = point;
			var tileFrames = buttonNode.getTileFrames(tileSize);
			this.set_frames(tileFrames);
		}
		if(result && this.label != null) {
			var labelNode = atlas.addNode(this.label.graphic.bitmap,this.label.graphic.key);
			result = result && labelNode != null;
			if(labelNode != null) {
				this.label.set_frames(labelNode.getImageFrame());
			}
		}
		return result;
	}
	,updateButton: function() {
		var overlapFound = this.checkMouseOverlap();
		if(!overlapFound) {
			overlapFound = this.checkTouchOverlap();
		}
		if(this.currentInput != null && this.currentInput.get_justReleased() && overlapFound) {
			this.onUpHandler();
		}
		if(this.status != 0 && (!overlapFound || this.currentInput != null && this.currentInput.get_justReleased())) {
			this.onOutHandler();
		}
	}
	,checkMouseOverlap: function() {
		var overlap = false;
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.mouseButtons;
			while(_g2 < _g3.length) {
				var buttonID = _g3[_g2];
				++_g2;
				var button = flixel_input_mouse_FlxMouseButton.getByID(buttonID);
				if(button != null && this.checkInput(flixel_FlxG.mouse,button,button.justPressedPosition,camera)) {
					overlap = true;
				}
			}
		}
		return overlap;
	}
	,checkTouchOverlap: function() {
		var overlap = false;
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = flixel_FlxG.touches.list;
			while(_g2 < _g3.length) {
				var touch = _g3[_g2];
				++_g2;
				if(this.checkInput(touch,touch,touch.justPressedPosition,camera)) {
					overlap = true;
				}
			}
		}
		return overlap;
	}
	,checkInput: function(pointer,input,justPressedPosition,camera) {
		var tmp;
		if(this.maxInputMovement != Infinity) {
			var X = 0;
			var Y = 0;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var point1 = point;
			point1._weak = true;
			tmp = justPressedPosition.distanceTo(pointer.getScreenPosition(null,point1)) > this.maxInputMovement;
		} else {
			tmp = false;
		}
		if(tmp && input == this.currentInput) {
			this.currentInput = null;
		} else if(this.overlapsPoint(pointer.getWorldPosition(camera,this._point),true,camera)) {
			this.updateStatus(input);
			return true;
		}
		return false;
	}
	,updateStatus: function(input) {
		if(input.get_justPressed()) {
			this.currentInput = input;
			this.onDownHandler();
		} else if(this.status == 0) {
			if(this.allowSwiping && input.get_pressed()) {
				this.onDownHandler();
			} else {
				this.onOverHandler();
			}
		}
	}
	,updateLabelPosition: function() {
		if(this._spriteLabel != null) {
			this._spriteLabel.set_x((this.pixelPerfectPosition ? Math.floor(this.x) : this.x) + this.labelOffsets[this.status].x);
			this._spriteLabel.set_y((this.pixelPerfectPosition ? Math.floor(this.y) : this.y) + this.labelOffsets[this.status].y);
		}
	}
	,updateLabelAlpha: function() {
		if(this._spriteLabel != null && this.labelAlphas.length > this.status) {
			this._spriteLabel.set_alpha(this.alpha * this.labelAlphas[this.status]);
		}
	}
	,onUpEventListener: function(_) {
		if(this.visible && this.exists && this.active && this.status == 2) {
			this.onUpHandler();
		}
	}
	,onUpHandler: function() {
		this.set_status(0);
		this.input.release();
		this.currentInput = null;
		var _this = this.onUp;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onDownHandler: function() {
		this.set_status(2);
		this.input.press();
		var _this = this.onDown;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOverHandler: function() {
		if(!flixel_FlxG.mouse.enabled) {
			this.set_status(0);
			return;
		}
		this.set_status(1);
		var _this = this.onOver;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOutHandler: function() {
		this.set_status(0);
		this.input.release();
		var _this = this.onOut;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,set_label: function(Value) {
		if(Value != null) {
			Value.scrollFactor.put();
			Value.scrollFactor = this.scrollFactor;
		}
		this.label = Value;
		this._spriteLabel = this.label;
		this.updateLabelPosition();
		return Value;
	}
	,set_status: function(Value) {
		this.status = Value;
		this.updateLabelAlpha();
		return this.status;
	}
	,set_alpha: function(Value) {
		flixel_FlxSprite.prototype.set_alpha.call(this,Value);
		this.updateLabelAlpha();
		return this.alpha;
	}
	,set_x: function(Value) {
		flixel_FlxSprite.prototype.set_x.call(this,Value);
		this.updateLabelPosition();
		return this.x;
	}
	,set_y: function(Value) {
		flixel_FlxSprite.prototype.set_y.call(this,Value);
		this.updateLabelPosition();
		return this.y;
	}
	,get_justReleased: function() {
		return this.input.current == -1;
	}
	,get_released: function() {
		var _this = this.input;
		if(_this.current != 0) {
			return _this.current == -1;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		var _this = this.input;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this.input.current == 2;
	}
	,__class__: flixel_ui_FlxTypedButton
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased",set_status:"set_status",set_label:"set_label"})
});
var flixel_addons_ui_interfaces_ICursorPointable = function() { };
$hxClasses["flixel.addons.ui.interfaces.ICursorPointable"] = flixel_addons_ui_interfaces_ICursorPointable;
flixel_addons_ui_interfaces_ICursorPointable.__name__ = "flixel.addons.ui.interfaces.ICursorPointable";
flixel_addons_ui_interfaces_ICursorPointable.__isInterface__ = true;
var flixel_addons_ui_interfaces_IFlxUIClickable = function() { };
$hxClasses["flixel.addons.ui.interfaces.IFlxUIClickable"] = flixel_addons_ui_interfaces_IFlxUIClickable;
flixel_addons_ui_interfaces_IFlxUIClickable.__name__ = "flixel.addons.ui.interfaces.IFlxUIClickable";
flixel_addons_ui_interfaces_IFlxUIClickable.__isInterface__ = true;
flixel_addons_ui_interfaces_IFlxUIClickable.prototype = {
	set_skipButtonUpdate: null
	,skipButtonUpdate: null
	,__class__: flixel_addons_ui_interfaces_IFlxUIClickable
	,__properties__: {set_skipButtonUpdate:"set_skipButtonUpdate"}
};
var flixel_addons_ui_interfaces_IFlxUIButton = function() { };
$hxClasses["flixel.addons.ui.interfaces.IFlxUIButton"] = flixel_addons_ui_interfaces_IFlxUIButton;
flixel_addons_ui_interfaces_IFlxUIButton.__name__ = "flixel.addons.ui.interfaces.IFlxUIButton";
flixel_addons_ui_interfaces_IFlxUIButton.__isInterface__ = true;
flixel_addons_ui_interfaces_IFlxUIButton.__interfaces__ = [flixel_util_IFlxDestroyable,flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_interfaces_IFlxUIButton.prototype = {
	set_toggled: null
	,set_toggle_label: null
	,get_justMousedOver: null
	,get_mouseIsOver: null
	,get_mouseIsOut: null
	,get_justMousedOut: null
	,set_status: null
	,up_color: null
	,over_color: null
	,down_color: null
	,up_toggle_color: null
	,over_toggle_color: null
	,down_toggle_color: null
	,up_visible: null
	,over_visible: null
	,down_visible: null
	,up_toggle_visible: null
	,over_toggle_visible: null
	,down_toggle_visible: null
	,resize_ratio: null
	,resize_point: null
	,has_toggle: null
	,toggled: null
	,toggle_label: null
	,autoResizeLabel: null
	,autoCenterLabel: null
	,loadGraphicSlice9: null
	,loadGraphicsMultiple: null
	,loadGraphicsUpOverDown: null
	,forceStateHandler: null
	,status: null
	,__class__: flixel_addons_ui_interfaces_IFlxUIButton
	,__properties__: {set_status:"set_status",get_justMousedOut:"get_justMousedOut",get_mouseIsOut:"get_mouseIsOut",get_mouseIsOver:"get_mouseIsOver",get_justMousedOver:"get_justMousedOver",set_toggle_label:"set_toggle_label",set_toggled:"set_toggled"}
};
var flixel_addons_ui_FlxUITypedButton = function(X,Y,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._centerLabelOffset = null;
	this._src_h = 0;
	this._src_w = 0;
	this._no_graphic = false;
	this._assetsToCleanup = [];
	this._autoCleanup = true;
	this.autoResizeLabel = false;
	this.skipButtonUpdate = false;
	this.round_labels = true;
	this.down_toggle_visible = true;
	this.over_toggle_visible = true;
	this.up_toggle_visible = true;
	this.down_visible = true;
	this.over_visible = true;
	this.up_visible = true;
	this.down_toggle_color = null;
	this.over_toggle_color = null;
	this.up_toggle_color = null;
	this.down_color = null;
	this.over_color = null;
	this.up_color = null;
	this.broadcastToFlxUI = true;
	this.toggled = false;
	this.has_toggle = false;
	this.tile = 0;
	this.resize_point = null;
	this.resize_ratio_axis = 1;
	this.resize_ratio = -1;
	flixel_ui_FlxTypedButton.call(this,X,Y,OnClick);
	var X = 0;
	var Y = 0;
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	this._centerLabelOffset = point;
	this.statusAnimations[3] = "normal_toggled";
	this.statusAnimations[4] = "highlight_toggled";
	this.statusAnimations[5] = "pressed_toggled";
	var _g = [];
	_g.push(1);
	_g.push(1);
	_g.push(1);
	this.labelAlphas = _g;
	this.inputOver = new flixel_input_FlxInput(0);
};
$hxClasses["flixel.addons.ui.FlxUITypedButton"] = flixel_addons_ui_FlxUITypedButton;
flixel_addons_ui_FlxUITypedButton.__name__ = "flixel.addons.ui.FlxUITypedButton";
flixel_addons_ui_FlxUITypedButton.__interfaces__ = [flixel_addons_ui_interfaces_ICursorPointable,flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIClickable,flixel_addons_ui_interfaces_IFlxUIWidget,flixel_addons_ui_interfaces_IResizable,flixel_addons_ui_interfaces_IFlxUIButton];
flixel_addons_ui_FlxUITypedButton.__super__ = flixel_ui_FlxTypedButton;
flixel_addons_ui_FlxUITypedButton.prototype = $extend(flixel_ui_FlxTypedButton.prototype,{
	name: null
	,resize_ratio: null
	,resize_ratio_axis: null
	,resize_point: null
	,tile: null
	,has_toggle: null
	,toggled: null
	,set_toggled: function(b) {
		this.toggled = b;
		this.updateStatusAnimation();
		return this.toggled;
	}
	,broadcastToFlxUI: null
	,inputOver: null
	,get_justMousedOver: function() {
		return this.inputOver.current == 2;
	}
	,get_justMousedOut: function() {
		return this.inputOver.current == -1;
	}
	,get_mouseIsOver: function() {
		var _this = this.inputOver;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_mouseIsOut: function() {
		var _this = this.inputOver;
		if(_this.current != 0) {
			return _this.current == -1;
		} else {
			return true;
		}
	}
	,up_color: null
	,over_color: null
	,down_color: null
	,up_toggle_color: null
	,over_toggle_color: null
	,down_toggle_color: null
	,up_visible: null
	,over_visible: null
	,down_visible: null
	,up_toggle_visible: null
	,over_toggle_visible: null
	,down_toggle_visible: null
	,toggle_label: null
	,set_toggle_label: function(f) {
		if(this.label != null) {
			this.toggle_label = f;
			return this.toggle_label;
		}
		return null;
	}
	,set_visible: function(Value) {
		if(this.visible && Value == false) {
			this.inputOver.release();
		}
		return flixel_ui_FlxTypedButton.prototype.set_visible.call(this,Value);
	}
	,round_labels: null
	,skipButtonUpdate: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		return this.skipButtonUpdate;
	}
	,params: null
	,set_params: function(p) {
		this.params = p;
		return this.params;
	}
	,destroy: function() {
		this.resize_point = flixel_util_FlxDestroyUtil.put(this.resize_point);
		flixel_ui_FlxTypedButton.prototype.destroy.call(this);
	}
	,autoResizeLabel: null
	,graphicLoaded: function() {
		flixel_ui_FlxTypedButton.prototype.graphicLoaded.call(this);
		this.setupAnimation("normal_toggled",3);
		this.setupAnimation("highlight_toggled",4);
		this.setupAnimation("pressed_toggled",5);
		if(this._autoCleanup) {
			this.cleanup();
		}
	}
	,copyGraphic: function(other) {
		this._src_w = other._src_w;
		this._src_h = other._src_h;
		this._frame_indeces = flixel_addons_ui_U.copy_shallow_arr_i(other._frame_indeces);
		this.tile = other.tile;
		this.resize_ratio = other.resize_ratio;
		if(other._centerLabelOffset == null) {
			this._centerLabelOffset = null;
		} else {
			this._centerLabelOffset = new flixel_math_FlxPoint(other._centerLabelOffset.x,other._centerLabelOffset.y);
		}
		this._no_graphic = other._no_graphic;
		if(other._slice9_arrays != null) {
			this._slice9_arrays = other._slice9_arrays.slice();
		}
		if(other._slice9_assets != null) {
			this._slice9_assets = other._slice9_assets.slice();
		}
		if(this._slice9_arrays == null || this._slice9_assets == null) {
			this.loadGraphic(other.graphic,true,other.get_width(),other.get_height());
		} else {
			this.resize(other.get_width(),other.get_height());
		}
	}
	,copyStyle: function(other) {
		this.up_color = other.up_color;
		this.over_color = other.over_color;
		this.down_color = other.down_color;
		this.up_toggle_color = other.up_toggle_color;
		this.over_toggle_color = other.over_toggle_color;
		this.down_toggle_color = other.over_toggle_color;
		this.up_visible = other.up_visible;
		this.over_visible = other.over_visible;
		this.down_visible = other.down_visible;
		this.up_toggle_visible = other.up_toggle_visible;
		this.over_toggle_visible = other.over_toggle_visible;
		this.down_toggle_visible = other.down_toggle_visible;
		var ctPt = other.getCenterLabelOffset();
		this.setCenterLabelOffset(ctPt.x,ctPt.y);
		var i = 0;
		var _g = 0;
		var _g1 = other.labelOffsets;
		while(_g < _g1.length) {
			var flxPt = _g1[_g];
			++_g;
			this.labelOffsets[i].set_x(flxPt.x);
			this.labelOffsets[i].set_y(flxPt.y);
			++i;
		}
		i = 0;
		var _g = 0;
		var _g1 = other.labelAlphas;
		while(_g < _g1.length) {
			var alpha = _g1[_g];
			++_g;
			this.labelAlphas[i] = alpha;
			++i;
		}
	}
	,setAllLabelOffsets: function(X,Y) {
		var _g = 0;
		var _g1 = this.labelOffsets;
		while(_g < _g1.length) {
			var labelOffset = _g1[_g];
			++_g;
			labelOffset.set(X,Y);
		}
	}
	,update: function(elapsed) {
		flixel_ui_FlxTypedButton.prototype.update.call(this,elapsed);
		var tmp;
		if(this.status == 0) {
			var _this = this.inputOver;
			tmp = _this.current == 1 || _this.current == 2;
		} else {
			tmp = false;
		}
		if(tmp && this.input.current == -1 == false) {
			this.inputOver.release();
		}
		this.inputOver.update();
		if(this.label != null) {
			var theLabel = this.fetchAndShowCorrectLabel();
			theLabel.set_x(this.x + this._centerLabelOffset.x + this.labelOffsets[this.status].x);
			theLabel.set_y(this.y + this._centerLabelOffset.y + this.labelOffsets[this.status].y);
			if(this.round_labels) {
				theLabel.set_x(theLabel.x + 0.5 | 0);
				theLabel.set_y(theLabel.y + 0.5 | 0);
			}
			theLabel.scrollFactor = this.scrollFactor;
		}
	}
	,updateStatusAnimation: function() {
		if(this.has_toggle && this.toggled) {
			this.animation.play(this.statusAnimations[this.status + 3]);
		} else {
			flixel_ui_FlxTypedButton.prototype.updateStatusAnimation.call(this);
		}
	}
	,draw: function() {
		flixel_ui_FlxTypedButton.prototype.draw.call(this);
		if(this.has_toggle && this.toggled && this.toggle_label != null && this.toggle_label.visible == true) {
			this.toggle_label.set_cameras(this.get_cameras());
			this.toggle_label.draw();
		}
	}
	,resize: function(W,H) {
		this.doResize(W,H);
	}
	,doResize: function(W,H,Redraw) {
		if(Redraw == null) {
			Redraw = true;
		}
		var old_width = this.get_width();
		var old_height = this.get_height();
		var label_diffx = 0;
		var label_diffy = 0;
		if(this.label != null) {
			label_diffx = this.get_width() - this._spriteLabel.get_width();
			label_diffy = this.get_height() - this._spriteLabel.get_height();
		}
		if(W <= 0) {
			W = 80;
		}
		if(H <= 0) {
			H = 20;
		}
		if(Redraw) {
			if(this._slice9_assets != null) {
				this.loadGraphicSlice9(this._slice9_assets,W | 0,H | 0,this._slice9_arrays,this.tile,this.resize_ratio,this.has_toggle,this._src_w,this._src_h,this._frame_indeces);
			} else if(this._no_graphic) {
				var upB;
				if(!this.has_toggle) {
					upB = new openfl_display_BitmapData(W | 0,H * 3 | 0,true,0);
				} else {
					upB = new openfl_display_BitmapData(W | 0,H * 6 | 0,true,0);
				}
				this.loadGraphicsUpOverDown(upB);
			} else {
				this.loadGraphicSlice9(null,W | 0,H | 0,null,this.tile);
			}
		}
		if(this.label != null && this.autoResizeLabel) {
			if(js_Boot.__implements(this.label,flixel_addons_ui_interfaces_IResizable)) {
				var targetW = W - label_diffx;
				var targetH = H - label_diffy;
				var ir = this.label;
				ir.resize(targetW,targetH);
			}
		}
		this.autoCenterLabel();
		var diff_w = this.get_width() - old_width;
		var diff_h = this.get_height() - old_height;
		if(this.resize_point != null) {
			var delta_x = diff_w * this.resize_point.x;
			var delta_y = diff_h * this.resize_point.y;
			var _g = this;
			_g.set_x(_g.x - delta_x);
			var _g = this;
			_g.set_y(_g.y - delta_y);
		}
	}
	,getBmp: function(asset) {
		return flixel_addons_ui_U.getBmp(asset);
	}
	,loadGraphicsMultiple: function(assets,Key) {
		if(Key == null) {
			Key = "";
		}
		this._slice9_assets = null;
		this._slice9_arrays = null;
		this.resize_ratio = -1;
		var key = "";
		if(assets.length <= 3) {
			while(assets.length < 3) assets.push(null);
			if(assets[1] == null) {
				assets[1] = assets[0];
			}
			if(assets[2] == null) {
				assets[2] = assets[1];
			}
			key = assets.join(",");
			if(Key != "") {
				key = Key;
			}
			if(flixel_FlxG.bitmap._cache.h[key] != null) {
				this.loadGraphicsUpOverDown(key,false,key);
			} else {
				var pixels = this.assembleButtonFrames(this.getBmp(assets[0]),this.getBmp(assets[1]),this.getBmp(assets[2]));
				this.loadGraphicsUpOverDown(pixels,false,key);
			}
		} else if(assets.length <= 6) {
			while(assets.length < 6) assets.push(null);
			if(assets[4] == null) {
				assets[4] = assets[3];
			}
			if(assets[5] == null) {
				assets[5] = assets[4];
			}
			key = assets.join(",");
			if(Key != "") {
				key = Key;
			}
			if(flixel_FlxG.bitmap._cache.h[key] != null) {
				this.loadGraphicsUpOverDown(key,true,key);
			} else {
				var pixels_normal = this.assembleButtonFrames(this.getBmp(assets[0]),this.getBmp(assets[1]),this.getBmp(assets[2]));
				var pixels_toggle = this.assembleButtonFrames(this.getBmp(assets[3]),this.getBmp(assets[4]),this.getBmp(assets[5]));
				var pixels = this.combineToggleBitmaps(pixels_normal,pixels_toggle);
				this.loadGraphicsUpOverDown(pixels,true,key);
				pixels_normal.dispose();
				pixels_toggle.dispose();
			}
		}
	}
	,loadGraphicsUpOverDown: function(asset,for_toggle,key) {
		if(for_toggle == null) {
			for_toggle = false;
		}
		this._slice9_assets = null;
		this._slice9_arrays = null;
		this.resize_ratio = -1;
		if(for_toggle) {
			this.has_toggle = true;
		}
		var upB = null;
		var overB = null;
		var downB = null;
		var bd = null;
		if(((asset) instanceof openfl_display_BitmapData)) {
			bd = asset;
		} else if(typeof(asset) == "string") {
			bd = this.getBmp(asset);
		}
		upB = this.grabButtonFrame(bd,0,this.has_toggle,0,0,key);
		overB = this.grabButtonFrame(bd,1,this.has_toggle,0,0,key);
		downB = this.grabButtonFrame(bd,2,this.has_toggle,0,0,key);
		var normalGraphic = key;
		if(key == null || key == "" || flixel_FlxG.bitmap._cache.h[key] != null == false) {
			normalGraphic = this.assembleButtonFrames(upB,overB,downB);
		}
		if(this.has_toggle) {
			var normalPixels = this.assembleButtonFrames(upB,overB,downB);
			upB = this.grabButtonFrame(bd,3,true,0,0,key);
			overB = this.grabButtonFrame(bd,4,true,0,0,key);
			downB = this.grabButtonFrame(bd,5,true,0,0,key);
			var togglePixels = this.assembleButtonFrames(upB,overB,downB);
			var combinedPixels = this.combineToggleBitmaps(normalPixels,togglePixels);
			normalPixels = flixel_util_FlxDestroyUtil.dispose(normalPixels);
			togglePixels = flixel_util_FlxDestroyUtil.dispose(togglePixels);
			this.loadGraphic(combinedPixels,true,upB.width,upB.height,false,key);
		} else {
			this.loadGraphic(normalGraphic,true,upB.width,upB.height,false,key);
		}
	}
	,loadGraphicSlice9: function(assets,W,H,slice9,Tile,Resize_Ratio,isToggle,src_w,src_h,frame_indeces) {
		if(src_h == null) {
			src_h = 0;
		}
		if(src_w == null) {
			src_w = 0;
		}
		if(isToggle == null) {
			isToggle = false;
		}
		if(Resize_Ratio == null) {
			Resize_Ratio = -1;
		}
		if(Tile == null) {
			Tile = 0;
		}
		if(H == null) {
			H = 20;
		}
		if(W == null) {
			W = 80;
		}
		if(src_w != 0) {
			this._src_w = src_w;
		}
		if(src_h != 0) {
			this._src_h = src_h;
		}
		this.tile = Tile;
		this.has_toggle = isToggle;
		this.resize_ratio = Resize_Ratio;
		this._slice9_assets = assets;
		this._slice9_arrays = slice9;
		var key = "";
		var arr_bmpData = [];
		var arr_flx9 = [];
		if(frame_indeces == null) {
			if(this.has_toggle) {
				frame_indeces = [0,1,2,3,4,5];
			} else {
				frame_indeces = [0,1,2];
			}
		} else {
			var max_index = 2;
			if(this.has_toggle) {
				max_index = 5;
			}
			while(frame_indeces.length < max_index + 1) frame_indeces.push(frame_indeces.length - 1);
			var _g = 0;
			var _g1 = frame_indeces.length;
			while(_g < _g1) {
				var i = _g++;
				if(frame_indeces[i] > 5) {
					frame_indeces[i] = 5;
				} else if(frame_indeces[i] < 0) {
					frame_indeces[i] = 0;
				}
			}
		}
		this._frame_indeces = frame_indeces;
		if(W == 0) {
			W = 80;
		}
		if(H == 0) {
			H = 20;
		}
		var pt = flixel_addons_ui_U.applyResize(this.resize_ratio,this.resize_ratio_axis,W,H);
		W = pt.x | 0;
		H = pt.y | 0;
		if(assets == null) {
			var temp;
			if(!isToggle) {
				assets = ["flixel/flixel-ui/img/button.png"];
				slice9 = [flixel_util_FlxStringUtil.toIntArray("6,6,11,11")];
				temp = this.getBmp(assets[0]);
				this._src_w = temp.width | 0;
				this._src_h = temp.height / 3 | 0;
			} else {
				assets = ["flixel/flixel-ui/img/button_toggle.png"];
				slice9 = [flixel_util_FlxStringUtil.toIntArray("6,6,11,11")];
				temp = this.getBmp(assets[0]);
				this._src_w = temp.width | 0;
				this._src_h = temp.height / 6 | 0;
			}
			temp = null;
		}
		if(!this.has_toggle && assets.length <= 3) {
			arr_bmpData = [null,null,null];
			arr_flx9 = [null,null,null];
		} else {
			this.has_toggle = true;
			arr_bmpData = [null,null,null,null,null,null];
			arr_flx9 = [null,null,null,null,null,null];
		}
		this._flashRect2.width = W;
		this._flashRect2.height = H;
		var midKey = key += Std.string(assets) + "_slice9=" + Std.string(slice9) + "_src=" + this._src_w + "x" + this._src_h;
		key += "_final=" + W + "x" + H + "_fi=" + Std.string(this._frame_indeces);
		if(assets.length == 1) {
			var all = this.getBmp(assets[0]);
			var keySuffix = "_all";
			if(this._src_w == 0 || this._src_h == 0) {
				throw haxe_Exception.thrown(new openfl_errors_Error("Ambiguous situation! If you only provide one asset, you MUST provide src_w and src_h. Otherwise I can't tell if it's a stacked set of frames or a single frame."));
			}
			var multiFrame = all.height > this._src_h;
			keySuffix += multiFrame ? "_multiframe" : "";
			key += keySuffix;
			midKey += keySuffix;
			if(flixel_FlxG.bitmap._cache.h[key] != null) {
				this.loadGraphic(key,true,W,H);
				return;
			}
			if(multiFrame) {
				var _g = 0;
				var _g1 = arr_bmpData.length;
				while(_g < _g1) {
					var i = _g++;
					arr_bmpData[i] = this.grabButtonFrame(all,i,this.has_toggle,this._src_w,this._src_h,midKey);
				}
				if(slice9 != null && slice9[0] != []) {
					var _g = 0;
					var _g1 = arr_bmpData.length;
					while(_g < _g1) {
						var i = _g++;
						arr_flx9[i] = new flixel_addons_ui_FlxUI9SliceSprite(0,0,arr_bmpData[i],this._flashRect2,slice9[0],this.tile,false,assets[0] + ":" + i,this.resize_ratio);
						arr_flx9[i].set_resize_point(this.resize_point);
					}
					var _g = 0;
					var _g1 = arr_bmpData.length;
					while(_g < _g1) {
						var i = _g++;
						arr_bmpData[i] = arr_flx9[i].get_pixels();
					}
					W = arr_bmpData[0].width;
					H = arr_bmpData[0].height;
				}
			} else {
				arr_bmpData[0] = all;
			}
		} else {
			if(flixel_FlxG.bitmap._cache.h[key] != null) {
				this.loadGraphic(key,true,W,H);
				return;
			}
			if(!this.has_toggle) {
				while(assets.length < 3) assets.push("");
			} else {
				while(assets.length < 6) assets.push("");
			}
			if(assets[0] != "") {
				if(slice9 != null && slice9.length > 0 && slice9[0] != null && slice9[0].length > 0) {
					while(slice9.length < assets.length) slice9.push(null);
					if(slice9[0] != null) {
						arr_flx9[0] = new flixel_addons_ui_FlxUI9SliceSprite(0,0,assets[0],this._flashRect2,slice9[0],this.tile,false,"",this.resize_ratio);
					} else {
						arr_flx9[0] = new flixel_addons_ui_FlxUISprite(0,0,assets[0]);
					}
					arr_bmpData[0] = arr_flx9[0].get_pixels();
					var _g = 1;
					var _g1 = assets.length;
					while(_g < _g1) {
						var i = _g++;
						if(assets[i] != "") {
							if(slice9[i] != null) {
								arr_flx9[i] = new flixel_addons_ui_FlxUI9SliceSprite(0,0,assets[i],this._flashRect2,slice9[i],this.tile,false,"",this.resize_ratio);
							} else {
								arr_flx9[i] = new flixel_addons_ui_FlxUISprite(0,0,assets[i]);
							}
							arr_bmpData[i] = arr_flx9[i].get_pixels();
						}
					}
					W = arr_bmpData[0].width;
					H = arr_bmpData[0].height;
				} else {
					var _g = 0;
					var _g1 = assets.length;
					while(_g < _g1) {
						var i = _g++;
						arr_bmpData[i] = this.getBmp(assets[i]);
					}
					W = arr_bmpData[0].width;
					H = arr_bmpData[0].height;
				}
			} else {
				if(W == 0) {
					W = 80;
				}
				if(H == 0) {
					H = 20;
				}
				arr_bmpData[0] = new openfl_display_BitmapData(W,H * 3,true,0);
				this._no_graphic = true;
			}
		}
		var normalPixels = null;
		if(!this.has_toggle) {
			normalPixels = this.assembleButtonFrames(arr_bmpData[frame_indeces[0]],arr_bmpData[frame_indeces[1]],arr_bmpData[frame_indeces[2]]);
			flixel_FlxG.bitmap.add(normalPixels,true,key);
			this.loadGraphic(key,true,W,H);
		} else {
			var normalPixels = this.assembleButtonFrames(arr_bmpData[frame_indeces[0]],arr_bmpData[frame_indeces[1]],arr_bmpData[frame_indeces[2]]);
			var togglePixels = this.assembleButtonFrames(arr_bmpData[frame_indeces[3]],arr_bmpData[frame_indeces[4]],arr_bmpData[frame_indeces[5]]);
			var combinedPixels = this.combineToggleBitmaps(normalPixels,togglePixels);
			normalPixels = flixel_util_FlxDestroyUtil.dispose(normalPixels);
			togglePixels = flixel_util_FlxDestroyUtil.dispose(togglePixels);
			flixel_FlxG.bitmap.add(combinedPixels,true,key);
			this.loadGraphic(key,true,W,H);
		}
		var _g = 0;
		var _g1 = arr_flx9.length;
		while(_g < _g1) {
			var i = _g++;
			if(arr_flx9[i] != null) {
				arr_flx9[i].destroy();
				arr_flx9[i] = null;
			}
		}
		while(arr_flx9.length > 0) arr_flx9.pop();
		arr_flx9 = null;
		while(arr_bmpData.length > 0) arr_bmpData.pop();
		arr_bmpData = null;
	}
	,autoCenterLabel: function() {
		if(this.label != null) {
			var offX = 0;
			var offY = 0;
			offX = this.get_width() - this._spriteLabel.get_width();
			if(((this.label) instanceof flixel_addons_ui_FlxUIText)) {
				var tlabel = this.label;
				offX = (this.get_width() - tlabel.get_fieldWidth()) / 2;
				offY = (this.get_height() - tlabel.get_height()) / 2;
			} else {
				offX = (this.get_width() - this._spriteLabel.get_width()) / 2;
				offY = (this.get_height() - this._spriteLabel.get_height()) / 2;
			}
			this._centerLabelOffset.set_x(offX);
			this._centerLabelOffset.set_y(offY);
		}
	}
	,setCenterLabelOffset: function(X,Y) {
		this._centerLabelOffset.set_x(X);
		this._centerLabelOffset.set_y(Y);
	}
	,getCenterLabelOffset: function() {
		var X = this._centerLabelOffset.x;
		var Y = this._centerLabelOffset.y;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		return point;
	}
	,forceStateHandler: function(event) {
		switch(event) {
		case "click_button":
			this.onUpHandler();
			break;
		case "down_button":
			this.onDownHandler();
			break;
		case "out_button":
			this.onOutHandler();
			break;
		case "over_button":
			this.onOverHandler();
			break;
		}
	}
	,grabButtonFrame: function(all_frames,button_state,for_toggle,src_w,src_h,key) {
		if(src_h == null) {
			src_h = 0;
		}
		if(src_w == null) {
			src_w = 0;
		}
		if(for_toggle == null) {
			for_toggle = false;
		}
		var h = src_h;
		if(h == 0) {
			if(!for_toggle) {
				h = all_frames.height / 3 | 0;
			} else {
				h = all_frames.height / 6 | 0;
			}
		}
		var w = src_w;
		if(w == 0) {
			w = all_frames.width;
		}
		this._flashRect.x = 0;
		this._flashRect.y = button_state * h;
		this._flashRect.width = w;
		this._flashRect.height = h;
		if(this._flashRect.y >= all_frames.height) {
			var framesHigh = all_frames.height / h | 0;
			if(framesHigh == 4) {
				if(button_state == 4) {
					this._flashRect.y = 3 * h;
				} else if(button_state == 5) {
					this._flashRect.y = 2 * h;
				}
			}
		}
		var frameKey = key + "{x:" + this._flashRect.x + "y:" + this._flashRect.y + "w:" + this._flashRect.width + "h:" + this._flashRect.height + "}";
		if(frameKey != null) {
			if(flixel_FlxG.bitmap._cache.h[frameKey] != null) {
				return flixel_FlxG.bitmap._cache.h[frameKey].bitmap;
			}
		}
		var pixels = new openfl_display_BitmapData(w,h);
		pixels.copyPixels(all_frames,this._flashRect,this._flashPointZero);
		if(key != null) {
			flixel_FlxG.bitmap.add(pixels,true,frameKey);
			this.addToCleanup(frameKey);
		}
		return pixels;
	}
	,combineToggleBitmaps: function(normal,toggle) {
		var combined = new openfl_display_BitmapData(normal.width,normal.height + toggle.height);
		combined.copyPixels(normal,normal.rect,this._flashPointZero);
		this._flashPoint.x = 0;
		this._flashPoint.y = normal.height;
		combined.copyPixels(toggle,toggle.rect,this._flashPoint);
		return combined;
	}
	,assembleButtonFrames: function(upB,overB,downB) {
		var pixels;
		if(overB != null) {
			if(downB != null) {
				pixels = new openfl_display_BitmapData(upB.width,upB.height * 3);
			} else {
				pixels = new openfl_display_BitmapData(upB.width,upB.height * 2);
			}
		} else {
			pixels = new openfl_display_BitmapData(upB.width,upB.height);
		}
		pixels.copyPixels(upB,upB.rect,this._flashPointZero);
		if(overB != null) {
			this._flashPoint.x = 0;
			this._flashPoint.y = upB.height;
			pixels.copyPixels(overB,overB.rect,this._flashPoint);
			if(downB != null) {
				this._flashPoint.y = upB.height * 2;
				pixels.copyPixels(downB,downB.rect,this._flashPoint);
			}
		}
		return pixels;
	}
	,updateButton: function() {
		if(!this.skipButtonUpdate) {
			flixel_ui_FlxTypedButton.prototype.updateButton.call(this);
		}
	}
	,addToCleanup: function(str) {
		if(this._assetsToCleanup == null) {
			this._assetsToCleanup = [];
		}
		if(this._assetsToCleanup.indexOf(str) == -1) {
			this._assetsToCleanup.push(str);
		}
	}
	,cleanup: function() {
		if(this._assetsToCleanup == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._assetsToCleanup;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			flixel_FlxG.bitmap.removeByKey(key);
		}
		this._assetsToCleanup = null;
	}
	,fetchAndShowCorrectLabel: function() {
		if(this.has_toggle) {
			if(this.toggled && this.toggle_label != null) {
				this._spriteLabel.set_visible(false);
				this.toggle_label.set_visible(true);
				return this.toggle_label;
			} else {
				if(this.toggle_label != null) {
					this.toggle_label.set_visible(false);
				}
				this._spriteLabel.set_visible(true);
				return this.label;
			}
		}
		return this.label;
	}
	,onUpHandler: function() {
		if(this.has_toggle) {
			this.set_toggled(!this.toggled);
		}
		flixel_ui_FlxTypedButton.prototype.onUpHandler.call(this);
		if(this.label != null) {
			var theLabel = this.fetchAndShowCorrectLabel();
			theLabel.set_visible(this.toggled ? this.up_toggle_visible : this.up_visible);
			var thecol = this.toggled ? this.up_toggle_color : this.up_color;
			if(thecol != null) {
				theLabel.set_color(thecol);
			}
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("click_button",this,null,this.params);
		}
	}
	,onDownHandler: function() {
		flixel_ui_FlxTypedButton.prototype.onDownHandler.call(this);
		if(this.label != null) {
			var theLabel = this.fetchAndShowCorrectLabel();
			theLabel.set_visible(this.toggled ? this.down_toggle_visible : this.down_visible);
			var thecol = this.toggled ? this.down_toggle_color : this.down_color;
			if(thecol != null) {
				theLabel.set_color(thecol);
			}
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("down_button",this,null,this.params);
		}
	}
	,onOverHandler: function() {
		flixel_ui_FlxTypedButton.prototype.onOverHandler.call(this);
		this.inputOver.press();
		if(this.label != null) {
			var theLabel = this.fetchAndShowCorrectLabel();
			theLabel.set_visible(this.toggled ? this.over_toggle_visible : this.over_visible);
			var thecol = this.toggled ? this.over_toggle_color : this.over_color;
			if(thecol != null) {
				theLabel.set_color(thecol);
			}
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("over_button",this,null,this.params);
		}
	}
	,onOutHandler: function() {
		flixel_ui_FlxTypedButton.prototype.onOutHandler.call(this);
		this.inputOver.release();
		if(this.label != null) {
			var theLabel = this.fetchAndShowCorrectLabel();
			theLabel.set_visible(this.toggled ? this.up_toggle_visible : this.up_visible);
			var thecol = this.toggled ? this.up_toggle_color : this.up_color;
			if(thecol != null) {
				theLabel.set_color(thecol);
			}
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("out_button",this,null,this.params);
		}
	}
	,set_x: function(NewX) {
		flixel_ui_FlxTypedButton.prototype.set_x.call(this,NewX);
		if(this._spriteLabel != null) {
			this._spriteLabel.set_x(this.x + this._centerLabelOffset.x + this.labelOffsets[this.status].x);
			if(this.round_labels) {
				this._spriteLabel.set_x(this._spriteLabel.x + 0.5 | 0);
			}
			if(this.has_toggle && this.toggle_label != null) {
				this.toggle_label.set_x(this._spriteLabel.x);
			}
		}
		return NewX;
	}
	,set_y: function(NewY) {
		flixel_ui_FlxTypedButton.prototype.set_y.call(this,NewY);
		if(this.label != null) {
			this._spriteLabel.set_y(this.y + this._centerLabelOffset.y + this.labelOffsets[this.status].y);
			if(this.round_labels) {
				this._spriteLabel.set_y(this._spriteLabel.y + 0.5 | 0);
			}
			if(this.has_toggle && this.toggle_label != null) {
				this.toggle_label.set_y(this._spriteLabel.y);
			}
		}
		return NewY;
	}
	,_autoCleanup: null
	,_assetsToCleanup: null
	,_no_graphic: null
	,_src_w: null
	,_src_h: null
	,_frame_indeces: null
	,_slice9_arrays: null
	,_slice9_assets: null
	,_centerLabelOffset: null
	,__class__: flixel_addons_ui_FlxUITypedButton
	,__properties__: $extend(flixel_ui_FlxTypedButton.prototype.__properties__,{set_params:"set_params",set_skipButtonUpdate:"set_skipButtonUpdate",set_toggle_label:"set_toggle_label",get_justMousedOut:"get_justMousedOut",get_mouseIsOut:"get_mouseIsOut",get_mouseIsOver:"get_mouseIsOver",get_justMousedOver:"get_justMousedOver",set_toggled:"set_toggled"})
});
var flixel_addons_ui_interfaces_ILabeled = function() { };
$hxClasses["flixel.addons.ui.interfaces.ILabeled"] = flixel_addons_ui_interfaces_ILabeled;
flixel_addons_ui_interfaces_ILabeled.__name__ = "flixel.addons.ui.interfaces.ILabeled";
flixel_addons_ui_interfaces_ILabeled.__isInterface__ = true;
flixel_addons_ui_interfaces_ILabeled.prototype = {
	getLabel: null
	,setLabel: null
	,__class__: flixel_addons_ui_interfaces_ILabeled
};
var flixel_addons_ui_FlxUIButton = function(X,Y,Label,OnClick,LoadDefaultGraphics,LoadBlank,Color) {
	if(Color == null) {
		Color = -1;
	}
	if(LoadBlank == null) {
		LoadBlank = false;
	}
	if(LoadDefaultGraphics == null) {
		LoadDefaultGraphics = true;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.down_toggle_style = null;
	this.over_toggle_style = null;
	this.up_toggle_style = null;
	this.down_style = null;
	this.over_style = null;
	this.up_style = null;
	flixel_addons_ui_FlxUITypedButton.call(this,X,Y,OnClick);
	this.set_color(Color);
	if(Label != null) {
		this.set_label(new flixel_addons_ui_FlxUIText(0,0,80,Label,8));
		this.label.setFormat(null,8,3355443,"center");
	}
	if(LoadBlank) {
		this._no_graphic = true;
	}
	if(LoadDefaultGraphics) {
		this.resize(this.get_width(),this.get_height());
	} else if(this._no_graphic == false) {
		this.doResize(this.get_width(),this.get_height(),false);
	} else {
		this.doResize(this.get_width(),this.get_height(),true);
	}
};
$hxClasses["flixel.addons.ui.FlxUIButton"] = flixel_addons_ui_FlxUIButton;
flixel_addons_ui_FlxUIButton.__name__ = "flixel.addons.ui.FlxUIButton";
flixel_addons_ui_FlxUIButton.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIButton,flixel_addons_ui_interfaces_ILabeled];
flixel_addons_ui_FlxUIButton.__super__ = flixel_addons_ui_FlxUITypedButton;
flixel_addons_ui_FlxUIButton.prototype = $extend(flixel_addons_ui_FlxUITypedButton.prototype,{
	_noIconGraphicsBkup: null
	,up_style: null
	,over_style: null
	,down_style: null
	,up_toggle_style: null
	,over_toggle_style: null
	,down_toggle_style: null
	,setLabelFormat: function(Font,Size,Color,Alignment,BorderStyle,BorderColor,Embedded) {
		if(Embedded == null) {
			Embedded = true;
		}
		if(BorderColor == null) {
			BorderColor = 0;
		}
		if(Color == null) {
			Color = -1;
		}
		if(Size == null) {
			Size = 8;
		}
		if(this.label != null) {
			this.label.setFormat(Font,Size,Color,Alignment,BorderStyle,BorderColor,Embedded);
			return this.label;
		}
		return null;
	}
	,autoCenterLabel: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.autoCenterLabel.call(this);
	}
	,clone: function() {
		var newButton = new flixel_addons_ui_FlxUIButton(0,0,this.label == null ? null : this.label.text,this.onUp.callback,false);
		newButton.copyGraphic(this);
		newButton.copyStyle(this);
		return newButton;
	}
	,copyStyle: function(other) {
		flixel_addons_ui_FlxUITypedButton.prototype.copyStyle.call(this,other);
		if(((other) instanceof flixel_addons_ui_FlxUIButton)) {
			var fuib = other;
			this.up_style = fuib.up_style;
			this.over_style = fuib.over_style;
			this.down_style = fuib.down_style;
			this.up_toggle_style = fuib.up_toggle_style;
			this.over_toggle_style = fuib.over_toggle_style;
			this.down_toggle_style = fuib.down_toggle_style;
			var t = fuib.label;
			var tf = t.textField.get_defaultTextFormat();
			if(t._font.indexOf(flixel_system_FlxAssets.FONT_DEFAULT) == -1) {
				var fd = flixel_addons_ui_FontDef.copyFromFlxText(t);
				fd.apply(null,this.label);
			} else {
				var flxAlign = flixel_text_FlxTextAlign.fromOpenFL(tf.align);
				this.label.setFormat(null,tf.size | 0,tf.color,flxAlign,t.borderStyle,t.borderColor,t.textField.set_embedFonts(true));
			}
		}
	}
	,setLabel: function(t) {
		this.set_label(t);
		return this.label;
	}
	,getLabel: function() {
		return this.label;
	}
	,resize: function(W,H) {
		flixel_addons_ui_FlxUITypedButton.prototype.resize.call(this,W,H);
	}
	,addIcon: function(icon,X,Y,center) {
		if(center == null) {
			center = true;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this._noIconGraphicsBkup = this.graphic.bitmap.clone();
		var newBmp = this._noIconGraphicsBkup.clone();
		var key = this.graphic.key + ",icon:" + icon.graphic.key;
		var newGraphic = flixel_FlxG.bitmap.add(newBmp,false,key);
		this.loadGraphic(newGraphic,true,this.get_width() | 0,this.get_height() | 0);
		var sx = X;
		var sy = Y;
		if(center) {
			sx = (this.get_width() - icon.get_width()) / 2 | 0;
			sy = (this.get_height() - icon.get_height()) / 2 | 0;
		}
		var _g = 0;
		var _g1 = this.numFrames;
		while(_g < _g1) {
			var i = _g++;
			this.stamp(icon,sx + (this.labelOffsets[i > 2 ? 2 : i].x | 0),sy + (i * this.get_height() | 0) + (this.labelOffsets[i > 2 ? 2 : i].y | 0));
		}
	}
	,removeIcon: function() {
		if(this._noIconGraphicsBkup != null) {
			this.graphic.bitmap.fillRect(this.graphic.bitmap.rect,0);
			this.graphic.bitmap.copyPixels(this._noIconGraphicsBkup,new openfl_geom_Rectangle(0,0,this._noIconGraphicsBkup.width,this._noIconGraphicsBkup.height),new openfl_geom_Point());
			this.dirty = true;
		}
	}
	,changeIcon: function(newIcon) {
		this.removeIcon();
		this.addIcon(newIcon);
	}
	,destroy: function() {
		this._noIconGraphicsBkup = flixel_util_FlxDestroyUtil.dispose(this._noIconGraphicsBkup);
		flixel_addons_ui_FlxUITypedButton.prototype.destroy.call(this);
	}
	,loadDefaultGraphic: function() {
	}
	,resetHelpers: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.resetHelpers.call(this);
		if(this.label != null) {
			var tmp = this.label;
			var tmp1 = this.get_width() | 0;
			tmp.set_width(this.label.frameWidth = tmp1);
			this.label.set_fieldWidth(this.label.get_width());
			this.label.set_size(this.label._defaultFormat.size | 0);
		}
	}
	,onDownHandler: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.onDownHandler.call(this);
		if(this.label != null) {
			if(this.toggled && this.down_toggle_style != null) {
				this.label.set_color(this.down_toggle_style.color);
				if(this.down_toggle_style.border != null) {
					this.label.set_borderStyle(this.down_toggle_style.border.style);
					this.label.set_borderColor(this.down_toggle_style.border.color);
					this.label.set_borderSize(this.down_toggle_style.border.size);
					this.label.set_borderQuality(this.down_toggle_style.border.quality);
				}
			} else if(!this.toggled && this.down_style != null) {
				this.label.set_color(this.down_style.color);
				if(this.down_style.border != null) {
					this.label.set_borderStyle(this.down_style.border.style);
					this.label.set_borderColor(this.down_style.border.color);
					this.label.set_borderSize(this.down_style.border.size);
					this.label.set_borderQuality(this.down_style.border.quality);
				}
			}
		}
	}
	,onOverHandler: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.onOverHandler.call(this);
		if(this.label != null) {
			if(this.toggled && this.over_toggle_style != null) {
				this.label.set_color(this.over_toggle_style.color);
				if(this.over_toggle_style.border != null) {
					this.label.set_borderStyle(this.over_toggle_style.border.style);
					this.label.set_borderColor(this.over_toggle_style.border.color);
					this.label.set_borderSize(this.over_toggle_style.border.size);
					this.label.set_borderQuality(this.over_toggle_style.border.quality);
				}
			} else if(!this.toggled && this.over_style != null) {
				this.label.set_color(this.over_style.color);
				if(this.over_style.border != null) {
					this.label.set_borderStyle(this.over_style.border.style);
					this.label.set_borderColor(this.over_style.border.color);
					this.label.set_borderSize(this.over_style.border.size);
					this.label.set_borderQuality(this.over_style.border.quality);
				}
			}
		}
	}
	,onOutHandler: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.onOutHandler.call(this);
		if(this.label != null) {
			if(this.toggled && this.up_toggle_style != null) {
				this.label.set_color(this.up_toggle_style.color);
				if(this.up_toggle_style.border != null) {
					this.label.set_borderStyle(this.up_toggle_style.border.style);
					this.label.set_borderColor(this.up_toggle_style.border.color);
					this.label.set_borderSize(this.up_toggle_style.border.size);
					this.label.set_borderQuality(this.up_toggle_style.border.quality);
				}
			} else if(!this.toggled && this.up_style != null) {
				this.label.set_color(this.up_style.color);
				if(this.up_style.border != null) {
					this.label.set_borderStyle(this.up_style.border.style);
					this.label.set_borderColor(this.up_style.border.color);
					this.label.set_borderSize(this.up_style.border.size);
					this.label.set_borderQuality(this.up_style.border.quality);
				}
			}
		}
	}
	,onUpHandler: function() {
		flixel_addons_ui_FlxUITypedButton.prototype.onUpHandler.call(this);
		if(this.label != null) {
			if(this.toggled && this.up_toggle_style != null) {
				this.label.set_color(this.up_toggle_style.color);
				if(this.up_toggle_style.border != null) {
					this.label.set_borderStyle(this.up_toggle_style.border.style);
					this.label.set_borderColor(this.up_toggle_style.border.color);
					this.label.set_borderSize(this.up_toggle_style.border.size);
					this.label.set_borderQuality(this.up_toggle_style.border.quality);
				}
			} else if(!this.toggled && this.up_style != null) {
				this.label.set_color(this.up_style.color);
				if(this.up_style.border != null) {
					this.label.set_borderStyle(this.up_style.border.style);
					this.label.set_borderColor(this.up_style.border.color);
					this.label.set_borderSize(this.up_style.border.size);
					this.label.set_borderQuality(this.up_style.border.quality);
				}
			}
		}
	}
	,__class__: flixel_addons_ui_FlxUIButton
});
var flixel_addons_ui_FlxUICheckBox = function(X,Y,Box,Check,Label,LabelW,Params,Callback) {
	if(LabelW == null) {
		LabelW = 100;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.skipButtonUpdate = false;
	this.box_space = 2;
	this.textY = 0;
	this.textX = 0;
	this.checkbox_dirty = false;
	this.textIsClickable = true;
	this.checked = false;
	this.max_width = -1;
	flixel_addons_ui_FlxUIGroup.call(this);
	this.callback = Callback;
	this.set_params(Params);
	if(Box == null) {
		Box = "flixel/flixel-ui/img/check_box.png";
	}
	if(((Box) instanceof flixel_FlxSprite)) {
		this.box = Box;
	} else {
		this.box = new flixel_FlxSprite();
		this.box.loadGraphic(Box,true);
	}
	this.button = new flixel_addons_ui_FlxUIButton(0,0,Label,$bind(this,this._clickCheck));
	this.button.label.setFormat(null,8,16777215,"left",flixel_text_FlxTextBorderStyle.OUTLINE);
	this.button.label.set_fieldWidth(LabelW);
	this.button.up_color = 16777215;
	this.button.down_color = 16777215;
	this.button.over_color = 16777215;
	this.button.up_toggle_color = 16777215;
	this.button.down_toggle_color = 16777215;
	this.button.over_toggle_color = 16777215;
	this.button.loadGraphicSlice9(["","",""],this.box.get_width() + this.box_space + LabelW | 0,this.box.get_height() | 0);
	this.max_width = this.box.get_width() + this.box_space + LabelW | 0;
	this.button.onUp.callback = $bind(this,this._clickCheck);
	if(Check == null) {
		Check = "flixel/flixel-ui/img/check_mark.png";
	}
	if(((Check) instanceof flixel_FlxSprite)) {
		this.mark = Check;
	} else {
		this.mark = new flixel_FlxSprite();
		this.mark.loadGraphic(Check);
	}
	this.add(this.box);
	this.add(this.mark);
	this.add(this.button);
	this.anchorLabelX();
	this.anchorLabelY();
	this.set_checked(false);
	this.button.setAllLabelOffsets(0,0);
	this.set_x(X);
	this.set_y(Y);
	this.set_textX(0);
	this.set_textY(0);
};
$hxClasses["flixel.addons.ui.FlxUICheckBox"] = flixel_addons_ui_FlxUICheckBox;
flixel_addons_ui_FlxUICheckBox.__name__ = "flixel.addons.ui.FlxUICheckBox";
flixel_addons_ui_FlxUICheckBox.__interfaces__ = [flixel_addons_ui_interfaces_ICursorPointable,flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIClickable,flixel_addons_ui_interfaces_ILabeled];
flixel_addons_ui_FlxUICheckBox.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUICheckBox.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	box: null
	,mark: null
	,button: null
	,max_width: null
	,checked: null
	,params: null
	,textIsClickable: null
	,checkbox_dirty: null
	,textX: null
	,textY: null
	,box_space: null
	,skipButtonUpdate: null
	,callback: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		this.button.set_skipButtonUpdate(this.skipButtonUpdate);
		return this.skipButtonUpdate;
	}
	,set_params: function(p) {
		this.params = p;
		if(this.params == null) {
			this.params = [];
		}
		var nb = { name : "checked", value : false};
		this.params.push(nb);
		return this.params;
	}
	,set_color: function(Value) {
		if(this.button != null) {
			this.button.label.set_color(Value);
		}
		return flixel_addons_ui_FlxUIGroup.prototype.set_color.call(this,Value);
	}
	,setLabel: function(t) {
		if(this.button == null) {
			return null;
		}
		this.button.set_label(t);
		return this.button.label;
	}
	,getLabel: function() {
		if(this.button == null) {
			return null;
		}
		return this.button.label;
	}
	,set_visible: function(Value) {
		this.visible = Value;
		return this.visible;
	}
	,anchorTime: function(f) {
		this.anchorLabelY();
	}
	,set_textX: function(n) {
		this.textX = n;
		this.anchorLabelX();
		return this.textX;
	}
	,set_textY: function(n) {
		this.textY = n;
		this.anchorLabelY();
		return this.textY;
	}
	,anchorLabelX: function() {
		if(this.button != null) {
			this.button.label.offset.set_x(-(this.box.get_width() + this.box_space + this.textX));
		}
	}
	,anchorLabelY: function() {
		if(this.button != null) {
			this.button.set_y(this.box.y + (this.box.get_height() - this.button.get_height()) / 2 + this.textY);
		}
	}
	,destroy: function() {
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
		if(this.mark != null) {
			this.mark.destroy();
			this.mark = null;
		}
		if(this.box != null) {
			this.box.destroy();
			this.box = null;
		}
		if(this.button != null) {
			this.button.destroy();
			this.button = null;
		}
	}
	,get_text: function() {
		return this.button.label.text;
	}
	,set_text: function(value) {
		this.button.label.set_text(value);
		this.checkbox_dirty = true;
		return value;
	}
	,update: function(elapsed) {
		flixel_addons_ui_FlxUIGroup.prototype.update.call(this,elapsed);
		if(this.checkbox_dirty) {
			if(this.button.label != null) {
				if(((this.button.label) instanceof flixel_addons_ui_FlxUIText)) {
					var ftu = this.button.label;
					ftu.drawFrame();
				}
				this.anchorLabelX();
				this.anchorLabelY();
				this.button.set_width(this.box.frameWidth + this.box_space + this.button.label.textField.get_textWidth());
				this.checkbox_dirty = false;
			}
		}
	}
	,set_checked: function(b) {
		this.mark.set_visible(b);
		return this.checked = b;
	}
	,_clickCheck: function() {
		if(!this.visible) {
			return;
		}
		this.set_checked(!this.checked);
		if(this.callback != null) {
			this.callback();
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("click_check_box",this,this.checked,this.params);
		}
	}
	,__class__: flixel_addons_ui_FlxUICheckBox
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_text:"set_text",get_text:"get_text",set_skipButtonUpdate:"set_skipButtonUpdate",set_textY:"set_textY",set_textX:"set_textX",set_params:"set_params",set_checked:"set_checked"})
});
var flixel_addons_ui_FlxUICursor = function(Callback,InputMethod,DefaultKeys,Asset) {
	if(DefaultKeys == null) {
		DefaultKeys = 1;
	}
	if(InputMethod == null) {
		InputMethod = 1;
	}
	this._clickTime = 0;
	this._clickPressed = false;
	this.lastMouseY = 0;
	this.lastMouseX = 0;
	this.inputMethod = 0;
	this.dispatchEvents = true;
	this.gamepadAutoConnect = flixel_addons_ui_GamepadAutoConnectPreference.FirstActive;
	this.listIndex = 0;
	this.location = -1;
	this.wrap = true;
	if(Asset == null) {
		if(flixel_FlxG.height < 400) {
			Asset = "flixel/flixel-ui/img/finger_small.png";
		} else {
			Asset = "flixel/flixel-ui/img/finger_big.png";
		}
	}
	flixel_addons_ui_FlxUISprite.call(this,0,0,Asset);
	this.inputMethod = InputMethod;
	this._lists = [{ x : 0, y : 0, width : 0, height : 0, widgets : []}];
	this._widgets = this._lists[0].widgets;
	this.anchor = new flixel_addons_ui_Anchor(-2,0,"left","center","right","center");
	this.setDefaultKeys(DefaultKeys);
	this.callback = Callback;
	this.scrollFactor.set(0,0);
	if(flixel_FlxG.mouse != null && ((flixel_FlxG.mouse) instanceof flixel_addons_ui_FlxUIMouse) == false) {
		this._newMouse = new flixel_addons_ui_FlxUIMouse(flixel_FlxG.mouse.cursorContainer);
		flixel_FlxG.set_mouse(this._newMouse);
	} else {
		this._newMouse = flixel_FlxG.mouse;
	}
};
$hxClasses["flixel.addons.ui.FlxUICursor"] = flixel_addons_ui_FlxUICursor;
flixel_addons_ui_FlxUICursor.__name__ = "flixel.addons.ui.FlxUICursor";
flixel_addons_ui_FlxUICursor.__super__ = flixel_addons_ui_FlxUISprite;
flixel_addons_ui_FlxUICursor.prototype = $extend(flixel_addons_ui_FlxUISprite.prototype,{
	callback: null
	,wrap: null
	,location: null
	,listIndex: null
	,ignoreNextInput: null
	,findVisibleLocation: function(loc,forwardIfInvisible,wrap) {
		if(wrap == null) {
			wrap = true;
		}
		if(forwardIfInvisible == null) {
			forwardIfInvisible = true;
		}
		this.set_location(loc);
		if(this.location == -1) {
			return;
		}
		var wrapped = false;
		while(this._widgets[this.location] == null || this._widgets[this.location].visible == false) if(forwardIfInvisible) {
			if(this.location == this._widgets.length - 1) {
				if(wrap) {
					if(!wrapped) {
						wrapped = true;
						this.set_location(0);
					} else {
						this.set_location(-1);
						return;
					}
				} else {
					this.set_location(-1);
					return;
				}
			} else {
				var _g = this;
				_g.set_location(_g.location + 1);
			}
		} else if(this.location == 0) {
			if(wrap) {
				if(!wrapped) {
					wrapped = true;
					this.set_location(this._widgets.length - 1);
				} else {
					this.set_location(-1);
					return;
				}
			} else {
				this.set_location(-1);
				return;
			}
		} else {
			var _g1 = this;
			_g1.set_location(_g1.location - 1);
		}
	}
	,getCurrentWidget: function() {
		if(this._widgets != null && this.location >= 0 && this.location < this._widgets.length) {
			return this._widgets[this.location];
		}
		return null;
	}
	,set_listIndex: function(i) {
		if(i >= this._lists.length) {
			i = this._lists.length - 1;
		} else if(i < 0) {
			i = 0;
		}
		this.listIndex = i;
		this.set_location(0);
		this._updateCursor();
		return this.listIndex;
	}
	,set_visible: function(b) {
		b = flixel_addons_ui_FlxUISprite.prototype.set_visible.call(this,b);
		return b;
	}
	,set_location: function(i) {
		if(i >= this._widgets.length) {
			i = this._widgets.length - 1;
		}
		this.location = i;
		this._updateCursor();
		return this.location;
	}
	,gamepadAutoConnect: null
	,set_gamepad: function(g) {
		this._gamepad = g;
		this.setDefaultKeys(this._defaultCode);
		var arr = [this.keysUp,this.keysDown,this.keysLeft,this.keysRight,this.keysClick];
		var _g = 0;
		while(_g < arr.length) {
			var list = arr[_g];
			++_g;
			if(list != null) {
				var _g1 = 0;
				while(_g1 < list.length) {
					var keys = list[_g1];
					++_g1;
					if(((keys) instanceof flixel_addons_ui_FlxMultiGamepad)) {
						var fmg = keys;
						fmg.gamepad = this._gamepad;
					}
				}
			}
		}
		return g;
	}
	,get_gamepad: function() {
		return this._gamepad;
	}
	,_gamepad: null
	,keysUp: null
	,keysDown: null
	,keysLeft: null
	,keysRight: null
	,keysClick: null
	,anchor: null
	,dispatchEvents: null
	,inputMethod: null
	,destroy: function() {
		flixel_addons_ui_FlxUISprite.prototype.destroy.call(this);
		if(flixel_FlxG.mouse == this._newMouse) {
			this._newMouse = null;
		}
		this.keysUp = flixel_util_FlxDestroyUtil.destroyArray(this.keysUp);
		this.keysDown = flixel_util_FlxDestroyUtil.destroyArray(this.keysDown);
		this.keysLeft = flixel_util_FlxDestroyUtil.destroyArray(this.keysLeft);
		this.keysRight = flixel_util_FlxDestroyUtil.destroyArray(this.keysRight);
		this.keysClick = flixel_util_FlxDestroyUtil.destroyArray(this.keysClick);
		this.anchor = flixel_util_FlxDestroyUtil.destroy(this.anchor);
		var _g = 0;
		var _g1 = this._lists;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			flixel_addons_ui_U.clearArraySoft(l.widgets);
		}
		flixel_addons_ui_U.clearArraySoft(this._lists);
		this._widgets = null;
	}
	,update: function(elapsed) {
		if(this.get_gamepad() == null) {
			var g = this.getGamepad(false);
			if(g != null) {
				this.set_gamepad(g);
			}
		}
		if(this.lastMouseX != flixel_FlxG.mouse.x || this.lastMouseY != flixel_FlxG.mouse.y) {
			var oldVis = this.visible;
			this.jumpToXY(flixel_FlxG.mouse.x,flixel_FlxG.mouse.y);
			this.set_visible(oldVis);
			this.lastMouseX = flixel_FlxG.mouse.x;
			this.lastMouseY = flixel_FlxG.mouse.y;
		}
		this._checkKeys();
		this._clickTime += elapsed;
		flixel_addons_ui_FlxUISprite.prototype.update.call(this,elapsed);
	}
	,addWidgetsFromUI: function(ui) {
		if(ui.cursorLists != null) {
			var _g = 0;
			var _g1 = ui.cursorLists;
			while(_g < _g1.length) {
				var list = _g1[_g];
				++_g;
				this.addWidgetList(list);
			}
			this._widgets = this._lists[0].widgets;
			this.set_location(0);
			this.set_listIndex(0);
		} else {
			var _g = 0;
			var _g1 = ui.group.members;
			while(_g < _g1.length) {
				var widget = _g1[_g];
				++_g;
				if(js_Boot.__implements(widget,flixel_addons_ui_interfaces_ICursorPointable) || ((widget) instanceof flixel_addons_ui_FlxUIGroup)) {
					this.addWidget(widget);
				}
			}
		}
	}
	,jumpTo: function(widget) {
		var listi = 0;
		var i = 0;
		if(this._lists != null) {
			var _g = 0;
			var _g1 = this._lists;
			while(_g < _g1.length) {
				var list = _g1[_g];
				++_g;
				i = list.widgets.indexOf(widget);
				if(i != -1) {
					this.set_listIndex(listi);
					this.set_location(i);
					return true;
				}
				++listi;
			}
		} else {
			i = this._widgets.indexOf(widget);
			this.set_location(i);
			return true;
		}
		return false;
	}
	,jumpToXY: function(X,Y) {
		var listi = 0;
		var bestd2 = Infinity;
		var bestli = -1;
		var besti = -1;
		if(this._lists != null) {
			var _g = 0;
			var _g1 = this._lists;
			while(_g < _g1.length) {
				var list = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = list.widgets.length;
				while(_g2 < _g3) {
					var i = _g2++;
					var w = list.widgets[i];
					if(w.visible == true && X >= w.x && Y >= w.y && X <= w.x + w.get_width() && Y <= w.y + w.get_height()) {
						var dx = w.x + w.get_width() / 2 - X;
						var dy = w.y + w.get_height() / 2 - Y;
						var d2 = dx * dx + dy * dy;
						if(d2 < bestd2) {
							bestd2 = d2;
							bestli = listi;
							besti = i;
						}
					}
				}
				++listi;
			}
			if(bestli != -1 && besti != -1) {
				this.set_listIndex(bestli);
				this.set_location(besti);
				return true;
			}
		} else {
			var _g = 0;
			var _g1 = this._widgets.length;
			while(_g < _g1) {
				var i = _g++;
				var w = this._widgets[i];
				if(w.visible == true && X >= w.x && Y >= w.y && X <= w.x + w.get_width() && Y <= w.y + w.get_height()) {
					var dx = w.x + w.get_width() / 2 - X;
					var dy = w.y + w.get_height() / 2 - Y;
					var d2 = dx * dx + dy * dy;
					if(d2 < bestd2) {
						bestd2 = d2;
						besti = i;
					}
				}
			}
			if(besti != -1) {
				this.set_location(besti);
				return true;
			}
		}
		return false;
	}
	,addWidgetList: function(list) {
		var _g = 0;
		var _g1 = this._lists;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(flixel_util_FlxArrayUtil.equals(l.widgets,list)) {
				return;
			}
		}
		var x1 = Infinity;
		var y1 = Infinity;
		var x2 = -Infinity;
		var y2 = -Infinity;
		var _g = 0;
		while(_g < list.length) {
			var w = list[_g];
			++_g;
			if(w.x < x1) {
				x1 = w.x;
			}
			if(w.y < y1) {
				y1 = w.y;
			}
			if(w.x + w.get_width() > x2) {
				x2 = w.x;
			}
			if(w.y + w.get_height() > y2) {
				y2 = w.y;
			}
		}
		var theList = null;
		if(this._lists.length == 1 && this._lists[0].widgets != null && this._lists[0].widgets.length == 0) {
			this._lists[0].widgets = [];
			this._lists[0].x = x1 | 0;
			this._lists[0].y = y1 | 0;
			this._lists[0].width = x2 - x1 | 0;
			this._lists[0].height = y2 - y1 | 0;
			theList = this._lists[0];
		} else {
			this._lists.push({ x : x1 | 0, y : y1 | 0, width : x2 - x1 | 0, height : y2 - y1 | 0, widgets : []});
			theList = this._lists[this._lists.length - 1];
		}
		var oldWidgets = this._widgets;
		this._widgets = theList.widgets;
		var _g = 0;
		while(_g < list.length) {
			var ifw = list[_g];
			++_g;
			this.addWidget(ifw);
		}
		this._widgets = oldWidgets;
		this._lists.sort($bind(this,this._sortXYWidgetList));
		var _g = 0;
		var _g1 = this._lists;
		while(_g < _g1.length) {
			var widgetList = _g1[_g];
			++_g;
			widgetList.widgets.sort($bind(this,this._sortXYVisible));
		}
	}
	,addWidget: function(widget) {
		if(js_Boot.__implements(widget,flixel_addons_ui_interfaces_ICursorPointable)) {
			this._widgets.push(widget);
		} else if(((widget) instanceof flixel_addons_ui_FlxUIGroup)) {
			var g = widget;
			var _g = 0;
			var _g1 = g.group.members;
			while(_g < _g1.length) {
				var member = _g1[_g];
				++_g;
				if(js_Boot.__implements(member,flixel_addons_ui_interfaces_IFlxUIWidget)) {
					this.addWidget(member);
				}
			}
		}
		this._widgets.sort($bind(this,this._sortXYVisible));
	}
	,sortWidgets: function(method,list) {
		if(list == null) {
			list = this._widgets;
		}
		switch(method._hx_index) {
		case 0:
			list.sort($bind(this,this._sortXYVisible));
			break;
		case 1:
			list.sort($bind(this,this._sortIDVisible));
			break;
		}
	}
	,clearWidgets: function() {
		flixel_util_FlxArrayUtil.clearArray(this._widgets);
	}
	,removeWidget: function(widget,list) {
		if(list == null) {
			list = this._widgets;
		}
		var value = false;
		if(list != null) {
			if(list.indexOf(widget) != -1) {
				value = HxOverrides.remove(list,widget);
				list.sort($bind(this,this._sortXYVisible));
			}
		}
		return value;
	}
	,setDefaultKeys: function(code) {
		this._defaultCode = code;
		this._clearKeys();
		this._newKeys();
		if((code & 1) == 1) {
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiKey(9,null,[16]));
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiKey(9,[16]));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiKey(13));
		}
		if((code & 256) == 256) {
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiKey(39));
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiKey(37));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiKey(40));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiKey(38));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiKey(13));
		}
		if((code & 16) == 16) {
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiKey(68));
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiKey(65));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiKey(83));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiKey(87));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiKey(13));
		}
		if((code & 4096) == 4096) {
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiKey(102));
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiKey(100));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiKey(98));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiKey(104));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiKey(13));
		}
		if(this.get_gamepad() == null) {
			this._gamepad = this.getGamepad();
		}
		if((code & 65536) == 65536) {
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),13));
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),14));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),12));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),11));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),0));
		}
		if((code & 268435456) == 268435456) {
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),4));
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),5));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),0));
		}
		if((code & 1048576) == 1048576) {
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 19, axis : flixel_addons_ui_XY.X, positive : false}));
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 19, axis : flixel_addons_ui_XY.X, positive : true}));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 19, axis : flixel_addons_ui_XY.Y, positive : false}));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 19, axis : flixel_addons_ui_XY.Y, positive : true}));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),0));
		}
		if((code & 16777216) == 16777216) {
			this._addToKeys(this.keysLeft,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 20, axis : flixel_addons_ui_XY.X, positive : false}));
			this._addToKeys(this.keysRight,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 20, axis : flixel_addons_ui_XY.X, positive : true}));
			this._addToKeys(this.keysUp,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 20, axis : flixel_addons_ui_XY.Y, positive : false}));
			this._addToKeys(this.keysDown,new flixel_addons_ui_FlxMultiGamepadAnalogStick(this.get_gamepad(),{ id : 20, axis : flixel_addons_ui_XY.Y, positive : true}));
			this._addToKeys(this.keysClick,new flixel_addons_ui_FlxMultiGamepad(this.get_gamepad(),0));
		}
	}
	,_lists: null
	,_widgets: null
	,_newMouse: null
	,lastMouseX: null
	,lastMouseY: null
	,_clickPressed: null
	,_defaultCode: null
	,_rightAnchor: null
	,_topAnchor: null
	,_leftAnchor: null
	,_bottomAnchor: null
	,_clickTime: null
	,getGamepad: function(exhaustive) {
		if(exhaustive == null) {
			exhaustive = true;
		}
		var gamepad;
		var _g = this.gamepadAutoConnect;
		switch(_g._hx_index) {
		case 0:
			gamepad = null;
			break;
		case 1:
			gamepad = flixel_FlxG.gamepads.getFirstActiveGamepad();
			break;
		case 2:
			gamepad = flixel_FlxG.gamepads.lastActive;
			break;
		case 3:
			var i = _g.i;
			gamepad = flixel_FlxG.gamepads._activeGamepads[i];
			break;
		}
		if(gamepad == null && exhaustive) {
			var _g = 0;
			var _g1 = flixel_FlxG.gamepads.get_numActiveGamepads();
			while(_g < _g1) {
				var i = _g++;
				gamepad = flixel_FlxG.gamepads._activeGamepads[i];
				if(gamepad != null) {
					return gamepad;
				}
			}
		}
		return gamepad;
	}
	,_sortIDVisible: function(a,b) {
		if(a.visible && !b.visible) {
			return -1;
		}
		if(b.visible && !a.visible) {
			return 1;
		}
		if(a.ID < b.ID) {
			return -1;
		}
		if(a.ID > b.ID) {
			return 1;
		}
		return 0;
	}
	,_sortXYWidgetList: function(a,b) {
		if(a.y < b.y) {
			return -1;
		}
		if(a.y > b.y) {
			return 1;
		}
		if(a.x < b.x) {
			return -1;
		}
		if(a.x > b.x) {
			return 1;
		}
		return 0;
	}
	,_sortXYVisible: function(a,b) {
		if(a.visible && !b.visible) {
			return -1;
		}
		if(b.visible && !a.visible) {
			return 1;
		}
		if(a.y < b.y) {
			return -1;
		}
		if(a.y > b.y) {
			return 1;
		}
		if(a.x < b.x) {
			return -1;
		}
		if(a.x > b.x) {
			return 1;
		}
		return 0;
	}
	,_addToKeys: function(keys,m) {
		var exists = false;
		var _g = 0;
		while(_g < keys.length) {
			var mk = keys[_g];
			++_g;
			if(m.equals(mk)) {
				exists = true;
				break;
			}
		}
		if(!exists) {
			keys.push(m);
		}
	}
	,_clearKeys: function() {
		flixel_addons_ui_U.clearArray(this.keysUp);
		this.keysUp = null;
		flixel_addons_ui_U.clearArray(this.keysDown);
		this.keysDown = null;
		flixel_addons_ui_U.clearArray(this.keysLeft);
		this.keysLeft = null;
		flixel_addons_ui_U.clearArray(this.keysRight);
		this.keysRight = null;
		flixel_addons_ui_U.clearArray(this.keysClick);
		this.keysClick = null;
	}
	,_newKeys: function() {
		this.keysUp = [];
		this.keysDown = [];
		this.keysLeft = [];
		this.keysRight = [];
		this.keysClick = [];
	}
	,_checkKeys: function() {
		var wasInvisible = this.visible == false;
		var lastLocation = this.location;
		var _g = 0;
		var _g1 = this.keysUp;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.justPressed()) {
				this._doInput(0,-1);
				break;
			}
		}
		var _g = 0;
		var _g1 = this.keysDown;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.justPressed()) {
				this._doInput(0,1);
				break;
			}
		}
		var _g = 0;
		var _g1 = this.keysLeft;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.justPressed()) {
				this._doInput(-1,0);
				break;
			}
		}
		var _g = 0;
		var _g1 = this.keysRight;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.justPressed()) {
				this._doInput(1,0);
				break;
			}
		}
		if(wasInvisible && this.visible && lastLocation != -1) {
			this.set_location(lastLocation);
		}
		if(this._clickKeysJustPressed()) {
			if(!this.ignoreNextInput) {
				this._clickPressed = true;
				this._clickTime = 0;
				this._doPress();
			} else {
				this.ignoreNextInput = false;
			}
		}
		if(this._clickKeysPressed()) {
			this._clickPressed = true;
			this._doMouseMove();
		} else if(this._clickTime > 0) {
			if(this._clickPressed) {
				this._doRelease();
				this._clickPressed = false;
			}
		}
	}
	,_clickKeysJustPressed: function() {
		var _g = 0;
		var _g1 = this.keysClick;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.justPressed()) {
				return true;
			}
		}
		return false;
	}
	,_clickKeysPressed: function() {
		var _g = 0;
		var _g1 = this.keysClick;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key.pressed()) {
				return true;
			}
		}
		return false;
	}
	,_getWidgetPoint: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var currWidget = this._widgets[this.location];
		if(currWidget == null) {
			return null;
		}
		var fo;
		var widgetPoint = null;
		if(((currWidget) instanceof flixel_FlxObject)) {
			fo = currWidget;
			widgetPoint = fo.getScreenPosition();
		}
		var _g = widgetPoint;
		_g.set_x(_g.x * Camera.totalScaleX);
		var _g = widgetPoint;
		_g.set_y(_g.y * Camera.totalScaleY);
		if(widgetPoint == null) {
			var X = currWidget.x;
			var Y = currWidget.y;
			if(Y == null) {
				Y = 0;
			}
			if(X == null) {
				X = 0;
			}
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			widgetPoint = point;
		}
		var _g = widgetPoint;
		_g.set_x(_g.x + currWidget.get_width() / 2);
		var _g = widgetPoint;
		_g.set_y(_g.y + currWidget.get_height() / 2);
		return widgetPoint;
	}
	,_doMouseMove: function(pt) {
		var dispose = false;
		if(pt == null) {
			pt = this._getWidgetPoint();
			if(pt == null) {
				return;
			}
			dispose = true;
		}
		if(this.dispatchEvents) {
			var _this = flixel_FlxG.mouse;
			_this._globalScreenX = pt.x / flixel_FlxG.scaleMode.scale.x | 0;
			_this._globalScreenY = pt.y / flixel_FlxG.scaleMode.scale.y | 0;
			_this.updatePositions();
			if(this._newMouse != null) {
				this._newMouse.updateGlobalScreenPosition = false;
			}
			var tmp = openfl_Lib.get_current().stage;
			var pt1 = pt.x;
			var pt2 = pt.y;
			var tmp1 = openfl_Lib.get_current().stage;
			var _this = flixel_FlxG.keys.pressed;
			var tmp2 = _this.keyManager.checkStatus(17,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			var tmp3 = _this.keyManager.checkStatus(18,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			tmp.dispatchEvent(new openfl_events_MouseEvent("mouseMove",true,false,pt1,pt2,tmp1,tmp2,tmp3,_this.keyManager.checkStatus(16,_this.status)));
		}
		if(dispose) {
			pt.put();
		}
	}
	,_doPress: function(pt) {
		var currWidget = this._widgets[this.location];
		if(currWidget == null) {
			return;
		}
		var dispose = false;
		if(pt == null) {
			pt = this._getWidgetPoint();
			if(pt == null) {
				return;
			}
			dispose = true;
		}
		if(this.dispatchEvents) {
			var rawMouseX = pt.x * flixel_FlxG.camera.zoom;
			var rawMouseY = pt.y * flixel_FlxG.camera.zoom;
			var tmp = openfl_Lib.get_current().stage;
			var tmp1 = openfl_Lib.get_current().stage;
			var _this = flixel_FlxG.keys.pressed;
			var tmp2 = _this.keyManager.checkStatus(17,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			var tmp3 = _this.keyManager.checkStatus(18,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			tmp.dispatchEvent(new openfl_events_MouseEvent("mouseDown",true,false,rawMouseX,rawMouseY,tmp1,tmp2,tmp3,_this.keyManager.checkStatus(16,_this.status)));
		}
		if(this.callback != null) {
			this.callback("cursor_down",currWidget);
		}
		if(dispose) {
			pt.put();
		}
	}
	,_doRelease: function(pt) {
		var currWidget = this._widgets[this.location];
		if(currWidget == null) {
			return;
		}
		var dispose = false;
		if(pt == null) {
			pt = this._getWidgetPoint();
			if(pt == null) {
				return;
			}
			dispose = true;
		}
		var rawMouseX = pt.x * flixel_FlxG.camera.zoom;
		var rawMouseY = pt.y * flixel_FlxG.camera.zoom;
		if(this.dispatchEvents) {
			var tmp = openfl_Lib.get_current().stage;
			var tmp1 = openfl_Lib.get_current().stage;
			var _this = flixel_FlxG.keys.pressed;
			var tmp2 = _this.keyManager.checkStatus(17,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			var tmp3 = _this.keyManager.checkStatus(18,_this.status);
			var _this = flixel_FlxG.keys.pressed;
			tmp.dispatchEvent(new openfl_events_MouseEvent("mouseUp",true,false,rawMouseX,rawMouseY,tmp1,tmp2,tmp3,_this.keyManager.checkStatus(16,_this.status)));
			if(this._clickPressed) {
				var tmp = openfl_Lib.get_current().stage;
				var tmp1 = openfl_Lib.get_current().stage;
				var _this = flixel_FlxG.keys.pressed;
				var tmp2 = _this.keyManager.checkStatus(17,_this.status);
				var _this = flixel_FlxG.keys.pressed;
				var tmp3 = _this.keyManager.checkStatus(18,_this.status);
				var _this = flixel_FlxG.keys.pressed;
				tmp.dispatchEvent(new openfl_events_MouseEvent("click",true,false,rawMouseX,rawMouseY,tmp1,tmp2,tmp3,_this.keyManager.checkStatus(16,_this.status)));
			}
		}
		if(this.callback != null) {
			this.callback("cursor_click",currWidget);
		}
		if(dispose) {
			pt.put();
		}
		if(this._newMouse != null) {
			this._newMouse.updateGlobalScreenPosition = true;
			var _this = this._newMouse;
			var newX = flixel_FlxG.game.get_mouseX() | 0;
			var newY = flixel_FlxG.game.get_mouseY() | 0;
			_this._globalScreenX = newX / flixel_FlxG.scaleMode.scale.x | 0;
			_this._globalScreenY = newY / flixel_FlxG.scaleMode.scale.y | 0;
			_this.updatePositions();
		}
	}
	,_findNextY: function(Y,indexValue,listWidget,listLists) {
		var currX = 0;
		var currY = 0;
		var length = 0;
		if(listWidget != null) {
			currX = listWidget[indexValue].x | 0;
			currY = listWidget[indexValue].y | 0;
			length = listWidget.length;
		} else if(listLists != null) {
			currX = listLists[indexValue].x;
			currY = listLists[indexValue].y;
			length = listLists.length;
		}
		var nextX = 0;
		var nextY = 0;
		var dx = Infinity;
		var dy = Infinity;
		var bestdx = dx;
		var bestdy = dy;
		var besti = -1;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			if(i != indexValue) {
				if(listWidget != null) {
					nextX = listWidget[i].x | 0;
					nextY = listWidget[i].y | 0;
				} else if(listLists != null) {
					nextX = listLists[i].x;
					nextY = listLists[i].y;
				}
				dy = nextY - currY;
				if((dy < 0 ? -1 : 1) == (Y < 0 ? -1 : 1) && dy != 0) {
					dy = Math.abs(dy);
					if(dy < bestdy) {
						bestdy = dy;
						bestdx = Math.abs(currX - nextX);
						besti = i;
					} else if(dy == bestdy) {
						dx = Math.abs(currX - nextX);
						if(dx < bestdx) {
							bestdx = dx;
							besti = i;
						}
					}
				}
			}
		}
		return besti;
	}
	,_wrapX: function(X,indexValue,listLength) {
		if(indexValue + X < 0) {
			indexValue = indexValue + X + listLength;
		} else if(indexValue + X >= listLength) {
			indexValue = indexValue + X - listLength;
		}
		return indexValue;
	}
	,_wrapY: function(Y,indexValue,listWidget,listLists) {
		var dx = Infinity;
		var dy = Infinity;
		var bestdx = dx;
		var bestdy = dy;
		var besti = -1;
		bestdx = Infinity;
		bestdy = 0;
		var length = 0;
		var currX = 0;
		var currY = 0;
		if(listWidget != null) {
			length = listWidget.length;
			currX = listWidget[indexValue].x | 0;
			currY = listWidget[indexValue].y | 0;
		}
		if(listLists != null) {
			length = listLists.length;
			currX = listLists[indexValue].x;
			currY = listLists[indexValue].y;
		}
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			if(i != this.location) {
				var xx = 0;
				var yy = 0;
				if(listWidget != null) {
					xx = listWidget[i].x | 0;
					yy = listWidget[i].y | 0;
				} else if(listLists != null) {
					xx = listLists[i].x | 0;
					yy = listLists[i].y | 0;
				}
				dy = yy - currY;
				if((dy < 0 ? -1 : 1) == (Y < 0 ? -1 : 1) == false && dy != 0) {
					dy = Math.abs(dy);
					if(dy > bestdy) {
						bestdy = dy;
						bestdx = Math.abs(currX - xx);
						besti = i;
					} else if(dy == bestdy) {
						dx = Math.abs(currX - xx);
						if(dx < bestdx) {
							bestdx = dx;
							besti = i;
						}
					}
				}
			}
		}
		if(besti != -1) {
			indexValue = besti;
		}
		return indexValue;
	}
	,_doInput: function(X,Y,recursion) {
		if(recursion == null) {
			recursion = 0;
		}
		if(this.ignoreNextInput) {
			this.ignoreNextInput = false;
			return;
		}
		var currWidget = null;
		if(Y == 0) {
			if(this.location + X >= 0 && this.location + X < this._widgets.length) {
				this.set_location(this.location + X);
			} else if(this.wrap) {
				if(this._lists.length == 1) {
					this.set_location(this._wrapX(X,this.location,this._widgets.length));
				} else {
					if(this.listIndex + X >= 0 && this.listIndex + X < this._lists.length) {
						this.set_listIndex(this.listIndex + X);
					} else {
						this.set_listIndex(this._wrapX(X,this.listIndex,this._lists.length));
					}
					if(X == -1) {
						this.set_location(this._widgets.length - 1);
					}
				}
			}
			currWidget = this._widgets[this.location];
		} else {
			var nextY = this._findNextY(Y,this.location,this._widgets,null);
			if(nextY != -1) {
				this.set_location(nextY);
				currWidget = this._widgets[this.location];
			} else if(this.wrap) {
				if(this._lists.length == 1) {
					this.set_location(this._wrapY(Y,this.location,this._widgets,null));
					currWidget = this._widgets[this.location];
				} else {
					var nextListY = this._findNextY(Y,this.listIndex,null,this._lists);
					if(nextListY != -1) {
						this.set_listIndex(nextListY);
						currWidget = this._widgets[this.location];
					} else {
						this.set_listIndex(this._wrapY(Y,this.listIndex,null,this._lists));
					}
					if(Y == -1) {
						this.set_location(this._widgets.length - 1);
					}
				}
				currWidget = this._widgets[this.location];
			}
		}
		if(currWidget != null && this._widgets != null) {
			if(currWidget.visible == false && recursion < this._widgets.length) {
				this._doInput(X,Y,recursion + 1);
				return;
			}
		}
		if(this.callback != null) {
			this.callback("cursor_jump",currWidget);
		}
	}
	,_updateCursor: function() {
		this._widgets = this._lists[this.listIndex].widgets;
		if(this.location < 0 || this._lists == null || this._widgets == null) {
			this.set_visible(false);
			return;
		}
		this.set_visible(this.set_active(true));
		var currWidget = this._widgets[this.location];
		var flippedX = false;
		var flippedY = false;
		if(currWidget != null) {
			var target = currWidget;
			if(((target) instanceof flixel_FlxSprite)) {
				var fs = target;
				if(fs != null && fs.scrollFactor != null) {
					this.scrollFactor.set(fs.scrollFactor.x,fs.scrollFactor.y);
				}
			}
			if(((currWidget) instanceof flixel_addons_ui_FlxUICheckBox)) {
				var check = target;
				target = check.box;
			}
			this.anchor.anchorThing(this,target);
			if(this.x < 0) {
				this._flipAnchor("left",target);
				flippedX = true;
			} else if(this.x > flixel_FlxG.width + this.get_width()) {
				this._flipAnchor("right",target);
				flippedX = true;
			}
			if(this.y < 0) {
				this._flipAnchor("top",target);
				flippedY = true;
			} else if(this.y > flixel_FlxG.height + this.get_height()) {
				this._flipAnchor("bottom",target);
				flippedY = true;
			}
			this.set_flipX(flippedX);
			this.set_flipY(flippedY);
		}
	}
	,_flipAnchor: function(AnchorDir,destination) {
		var theAnchor = null;
		switch(AnchorDir) {
		case "bottom":
			if(this.anchor.y.side == "bottom") {
				this._bottomAnchor = this.anchor.getFlipped(true,false,this._bottomAnchor);
				theAnchor = this._bottomAnchor;
			}
			break;
		case "left":
			if(this.anchor.x.side == "left") {
				this._leftAnchor = this.anchor.getFlipped(true,false,this._leftAnchor);
				theAnchor = this._leftAnchor;
			}
			break;
		case "right":
			if(this.anchor.x.side == "right") {
				this._topAnchor = this.anchor.getFlipped(true,false,this._rightAnchor);
				theAnchor = this._rightAnchor;
			}
			break;
		case "top":
			if(this.anchor.y.side == "top") {
				this._topAnchor = this.anchor.getFlipped(true,false,this._topAnchor);
				theAnchor = this._topAnchor;
			}
			break;
		}
		if(theAnchor != null) {
			theAnchor.anchorThing(this,destination);
		}
	}
	,__class__: flixel_addons_ui_FlxUICursor
	,__properties__: $extend(flixel_addons_ui_FlxUISprite.prototype.__properties__,{set_gamepad:"set_gamepad",get_gamepad:"get_gamepad",set_listIndex:"set_listIndex",set_location:"set_location"})
});
var flixel_addons_ui_GamepadAutoConnectPreference = $hxEnums["flixel.addons.ui.GamepadAutoConnectPreference"] = { __ename__ : "flixel.addons.ui.GamepadAutoConnectPreference", __constructs__ : ["Never","FirstActive","LastActive","GamepadID"]
	,Never: {_hx_index:0,__enum__:"flixel.addons.ui.GamepadAutoConnectPreference",toString:$estr}
	,FirstActive: {_hx_index:1,__enum__:"flixel.addons.ui.GamepadAutoConnectPreference",toString:$estr}
	,LastActive: {_hx_index:2,__enum__:"flixel.addons.ui.GamepadAutoConnectPreference",toString:$estr}
	,GamepadID: ($_=function(i) { return {_hx_index:3,i:i,__enum__:"flixel.addons.ui.GamepadAutoConnectPreference",toString:$estr}; },$_.__params__ = ["i"],$_)
};
var flixel_addons_ui_SortMethod = $hxEnums["flixel.addons.ui.SortMethod"] = { __ename__ : "flixel.addons.ui.SortMethod", __constructs__ : ["XY","ID"]
	,XY: {_hx_index:0,__enum__:"flixel.addons.ui.SortMethod",toString:$estr}
	,ID: {_hx_index:1,__enum__:"flixel.addons.ui.SortMethod",toString:$estr}
};
var flixel_addons_ui_FlxUIDropDownMenu = function(X,Y,DataList,Callback,Header,DropPanel,ButtonList,UIControlCallback) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.dropDirection = flixel_addons_ui_FlxUIDropDownMenuDropDirection.Automatic;
	this.list = [];
	flixel_addons_ui_FlxUIGroup.call(this,X,Y);
	this.callback = Callback;
	this.header = Header;
	this.dropPanel = DropPanel;
	if(this.header == null) {
		this.header = new flixel_addons_ui_FlxUIDropDownHeader();
	}
	if(this.dropPanel == null) {
		var rect = new openfl_geom_Rectangle(0,0,this.header.background.get_width(),this.header.background.get_height());
		this.dropPanel = new flixel_addons_ui_FlxUI9SliceSprite(0,0,"flixel/flixel-ui/img/box.png",rect,[1,1,14,14]);
	}
	if(DataList != null) {
		var _g = 0;
		var _g1 = DataList.length;
		while(_g < _g1) {
			var i = _g++;
			var data = DataList[i];
			this.list.push(this.makeListButton(i,data.label,data.name));
		}
		this.selectSomething(DataList[0].name,DataList[0].label);
	} else if(ButtonList != null) {
		var _g = 0;
		while(_g < ButtonList.length) {
			var btn = ButtonList[_g];
			++_g;
			this.list.push(btn);
			btn.resize(this.header.background.get_width(),this.header.background.get_height());
			btn.set_x(1);
		}
	}
	this.updateButtonPositions();
	this.dropPanel.resize(this.header.background.get_width(),this.getPanelHeight());
	this.dropPanel.set_visible(false);
	this.add(this.dropPanel);
	var _g = 0;
	var _g1 = this.list;
	while(_g < _g1.length) {
		var btn = _g1[_g];
		++_g;
		this.add(btn);
		btn.set_visible(false);
	}
	this.header.button.onUp.callback = $bind(this,this.onDropdown);
	this.add(this.header);
};
$hxClasses["flixel.addons.ui.FlxUIDropDownMenu"] = flixel_addons_ui_FlxUIDropDownMenu;
flixel_addons_ui_FlxUIDropDownMenu.__name__ = "flixel.addons.ui.FlxUIDropDownMenu";
flixel_addons_ui_FlxUIDropDownMenu.__interfaces__ = [flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIClickable,flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_FlxUIDropDownMenu.makeStrIdLabelArray = function(StringArray,UseIndexID) {
	if(UseIndexID == null) {
		UseIndexID = false;
	}
	var strIdArray = [];
	var _g = 0;
	var _g1 = StringArray.length;
	while(_g < _g1) {
		var i = _g++;
		var ID = StringArray[i];
		if(UseIndexID) {
			ID = i == null ? "null" : "" + i;
		}
		strIdArray[i] = new flixel_addons_ui_StrNameLabel(ID,StringArray[i]);
	}
	return strIdArray;
};
flixel_addons_ui_FlxUIDropDownMenu.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUIDropDownMenu.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	skipButtonUpdate: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		this.header.button.set_skipButtonUpdate(b);
		return b;
	}
	,_selectedId: null
	,_selectedLabel: null
	,get_selectedId: function() {
		return this._selectedId;
	}
	,set_selectedId: function(str) {
		if(this._selectedId == str) {
			return str;
		}
		var i = 0;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var btn = _g1[_g];
			++_g;
			if(btn != null && btn.name == str) {
				var item = this.list[i];
				this._selectedId = str;
				if(item.label != null) {
					this._selectedLabel = item.label.text;
					this.header.text.set_text(item.label.text);
				} else {
					this._selectedLabel = "";
					this.header.text.set_text("");
				}
				return str;
			}
			++i;
		}
		return str;
	}
	,get_selectedLabel: function() {
		return this._selectedLabel;
	}
	,set_selectedLabel: function(str) {
		if(this._selectedLabel == str) {
			return str;
		}
		var i = 0;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var btn = _g1[_g];
			++_g;
			if(btn.label.text == str) {
				var item = this.list[i];
				this._selectedId = item.name;
				this._selectedLabel = str;
				this.header.text.set_text(str);
				return str;
			}
			++i;
		}
		return str;
	}
	,header: null
	,list: null
	,dropPanel: null
	,params: null
	,set_params: function(p) {
		return this.params = p;
	}
	,dropDirection: null
	,set_dropDirection: function(dropDirection) {
		this.dropDirection = dropDirection;
		this.updateButtonPositions();
		return dropDirection;
	}
	,callback: null
	,updateButtonPositions: function() {
		var buttonHeight = this.header.background.get_height();
		this.dropPanel.set_y(this.header.background.y);
		if(this.dropsUp()) {
			var _g = this.dropPanel;
			_g.set_y(_g.y - this.getPanelHeight());
		} else {
			var _g = this.dropPanel;
			_g.set_y(_g.y + buttonHeight);
		}
		var offset = this.dropPanel.y;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			button.set_y(offset);
			offset += buttonHeight;
		}
	}
	,set_visible: function(Value) {
		var vDropPanel = this.dropPanel.visible;
		var vButtons = [];
		var _g = 0;
		var _g1 = this.list.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.list[i] != null) {
				vButtons.push(this.list[i].visible);
			} else {
				vButtons.push(false);
			}
		}
		flixel_addons_ui_FlxUIGroup.prototype.set_visible.call(this,Value);
		this.dropPanel.set_visible(vDropPanel);
		var _g = 0;
		var _g1 = this.list.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.list[i] != null) {
				this.list[i].set_visible(vButtons[i]);
			}
		}
		return Value;
	}
	,dropsUp: function() {
		if(this.dropDirection != flixel_addons_ui_FlxUIDropDownMenuDropDirection.Up) {
			if(this.dropDirection == flixel_addons_ui_FlxUIDropDownMenuDropDirection.Automatic) {
				return this.exceedsHeight();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,exceedsHeight: function() {
		return this.y + this.getPanelHeight() + this.header.background.get_height() > flixel_FlxG.height;
	}
	,getPanelHeight: function() {
		return this.list.length * this.header.background.get_height();
	}
	,setData: function(DataList) {
		var i = 0;
		if(DataList != null) {
			var _g = 0;
			while(_g < DataList.length) {
				var data = DataList[_g];
				++_g;
				var recycled = false;
				if(this.list != null) {
					if(i <= this.list.length - 1) {
						var btn = this.list[i];
						if(btn != null) {
							btn.label.set_text(data.label);
							this.list[i].name = data.name;
							recycled = true;
						}
					}
				} else {
					this.list = [];
				}
				if(!recycled) {
					var t = this.makeListButton(i,data.label,data.name);
					this.list.push(t);
					this.add(t);
					t.set_visible(false);
				}
				++i;
			}
			if(this.list.length > DataList.length) {
				var _g = DataList.length;
				var _g1 = this.list.length;
				while(_g < _g1) {
					var j = _g++;
					var b = this.list.pop();
					b.set_visible(false);
					b.set_active(false);
					this.remove(b,true);
					b.destroy();
					b = null;
				}
			}
			this.selectSomething(DataList[0].name,DataList[0].label);
		}
		this.dropPanel.resize(this.header.background.get_width(),this.getPanelHeight());
		this.updateButtonPositions();
	}
	,selectSomething: function(name,label) {
		this.header.text.set_text(label);
		this.set_selectedId(name);
		this.set_selectedLabel(label);
	}
	,makeListButton: function(i,Label,Name) {
		var t = new flixel_addons_ui_FlxUIButton(0,0,Label);
		t.broadcastToFlxUI = false;
		var _g = $bind(this,this.onClickItem);
		var i1 = i;
		var tmp = function() {
			_g(i1);
		};
		t.onUp.callback = tmp;
		t.name = Name;
		t.loadGraphicSlice9(["flixel/flixel-ui/img/invis.png","flixel/flixel-ui/img/hilight.png","flixel/flixel-ui/img/hilight.png"],this.header.background.get_width() | 0,this.header.background.get_height() | 0,[[1,1,3,3],[1,1,3,3],[1,1,3,3]],0);
		var _g1 = t.labelOffsets[2];
		_g1.set_y(_g1.y - 1);
		t.up_color = -16777216;
		t.over_color = -1;
		t.down_color = -1;
		t.resize(this.header.background.get_width() - 2,this.header.background.get_height() - 1);
		t.label.set_alignment("left");
		t.autoCenterLabel();
		t.set_x(1);
		var _g1 = 0;
		var _g2 = t.labelOffsets;
		while(_g1 < _g2.length) {
			var offset = _g2[_g1];
			++_g1;
			var _g3 = offset;
			_g3.set_x(_g3.x + 2);
		}
		return t;
	}
	,changeLabelByIndex: function(i,NewLabel) {
		var btn = this.getBtnByIndex(i);
		if(btn != null && btn.label != null) {
			btn.label.set_text(NewLabel);
		}
	}
	,changeLabelById: function(name,NewLabel) {
		var btn = this.getBtnById(name);
		if(btn != null && btn.label != null) {
			btn.label.set_text(NewLabel);
		}
	}
	,getBtnByIndex: function(i) {
		if(i >= 0 && i < this.list.length) {
			return this.list[i];
		}
		return null;
	}
	,getBtnById: function(name) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var btn = _g1[_g];
			++_g;
			if(btn.name == name) {
				return btn;
			}
		}
		return null;
	}
	,update: function(elapsed) {
		flixel_addons_ui_FlxUIGroup.prototype.update.call(this,elapsed);
		if(this.dropPanel.visible && flixel_FlxG.mouse._leftButton.current == 2) {
			if(!flixel_FlxG.mouse.overlaps(this)) {
				this.showList(false);
			}
		}
	}
	,destroy: function() {
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
		this.dropPanel = flixel_util_FlxDestroyUtil.destroy(this.dropPanel);
		this.list = flixel_util_FlxDestroyUtil.destroyArray(this.list);
		this.callback = null;
	}
	,showList: function(b) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			button.set_visible(b);
			button.set_active(b);
		}
		this.dropPanel.set_visible(b);
		flixel_addons_ui_FlxUI.forceFocus(b,this);
	}
	,onDropdown: function() {
		if(this.dropPanel.visible) {
			this.showList(false);
		} else {
			this.showList(true);
		}
	}
	,onClickItem: function(i) {
		var item = this.list[i];
		this.selectSomething(item.name,item.label.text);
		this.showList(false);
		if(this.callback != null) {
			this.callback(item.name);
		}
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event("click_dropdown",this,item.name,this.params);
		}
	}
	,__class__: flixel_addons_ui_FlxUIDropDownMenu
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_dropDirection:"set_dropDirection",set_params:"set_params",set_selectedLabel:"set_selectedLabel",get_selectedLabel:"get_selectedLabel",set_selectedId:"set_selectedId",get_selectedId:"get_selectedId",set_skipButtonUpdate:"set_skipButtonUpdate"})
});
var flixel_addons_ui_FlxUIDropDownHeader = function(Width,Background,Text1,Button) {
	if(Width == null) {
		Width = 120;
	}
	flixel_addons_ui_FlxUIGroup.call(this);
	this.background = Background;
	this.text = Text1;
	this.button = Button;
	if(this.background == null) {
		this.background = new flixel_addons_ui_FlxUI9SliceSprite(0,0,"flixel/flixel-ui/img/box.png",new openfl_geom_Rectangle(0,0,Width,20),[1,1,14,14]);
	}
	if(this.button == null) {
		this.button = new flixel_addons_ui_FlxUISpriteButton(0,0,new flixel_FlxSprite(0,0,"flixel/flixel-ui/img/dropdown_mark.png"));
		this.button.loadGraphicSlice9(["flixel/flixel-ui/img/button_thin.png"],80,20,[flixel_util_FlxStringUtil.toIntArray("6,6,11,11")],0,-1,false,18,18);
	}
	this.button.resize(this.background.get_height(),this.background.get_height());
	this.button.set_x(this.background.x + this.background.get_width() - this.button.get_width());
	this.button.set_width(Width);
	var _g = this.button.offset;
	_g.set_x(_g.x - (Width - this.button.frameWidth));
	this.button.set_x(this.offset.x);
	var _g = this.button.label.offset;
	_g.set_x(_g.x + this.button.offset.x);
	if(this.text == null) {
		this.text = new flixel_addons_ui_FlxUIText(0,0,this.background.get_width() | 0);
	}
	this.text.setPosition(2,4);
	this.text.set_color(-16777216);
	this.add(this.background);
	this.add(this.button);
	this.add(this.text);
};
$hxClasses["flixel.addons.ui.FlxUIDropDownHeader"] = flixel_addons_ui_FlxUIDropDownHeader;
flixel_addons_ui_FlxUIDropDownHeader.__name__ = "flixel.addons.ui.FlxUIDropDownHeader";
flixel_addons_ui_FlxUIDropDownHeader.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUIDropDownHeader.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	background: null
	,text: null
	,button: null
	,destroy: function() {
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
		this.background = flixel_util_FlxDestroyUtil.destroy(this.background);
		this.text = flixel_util_FlxDestroyUtil.destroy(this.text);
		this.button = flixel_util_FlxDestroyUtil.destroy(this.button);
	}
	,__class__: flixel_addons_ui_FlxUIDropDownHeader
});
var flixel_addons_ui_FlxUIDropDownMenuDropDirection = $hxEnums["flixel.addons.ui.FlxUIDropDownMenuDropDirection"] = { __ename__ : "flixel.addons.ui.FlxUIDropDownMenuDropDirection", __constructs__ : ["Automatic","Down","Up"]
	,Automatic: {_hx_index:0,__enum__:"flixel.addons.ui.FlxUIDropDownMenuDropDirection",toString:$estr}
	,Down: {_hx_index:1,__enum__:"flixel.addons.ui.FlxUIDropDownMenuDropDirection",toString:$estr}
	,Up: {_hx_index:2,__enum__:"flixel.addons.ui.FlxUIDropDownMenuDropDirection",toString:$estr}
};
var flixel_addons_ui_FlxUIInputText = function(X,Y,Width,Text1,size,TextColor,BackgroundColor,EmbeddedFont) {
	this.broadcastToFlxUI = true;
	flixel_addons_ui_FlxInputText.call(this,X,Y,Width,Text1,size,TextColor,BackgroundColor,EmbeddedFont);
};
$hxClasses["flixel.addons.ui.FlxUIInputText"] = flixel_addons_ui_FlxUIInputText;
flixel_addons_ui_FlxUIInputText.__name__ = "flixel.addons.ui.FlxUIInputText";
flixel_addons_ui_FlxUIInputText.__interfaces__ = [flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIWidget,flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUIInputText.__super__ = flixel_addons_ui_FlxInputText;
flixel_addons_ui_FlxUIInputText.prototype = $extend(flixel_addons_ui_FlxInputText.prototype,{
	name: null
	,broadcastToFlxUI: null
	,resize: function(w,h) {
		this.set_width(w);
		this.set_height(h);
		this.calcFrame();
	}
	,onChange: function(action) {
		flixel_addons_ui_FlxInputText.prototype.onChange.call(this,action);
		if(this.broadcastToFlxUI) {
			switch(action) {
			case "backspace":case "delete":
				flixel_addons_ui_FlxUI.event("delete_input_text",this,this.text,this.params);
				flixel_addons_ui_FlxUI.event("change_input_text",this,this.text,this.params);
				break;
			case "enter":
				flixel_addons_ui_FlxUI.event("enter_input_text",this,this.text,this.params);
				break;
			case "input":
				flixel_addons_ui_FlxUI.event("input_input_text",this,this.text,this.params);
				flixel_addons_ui_FlxUI.event("change_input_text",this,this.text,this.params);
				break;
			}
		}
	}
	,__class__: flixel_addons_ui_FlxUIInputText
});
var flixel_addons_ui_FlxUILine = function(X,Y,Axis,Length,Thickness,Color) {
	this.thickness = 1;
	this.length = 10;
	this.axis = flixel_addons_ui_LineAxis.HORIZONTAL;
	flixel_addons_ui_FlxUISprite.call(this,X,Y);
	this.makeGraphic(2,2,-1);
	this.set_color(Color);
	this.set_axis(Axis);
	this.set_length(Length);
	this.set_thickness(Thickness);
};
$hxClasses["flixel.addons.ui.FlxUILine"] = flixel_addons_ui_FlxUILine;
flixel_addons_ui_FlxUILine.__name__ = "flixel.addons.ui.FlxUILine";
flixel_addons_ui_FlxUILine.__interfaces__ = [flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUILine.__super__ = flixel_addons_ui_FlxUISprite;
flixel_addons_ui_FlxUILine.prototype = $extend(flixel_addons_ui_FlxUISprite.prototype,{
	axis: null
	,length: null
	,thickness: null
	,set_axis: function(a) {
		this.axis = a;
		this.refresh();
		return a;
	}
	,set_length: function(l) {
		this.length = l;
		this.refresh();
		return l;
	}
	,set_thickness: function(t) {
		this.thickness = t;
		this.refresh();
		return t;
	}
	,refresh: function() {
		if(this.axis == flixel_addons_ui_LineAxis.HORIZONTAL) {
			this.scale.set(0.5 * this.length,0.5 * this.thickness);
		} else {
			this.scale.set(0.5 * this.thickness,0.5 * this.length);
		}
		this.updateHitbox();
	}
	,resize: function(width,height) {
		if(this.axis == flixel_addons_ui_LineAxis.HORIZONTAL) {
			this.set_length(width);
			this.set_thickness(height);
		} else {
			this.set_length(height);
			this.set_thickness(width);
		}
	}
	,__class__: flixel_addons_ui_FlxUILine
	,__properties__: $extend(flixel_addons_ui_FlxUISprite.prototype.__properties__,{set_thickness:"set_thickness",set_length:"set_length",set_axis:"set_axis"})
});
var flixel_addons_ui_LineAxis = $hxEnums["flixel.addons.ui.LineAxis"] = { __ename__ : "flixel.addons.ui.LineAxis", __constructs__ : ["HORIZONTAL","VERTICAL"]
	,HORIZONTAL: {_hx_index:0,__enum__:"flixel.addons.ui.LineAxis",toString:$estr}
	,VERTICAL: {_hx_index:1,__enum__:"flixel.addons.ui.LineAxis",toString:$estr}
};
var flixel_addons_ui_FlxUIList = function(X,Y,Widgets,W,H,MoreString,Stacking,Spacing,PrevButtonOffset,NextButtonOffset,PrevButton,NextButton) {
	if(Spacing == null) {
		Spacing = 0;
	}
	if(Stacking == null) {
		Stacking = 1;
	}
	if(MoreString == null) {
		MoreString = "<X> more...";
	}
	if(H == null) {
		H = 0;
	}
	if(W == null) {
		W = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._skipRefresh = false;
	this.scrollIndex = 0;
	this._skipRefresh = true;
	flixel_addons_ui_FlxUIGroup.call(this,X,Y);
	this.set_stacking(Stacking);
	this.set_spacing(Spacing);
	if(Widgets != null) {
		var _g = 0;
		while(_g < Widgets.length) {
			var widget = Widgets[_g];
			++_g;
			this.add(widget);
		}
	}
	this.prevButton = PrevButton;
	this.nextButton = NextButton;
	this.prevButtonOffset = PrevButtonOffset;
	this.nextButtonOffset = NextButtonOffset;
	this.set_moreString(MoreString);
	if(this.prevButton == null) {
		var _g = $bind(this,this.onClick);
		var i = -1;
		var pButton = new flixel_addons_ui_FlxUIButton(0,0," ",function() {
			_g(i);
		});
		if(this.stacking == 0) {
			pButton.loadGraphicsUpOverDown("flixel/flixel-ui/img/button_arrow_left.png");
			pButton.label.set_width(pButton.label.set_fieldWidth(100));
			pButton.label.set_text(this.getMoreString(0));
			pButton.setAllLabelOffsets(pButton.get_width() - pButton.label.get_width(),pButton.get_height() + 2);
			pButton.label.set_alignment("right");
		} else {
			pButton.loadGraphicsUpOverDown("flixel/flixel-ui/img/button_arrow_up.png");
			pButton.label.set_width(pButton.label.set_fieldWidth(100));
			pButton.label.set_text(this.getMoreString(0));
			pButton.setAllLabelOffsets(0,0);
			pButton.setCenterLabelOffset(pButton.get_width() + 2,pButton.get_height() - pButton.label.get_height());
			pButton.label.set_alignment("left");
		}
		this.prevButton = pButton;
	} else {
		if(((this.prevButton) instanceof flixel_addons_ui_FlxUIButton)) {
			var fuib = this.prevButton;
			var _g1 = $bind(this,this.onClick);
			var i1 = -1;
			var tmp = function() {
				_g1(i1);
			};
			fuib.onUp.callback = tmp;
		}
		if(((this.prevButton) instanceof flixel_addons_ui_FlxUISpriteButton)) {
			var fusb = this.prevButton;
			var _g2 = $bind(this,this.onClick);
			var i2 = -1;
			var tmp = function() {
				_g2(i2);
			};
			fusb.onUp.callback = tmp;
		}
	}
	if(this.nextButton == null) {
		var _g3 = $bind(this,this.onClick);
		var i3 = 1;
		var nButton = new flixel_addons_ui_FlxUIButton(0,0," ",function() {
			_g3(i3);
		});
		if(this.stacking == 0) {
			nButton.loadGraphicsUpOverDown("flixel/flixel-ui/img/button_arrow_right.png");
			nButton.label.set_width(nButton.label.set_fieldWidth(100));
			nButton.label.set_text(this.getMoreString(0));
			nButton.setAllLabelOffsets(0,nButton.get_height() + 2);
			nButton.label.set_alignment("left");
		} else {
			nButton.loadGraphicsUpOverDown("flixel/flixel-ui/img/button_arrow_down.png");
			nButton.label.set_width(nButton.label.set_fieldWidth(100));
			nButton.label.set_text(this.getMoreString(0));
			nButton.setAllLabelOffsets(0,0);
			nButton.setCenterLabelOffset(nButton.get_width() + 2,0);
			nButton.label.set_alignment("left");
		}
		this.nextButton = nButton;
	} else {
		if(((this.nextButton) instanceof flixel_addons_ui_FlxUIButton)) {
			var fuib = this.nextButton;
			var _g4 = $bind(this,this.onClick);
			var i4 = 1;
			var tmp = function() {
				_g4(i4);
			};
			fuib.onUp.callback = tmp;
		}
		if(((this.nextButton) instanceof flixel_addons_ui_FlxUISpriteButton)) {
			var fusb = this.nextButton;
			var _g5 = $bind(this,this.onClick);
			var i5 = 1;
			var tmp = function() {
				_g5(i5);
			};
			fusb.onUp.callback = tmp;
		}
	}
	if(this.prevButtonOffset == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.prevButtonOffset = point;
	}
	if(this.nextButtonOffset == null) {
		var X = 0;
		var Y = 0;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.nextButtonOffset = point;
	}
	this._skipRefresh = false;
	this.setSize(W,H);
};
$hxClasses["flixel.addons.ui.FlxUIList"] = flixel_addons_ui_FlxUIList;
flixel_addons_ui_FlxUIList.__name__ = "flixel.addons.ui.FlxUIList";
flixel_addons_ui_FlxUIList.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUIList.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	scrollIndex: null
	,set_scrollIndex: function(i) {
		this.scrollIndex = i;
		this.refreshList();
		return i;
	}
	,stacking: null
	,set_stacking: function(Stacking) {
		this.stacking = Stacking;
		this.refreshList();
		return Stacking;
	}
	,spacing: null
	,set_spacing: function(Spacing) {
		this.spacing = Spacing;
		this.refreshList();
		return Spacing;
	}
	,prevButtonOffset: null
	,nextButtonOffset: null
	,prevButton: null
	,nextButton: null
	,moreString: null
	,set_moreString: function(str) {
		this.moreString = str;
		this.refreshList();
		return this.moreString;
	}
	,amountPrevious: null
	,amountNext: null
	,destroy: function() {
		this.prevButton = null;
		this.nextButton = null;
		this.prevButtonOffset.put();
		this.nextButtonOffset.put();
		this.prevButtonOffset = null;
		this.nextButtonOffset = null;
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
	}
	,setSize: function(W,H) {
		var flip = false;
		if(this._skipRefresh == false) {
			this._skipRefresh = true;
			flip = true;
		}
		this.set_width(W);
		this.set_height(H);
		if(flip) {
			this._skipRefresh = false;
		}
		this.refreshList();
	}
	,add: function(Object1) {
		flixel_addons_ui_FlxUIGroup.prototype.add.call(this,Object1);
		this.refreshList();
		return Object1;
	}
	,safeAdd: function(Object1) {
		return flixel_addons_ui_FlxUIGroup.prototype.add.call(this,Object1);
	}
	,_skipRefresh: null
	,getMoreString: function(i) {
		var newString = this.moreString;
		while(newString.indexOf("<X>") != -1) newString = StringTools.replace(newString,"<X>",i == null ? "null" : "" + i);
		return newString;
	}
	,set_visible: function(Value) {
		flixel_addons_ui_FlxUIGroup.prototype.set_visible.call(this,Value);
		this.refreshList();
		return Value;
	}
	,onClick: function(i) {
		var _g = this;
		_g.set_scrollIndex(_g.scrollIndex + i);
		this.refreshList();
	}
	,refreshList: function() {
		if(this._skipRefresh) {
			return;
		}
		this.autoBounds = false;
		if(this.group.members.indexOf(this.prevButton) != -1) {
			this.remove(this.prevButton,true);
		}
		if(this.group.members.indexOf(this.nextButton) != -1) {
			this.remove(this.nextButton,true);
		}
		var XX = 0;
		var YY = 0;
		var i = 0;
		var inBounds = true;
		if(this.stacking == 0) {
			this.prevButton.set_x(this.prevButtonOffset.x - this.prevButton.get_width() - 2);
			this.prevButton.set_y(this.prevButtonOffset.y);
			this.nextButton.set_x(this.nextButtonOffset.x + this.get_width() + 2);
			this.nextButton.set_y(this.nextButtonOffset.y);
		} else {
			this.prevButton.set_x(this.prevButtonOffset.x);
			this.prevButton.set_y(this.prevButtonOffset.y - this.prevButton.get_height() - 2);
			this.nextButton.set_x(this.nextButtonOffset.x);
			this.nextButton.set_y(this.nextButtonOffset.y + this.get_height() + 2);
		}
		this.prevButton.set_x(this.prevButton.x | 0);
		this.prevButton.set_y(this.prevButton.y | 0);
		this.nextButton.set_x(this.nextButton.x | 0);
		this.nextButton.set_y(this.nextButton.y | 0);
		var highestIndex = 0;
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var widget = _g1[_g];
			++_g;
			inBounds = false;
			if(i >= this.scrollIndex) {
				if(this.stacking == 1) {
					inBounds = YY + widget.get_height() <= this.get_height() || this.get_height() <= 0;
				} else {
					inBounds = XX + widget.get_width() <= this.get_width() || this.get_width() <= 0;
				}
			}
			if(inBounds) {
				highestIndex = i;
				widget.set_visible(widget.set_active(true));
				widget.set_x(this.x + XX);
				widget.set_y(this.y + YY);
				if(this.stacking == 1) {
					YY += widget.get_height() + this.spacing;
				} else {
					XX += widget.get_width() + this.spacing;
				}
			} else {
				widget.set_x(widget.set_y(0));
				widget.set_visible(widget.set_active(false));
			}
			++i;
		}
		this.amountPrevious = this.scrollIndex;
		this.amountNext = this.group.members.length - (highestIndex + 1);
		var fuibutton;
		if(this.amountPrevious > 0) {
			this.safeAdd(this.prevButton);
			if(((this.prevButton) instanceof flixel_addons_ui_FlxUIButton)) {
				fuibutton = this.prevButton;
				fuibutton.label.set_text(this.getMoreString(this.amountPrevious));
			}
		}
		if(this.amountNext > 0) {
			this.safeAdd(this.nextButton);
			if(((this.nextButton) instanceof flixel_addons_ui_FlxUIButton)) {
				fuibutton = this.nextButton;
				fuibutton.label.set_text(this.getMoreString(this.amountNext));
			}
		}
	}
	,get_width: function() {
		return this.width;
	}
	,get_height: function() {
		return this.height;
	}
	,set_width: function(W) {
		this.width = W;
		this.refreshList();
		return W;
	}
	,set_height: function(H) {
		this.height = H;
		this.refreshList();
		return H;
	}
	,__class__: flixel_addons_ui_FlxUIList
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_moreString:"set_moreString",set_spacing:"set_spacing",set_stacking:"set_stacking",set_scrollIndex:"set_scrollIndex"})
});
var flixel_input_FlxPointer = function() {
	this._globalScreenY = 0;
	this._globalScreenX = 0;
	this.screenY = 0;
	this.screenX = 0;
	this.y = 0;
	this.x = 0;
};
$hxClasses["flixel.input.FlxPointer"] = flixel_input_FlxPointer;
flixel_input_FlxPointer.__name__ = "flixel.input.FlxPointer";
flixel_input_FlxPointer.prototype = {
	x: null
	,y: null
	,screenX: null
	,screenY: null
	,_globalScreenX: null
	,_globalScreenY: null
	,getWorldPosition: function(Camera,point) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		this.getScreenPosition(Camera,flixel_input_FlxPointer._cachedPoint);
		point.set_x(flixel_input_FlxPointer._cachedPoint.x + Camera.scroll.x);
		point.set_y(flixel_input_FlxPointer._cachedPoint.y + Camera.scroll.y);
		return point;
	}
	,getScreenPosition: function(Camera,point) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		point.set_x((this._globalScreenX - Camera.x + 0.5 * Camera.width * (Camera.zoom - Camera.initialZoom)) / Camera.zoom);
		point.set_y((this._globalScreenY - Camera.y + 0.5 * Camera.height * (Camera.zoom - Camera.initialZoom)) / Camera.zoom);
		return point;
	}
	,getPositionInCameraView: function(Camera,point) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		point.set_x((this._globalScreenX - Camera.x) / Camera.zoom + Camera.viewOffsetX);
		point.set_y((this._globalScreenY - Camera.y) / Camera.zoom + Camera.viewOffsetY);
		return point;
	}
	,getPosition: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x,this.y);
	}
	,overlaps: function(ObjectOrGroup,Camera) {
		var _gthis = this;
		var result = false;
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			group.forEachExists(function(basic) {
				if(_gthis.overlaps(basic,Camera)) {
					result = true;
					return;
				}
			});
		} else {
			this.getPosition(flixel_input_FlxPointer._cachedPoint);
			var object = ObjectOrGroup;
			result = object.overlapsPoint(flixel_input_FlxPointer._cachedPoint,true,Camera);
		}
		return result;
	}
	,setGlobalScreenPositionUnsafe: function(newX,newY) {
		this._globalScreenX = newX / flixel_FlxG.scaleMode.scale.x | 0;
		this._globalScreenY = newY / flixel_FlxG.scaleMode.scale.y | 0;
		this.updatePositions();
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,updatePositions: function() {
		this.getScreenPosition(flixel_FlxG.camera,flixel_input_FlxPointer._cachedPoint);
		this.screenX = flixel_input_FlxPointer._cachedPoint.x | 0;
		this.screenY = flixel_input_FlxPointer._cachedPoint.y | 0;
		this.getWorldPosition(flixel_FlxG.camera,flixel_input_FlxPointer._cachedPoint);
		this.x = flixel_input_FlxPointer._cachedPoint.x | 0;
		this.y = flixel_input_FlxPointer._cachedPoint.y | 0;
	}
	,__class__: flixel_input_FlxPointer
};
var flixel_input_IFlxInputManager = function() { };
$hxClasses["flixel.input.IFlxInputManager"] = flixel_input_IFlxInputManager;
flixel_input_IFlxInputManager.__name__ = "flixel.input.IFlxInputManager";
flixel_input_IFlxInputManager.__isInterface__ = true;
flixel_input_IFlxInputManager.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_IFlxInputManager.prototype = {
	reset: null
	,update: null
	,onFocus: null
	,onFocusLost: null
	,__class__: flixel_input_IFlxInputManager
};
var flixel_input_mouse_FlxMouse = function(cursorContainer) {
	this._prevY = 0;
	this._prevX = 0;
	this._lastWheel = 0;
	this._lastY = 0;
	this._lastX = 0;
	this._visibleWhenFocusLost = true;
	this._wheelUsed = false;
	this._cursor = null;
	this.useSystemCursor = false;
	this.visible = true;
	this.wheel = 0;
	this.enabled = true;
	flixel_input_FlxPointer.call(this);
	this.cursorContainer = cursorContainer;
	this.cursorContainer.mouseChildren = false;
	this.cursorContainer.mouseEnabled = false;
	this._leftButton = new flixel_input_mouse_FlxMouseButton(-1);
	this._stage = openfl_Lib.get_current().stage;
	this._stage.addEventListener("mouseDown",($_=this._leftButton,$bind($_,$_.onDown)));
	this._stage.addEventListener("mouseUp",($_=this._leftButton,$bind($_,$_.onUp)));
	this._middleButton = new flixel_input_mouse_FlxMouseButton(-2);
	this._rightButton = new flixel_input_mouse_FlxMouseButton(-3);
	this._stage.addEventListener("middleMouseDown",($_=this._middleButton,$bind($_,$_.onDown)));
	this._stage.addEventListener("middleMouseUp",($_=this._middleButton,$bind($_,$_.onUp)));
	this._stage.addEventListener("rightMouseDown",($_=this._rightButton,$bind($_,$_.onDown)));
	this._stage.addEventListener("rightMouseUp",($_=this._rightButton,$bind($_,$_.onUp)));
	this._stage.addEventListener("mouseLeave",$bind(this,this.onMouseLeave));
	this._stage.addEventListener("mouseWheel",$bind(this,this.onMouseWheel));
	flixel_FlxG.signals.postGameStart.add($bind(this,this.onGameStart));
	openfl_ui_Mouse.hide();
};
$hxClasses["flixel.input.mouse.FlxMouse"] = flixel_input_mouse_FlxMouse;
flixel_input_mouse_FlxMouse.__name__ = "flixel.input.mouse.FlxMouse";
flixel_input_mouse_FlxMouse.__interfaces__ = [flixel_input_IFlxInputManager];
flixel_input_mouse_FlxMouse.__super__ = flixel_input_FlxPointer;
flixel_input_mouse_FlxMouse.prototype = $extend(flixel_input_FlxPointer.prototype,{
	enabled: null
	,wheel: null
	,cursorContainer: null
	,visible: null
	,useSystemCursor: null
	,_leftButton: null
	,_middleButton: null
	,_rightButton: null
	,_cursor: null
	,_cursorBitmapData: null
	,_wheelUsed: null
	,_visibleWhenFocusLost: null
	,_lastX: null
	,_lastY: null
	,_lastWheel: null
	,_lastLeftButtonState: null
	,_prevX: null
	,_prevY: null
	,_stage: null
	,load: function(Graphic,Scale,XOffset,YOffset) {
		if(YOffset == null) {
			YOffset = 0;
		}
		if(XOffset == null) {
			XOffset = 0;
		}
		if(Scale == null) {
			Scale = 1;
		}
		if(this._cursor != null) {
			flixel_util_FlxDestroyUtil.removeChild(this.cursorContainer,this._cursor);
		}
		if(Graphic == null) {
			Graphic = new flixel_input_mouse__$FlxMouse_GraphicCursor(0,0);
		}
		if(js_Boot.__instanceof(Graphic,Class)) {
			this._cursor = Type.createInstance(Graphic,[]);
		} else if(((Graphic) instanceof openfl_display_BitmapData)) {
			this._cursor = new openfl_display_Bitmap(Graphic);
		} else if(typeof(Graphic) == "string") {
			var id = Graphic;
			this._cursor = new openfl_display_Bitmap(openfl_utils_Assets.exists(id) ? openfl_utils_Assets.getBitmapData(id,false) : null);
		} else {
			this._cursor = new openfl_display_Bitmap(new flixel_input_mouse__$FlxMouse_GraphicCursor(0,0));
		}
		this._cursor.set_x(XOffset);
		this._cursor.set_y(YOffset);
		this._cursor.set_scaleX(Scale);
		this._cursor.set_scaleY(Scale);
		this.cursorContainer.addChild(this._cursor);
	}
	,unload: function() {
		if(this._cursor != null) {
			if(this.cursorContainer.get_visible()) {
				this.load();
			} else {
				this._cursor = flixel_util_FlxDestroyUtil.removeChild(this.cursorContainer,this._cursor);
			}
		}
	}
	,destroy: function() {
		if(this._stage != null) {
			this._stage.removeEventListener("mouseDown",($_=this._leftButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener("mouseUp",($_=this._leftButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener("middleMouseDown",($_=this._middleButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener("middleMouseUp",($_=this._middleButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener("rightMouseDown",($_=this._rightButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener("rightMouseUp",($_=this._rightButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener("mouseLeave",$bind(this,this.onMouseLeave));
			this._stage.removeEventListener("mouseWheel",$bind(this,this.onMouseWheel));
		}
		this.cursorContainer = null;
		this._cursor = null;
		this._leftButton = flixel_util_FlxDestroyUtil.destroy(this._leftButton);
		this._middleButton = flixel_util_FlxDestroyUtil.destroy(this._middleButton);
		this._rightButton = flixel_util_FlxDestroyUtil.destroy(this._rightButton);
		this._cursorBitmapData = flixel_util_FlxDestroyUtil.dispose(this._cursorBitmapData);
		flixel_FlxG.signals.postGameStart.remove($bind(this,this.onGameStart));
	}
	,reset: function() {
		this._leftButton.reset();
		this._middleButton.reset();
		this._rightButton.reset();
	}
	,update: function() {
		this._prevX = this.x;
		this._prevY = this.y;
		var newX = flixel_FlxG.game.get_mouseX();
		var newY = flixel_FlxG.game.get_mouseY();
		this._globalScreenX = newX / flixel_FlxG.scaleMode.scale.x | 0;
		this._globalScreenY = newY / flixel_FlxG.scaleMode.scale.y | 0;
		this.updatePositions();
		if(this.visible) {
			this.cursorContainer.set_x(flixel_FlxG.game.get_mouseX());
			this.cursorContainer.set_y(flixel_FlxG.game.get_mouseY());
		}
		this._leftButton.update();
		this._middleButton.update();
		this._rightButton.update();
		if(!this._wheelUsed) {
			this.wheel = 0;
		}
		this._wheelUsed = false;
	}
	,onFocus: function() {
		this.reset();
		this.set_useSystemCursor(this.useSystemCursor);
		this.set_visible(this._visibleWhenFocusLost);
	}
	,onFocusLost: function() {
		this._visibleWhenFocusLost = this.visible;
		if(this.visible) {
			this.set_visible(false);
		}
		openfl_ui_Mouse.show();
	}
	,onGameStart: function() {
		this.set_visible(this.visible);
	}
	,onMouseWheel: function(flashEvent) {
		if(this.enabled) {
			this._wheelUsed = true;
			this.wheel = flashEvent.delta;
		}
	}
	,onMouseLeave: function(_) {
		this._rightButton.onUp();
		this._middleButton.onUp();
	}
	,get_justMoved: function() {
		if(this._prevX == this.x) {
			return this._prevY != this.y;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		var _this = this._leftButton;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this._leftButton.current == 2;
	}
	,get_justReleased: function() {
		return this._leftButton.current == -1;
	}
	,get_justPressedTimeInTicks: function() {
		return this._leftButton.justPressedTimeInTicks;
	}
	,get_pressedRight: function() {
		var _this = this._rightButton;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressedRight: function() {
		return this._rightButton.current == 2;
	}
	,get_justReleasedRight: function() {
		return this._rightButton.current == -1;
	}
	,get_justPressedTimeInTicksRight: function() {
		return this._rightButton.justPressedTimeInTicks;
	}
	,get_pressedMiddle: function() {
		var _this = this._middleButton;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressedMiddle: function() {
		return this._middleButton.current == 2;
	}
	,get_justReleasedMiddle: function() {
		return this._middleButton.current == -1;
	}
	,get_justPressedTimeInTicksMiddle: function() {
		return this._middleButton.justPressedTimeInTicks;
	}
	,showSystemCursor: function() {
		this.cursorContainer.set_visible(false);
		openfl_ui_Mouse.show();
	}
	,hideSystemCursor: function() {
		openfl_ui_Mouse.hide();
		if(this.visible) {
			this.cursorContainer.set_visible(true);
		}
	}
	,set_useSystemCursor: function(value) {
		if(value) {
			this.showSystemCursor();
		} else {
			this.hideSystemCursor();
		}
		return this.useSystemCursor = value;
	}
	,showCursor: function() {
		if(this.useSystemCursor) {
			openfl_ui_Mouse.show();
		} else {
			if(this._cursor == null) {
				this.load();
			}
			this.cursorContainer.set_visible(true);
			openfl_ui_Mouse.hide();
		}
	}
	,hideCursor: function() {
		this.cursorContainer.set_visible(false);
		openfl_ui_Mouse.hide();
	}
	,set_visible: function(value) {
		if(value) {
			this.showCursor();
		} else {
			this.hideCursor();
		}
		return this.visible = value;
	}
	,record: function() {
		if(this._lastX == this._globalScreenX && this._lastY == this._globalScreenY && this._lastLeftButtonState == this._leftButton.current && this._lastWheel == this.wheel) {
			return null;
		}
		this._lastX = this._globalScreenX;
		this._lastY = this._globalScreenY;
		this._lastLeftButtonState = this._leftButton.current;
		this._lastWheel = this.wheel;
		return new flixel_system_replay_MouseRecord(this._lastX,this._lastY,this._leftButton.current,this._lastWheel);
	}
	,playback: function(record) {
		if((this._lastLeftButtonState == 1 || this._lastLeftButtonState == 2) && (record.button == 0 || record.button == -1)) {
			this._stage.dispatchEvent(new openfl_events_MouseEvent("mouseUp",true,false,record.x,record.y));
		}
		this._lastLeftButtonState = this._leftButton.current = record.button;
		this.wheel = record.wheel;
		this._globalScreenX = record.x;
		this._globalScreenY = record.y;
		this.updatePositions();
	}
	,__class__: flixel_input_mouse_FlxMouse
	,__properties__: {get_justPressedTimeInTicksMiddle:"get_justPressedTimeInTicksMiddle",get_justReleasedMiddle:"get_justReleasedMiddle",get_justPressedMiddle:"get_justPressedMiddle",get_pressedMiddle:"get_pressedMiddle",get_justPressedTimeInTicksRight:"get_justPressedTimeInTicksRight",get_justReleasedRight:"get_justReleasedRight",get_justPressedRight:"get_justPressedRight",get_pressedRight:"get_pressedRight",get_justPressedTimeInTicks:"get_justPressedTimeInTicks",get_justReleased:"get_justReleased",get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_justMoved:"get_justMoved",set_useSystemCursor:"set_useSystemCursor",set_visible:"set_visible"}
});
var flixel_addons_ui_FlxUIMouse = function(CursorContainer) {
	this.updateGlobalScreenPosition = true;
	flixel_input_mouse_FlxMouse.call(this,CursorContainer);
};
$hxClasses["flixel.addons.ui.FlxUIMouse"] = flixel_addons_ui_FlxUIMouse;
flixel_addons_ui_FlxUIMouse.__name__ = "flixel.addons.ui.FlxUIMouse";
flixel_addons_ui_FlxUIMouse.__super__ = flixel_input_mouse_FlxMouse;
flixel_addons_ui_FlxUIMouse.prototype = $extend(flixel_input_mouse_FlxMouse.prototype,{
	updateGlobalScreenPosition: null
	,update: function() {
		var oldScreenX = this._globalScreenX;
		var oldScreenY = this._globalScreenY;
		flixel_input_mouse_FlxMouse.prototype.update.call(this);
		if(!this.updateGlobalScreenPosition) {
			this._globalScreenX = oldScreenX;
			this._globalScreenY = oldScreenY;
		}
	}
	,__class__: flixel_addons_ui_FlxUIMouse
});
var flixel_addons_ui_FlxUINumericStepper = function(X,Y,StepSize,DefaultValue,Min,Max,Decimals,Stack,TextField,ButtonPlus,ButtonMinus,IsPercent) {
	if(IsPercent == null) {
		IsPercent = false;
	}
	if(Stack == null) {
		Stack = 1;
	}
	if(Decimals == null) {
		Decimals = 0;
	}
	if(Max == null) {
		Max = 999;
	}
	if(Min == null) {
		Min = -999;
	}
	if(DefaultValue == null) {
		DefaultValue = 0;
	}
	if(StepSize == null) {
		StepSize = 1;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.isPercent = false;
	this.stack = 1;
	this.value = 0;
	this.max = 10;
	this.min = 0;
	this.decimals = 0;
	this.stepSize = 0;
	flixel_addons_ui_FlxUIGroup.call(this,X,Y);
	if(TextField == null) {
		TextField = new flixel_addons_ui_FlxUIInputText(0,0,25);
	}
	TextField.set_x(0);
	TextField.set_y(0);
	this.text_field = TextField;
	this.text_field.set_text(DefaultValue == null ? "null" : "" + DefaultValue);
	if(((this.text_field) instanceof flixel_addons_ui_FlxUIInputText)) {
		var fuit = this.text_field;
		fuit.set_lines(1);
		fuit.callback = $bind(this,this._onInputTextEvent);
		fuit.broadcastToFlxUI = false;
	}
	this.stepSize = StepSize;
	this.set_decimals(Decimals);
	this.set_min(Min);
	this.set_max(Max);
	this.set_value(DefaultValue);
	this.set_isPercent(IsPercent);
	var btnSize = 1 + TextField.get_height();
	if(ButtonPlus == null) {
		ButtonPlus = new flixel_addons_ui_FlxUITypedButton(0,0);
		ButtonPlus.loadGraphicSlice9(["flixel/flixel-ui/img/button_thin.png"],btnSize,btnSize,[flixel_util_FlxStringUtil.toIntArray("2,2,15,15")],0,-1,false,18,18);
		ButtonPlus.set_label(new flixel_FlxSprite(0,0,"flixel/flixel-ui/img/plus_mark.png"));
	}
	if(ButtonMinus == null) {
		ButtonMinus = new flixel_addons_ui_FlxUITypedButton(0,0);
		ButtonMinus.loadGraphicSlice9(["flixel/flixel-ui/img/button_thin.png"],btnSize,btnSize,[flixel_util_FlxStringUtil.toIntArray("2,2,15,15")],0,-1,false,18,18);
		ButtonMinus.set_label(new flixel_FlxSprite(0,0,"flixel/flixel-ui/img/minus_mark.png"));
	}
	this.button_plus = ButtonPlus;
	this.button_minus = ButtonMinus;
	this.add(this.text_field);
	this.add(this.button_plus);
	this.add(this.button_minus);
	this.button_plus.onUp.callback = $bind(this,this._onPlus);
	this.button_plus.broadcastToFlxUI = false;
	this.button_minus.onUp.callback = $bind(this,this._onMinus);
	this.button_minus.broadcastToFlxUI = false;
	this.set_stack(Stack);
};
$hxClasses["flixel.addons.ui.FlxUINumericStepper"] = flixel_addons_ui_FlxUINumericStepper;
flixel_addons_ui_FlxUINumericStepper.__name__ = "flixel.addons.ui.FlxUINumericStepper";
flixel_addons_ui_FlxUINumericStepper.__interfaces__ = [flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIClickable,flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_FlxUINumericStepper.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUINumericStepper.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	button_plus: null
	,button_minus: null
	,text_field: null
	,stepSize: null
	,decimals: null
	,min: null
	,max: null
	,value: null
	,stack: null
	,isPercent: null
	,params: null
	,set_params: function(p) {
		this.params = p;
		return this.params;
	}
	,skipButtonUpdate: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		this.button_plus.set_skipButtonUpdate(b);
		this.button_minus.set_skipButtonUpdate(b);
		return b;
	}
	,set_color: function(Value) {
		this.color = Value;
		this.button_plus.set_color(Value);
		this.button_minus.set_color(Value);
		if(((this.text_field) instanceof flixel_addons_ui_FlxInputText)) {
			var fit = this.text_field;
			fit.set_backgroundColor(Value);
		} else {
			this.text_field.set_color(Value);
		}
		return Value;
	}
	,set_min: function(f) {
		this.min = f;
		if(this.value < this.min) {
			this.set_value(this.min);
		}
		return this.min;
	}
	,set_max: function(f) {
		this.max = f;
		if(this.value > this.max) {
			this.set_value(this.max);
		}
		return this.max;
	}
	,set_value: function(f) {
		this.value = f;
		if(this.value < this.min) {
			this.value = this.min;
		}
		if(this.value > this.max) {
			this.value = this.max;
		}
		if(this.text_field != null) {
			var displayValue = this.value;
			if(this.isPercent) {
				displayValue *= 100;
				var tens = Math.pow(10,this.decimals);
				this.text_field.set_text(Std.string(Std.string(Math.round(displayValue * tens) / tens)) + "%");
			} else {
				var tens = Math.pow(10,this.decimals);
				this.text_field.set_text(Std.string(Math.round(displayValue * tens) / tens));
			}
		}
		return this.value;
	}
	,set_decimals: function(i) {
		this.decimals = i;
		if(i < 0) {
			this.decimals = 0;
		}
		this.set_value(this.value);
		return this.decimals;
	}
	,set_isPercent: function(b) {
		this.isPercent = b;
		this.set_value(this.value);
		return this.isPercent;
	}
	,set_stack: function(s) {
		this.stack = s;
		var btnSize = 10;
		var offsetX = 0;
		var offsetY = 0;
		if(((this.text_field) instanceof flixel_addons_ui_FlxUIInputText)) {
			offsetX = 1;
			offsetY = 1;
		}
		switch(this.stack) {
		case 0:
			btnSize = 1 + this.text_field.get_height() / 2;
			if(this.button_plus.get_height() != btnSize) {
				this.button_plus.resize(btnSize,btnSize);
			}
			if(this.button_minus.get_height() != btnSize) {
				this.button_minus.resize(btnSize,btnSize);
			}
			this.button_plus.set_x(offsetX + this.text_field.x + this.text_field.get_width());
			this.button_plus.set_y(-offsetY + this.text_field.y);
			this.button_minus.set_x(offsetX + this.text_field.x + this.text_field.get_width());
			this.button_minus.set_y(offsetY + this.text_field.y + (this.text_field.get_height() - this.button_minus.get_height()));
			break;
		case 1:
			btnSize = 2 + this.text_field.get_height();
			if(this.button_plus.get_height() != btnSize) {
				this.button_plus.resize(btnSize,btnSize);
			}
			if(this.button_minus.get_height() != btnSize) {
				this.button_minus.resize(btnSize,btnSize);
			}
			this.button_plus.set_x(offsetX + this.text_field.x + this.text_field.get_width());
			this.button_plus.set_y(-offsetY + this.text_field.y);
			this.button_minus.set_x(this.button_plus.x + this.button_plus.get_width());
			this.button_minus.set_y(this.button_plus.y);
			break;
		}
		return this.stack;
	}
	,decimalize: function(f,digits) {
		var tens = Math.pow(10,digits);
		return Std.string(Math.round(f * tens) / tens);
	}
	,_onInputTextEvent: function(text,action) {
		if(text == "") {
			text = Std.string(this.min);
		}
		var numDecimals = 0;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var char = text.charAt(i);
			if(char == ".") {
				++numDecimals;
			}
		}
		var justAddedDecimal = numDecimals == 1 && text.indexOf(".") == text.length - 1;
		if(!justAddedDecimal) {
			this.set_value(parseFloat(text));
			this._doCallback("edit_numeric_stepper");
			this._doCallback("change_numeric_stepper");
		}
	}
	,_onPlus: function() {
		var _g = this;
		_g.set_value(_g.value + this.stepSize);
		this._doCallback("click_numeric_stepper");
		this._doCallback("change_numeric_stepper");
	}
	,_onMinus: function() {
		var _g = this;
		_g.set_value(_g.value - this.stepSize);
		this._doCallback("click_numeric_stepper");
		this._doCallback("change_numeric_stepper");
	}
	,_doCallback: function(event_name) {
		if(this.broadcastToFlxUI) {
			flixel_addons_ui_FlxUI.event(event_name,this,this.value,this.params);
		}
	}
	,__class__: flixel_addons_ui_FlxUINumericStepper
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_skipButtonUpdate:"set_skipButtonUpdate",set_params:"set_params",set_isPercent:"set_isPercent",set_stack:"set_stack",set_value:"set_value",set_max:"set_max",set_min:"set_min",set_decimals:"set_decimals"})
});
var flixel_addons_ui_FlxUIRadioGroup = function(X,Y,ids_,labels_,callback_,y_space_,width_,height_,label_width_,MoreString,PrevButtonOffset,NextButtonOffset,PrevButton,NextButton) {
	if(MoreString == null) {
		MoreString = "<X> more...";
	}
	if(label_width_ == null) {
		label_width_ = 100;
	}
	if(height_ == null) {
		height_ = 20;
	}
	if(width_ == null) {
		width_ = 100;
	}
	if(y_space_ == null) {
		y_space_ = 25;
	}
	this._clickable = true;
	this._selected = 0;
	this._y_space = 25;
	this._height = 20;
	this._width = 100;
	this._label_width = 100;
	this.fixedSize = false;
	flixel_addons_ui_FlxUIGroup.call(this);
	this._y_space = y_space_;
	this._width = width_;
	this._height = height_;
	this._label_width = label_width_;
	if(ids_ == null) {
		ids_ = [];
	}
	if(labels_ == null) {
		labels_ = [];
	}
	this.callback = callback_;
	this._list_radios = [];
	this._list_active = [];
	this._list = new flixel_addons_ui_FlxUIList(0,0,null,0,0,MoreString,1,0,PrevButtonOffset,NextButtonOffset,PrevButton,NextButton);
	this.add(this._list);
	this.updateRadios(ids_,labels_);
	this.loadGraphics(null,null);
	this.set_x(X);
	this.set_y(Y);
};
$hxClasses["flixel.addons.ui.FlxUIRadioGroup"] = flixel_addons_ui_FlxUIRadioGroup;
flixel_addons_ui_FlxUIRadioGroup.__name__ = "flixel.addons.ui.FlxUIRadioGroup";
flixel_addons_ui_FlxUIRadioGroup.__interfaces__ = [flixel_addons_ui_interfaces_IHasParams,flixel_addons_ui_interfaces_IFlxUIClickable];
flixel_addons_ui_FlxUIRadioGroup.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUIRadioGroup.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	activeStyle: null
	,set_activeStyle: function(b) {
		this.activeStyle = b;
		this.updateActives();
		return this.activeStyle;
	}
	,inactiveStyle: null
	,set_inactiveStyle: function(b) {
		this.inactiveStyle = b;
		this.updateActives();
		return this.inactiveStyle;
	}
	,get_numRadios: function() {
		return this._list_radios.length;
	}
	,skipButtonUpdate: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var fcb = _g1[_g];
			++_g;
			fcb.set_skipButtonUpdate(b);
		}
		return this.skipButtonUpdate;
	}
	,callback: null
	,params: null
	,set_params: function(p) {
		this.params = p;
		return this.params;
	}
	,fixedSize: null
	,set_width: function(Value) {
		flixel_addons_ui_FlxUIGroup.prototype.set_width.call(this,Value);
		if(this.fixedSize) {
			if(this._list != null) {
				this._list.set_width(Value);
			}
		}
		return Value;
	}
	,set_height: function(Value) {
		flixel_addons_ui_FlxUIGroup.prototype.set_height.call(this,Value);
		if(this.fixedSize) {
			if(this._list != null) {
				this._list.set_height(Value);
			}
		}
		return Value;
	}
	,loadGraphics: function(Box,Dot) {
		if(Box != null) {
			this._box_asset = Box;
		} else {
			this._box_asset = "flixel/flixel-ui/img/radio.png";
		}
		if(Dot != null) {
			this._dot_asset = Dot;
		} else {
			this._dot_asset = "flixel/flixel-ui/img/radio_dot.png";
		}
		if(((this._box_asset) instanceof flixel_FlxSprite)) {
			var fs = this._box_asset;
			this._box_asset = fs.graphic.key;
		}
		if(((this._dot_asset) instanceof flixel_FlxSprite)) {
			var fs = this._dot_asset;
			this._dot_asset = fs.graphic.key;
		}
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.box.loadGraphic(this._box_asset,true);
			c.mark.loadGraphic(this._dot_asset);
		}
		this._refreshRadios();
	}
	,destroy: function() {
		if(this._list_radios != null) {
			flixel_addons_ui_U.clearArray(this._list_radios);
		}
		if(this._list_active != null) {
			flixel_addons_ui_U.clearArray(this._list_active);
		}
		this._list_active = null;
		this._list_radios = null;
		this._list = null;
		this._ids = null;
		this._labels = null;
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
	}
	,updateLabel: function(i,label_) {
		if(i >= this._list_radios.length) {
			return false;
		}
		this._labels[i] = label_;
		var c = this._list_radios[i];
		if(c != null) {
			c.button.set_width(this._label_width);
			c.set_text(label_);
		}
		return true;
	}
	,updateId: function(i,id_) {
		if(i >= this._list_radios.length) {
			return false;
		}
		this._ids[i] = id_;
		return true;
	}
	,show: function(b) {
		var _g = 0;
		var _g1 = this._list.group.members;
		while(_g < _g1.length) {
			var fo = _g1[_g];
			++_g;
			fo.set_visible(b);
		}
	}
	,updateRadios: function(ids_,labels_) {
		this._ids = ids_;
		this._labels = labels_;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_visible(false);
		}
		this._refreshRadios();
	}
	,getRadios: function() {
		return this._list_radios;
	}
	,getLabel: function(i) {
		if(i >= 0 && i < this._labels.length) {
			return this._labels[i];
		}
		return null;
	}
	,getId: function(i) {
		if(i >= 0 && i < this._ids.length) {
			return this._ids[i];
		}
		return null;
	}
	,getIsVisible: function(i) {
		if(i >= 0 && i < this._list_radios.length) {
			return this._list_radios[i].visible;
		}
		return false;
	}
	,get_clickable: function() {
		return this._clickable;
	}
	,set_clickable: function(b) {
		this._clickable = b;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_active(b);
		}
		return this._clickable;
	}
	,get_selectedIndex: function() {
		return this._selected;
	}
	,set_selectedIndex: function(i) {
		this._selected = i;
		var j = 0;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_checked(false);
			if(j == i) {
				c.set_checked(true);
			}
			++j;
		}
		if(this._selected < 0 || this._selected >= this._list_radios.length) {
			this._selected = -1;
		}
		return this._selected;
	}
	,get_selectedLabel: function() {
		return this._labels[this._selected];
	}
	,set_selectedLabel: function(str) {
		var i = 0;
		this._selected = -1;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_checked(false);
			if(this._labels[i] == str) {
				this._selected = i;
				c.set_checked(true);
			}
			++i;
		}
		if(this._selected >= 0 && this._selected < this._labels.length) {
			return this._labels[this._selected];
		}
		return null;
	}
	,get_selectedId: function() {
		return this._ids[this._selected];
	}
	,set_selectedId: function(str) {
		var i = 0;
		this._selected = -1;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_checked(false);
			if(this._ids[i] == str) {
				this._selected = i;
				c.set_checked(true);
			}
			++i;
		}
		if(this._selected >= 0 && this._selected < this._ids.length) {
			return this._ids[this._selected];
		}
		return null;
	}
	,setLineScroll: function(scroll,max_items) {
		this._list.set_scrollIndex(scroll);
		if(max_items != null) {
			if(this._list.stacking == 1) {
				this.set_height(this._y_space * max_items + 1);
			}
		}
		var X = this._list.amountPrevious;
		var Y = this._list.amountNext;
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		return point;
	}
	,setRadioActive: function(i,b) {
		if(i >= 0 && i < this._list_active.length) {
			this._list_active[i] = b;
		}
		this.updateActives();
	}
	,_list_active: null
	,_list: null
	,_box_asset: null
	,_dot_asset: null
	,_labels: null
	,_ids: null
	,_label_width: null
	,_width: null
	,_height: null
	,_y_space: null
	,_selected: null
	,_clickable: null
	,_list_radios: null
	,_refreshRadios: function() {
		var xx = this.x;
		var yy = this.y;
		var i = 0;
		var maxX = 0;
		var maxY = 0;
		this._list._skipRefresh = true;
		var _g = 0;
		var _g1 = this._ids;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			var label = "";
			if(this._labels != null && this._labels.length > i) {
				label = this._labels[i];
			} else {
				label = "<" + id + ">";
			}
			var c;
			if(this._list_radios.length > i) {
				c = this._list_radios[i];
				c.set_visible(true);
				c.set_text(label);
				if(i == 0) {
					xx = c.x;
					yy = c.y;
				} else {
					c.set_x(xx | 0);
					c.set_y(yy | 0);
				}
			} else {
				c = new flixel_addons_ui_FlxUICheckBox(0,0,this._box_asset,this._dot_asset,label,this._label_width,[id,false]);
				c.broadcastToFlxUI = false;
				c.callback = (function(_g,checkBox) {
					return function() {
						_g[0](checkBox[0]);
					};
				})([$bind(this,this._onCheckBoxEvent)],[c]);
				this._list.add(c);
				c.set_x(xx | 0);
				c.set_y(yy | 0);
				c.set_text(label);
				if(this._list_radios.length > 0) {
					c.button.copyStyle(this._list_radios[0].button);
					if(this.activeStyle == null) {
						this.set_activeStyle(this.makeActiveStyle());
					}
					c.button.set_width(this._list_radios[0].button.get_width());
					c.button.set_height(this._list_radios[0].button.get_height());
					c.set_textX(this._list_radios[0].textX);
					c.set_textY(this._list_radios[0].textY);
				}
				this._list_radios.push(c);
				this._list_active.push(true);
			}
			if(xx + c.get_width() > maxX) {
				maxX = xx + c.get_width();
			}
			if(yy + c.get_height() > maxY) {
				maxY = yy + c.get_height();
			}
			yy += this._y_space;
			++i;
		}
		if(this.fixedSize == false) {
			maxX += 5;
			maxY += 5;
			if(maxX > this._list.get_width()) {
				this._list.set_width(maxX);
			}
			if(maxY > this._list.get_height()) {
				this._list.set_height(maxY);
			}
			this.set_width(maxX);
			this.set_height(maxY);
		}
		this._list._skipRefresh = false;
		if(this.fixedSize == true) {
			this._list.refreshList();
		}
		this.updateActives();
	}
	,updateActives: function() {
		var i = 0;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var r = _g1[_g];
			++_g;
			r.set_active(this._list_active[i]);
			if(this._list_active[i] == false && this.inactiveStyle != null) {
				this.inactiveStyle.applyToCheck(r);
			} else if(this._list_active[i] == true && this.activeStyle != null) {
				this.activeStyle.applyToCheck(r);
			}
			++i;
		}
	}
	,makeActiveStyle: function() {
		if(this._list_radios.length > 0) {
			var btn = this._list_radios[0].button;
			var t = btn.label;
			var fd = flixel_addons_ui_FontDef.copyFromFlxText(t);
			var bd = new flixel_addons_ui_BorderDef(t.borderStyle,t.borderColor,t.borderSize,t.borderQuality);
			var cs = new flixel_addons_ui_CheckStyle(16777215,fd,flixel_text_FlxTextAlign.fromOpenFL(t._defaultFormat.align),t.color,bd);
			return cs;
		}
		return null;
	}
	,_onCheckBoxEvent: function(checkBox) {
		this._onClick(checkBox,true);
	}
	,_onClick: function(checkBox,doCallback) {
		if(!this._clickable) {
			return false;
		}
		var i = 0;
		var _g = 0;
		var _g1 = this._list_radios;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.set_checked(false);
			if(checkBox == c) {
				this._selected = i;
				c.set_checked(true);
			}
			++i;
		}
		if(doCallback) {
			if(this.callback != null) {
				this.callback(this.get_selectedId());
			}
			if(this.broadcastToFlxUI) {
				flixel_addons_ui_FlxUI.event("click_radio_group",this,this._ids[this._selected],this.params);
			}
		}
		return true;
	}
	,__class__: flixel_addons_ui_FlxUIRadioGroup
	,__properties__: $extend(flixel_addons_ui_FlxUIGroup.prototype.__properties__,{set_params:"set_params",set_skipButtonUpdate:"set_skipButtonUpdate",get_numRadios:"get_numRadios",set_inactiveStyle:"set_inactiveStyle",set_activeStyle:"set_activeStyle",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",set_selectedLabel:"set_selectedLabel",get_selectedLabel:"get_selectedLabel",set_selectedId:"set_selectedId",get_selectedId:"get_selectedId",set_clickable:"set_clickable",get_clickable:"get_clickable"})
});
var flixel_addons_ui_CheckStyle = function(CheckColor,Font,Align,Color,Border) {
	this.checkColor = null;
	this.checkColor = CheckColor;
	flixel_addons_ui_ButtonLabelStyle.call(this,Font,Align,Color,Border);
};
$hxClasses["flixel.addons.ui.CheckStyle"] = flixel_addons_ui_CheckStyle;
flixel_addons_ui_CheckStyle.__name__ = "flixel.addons.ui.CheckStyle";
flixel_addons_ui_CheckStyle.__super__ = flixel_addons_ui_ButtonLabelStyle;
flixel_addons_ui_CheckStyle.prototype = $extend(flixel_addons_ui_ButtonLabelStyle.prototype,{
	checkColor: null
	,applyToCheck: function(c) {
		if(this.checkColor != null) {
			c.set_color(this.checkColor);
		}
		this.apply(c.button.label);
	}
	,__class__: flixel_addons_ui_CheckStyle
});
var flixel_addons_ui_FlxUIRegion = function(X,Y,W,H) {
	if(H == null) {
		H = 16;
	}
	if(W == null) {
		W = 16;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.broadcastToFlxUI = true;
	flixel_FlxSprite.call(this,X,Y);
	this.makeGraphic(1,1,0);
	if(H < 1) {
		H = 1;
	}
	if(W < 1) {
		W = 1;
	}
	this.resize(W,H);
};
$hxClasses["flixel.addons.ui.FlxUIRegion"] = flixel_addons_ui_FlxUIRegion;
flixel_addons_ui_FlxUIRegion.__name__ = "flixel.addons.ui.FlxUIRegion";
flixel_addons_ui_FlxUIRegion.__interfaces__ = [flixel_addons_ui_interfaces_IResizable,flixel_addons_ui_interfaces_IFlxUIWidget];
flixel_addons_ui_FlxUIRegion.__super__ = flixel_FlxSprite;
flixel_addons_ui_FlxUIRegion.prototype = $extend(flixel_FlxSprite.prototype,{
	broadcastToFlxUI: null
	,name: null
	,resize: function(w,h) {
		this.set_width(w);
		this.set_height(h);
	}
	,__class__: flixel_addons_ui_FlxUIRegion
});
var flixel_addons_ui_FlxUISpriteButton = function(X,Y,Asset,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	flixel_addons_ui_FlxUITypedButton.call(this,X,Y,OnClick);
	this.up_color = this.over_color = this.down_color = this.up_toggle_color = this.over_toggle_color = this.down_toggle_color = -1;
	if(Asset != null) {
		this.set_label(Asset);
	}
};
$hxClasses["flixel.addons.ui.FlxUISpriteButton"] = flixel_addons_ui_FlxUISpriteButton;
flixel_addons_ui_FlxUISpriteButton.__name__ = "flixel.addons.ui.FlxUISpriteButton";
flixel_addons_ui_FlxUISpriteButton.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIButton];
flixel_addons_ui_FlxUISpriteButton.__super__ = flixel_addons_ui_FlxUITypedButton;
flixel_addons_ui_FlxUISpriteButton.prototype = $extend(flixel_addons_ui_FlxUITypedButton.prototype,{
	resize: function(W,H) {
		flixel_addons_ui_FlxUITypedButton.prototype.resize.call(this,W,H);
		this.autoCenterLabel();
	}
	,autoCenterLabel: function() {
		if(this.label != null) {
			if(((this.label) instanceof flixel_group_FlxTypedSpriteGroup)) {
				var g = this.label;
				var _g = 0;
				var _g1 = g.group.members;
				while(_g < _g1.length) {
					var sprite = _g1[_g];
					++_g;
					sprite.set_x(-sprite.get_width() / 2);
					sprite.set_y(-sprite.get_height() / 2);
				}
				var W = g.get_width();
				var H = g.get_height();
				var _g = 0;
				var _g1 = g.group.members;
				while(_g < _g1.length) {
					var sprite = _g1[_g];
					++_g;
					sprite.set_x((W - sprite.get_width()) / 2);
					sprite.set_y((H - sprite.get_height()) / 2);
				}
			}
			flixel_addons_ui_FlxUITypedButton.prototype.autoCenterLabel.call(this);
		}
	}
	,__class__: flixel_addons_ui_FlxUISpriteButton
});
var flixel_addons_ui_FlxUISubState = function(BGColor) {
	if(BGColor == null) {
		BGColor = 0;
	}
	this.getTextFallback = null;
	this._reload_countdown = 0;
	this._reload = false;
	this.reload_ui_on_resize = false;
	this._xml_id = "";
	this.cursor = null;
	flixel_FlxSubState.call(this,BGColor);
};
$hxClasses["flixel.addons.ui.FlxUISubState"] = flixel_addons_ui_FlxUISubState;
flixel_addons_ui_FlxUISubState.__name__ = "flixel.addons.ui.FlxUISubState";
flixel_addons_ui_FlxUISubState.__interfaces__ = [flixel_addons_ui_interfaces_IFlxUIState];
flixel_addons_ui_FlxUISubState.__super__ = flixel_FlxSubState;
flixel_addons_ui_FlxUISubState.prototype = $extend(flixel_FlxSubState.prototype,{
	destroyed: null
	,cursor: null
	,_makeCursor: null
	,tooltips: null
	,_xml_id: null
	,_ui: null
	,_tongue: null
	,reload_ui_on_resize: null
	,_reload: null
	,_reload_countdown: null
	,getTextFallback: null
	,forceScrollFactor: function(X,Y) {
		if(this._ui != null) {
			var _g = 0;
			var _g1 = this._ui.group.members;
			while(_g < _g1.length) {
				var w = _g1[_g];
				++_g;
				w.scrollFactor.set(X,Y);
			}
			if(this._ui.scrollFactor != null) {
				this._ui.scrollFactor.set(X,Y);
			}
		}
	}
	,forceFocus: function(b,thing) {
		if(this._ui != null) {
			if(b) {
				this._ui.set_focus(thing);
			} else {
				this._ui.set_focus(null);
			}
		}
	}
	,create: function() {
		if(flixel_addons_ui_FlxUIState.static_tongue != null) {
			this._tongue = flixel_addons_ui_FlxUIState.static_tongue;
		}
		if(this._makeCursor == true) {
			this.cursor = this.createCursor();
		}
		this.tooltips = new flixel_addons_ui_FlxUITooltipManager(null,this);
		this._ui = this.createUI(null,this,null,this._tongue);
		this.add(this._ui);
		this._ui.getTextFallback = this.getTextFallback;
		if(this._xml_id != "" && this._xml_id != null) {
			var data = flixel_addons_ui_U.xml(this._xml_id);
			if(data == null) {
				data = flixel_addons_ui_U.xml(this._xml_id,"xml",true,"");
			}
			if(data != null) {
				this._ui.load(data);
			}
		} else {
			this._ui.load(null);
		}
		if(this.cursor != null && this._ui != null) {
			this.add(this.cursor);
			this.cursor.addWidgetsFromUI(this._ui);
			this.cursor.findVisibleLocation(0);
		}
		flixel_FlxG.mouse.set_visible(true);
		this.tooltips.init();
		flixel_FlxSubState.prototype.create.call(this);
		this.cleanup();
		if(((this._parentState) instanceof flixel_addons_ui_FlxUIState)) {
			this.reload_ui_on_resize = (js_Boot.__cast(this._parentState , flixel_addons_ui_FlxUIState)).reload_ui_on_resize;
		}
	}
	,onCursorEvent: function(code,target) {
		this.getEvent(code,target,null);
	}
	,onShowTooltip: function(t) {
	}
	,onResize: function(Width,Height) {
		if(this.reload_ui_on_resize) {
			flixel_FlxG.scaleMode.onMeasure(Width,Height);
			this._reload_countdown = 5;
			this._reload = true;
		}
	}
	,update: function(elapsed) {
		flixel_FlxSubState.prototype.update.call(this,elapsed);
		this.tooltips.update(elapsed);
		if(this._reload) {
			if(this._reload_countdown > 0) {
				this._reload_countdown--;
				if(this._reload_countdown == 0) {
					this.reloadUI();
				}
			}
		}
	}
	,destroy: function() {
		this.destroyed = true;
		if(this.tooltips != null) {
			this.tooltips.destroy();
			this.tooltips = null;
		}
		if(this._ui != null) {
			this._ui.destroy();
			this.remove(this._ui,true);
			this._ui = null;
		}
		flixel_FlxSubState.prototype.destroy.call(this);
	}
	,getEvent: function(id,sender,data,params) {
	}
	,getRequest: function(id,sender,data,params) {
		return null;
	}
	,getText: function(Flag,Context,Safe) {
		if(Safe == null) {
			Safe = true;
		}
		if(Context == null) {
			Context = "ui";
		}
		if(this._tongue != null) {
			return this._tongue.get(Flag,Context,Safe);
		}
		if(this.getTextFallback != null) {
			return this.getTextFallback(Flag,Context,Safe);
		}
		return Flag;
	}
	,cleanup: function() {
		this._ui.cleanup();
	}
	,createCursor: function() {
		return new flixel_addons_ui_FlxUICursor($bind(this,this.onCursorEvent));
	}
	,createUI: function(data,ptr,superIndex_,tongue_,liveFilePath_) {
		if(liveFilePath_ == null) {
			liveFilePath_ = "";
		}
		return new flixel_addons_ui_FlxUI(data,ptr,superIndex_,tongue_,liveFilePath_);
	}
	,reloadUI: function() {
		if(this._ui != null) {
			this.remove(this._ui,true);
			this._ui.destroy();
			this._ui = null;
		}
		this._ui = this.createUI(null,this,null,this._tongue);
		this.add(this._ui);
		var data = flixel_addons_ui_U.xml(this._xml_id);
		this._ui.load(data);
		this._reload = false;
		this._reload_countdown = 0;
	}
	,__class__: flixel_addons_ui_FlxUISubState
});
var flixel_addons_ui_FlxUITabMenu = function(back_,tabs_,tab_names_and_labels_,tab_offset,stretch_tabs,tab_spacing,tab_stacking) {
	if(stretch_tabs == null) {
		stretch_tabs = false;
	}
	this._selected_tab = -1;
	this._selected_tab_id = "";
	this._tab_offset = null;
	this._tab_stacking = null;
	this._tab_spacing = null;
	this._stretch_tabs = false;
	flixel_addons_ui_FlxUIGroup.call(this);
	if(back_ == null) {
		back_ = new flixel_addons_ui_FlxUI9SliceSprite(0,0,"flixel/flixel-ui/img/chrome_flat.png",new openfl_geom_Rectangle(0,0,200,200));
	}
	this._back = back_;
	this.add(this._back);
	if(tabs_ == null) {
		if(tab_names_and_labels_ != null) {
			tabs_ = [];
			var _g = 0;
			while(_g < tab_names_and_labels_.length) {
				var tdata = tab_names_and_labels_[_g];
				++_g;
				var fb = new flixel_addons_ui_FlxUIButton(0,0,tdata.label);
				fb.up_color = 16777215;
				fb.down_color = 16777215;
				fb.over_color = 16777215;
				fb.up_toggle_color = 16777215;
				fb.down_toggle_color = 16777215;
				fb.over_toggle_color = 16777215;
				fb.label.set_color(16777215);
				var _this = fb.label;
				_this.set_borderStyle(flixel_text_FlxTextBorderStyle.OUTLINE);
				_this.set_borderColor(0);
				_this.set_borderSize(1);
				_this.set_borderQuality(1);
				fb.name = tdata.name;
				var graphic_names = ["flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab_back.png","flixel/flixel-ui/img/tab.png","flixel/flixel-ui/img/tab.png","flixel/flixel-ui/img/tab.png"];
				var slice9tab = flixel_util_FlxStringUtil.toIntArray("6,6,11,11");
				var slice9_names = [slice9tab,slice9tab,slice9tab,slice9tab,slice9tab,slice9tab];
				fb.loadGraphicSlice9(graphic_names,0,0,slice9_names,0,-1,true);
				tabs_.push(fb);
			}
		}
	}
	this._tabs = tabs_;
	this._stretch_tabs = stretch_tabs;
	this._tab_spacing = tab_spacing;
	this._tab_stacking = tab_stacking;
	if(this._tab_stacking == null) {
		this._tab_stacking = ["front","back"];
	}
	this._tab_offset = tab_offset;
	var i = 0;
	var tab = null;
	var _g = 0;
	var _g1 = this._tabs;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		tab = t;
		this.add(tab);
		var tmp = (function(_g,name) {
			return function() {
				_g[0](name[0]);
			};
		})([$bind(this,this._onTabEvent)],[tab.name]);
		tab.onUp.callback = tmp;
		++i;
	}
	this.distributeTabs();
	this._tab_groups = [];
};
$hxClasses["flixel.addons.ui.FlxUITabMenu"] = flixel_addons_ui_FlxUITabMenu;
flixel_addons_ui_FlxUITabMenu.__name__ = "flixel.addons.ui.FlxUITabMenu";
flixel_addons_ui_FlxUITabMenu.__interfaces__ = [flixel_addons_ui_interfaces_IEventGetter,flixel_addons_ui_interfaces_IFlxUIClickable,flixel_addons_ui_interfaces_IResizable];
flixel_addons_ui_FlxUITabMenu.__super__ = flixel_addons_ui_FlxUIGroup;
flixel_addons_ui_FlxUITabMenu.prototype = $extend(flixel_addons_ui_FlxUIGroup.prototype,{
	get_numTabs: function() {
		if(this._tabs != null) {
			return this._tabs.length;
		}
		return 0;
	}
	,getEvent: function(name,sender,data,params) {
	}
	,getRequest: function(name,sender,data,params) {
		return null;
	}
	,skipButtonUpdate: null
	,set_skipButtonUpdate: function(b) {
		this.skipButtonUpdate = b;
		var _g = 0;
		var _g1 = this._tabs;
		while(_g < _g1.length) {
			var tab = _g1[_g];
			++_g;
			var tabtyped = tab;
			tabtyped.set_skipButtonUpdate(b);
		}
		var _g = 0;
		var _g1 = this._tab_groups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = group.group.members;
			while(_g2 < _g3.length) {
				var sprite = _g3[_g2];
				++_g2;
				if(js_Boot.__implements(sprite,flixel_addons_ui_interfaces_IFlxUIClickable)) {
					var widget = sprite;
					widget.set_skipButtonUpdate(b);
				}
			}
		}
		return b;
	}
	,get_width: function() {
		return this._back.get_width();
	}
	,get_height: function() {
		var fbt = this.getFirstTab();
		if(fbt != null) {
			return this._back.y + this._back.get_height() - fbt.y;
		}
		return this._back.get_height();
	}
	,resize: function(W,H) {
		var ir;
		if(js_Boot.__implements(this._back,flixel_addons_ui_interfaces_IResizable)) {
			this.distributeTabs(W);
			ir = this._back;
			var fbt = this.getFirstTab();
			if(fbt != null) {
				ir.resize(W,H - fbt.get_height());
			} else {
				ir.resize(W,H);
			}
		} else {
			this.distributeTabs();
		}
	}
	,get_selected_tab: function() {
		return this._selected_tab;
	}
	,set_selected_tab: function(i) {
		this.showTabInt(i);
		return this._selected_tab;
	}
	,get_selected_tab_id: function() {
		return this._selected_tab_id;
	}
	,set_selected_tab_id: function(str) {
		this.showTabId(str);
		return this._selected_tab_id;
	}
	,destroy: function() {
		flixel_addons_ui_FlxUIGroup.prototype.destroy.call(this);
		flixel_addons_ui_U.clearArray(this._tab_groups);
		flixel_addons_ui_U.clearArray(this._tabs);
		this
